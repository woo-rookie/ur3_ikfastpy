/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
<<<<<<< HEAD
/// ikfast version 0x1000004a generated on 2021-03-25 10:39:34.691710
=======
/// ikfast version 0x1000004a generated on 2021-03-24 19:08:07.849707
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.08535)*x4);
x13=((0.08535)*x2);
x14=((0.21325)*x2);
x15=((1.0)*x2);
x16=((1.0)*x6);
x17=((1.0)*x11);
x18=((0.3484)*x6);
x19=((1.0)*x4);
x20=((1.0)*x9);
x21=((0.3484)*x5);
x22=((1.0)*x5);
x23=((0.21325)*x4);
x24=(x0*x1);
x25=(x10*x9);
x26=(x1*x10);
x27=(x0*x9);
x28=(x10*x3);
x29=(x0*x3);
x30=(x1*x4);
x31=(x19*x29);
x32=(x19*x28);
x33=(x30+((x2*x3)));
x34=(((x1*x15))+(((-1.0)*x19*x3)));
x35=(x33*x5);
x36=(x34*x6);
x37=((((-1.0)*x31))+((x2*x24)));
x38=((((-1.0)*x32))+((x2*x26)));
x39=((((-1.0)*x15*x29))+(((-1.0)*x19*x24)));
x40=((((-1.0)*x15*x28))+(((-1.0)*x19*x26)));
x41=(x37*x5);
x42=(x38*x5);
x43=(x40*x6);
x44=(((x34*x5))+((x6*(((((-1.0)*x1*x19))+(((-1.0)*x15*x3)))))));
x45=(x41+((x39*x6)));
x46=(x42+x43);
x47=(((x6*(((((-1.0)*x15*x24))+x31))))+((x39*x5)));
x48=(((x6*(((((-1.0)*x15*x26))+x32))))+((x40*x5)));
x49=(x45*x9);
eerot[0]=(((x47*x8))+((x7*((x49+((x10*x11)))))));
eerot[1]=(((x47*x7))+((x8*(((((-1.0)*x20*x45))+(((-1.0)*x10*x17)))))));
eerot[2]=(x25+((x11*(((((-1.0)*x22*x37))+(((-1.0)*x16*x39)))))));
eetrans[0]=((((0.11)*x10))+((x5*((((x12*x24))+((x13*x29))))))+(((-0.24365)*x24))+((x23*x29))+(((-1.0)*x14*x24))+((x11*(((((-1.0)*x18*x39))+(((-1.0)*x21*x37))))))+((x6*(((((-1.0)*x12*x29))+((x13*x24))))))+(((0.3484)*x25)));
eerot[3]=(((x48*x8))+((x7*(((((-1.0)*x0*x11))+((x46*x9)))))));
eerot[4]=(((x8*(((((-1.0)*x20*x46))+((x0*x17))))))+((x48*x7)));
eerot[5]=((((-1.0)*x0*x20))+((x11*(((((-1.0)*x22*x38))+(((-1.0)*x16*x40)))))));
eetrans[1]=(((x11*(((((-1.0)*x18*x40))+(((-1.0)*x21*x38))))))+(((-0.3484)*x27))+(((-0.11)*x0))+(((-0.24365)*x26))+((x23*x28))+((x6*(((((-1.0)*x12*x28))+((x13*x26))))))+(((-1.0)*x14*x26))+((x5*((((x12*x26))+((x13*x28)))))));
eerot[6]=(((x7*x9*((x36+x35))))+((x44*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x36))+(((-1.0)*x35))))))+((x44*x7)));
eerot[8]=(x11*(((((-1.0)*x22*x33))+(((-1.0)*x16*x34)))));
IkReal x50=((1.0)*x1);
eetrans[2]=((0.1519)+(((-0.24365)*x3))+(((-1.0)*x14*x3))+((x5*(((((-1.0)*x13*x50))+((x12*x3))))))+((x6*((((x1*x12))+((x13*x3))))))+(((-1.0)*x23*x50))+((x11*(((((-1.0)*x18*x34))+(((-1.0)*x21*x33)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.3484)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.3484)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1519)+pz+(((-0.3484)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.1707)*npx);
IkReal x55=((0.1707)*npy);
IkReal x56=((0.08535)*r22);
IkReal x57=((0.08535)*r21);
IkReal x58=((-0.08535)*r20);
IkReal x59=((-1.0)*r20);
IkReal x60=((-1.0)*rxp0_2);
IkReal x61=((-0.08535)*r21);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*rxp1_2);
IkReal x64=((-1.0)*npx);
IkReal x65=((-1.0)*r22);
IkReal x66=((-1.0)*npz);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x54;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x59;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x54;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x59;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x55;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x55;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x56;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x66;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x56;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x63;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x63;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x59;
matrixinvcoeffs[133]=x64;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x59;
matrixinvcoeffs[151]=x64;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x66;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x56;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x66;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x62;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x63;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x64;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x59;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x60;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pp*pp;
IkReal x68=pz*pz;
IkReal x69=((0.1707)*pz);
IkReal x70=(pp*r21);
IkReal x71=((0.1707)*rxp1_2);
IkReal x72=(gclwh13_1*pp);
IkReal x73=(gclwh5_1*rxp2_2);
IkReal x74=(npy*pz);
IkReal x75=(pz*r20);
IkReal x76=(npz*pz);
IkReal x77=((0.000221452524)*r22);
IkReal x78=((0.22)*gclwh12_14);
IkReal x79=((0.014569245)*r21);
IkReal x80=(gclwh8_12*r20);
IkReal x81=(gclwh15_1*r20);
IkReal x82=(pp*r20);
IkReal x83=((0.22)*gclwh15_15);
IkReal x84=((0.00097973905125)*rxp1_2);
IkReal x85=((2.0)*gclwh11_10);
IkReal x86=(gclwh12_11*rxp1_2);
IkReal x87=(pp*r22);
IkReal x88=((0.0072846225)*r21);
IkReal x89=((0.3414)*rxp0_2);
IkReal x90=((0.014569245)*r20);
IkReal x91=((4.18103640120938e-5)*r21);
IkReal x92=((2.0)*gclwh4_11);
IkReal x93=(gclwh9_13*rxp0_2);
IkReal x94=(gclwh2_0*pz);
IkReal x95=(gclwh5_9*r22);
IkReal x96=(gclwh8_2*rxp0_2);
IkReal x97=(npx*pz);
IkReal x98=((0.014569245)*rxp1_2);
IkReal x99=((0.15598566)*rxp0_2);
IkReal x100=(gclwh13_0*pz);
IkReal x101=((0.018777)*rxp2_2);
IkReal x102=((0.0072846225)*r22);
IkReal x103=(gclwh14_14*rxp0_2);
IkReal x104=(gclwh13_0*rxp1_2);
IkReal x105=((0.1707)*pp);
IkReal x106=((0.00518928)*rxp1_2);
IkReal x107=((0.1707)*rxp2_2);
IkReal x108=(gclwh5_0*pz);
IkReal x109=((2.0)*gclwh9_10);
IkReal x110=((0.03645690896625)*rxp2_2);
IkReal x111=((2.0)*gclwh15_10);
IkReal x112=(gclwh13_1*r21);
IkReal x113=((2.0)*pp);
IkReal x114=(gclwh12_2*rxp1_2);
IkReal x115=(gclwh14_8*rxp0_2);
IkReal x116=(gclwh15_1*rxp0_2);
IkReal x117=(gclwh4_3*rxp2_2);
IkReal x118=((0.00332834402025)*r22);
IkReal x119=(gclwh12_14*rxp1_2);
IkReal x120=(gclwh4_2*pz);
IkReal x121=((4.18103640120938e-5)*r22);
IkReal x122=(gclwh10_2*r22);
IkReal x123=((0.03645690896625)*rxp1_2);
IkReal x124=(gclwh15_9*r20);
IkReal x125=(gclwh10_3*rxp2_2);
IkReal x126=((0.014569245)*r22);
IkReal x127=((0.000801308475)*r21);
IkReal x128=(gclwh4_8*rxp2_2);
IkReal x129=((2.0)*gclwh10_11);
IkReal x130=((0.0072846225)*r20);
IkReal x131=((0.02913849)*r21);
IkReal x132=((4.0)*gclwh11_10);
IkReal x133=(gclwh6_12*r21);
IkReal x134=((0.00310689149625)*r20);
IkReal x135=(gclwh13_9*r21);
IkReal x136=(gclwh12_8*r21);
IkReal x137=((4.18103640120938e-5)*r20);
IkReal x138=((0.3414)*rxp1_2);
IkReal x139=((2.0)*gclwh7_10);
IkReal x140=((1.0)*pp);
IkReal x141=(gclwh4_11*rxp2_2);
IkReal x142=((0.07280355)*rxp1_2);
IkReal x143=((0.00155579859013472)*r22);
IkReal x144=((1.0)*pz);
IkReal x145=(gclwh8_2*r20);
IkReal x146=((0.15598566)*rxp2_2);
IkReal x147=((4.0)*gclwh8_11);
IkReal x148=((0.000801308475)*r20);
IkReal x149=(gclwh7_0*pz);
IkReal x150=(gclwh15_9*rxp0_2);
IkReal x151=(gclwh10_2*pz);
IkReal x152=((0.00160261695)*r22);
IkReal x153=((4.0)*gclwh9_10);
IkReal x154=((0.6828)*rxp0_2);
IkReal x155=(gclwh5_9*rxp2_2);
IkReal x156=(gclwh9_13*r20);
IkReal x157=(gclwh6_2*r21);
IkReal x158=((0.00310689149625)*r21);
IkReal x159=((0.018777)*rxp0_2);
IkReal x160=((0.00310689149625)*r22);
IkReal x161=((0.00155579859013472)*r20);
IkReal x162=((0.1707)*rxp0_2);
IkReal x163=((0.08318211)*rxp1_2);
IkReal x164=((2.0)*gclwh6_11);
IkReal x165=((0.018777)*rxp1_2);
IkReal x166=(gclwh11_1*rxp2_2);
IkReal x167=((0.22)*gclwh4_14);
IkReal x168=(gclwh11_13*rxp2_2);
IkReal x169=(gclwh10_12*rxp2_2);
IkReal x170=(gclwh4_8*r22);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=((0.00160261695)*r20);
IkReal x173=(gclwh14_8*r20);
IkReal x174=(gclwh6_2*pz);
IkReal x175=((2.0)*gclwh5_10);
IkReal x176=((0.22)*gclwh5_15);
IkReal x177=(gclwh7_13*r21);
IkReal x178=((0.07280355)*rxp0_2);
IkReal x179=(gclwh11_0*pz);
IkReal x180=((0.02913849)*r22);
IkReal x181=(gclwh14_2*rxp0_2);
IkReal x182=(gclwh14_3*rxp0_2);
IkReal x183=((0.00155579859013472)*r21);
IkReal x184=((0.000801308475)*r22);
IkReal x185=((2.0)*gclwh8_11);
IkReal x186=((0.22)*gclwh14_14);
IkReal x187=((0.07280355)*rxp2_2);
IkReal x188=((4.0)*gclwh10_11);
IkReal x189=((0.22)*gclwh13_15);
IkReal x190=((4.0)*gclwh6_11);
IkReal x191=((0.02913849)*r20);
IkReal x192=((0.3414)*rxp2_2);
IkReal x193=((2.0)*gclwh13_10);
IkReal x194=((0.07799283)*rxp1_2);
IkReal x195=((0.00160261695)*r21);
IkReal x196=((4.0)*gclwh7_10);
IkReal x197=(gclwh4_14*rxp2_2);
IkReal x198=(gclwh8_12*rxp0_2);
IkReal x199=((2.0)*gclwh14_11);
IkReal x200=(gclwh12_2*pz);
IkReal x201=((0.018777)*x103);
IkReal x202=(gclwh6_5*x127);
IkReal x203=((0.018777)*x119);
IkReal x204=(gclwh10_5*x184);
IkReal x205=(gclwh8_5*x148);
IkReal x206=(gclwh4_14*x101);
IkReal x207=((0.014569245)*x128);
IkReal x208=(gclwh6_11*x88);
IkReal x209=(gclwh12_8*x98);
IkReal x210=(gclwh4_11*x107);
IkReal x211=(gclwh12_11*x71);
IkReal x212=(gclwh14_11*x162);
IkReal x213=(gclwh10_11*x102);
IkReal x214=((0.014569245)*x115);
IkReal x215=(gclwh8_11*x130);
IkReal x216=(gclwh13_9*x98);
IkReal x217=((0.014569245)*x155);
IkReal x218=(gclwh11_10*x102);
IkReal x219=(gclwh15_10*x162);
IkReal x220=(gclwh9_10*x130);
IkReal x221=(gclwh13_10*x71);
IkReal x222=(gclwh7_10*x88);
IkReal x223=((0.014569245)*x150);
IkReal x224=(gclwh5_10*x107);
IkReal x225=(gclwh15_15*x159);
IkReal x226=(gclwh7_7*x127);
IkReal x227=(gclwh5_15*x101);
IkReal x228=(gclwh9_7*x148);
IkReal x229=(gclwh13_15*x165);
IkReal x230=(gclwh11_7*x184);
IkReal x231=(gclwh14_14*x148);
IkReal x232=(gclwh10_5*x101);
IkReal x233=(gclwh8_5*x159);
IkReal x234=(gclwh4_14*x184);
IkReal x235=(gclwh12_14*x127);
IkReal x236=(gclwh6_5*x165);
IkReal x237=(gclwh8_11*x162);
IkReal x238=(gclwh10_11*x107);
IkReal x239=(gclwh12_11*x88);
IkReal x240=((0.000621742530375)*x170);
IkReal x241=(gclwh4_11*x102);
IkReal x242=((0.000621742530375)*x136);
IkReal x243=((0.000621742530375)*x173);
IkReal x244=(gclwh6_11*x71);
IkReal x245=(gclwh14_11*x130);
IkReal x246=(gclwh9_10*x162);
IkReal x247=((0.000621742530375)*x124);
IkReal x248=(gclwh5_10*x102);
IkReal x249=(gclwh11_10*x107);
IkReal x250=(gclwh13_10*x88);
IkReal x251=((0.000621742530375)*x135);
IkReal x252=(gclwh15_10*x130);
IkReal x253=(gclwh7_10*x71);
IkReal x254=((0.000621742530375)*x95);
IkReal x255=(gclwh7_7*x165);
IkReal x256=(gclwh5_15*x184);
IkReal x257=(gclwh13_15*x127);
IkReal x258=(gclwh15_15*x148);
IkReal x259=(gclwh9_7*x159);
IkReal x260=(gclwh11_7*x101);
IkReal x261=(gclwh14_11*x89);
IkReal x262=(gclwh10_11*x126);
IkReal x263=(gclwh8_11*x90);
IkReal x264=((0.037554)*x103);
IkReal x265=((0.037554)*x197);
IkReal x266=((0.037554)*x119);
IkReal x267=((0.3414)*x141);
IkReal x268=((0.3414)*x86);
IkReal x269=(gclwh6_11*x79);
IkReal x270=((0.037554)*gclwh13_15*rxp1_2);
IkReal x271=((0.037554)*gclwh5_15*rxp2_2);
IkReal x272=((0.037554)*gclwh15_15*rxp0_2);
IkReal x273=(gclwh15_10*x89);
IkReal x274=(gclwh9_10*x90);
IkReal x275=(gclwh11_10*x126);
IkReal x276=((0.0608)*x74);
IkReal x277=(gclwh15_1*x97);
IkReal x278=((2.0)*x68);
IkReal x279=((1.0)*x67);
IkReal x280=(r20*x67);
IkReal x281=(r21*x67);
IkReal x282=((0.11)*gclwh6_5*x70);
IkReal x283=((0.22)*gclwh8_5*x97);
IkReal x284=((0.22)*gclwh10_5*x76);
IkReal x285=((0.11)*gclwh10_5*x87);
IkReal x286=((0.22)*gclwh6_5*x74);
IkReal x287=((0.11)*gclwh8_5*x82);
IkReal x288=(gclwh12_3*pp*x71);
IkReal x289=(x181*x69);
IkReal x290=(gclwh6_3*x281);
IkReal x291=(x102*x151);
IkReal x292=(x129*x76);
IkReal x293=(x185*x97);
IkReal x294=(x151*x87);
IkReal x295=(x105*x117);
IkReal x296=((0.0072846225)*gclwh8_2*x75);
IkReal x297=(gclwh8_2*pp*x75);
IkReal x298=(x174*x88);
IkReal x299=(x164*x74);
IkReal x300=(x114*x69);
IkReal x301=(gclwh4_2*rxp2_2*x69);
IkReal x302=(x105*x182);
IkReal x303=(x71*x72);
IkReal x304=(gclwh7_1*x281);
IkReal x305=(x102*x179);
IkReal x306=(gclwh15_0*rxp0_2*x69);
IkReal x307=(x179*x87);
IkReal x308=(x105*x73);
IkReal x309=(x139*x74);
IkReal x310=((0.0072846225)*gclwh9_0*x75);
IkReal x311=(gclwh9_0*pp*x75);
IkReal x312=(x76*x85);
IkReal x313=(x109*x97);
IkReal x314=(x105*x116);
IkReal x315=(x104*x69);
IkReal x316=(gclwh5_0*rxp2_2*x69);
IkReal x317=(x149*x88);
IkReal x318=((0.11)*gclwh7_7*x70);
IkReal x319=((0.22)*gclwh9_7*x97);
IkReal x320=((0.22)*gclwh11_7*x76);
IkReal x321=((0.22)*gclwh7_7*x74);
IkReal x322=((0.11)*gclwh11_7*x87);
IkReal x323=((0.11)*gclwh9_7*x82);
IkReal x324=(x167*x76);
IkReal x325=(x74*x78);
IkReal x326=((0.11)*gclwh14_14*x82);
IkReal x327=((0.11)*gclwh4_14*x87);
IkReal x328=((0.11)*gclwh12_14*x70);
IkReal x329=(x186*x97);
IkReal x330=(gclwh14_8*npx*x69);
IkReal x331=(gclwh14_2*pp*x75);
IkReal x332=(gclwh12_3*x281);
IkReal x333=(gclwh3_2*pz*x88);
IkReal x334=((0.08535)*gclwh12_8*x70);
IkReal x335=(gclwh6_2*rxp1_2*x69);
IkReal x336=(x105*x125);
IkReal x337=(gclwh3_3*x281);
IkReal x338=(gclwh1_3*x280);
IkReal x339=((0.08535)*gclwh4_8*x87);
IkReal x340=((0.0072846225)*gclwh14_2*x75);
IkReal x341=(x199*x97);
IkReal x342=(gclwh4_3*r22*x67);
IkReal x343=((0.0072846225)*gclwh1_2*x75);
IkReal x344=(gclwh12_8*npy*x69);
IkReal x345=(gclwh4_8*npz*x69);
IkReal x346=(x69*x96);
IkReal x347=(x76*x92);
IkReal x348=((0.08535)*gclwh14_8*x82);
IkReal x349=(gclwh6_3*pp*x71);
IkReal x350=(gclwh10_2*rxp2_2*x69);
IkReal x351=(x102*x120);
IkReal x352=(x200*x88);
IkReal x353=(x171*x74);
IkReal x354=(x100*x88);
IkReal x355=(x67*x81);
IkReal x356=((0.08535)*gclwh15_9*x82);
IkReal x357=(x108*x87);
IkReal x358=(x100*x70);
IkReal x359=(x88*x94);
IkReal x360=((0.0072846225)*gclwh0_0*x75);
IkReal x361=(gclwh9_0*rxp0_2*x69);
IkReal x362=(x111*x97);
IkReal x363=(x102*x108);
IkReal x364=(gclwh2_1*x281);
IkReal x365=(gclwh5_9*npz*x69);
IkReal x366=(gclwh7_1*pp*x71);
IkReal x367=(gclwh11_0*rxp2_2*x69);
IkReal x368=(gclwh13_9*npy*x69);
IkReal x369=(gclwh0_1*x280);
IkReal x370=((0.08535)*gclwh5_9*x87);
IkReal x371=(gclwh15_9*npx*x69);
IkReal x372=((0.08535)*gclwh13_9*x70);
IkReal x373=(x105*x166);
IkReal x374=(x175*x76);
IkReal x375=(x193*x74);
IkReal x376=(gclwh7_0*rxp1_2*x69);
IkReal x377=((0.0072846225)*gclwh15_0*x75);
IkReal x378=((0.11)*gclwh13_15*x70);
IkReal x379=((0.11)*gclwh5_15*x87);
IkReal x380=(x83*x97);
IkReal x381=(x176*x76);
IkReal x382=((0.11)*gclwh15_15*x82);
IkReal x383=(x189*x74);
IkReal x384=(x185*x82);
IkReal x385=(x129*x87);
IkReal x386=(x190*x74);
IkReal x387=(x147*x97);
IkReal x388=(x164*x70);
IkReal x389=(x188*x76);
IkReal x390=(x85*x87);
IkReal x391=(x196*x74);
IkReal x392=(x109*x82);
IkReal x393=(gclwh6_2*npy*x278);
IkReal x394=(gclwh10_3*x113*x76);
IkReal x395=(gclwh10_3*r22*x279);
IkReal x396=(gclwh6_3*x113*x74);
IkReal x397=(gclwh6_2*x144*x70);
IkReal x398=(gclwh10_2*npz*x278);
IkReal x399=(gclwh8_2*npx*x278);
IkReal x400=(gclwh11_1*x113*x76);
IkReal x401=(gclwh7_0*npy*x278);
IkReal x402=(gclwh9_0*npx*x278);
IkReal x403=(gclwh11_1*r22*x279);
IkReal x404=(gclwh7_1*x113*x74);
IkReal x405=(gclwh11_0*npz*x278);
IkReal x406=(gclwh7_0*x144*x70);
IkReal x407=(gclwh12_2*npy*x278);
IkReal x408=(gclwh3_2*npy*x278);
IkReal x409=(gclwh1_2*npx*x278);
IkReal x410=(gclwh14_3*x113*x97);
IkReal x411=(gclwh4_2*npz*x278);
IkReal x412=(gclwh4_3*x113*x76);
IkReal x413=(gclwh12_2*x144*x70);
IkReal x414=(gclwh1_2*x140*x75);
IkReal x415=(gclwh3_3*x113*x74);
IkReal x416=((1.0)*x120*x87);
IkReal x417=(gclwh1_3*x113*x97);
IkReal x418=(gclwh3_2*x144*x70);
IkReal x419=(gclwh12_3*x113*x74);
IkReal x420=(gclwh14_2*npx*x278);
IkReal x421=(gclwh14_3*r20*x279);
IkReal x422=(gclwh0_0*npx*x278);
IkReal x423=(gclwh2_0*npy*x278);
IkReal x424=(gclwh5_1*x113*x76);
IkReal x425=((2.0)*x72*x74);
IkReal x426=(gclwh15_0*npx*x278);
IkReal x427=(gclwh2_1*x113*x74);
IkReal x428=(gclwh0_1*x113*x97);
IkReal x429=(gclwh5_0*npz*x278);
IkReal x430=(gclwh13_0*npy*x278);
IkReal x431=(gclwh0_0*x140*x75);
IkReal x432=(gclwh15_0*x140*x75);
IkReal x433=((1.0)*x70*x94);
IkReal x434=(x112*x279);
IkReal x435=(gclwh5_1*r22*x279);
IkReal x436=(x113*x277);
IkReal x437=(x270+x271);
IkReal x438=(x265+x266);
IkReal x439=(x259+x260);
IkReal x440=(x232+x233);
IkReal x441=(x206+x203);
IkReal x442=(x229+x227);
IkReal x443=(x212+x213+x215+x299);
IkReal x444=(x309+x218+x219+x220);
IkReal x445=(x375+x374+x252+x253);
IkReal x446=(x353+x347+x245+x244);
IkReal x447=(x320+x319+x318+x226);
IkReal x448=(x202+x284+x283+x282);
IkReal x449=(x324+x325+x326+x231);
IkReal x450=(x382+x383+x381+x258);
IkReal x451=(x341+x238+x239+x237+x241);
IkReal x452=(x362+x250+x246+x249+x248);
IkReal x453=(x313+x312+x221+x222+x224);
IkReal x454=(x210+x211+x208+x292+x293);
IkReal x455=(x327+x328+x329+x234+x235);
IkReal x456=(x380+x379+x378+x256+x257);
IkReal x457=(x205+x204+x287+x286+x285);
IkReal x458=(x321+x322+x323+x228+x230);
IkReal x459=(x387+x388+x389+x267+x269+x268);
IkReal x460=(((gclwh7_10*x79))+((x153*x97))+((gclwh5_10*x192))+((x139*x70))+((x132*x76))+((gclwh13_10*x138)));
IkReal x461=(x386+x384+x385+x261+x263+x262);
IkReal x462=(x391+x390+x392+x274+x275+x273);
IkReal x463=(x315+x314+x317+x316+x223+x403+x402+x405+x404+x406);
IkReal x464=(x302+x300+x301+x395+x397+x396+x399+x398+x214+x298);
IkReal x465=(x394+x393+x207+x209+x290+x291+x294+x295+x296+x297+x289+x288);
IkReal x466=(x308+x306+x307+x304+x305+x303+x311+x310+x216+x217+x401+x400);
IkReal x467=(x377+x376+x373+x372+x371+x370+x254+x251+x429+x428+x427+x430+x431+x432+x433+x434+x435+x436);
IkReal x468=(x339+x338+x333+x332+x331+x330+x337+x336+x335+x334+x342+x343+x340+x242+x240+x407+x409+x408+x410+x411+x69);
IkReal x469=(x351+x350+x352+x346+x344+x345+x348+x349+x243+x412+x413+x416+x417+x414+x415+x418+x419+x421+x420);
IkReal x470=(x355+x354+x357+x356+x359+x358+x368+x369+x360+x361+x363+x364+x365+x366+x367+x247+x426+x425+x424+x423+x422+x69);
op[0]=((((0.9138)*gclwh10_12*x76))+(((-0.4569)*gclwh10_12*x87))+(((-1.0)*gclwh10_12*x118))+(((0.9138)*gclwh8_12*x97))+(((-1.0)*x201))+(((0.4569)*gclwh6_12*x70))+(((-1.0)*gclwh12_8*x194))+(((-1.0)*x457))+x448+x441+(((0.07799283)*x115))+(((0.00332834402025)*x133))+(((-0.4569)*pp*x80))+(((-0.00332834402025)*x80))+(((-0.9138)*gclwh6_12*x74))+(((-0.07799283)*x128)));
op[1]=((((0.03645690896625)*x182))+(((0.427145975)*gclwh6_3*x74))+(((-0.427145975)*gclwh10_3*x76))+(((-1.0)*x464))+((gclwh10_3*x143))+(((-1.0)*x454))+(((-1.0)*gclwh4_3*x110))+(((-1.0)*gclwh6_3*x183))+x443+x465+(((0.206288365)*gclwh10_3*x87))+(((-1.0)*gclwh6_11*x70))+(((-1.0)*gclwh12_3*x123))+((gclwh8_11*x82))+(((-0.206288365)*gclwh6_3*x70))+((gclwh10_11*x87)));
op[2]=((-0.09383)+(((-1.0)*x459))+x461);
op[3]=((((-0.08318211)*x115))+(((-1.0)*x438))+(((-1.0)*gclwh4_2*x187))+((gclwh8_2*x134))+(((-0.00310689149625)*x157))+(((0.00310689149625)*x122))+(((-0.853)*gclwh8_2*x97))+(((-0.853)*gclwh10_2*x76))+(((0.08318211)*x128))+(((-0.07280355)*x114))+x264+(((0.4265)*gclwh10_2*x87))+((gclwh12_8*x163))+(((0.853)*gclwh6_2*x74))+((gclwh14_2*x178))+(((0.4265)*gclwh8_2*x82))+(((-0.4265)*gclwh6_2*x70)));
op[4]=((((-1.0)*gclwh10_12*x77))+(((-1.0)*x441))+(((-0.0304)*gclwh10_12*x87))+((gclwh12_8*x106))+(((0.0304)*gclwh6_12*x70))+(((0.00518928)*x128))+(((-0.0304)*pp*x80))+(((-0.000221452524)*x80))+(((0.0608)*gclwh8_12*x97))+(((-1.0)*x457))+x201+x448+(((-0.00518928)*x115))+(((-1.0)*gclwh6_12*x276))+(((0.000221452524)*x133))+(((0.0608)*gclwh10_12*x76)));
op[5]=((((-1.0)*x443))+(((0.001545085)*gclwh6_3*x70))+(((-1.0)*gclwh8_11*x82))+((gclwh6_11*x70))+(((0.011479075)*gclwh6_3*x74))+(((-1.0)*gclwh10_11*x87))+((gclwh10_3*x121))+(((-0.00097973905125)*x117))+(((-1.0)*x464))+(((-1.0)*gclwh6_3*x91))+(((0.00097973905125)*x182))+(((-0.001545085)*gclwh10_3*x87))+x454+x465+(((-1.0)*gclwh12_3*x84))+(((-0.011479075)*gclwh10_3*x76)));
op[6]=((((-1.0)*x444))+(((-1.0)*gclwh13_1*x123))+((gclwh7_10*x70))+(((0.427145975)*gclwh7_1*x74))+(((-1.0)*gclwh7_1*x183))+(((0.206288365)*gclwh11_1*x87))+(((-0.03645690896625)*x73))+(((-1.0)*x463))+((gclwh11_1*x143))+x453+x466+(((0.03645690896625)*x116))+(((-0.427145975)*gclwh11_1*x76))+(((-1.0)*gclwh9_10*x82))+(((-1.0)*gclwh11_10*x87))+(((-0.206288365)*gclwh7_1*x70)));
op[7]=((((-0.4569)*gclwh11_13*x87))+(((-1.0)*gclwh11_13*x118))+(((-1.0)*gclwh13_9*x194))+(((-0.4569)*gclwh9_13*x82))+(((0.07799283)*x150))+(((0.00332834402025)*x177))+(((-1.0)*x458))+(((-0.00332834402025)*x156))+x447+x442+(((0.9138)*gclwh9_13*x97))+(((0.9138)*gclwh11_13*x76))+(((-0.07799283)*x155))+(((-1.0)*x225))+(((-0.9138)*gclwh7_13*x74))+(((0.4569)*gclwh7_13*x70)));
op[8]=((((-0.4265)*gclwh7_0*x70))+(((0.4265)*gclwh11_0*x87))+(((0.853)*gclwh7_0*x74))+(((-0.08318211)*x155))+(((-0.853)*gclwh11_0*x76))+(((0.08318211)*x150))+(((-1.0)*gclwh13_9*x163))+(((-0.07280355)*x104))+((gclwh15_0*x178))+(((0.4265)*gclwh9_0*x82))+x437+(((-1.0)*gclwh7_0*x158))+((gclwh9_0*x134))+(((-0.853)*gclwh9_0*x97))+(((-1.0)*x272))+(((-1.0)*gclwh5_0*x187))+((gclwh11_0*x160)));
op[9]=((-0.09383)+(((-1.0)*x460))+x462);
op[10]=((((-0.00097973905125)*x73))+(((-0.011479075)*gclwh11_1*x76))+(((0.011479075)*gclwh7_1*x74))+(((-0.001545085)*gclwh11_1*x87))+(((-1.0)*x463))+(((-1.0)*gclwh7_10*x70))+(((-1.0)*x453))+(((-1.0)*gclwh7_1*x91))+x444+x466+((gclwh11_10*x87))+((gclwh11_1*x121))+((gclwh9_10*x82))+(((0.00097973905125)*x116))+(((0.001545085)*gclwh7_1*x70))+(((-1.0)*gclwh13_1*x84)));
op[11]=((((-1.0)*x442))+(((-0.000221452524)*x156))+(((0.00518928)*x155))+(((-1.0)*gclwh11_13*x77))+(((-0.0304)*gclwh11_13*x87))+(((-1.0)*x458))+x225+x447+(((0.0608)*gclwh11_13*x76))+(((-1.0)*gclwh7_13*x276))+((gclwh13_9*x106))+(((0.0304)*gclwh7_13*x70))+(((0.0608)*gclwh9_13*x97))+(((-0.00518928)*x150))+(((-0.0304)*gclwh9_13*x82))+(((0.000221452524)*x177)));
op[12]=((((-1.0)*x449))+(((-0.9138)*gclwh14_8*x97))+(((-0.4569)*gclwh4_8*x87))+(((-1.0)*gclwh6_12*x194))+(((-1.0)*gclwh4_8*x118))+(((0.9138)*gclwh4_8*x76))+(((-0.4569)*gclwh12_8*x70))+(((0.07799283)*x169))+(((0.00332834402025)*x173))+(((-1.0)*x236))+x440+x455+(((0.4569)*gclwh14_8*x82))+(((0.07799283)*x198))+(((-0.00332834402025)*x136))+(((0.9138)*gclwh12_8*x74)));
op[13]=((-0.22085761)+(((0.427145975)*gclwh1_3*x97))+(((0.206288365)*gclwh14_3*x82))+(((0.427145975)*gclwh4_3*x76))+(((-1.0)*gclwh12_3*x183))+(((-1.0)*gclwh4_11*x87))+(((0.427145975)*gclwh12_3*x74))+(((-0.22085761)*gclwh3_3*x70))+(((-1.0)*x469))+(((-1.0)*gclwh12_11*x70))+((gclwh3_3*x183))+(((-1.0)*x451))+((gclwh14_11*x82))+((gclwh6_3*x123))+(((-1.0)*gclwh10_3*x110))+x446+x468+(((-0.206288365)*gclwh4_3*x87))+(((-0.206288365)*gclwh12_3*x70))+((gclwh1_3*x161))+((gclwh14_3*x161))+(((-0.22085761)*gclwh1_3*x82))+(((-1.0)*gclwh4_3*x143))+(((-0.427145975)*gclwh14_3*x97))+(((0.427145975)*gclwh3_3*x74)));
op[14]=((-0.05197952)+(((-1.0)*gclwh10_11*x192))+((gclwh6_11*x138))+((x199*x82))+(((-1.0)*gclwh12_11*x79))+(((4.0)*gclwh4_11*x76))+(((-1.0)*gclwh4_11*x126))+(((-1.0)*x87*x92))+((gclwh14_11*x90))+(((-4.0)*gclwh14_11*x97))+(((-1.0)*gclwh8_11*x89))+(((4.0)*gclwh12_11*x74))+(((-1.0)*x171*x70)));
op[15]=(((x186*x82))+(((-0.9746)*gclwh12_8*x74))+(((-0.4265)*gclwh4_2*x87))+(((-0.4265)*gclwh3_2*x70))+(((-0.4265)*gclwh1_2*x82))+(((0.4265)*gclwh14_2*x82))+(((-1.0)*gclwh12_2*x158))+((gclwh14_14*x172))+(((0.4873)*gclwh4_8*x87))+(((-0.00354979654425)*x173))+(((0.44)*gclwh12_14*x74))+(((-1.0)*gclwh4_2*x160))+(((-1.0)*x70*x78))+(((0.853)*gclwh3_2*x74))+(((-1.0)*gclwh12_14*x195))+(((-0.4265)*gclwh12_2*x70))+(((-1.0)*gclwh4_14*x152))+(((0.853)*gclwh1_2*x97))+(((-0.4873)*gclwh14_8*x82))+((gclwh14_2*x134))+(((0.9746)*gclwh14_8*x97))+(((0.4873)*gclwh12_8*x70))+(((-0.07280355)*x96))+(((0.853)*gclwh12_2*x74))+(((-1.0)*x167*x87))+(((-1.0)*gclwh10_2*x187))+(((0.00354979654425)*x170))+(((-0.9746)*gclwh4_8*x76))+(((-0.44)*gclwh14_14*x97))+((gclwh3_2*x158))+(((0.853)*gclwh4_2*x76))+((gclwh1_2*x134))+(((0.00354979654425)*x136))+((gclwh6_2*x142))+(((0.44)*gclwh4_14*x76))+(((-0.853)*gclwh14_2*x97)));
op[16]=((((0.00518928)*x198))+(((-0.0608)*gclwh4_8*x76))+(((-0.000221452524)*x173))+(((-1.0)*gclwh12_8*x276))+(((-1.0)*gclwh6_12*x106))+(((0.0608)*gclwh14_8*x97))+(((-1.0)*x455))+(((0.0304)*gclwh4_8*x87))+(((-1.0)*x236))+x449+x440+(((0.000221452524)*x136))+((gclwh4_8*x77))+(((-0.0304)*gclwh14_8*x82))+(((0.0304)*gclwh12_8*x70))+(((0.00518928)*x169)));
op[17]=((0.01302416)+(((0.011479075)*gclwh1_3*x97))+(((-1.0)*x446))+(((0.001545085)*gclwh12_3*x70))+(((0.001545085)*gclwh4_3*x87))+(((-0.01302416)*gclwh1_3*x82))+(((-1.0)*gclwh14_11*x82))+(((0.011479075)*gclwh3_3*x74))+(((0.011479075)*gclwh12_3*x74))+(((-1.0)*gclwh4_3*x121))+(((0.011479075)*gclwh4_3*x76))+((gclwh12_11*x70))+(((-1.0)*x469))+((gclwh14_3*x137))+((gclwh4_11*x87))+((gclwh3_3*x91))+(((-1.0)*gclwh12_3*x91))+x451+x468+(((-0.00097973905125)*x125))+((gclwh6_3*x84))+(((-0.001545085)*gclwh14_3*x82))+(((-0.01302416)*gclwh3_3*x70))+(((-0.011479075)*gclwh14_3*x97))+((gclwh1_3*x137)));
op[18]=((0.22085761)+(((0.206288365)*gclwh5_1*x87))+((gclwh15_10*x82))+(((-0.22085761)*gclwh0_1*x82))+(((-1.0)*gclwh13_10*x70))+(((0.427145975)*gclwh2_1*x74))+((gclwh5_1*x143))+(((-0.427145975)*gclwh5_1*x76))+(((-1.0)*gclwh7_1*x123))+(((-1.0)*gclwh5_10*x87))+(((0.206288365)*gclwh13_1*x70))+(((-0.427145975)*gclwh13_1*x74))+(((0.427145975)*gclwh0_1*x97))+(((-0.206288365)*pp*x81))+(((-1.0)*x467))+(((-1.0)*x452))+x445+x470+(((0.427145975)*x277))+((gclwh0_1*x161))+(((-0.22085761)*gclwh2_1*x70))+(((-0.00155579859013472)*x81))+((gclwh2_1*x183))+(((0.00155579859013472)*x112))+((gclwh11_1*x110)));
op[19]=((((-0.00332834402025)*x124))+(((-1.0)*x439))+(((-0.9138)*gclwh5_9*x76))+(((0.4569)*gclwh5_9*x87))+(((-0.07799283)*x93))+((gclwh7_13*x194))+(((-1.0)*x456))+x255+x450+(((-0.9138)*gclwh13_9*x74))+(((0.00332834402025)*x95))+(((-0.07799283)*x168))+(((0.9138)*gclwh15_9*x97))+(((-0.4569)*gclwh15_9*x82))+(((0.4569)*gclwh13_9*x70))+(((0.00332834402025)*x135)));
op[20]=((((-1.0)*gclwh5_15*x152))+(((0.00354979654425)*x95))+(((-0.00354979654425)*x124))+(((-0.44)*gclwh15_15*x97))+(((-0.4873)*gclwh15_9*x82))+(((0.4873)*gclwh13_9*x70))+(((-0.853)*gclwh5_0*x76))+((gclwh0_0*x134))+((x82*x83))+(((0.4873)*gclwh5_9*x87))+((gclwh5_0*x160))+((gclwh2_0*x158))+(((0.44)*gclwh5_15*x76))+(((-1.0)*gclwh15_0*x134))+(((0.44)*gclwh13_15*x74))+(((-0.9746)*gclwh13_9*x74))+(((-0.9746)*gclwh5_9*x76))+(((-0.4265)*gclwh15_0*x82))+(((0.853)*gclwh0_0*x97))+(((-0.4265)*gclwh0_0*x82))+(((-1.0)*gclwh7_0*x142))+(((0.4265)*gclwh5_0*x87))+(((0.9746)*gclwh15_9*x97))+(((-0.853)*gclwh13_0*x74))+((gclwh15_15*x172))+(((-0.4265)*gclwh2_0*x70))+(((-1.0)*gclwh13_15*x195))+(((-1.0)*x189*x70))+((gclwh9_0*x178))+((gclwh13_0*x158))+(((-1.0)*x176*x87))+(((0.00354979654425)*x135))+(((0.853)*gclwh2_0*x74))+(((0.4265)*gclwh13_0*x70))+((gclwh11_0*x187))+(((0.853)*gclwh15_0*x97)));
op[21]=((-0.05197952)+(((4.0)*gclwh15_10*x97))+((gclwh11_10*x192))+((x175*x87))+(((-1.0)*gclwh15_10*x90))+((gclwh5_10*x126))+((gclwh13_10*x79))+(((-1.0)*gclwh7_10*x138))+(((-4.0)*gclwh13_10*x74))+(((-1.0)*x111*x82))+((gclwh9_10*x89))+(((-4.0)*gclwh5_10*x76))+((x193*x70)));
op[22]=((-0.01302416)+(((-0.001545085)*gclwh5_1*x87))+((gclwh0_1*x137))+(((0.011479075)*x277))+(((-1.0)*x445))+((gclwh5_10*x87))+(((0.011479075)*gclwh0_1*x97))+(((-0.01302416)*gclwh2_1*x70))+((gclwh5_1*x121))+((gclwh13_10*x70))+(((0.00097973905125)*x166))+(((-0.001545085)*gclwh13_1*x70))+(((-1.0)*x467))+(((0.011479075)*gclwh2_1*x74))+x452+x470+(((-1.0)*gclwh7_1*x84))+(((0.001545085)*pp*x81))+((gclwh2_1*x91))+(((-4.18103640120938e-5)*x81))+(((-1.0)*gclwh15_10*x82))+(((-0.011479075)*gclwh5_1*x76))+(((-0.011479075)*gclwh13_1*x74))+((gclwh13_1*x91))+(((-0.01302416)*gclwh0_1*x82)));
op[23]=(((gclwh7_13*x106))+(((-1.0)*x439))+(((-1.0)*gclwh5_9*x77))+(((-0.00518928)*x93))+(((0.0304)*gclwh15_9*x82))+(((-1.0)*x450))+x255+x456+(((-0.0608)*gclwh15_9*x97))+(((-0.0304)*gclwh5_9*x87))+(((-0.0304)*gclwh13_9*x70))+(((0.000221452524)*x124))+((gclwh13_9*x276))+(((0.0608)*gclwh5_9*x76))+(((-0.00518928)*x168))+(((-0.000221452524)*x135)));
op[24]=((-0.201036)+(((-1.0)*x459))+x461);
op[25]=((((-1.0)*x438))+(((1.8276)*gclwh6_2*x74))+(((0.0066566880405)*x145))+(((-0.0066566880405)*x157))+(((0.9138)*gclwh8_2*x82))+(((-0.9138)*gclwh6_2*x70))+(((-1.0)*gclwh4_2*x146))+x264+(((-0.15598566)*x114))+((gclwh14_2*x99))+(((-1.8276)*gclwh8_2*x97))+(((-1.8276)*gclwh10_2*x76))+(((0.9138)*gclwh10_2*x87))+(((0.0066566880405)*x122)));
op[26]=((((-1.706)*gclwh10_12*x76))+(((-0.075108)*x197))+(((-1.706)*gclwh8_12*x97))+(((0.853)*pp*x80))+(((0.853)*gclwh10_12*x87))+(((-0.853)*gclwh6_12*x70))+(((0.0062137829925)*x80))+(((-0.075108)*x119))+(((0.0062137829925)*gclwh10_12*r22))+(((1.706)*gclwh6_12*x74))+(((0.075108)*x103))+(((-0.0062137829925)*x133)));
op[27]=((((-1.0)*x147*x82))+((gclwh6_11*x131))+(((-1.0)*gclwh10_11*x180))+(((-1.0)*x188*x87))+(((8.0)*gclwh10_11*x76))+(((-1.0)*gclwh14_11*x154))+((x190*x70))+(((8.0)*gclwh8_11*x97))+(((-1.0)*gclwh8_11*x191))+(((-8.0)*gclwh6_11*x74))+(((0.6828)*x141))+(((0.6828)*x86)));
op[28]=((-0.013376)+(((-1.0)*x461))+x459);
op[29]=((((-0.01037856)*gclwh4_2*rxp2_2))+(((0.01037856)*x181))+(((0.0608)*gclwh10_2*x87))+(((0.000442905048)*x145))+(((-0.1216)*gclwh10_2*x76))+(((-0.1216)*gclwh8_2*x97))+(((0.0608)*gclwh8_2*x82))+(((-0.0608)*gclwh6_2*x70))+x438+(((0.1216)*gclwh6_2*x74))+(((0.000442905048)*x122))+(((-0.01037856)*x114))+(((-1.0)*x264))+(((-0.000442905048)*x157)));
op[30]=((((-0.0066566880405)*gclwh7_0*r21))+(((-0.9138)*gclwh7_0*x70))+((gclwh15_0*x99))+(((-1.8276)*gclwh9_0*x97))+x437+(((-0.15598566)*x104))+(((-1.0)*x272))+(((-1.0)*gclwh5_0*x146))+(((0.0066566880405)*gclwh11_0*r22))+(((-1.8276)*gclwh11_0*x76))+(((0.0066566880405)*gclwh9_0*r20))+(((0.9138)*gclwh9_0*x82))+(((0.9138)*gclwh11_0*x87))+(((1.8276)*gclwh7_0*x74)));
op[31]=((-0.201036)+(((-1.0)*x460))+x462);
op[32]=(((gclwh11_10*x180))+(((-0.6828)*gclwh13_10*rxp1_2))+(((-1.0)*x196*x70))+((gclwh15_10*x154))+((x153*x82))+((gclwh9_10*x191))+(((-1.0)*gclwh7_10*x131))+(((-0.6828)*gclwh5_10*rxp2_2))+(((-8.0)*gclwh11_10*x76))+(((8.0)*gclwh7_10*x74))+((x132*x87))+(((-8.0)*gclwh9_10*x97)));
IkReal x471=pp*pp;
IkReal x472=pz*pz;
IkReal x473=((0.1707)*pz);
IkReal x474=(npy*pz);
IkReal x475=(pp*r21);
IkReal x476=((0.1707)*rxp1_2);
IkReal x477=(gclwh13_1*pp);
IkReal x478=(gclwh9_0*r20);
IkReal x479=(gclwh9_13*rxp0_2);
IkReal x480=(gclwh5_1*rxp2_2);
IkReal x481=((4.0)*gclwh12_11);
IkReal x482=(pp*r22);
IkReal x483=((0.44)*gclwh5_15);
IkReal x484=(gclwh10_12*rxp2_2);
IkReal x485=((0.0072846225)*pz);
IkReal x486=(gclwh4_2*r22);
IkReal x487=(npz*pz);
IkReal x488=(npx*pz);
IkReal x489=(gclwh11_13*r22);
IkReal x490=(gclwh15_10*r20);
IkReal x491=((0.014569245)*r21);
IkReal x492=(pp*r20);
IkReal x493=((0.22)*gclwh15_15);
IkReal x494=((2.0)*gclwh11_10);
IkReal x495=(gclwh14_2*pz);
IkReal x496=((0.0072846225)*r21);
IkReal x497=((2.0)*gclwh4_11);
IkReal x498=(gclwh2_0*r21);
IkReal x499=(gclwh9_0*rxp0_2);
IkReal x500=(gclwh5_9*r22);
IkReal x501=(gclwh8_2*rxp0_2);
IkReal x502=((0.00155579859013472)*r21);
IkReal x503=(gclwh12_8*rxp1_2);
IkReal x504=((0.3414)*rxp0_2);
IkReal x505=(gclwh4_14*r22);
IkReal x506=(gclwh13_0*pz);
IkReal x507=(gclwh12_2*r21);
IkReal x508=((0.018777)*rxp2_2);
IkReal x509=((0.6828)*rxp2_2);
IkReal x510=((0.0072846225)*r22);
IkReal x511=((1.0)*pz);
IkReal x512=(gclwh15_15*r20);
IkReal x513=((0.1707)*pp);
IkReal x514=((0.1707)*rxp2_2);
IkReal x515=(gclwh5_0*pz);
IkReal x516=((2.0)*gclwh9_10);
IkReal x517=((0.03645690896625)*rxp2_2);
IkReal x518=((2.0)*pp);
IkReal x519=(gclwh14_11*r20);
IkReal x520=(gclwh14_8*rxp0_2);
IkReal x521=(gclwh15_1*rxp0_2);
IkReal x522=((4.0)*gclwh14_11);
IkReal x523=((0.00332834402025)*r22);
IkReal x524=((0.037554)*rxp1_2);
IkReal x525=(gclwh13_1*rxp1_2);
IkReal x526=(gclwh5_10*r22);
IkReal x527=(gclwh6_12*rxp1_2);
IkReal x528=(gclwh15_0*rxp0_2);
IkReal x529=(gclwh15_9*r20);
IkReal x530=(gclwh10_3*rxp2_2);
IkReal x531=((0.000801308475)*r21);
IkReal x532=(gclwh4_8*rxp2_2);
IkReal x533=((2.0)*gclwh10_11);
IkReal x534=(gclwh9_10*r20);
IkReal x535=((0.00310689149625)*r20);
IkReal x536=((0.3414)*rxp1_2);
IkReal x537=((0.6828)*rxp0_2);
IkReal x538=((2.0)*gclwh7_10);
IkReal x539=(gclwh13_0*r21);
IkReal x540=((0.07280355)*rxp1_2);
IkReal x541=(gclwh4_3*r22);
IkReal x542=((0.44)*gclwh12_14);
IkReal x543=(gclwh7_0*r21);
IkReal x544=(gclwh15_9*rxp0_2);
IkReal x545=(gclwh10_2*r22);
IkReal x546=((0.44)*gclwh4_14);
IkReal x547=((0.00097973905125)*rxp1_2);
IkReal x548=(gclwh1_3*r20);
IkReal x549=(gclwh13_9*rxp1_2);
IkReal x550=((4.18103640120938e-5)*r21);
IkReal x551=((0.15598566)*rxp1_2);
IkReal x552=(gclwh5_0*r22);
IkReal x553=(gclwh5_9*rxp2_2);
IkReal x554=((0.000221452524)*r20);
IkReal x555=(gclwh4_3*rxp2_2);
IkReal x556=((0.00332834402025)*r21);
IkReal x557=(gclwh7_13*r21);
IkReal x558=(gclwh14_2*r20);
IkReal x559=((0.018777)*rxp0_2);
IkReal x560=((0.07280355)*rxp2_2);
IkReal x561=(gclwh10_3*r22);
IkReal x562=(gclwh15_15*rxp0_2);
IkReal x563=((0.00155579859013472)*r20);
IkReal x564=((4.0)*gclwh4_11);
IkReal x565=(gclwh5_15*r22);
IkReal x566=(gclwh1_2*r20);
IkReal x567=(gclwh12_8*r21);
IkReal x568=((0.1707)*rxp0_2);
IkReal x569=((0.00332834402025)*r20);
IkReal x570=((2.0)*gclwh6_11);
IkReal x571=((0.018777)*rxp1_2);
IkReal x572=((0.01037856)*rxp1_2);
IkReal x573=((0.22)*gclwh4_14);
IkReal x574=(gclwh14_3*rxp0_2);
IkReal x575=((0.3414)*rxp2_2);
IkReal x576=(gclwh4_8*r22);
IkReal x577=(gclwh13_15*r21);
IkReal x578=((2.0)*gclwh12_11);
IkReal x579=(gclwh11_0*r22);
IkReal x580=(gclwh6_2*r21);
IkReal x581=((0.03645690896625)*rxp1_2);
IkReal x582=((0.22)*gclwh5_15);
IkReal x583=((0.01037856)*rxp2_2);
IkReal x584=(gclwh11_0*pz);
IkReal x585=((0.44)*gclwh15_15);
IkReal x586=(gclwh10_2*pz);
IkReal x587=((0.44)*gclwh13_15);
IkReal x588=((0.000801308475)*r22);
IkReal x589=((2.0)*gclwh8_11);
IkReal x590=((4.0)*gclwh13_10);
IkReal x591=((0.15598566)*rxp2_2);
IkReal x592=((0.000442905048)*r20);
IkReal x593=((0.22)*gclwh12_14);
IkReal x594=((0.22)*gclwh14_14);
IkReal x595=((0.000801308475)*r20);
IkReal x596=((4.0)*gclwh5_10);
IkReal x597=((2.0)*gclwh5_10);
IkReal x598=((0.22)*gclwh13_15);
IkReal x599=((0.6828)*rxp1_2);
IkReal x600=(gclwh8_12*rxp0_2);
IkReal x601=(gclwh5_15*rxp2_2);
IkReal x602=((0.014569245)*r22);
IkReal x603=((0.02913849)*r21);
IkReal x604=((2.0)*gclwh13_10);
IkReal x605=(gclwh8_11*r20);
IkReal x606=(gclwh13_9*r21);
IkReal x607=(gclwh3_2*r21);
IkReal x608=(gclwh12_14*r21);
IkReal x609=(gclwh11_13*rxp2_2);
IkReal x610=(gclwh11_1*r22);
IkReal x611=((0.0066566880405)*r20);
IkReal x612=(gclwh14_8*r20);
IkReal x613=(gclwh14_14*r20);
IkReal x614=((0.44)*gclwh14_14);
IkReal x615=(gclwh7_13*rxp1_2);
IkReal x616=((2.0)*gclwh14_11);
IkReal x617=(gclwh8_11*x504);
IkReal x618=(gclwh10_11*x575);
IkReal x619=(gclwh12_11*x491);
IkReal x620=(gclwh4_11*x602);
IkReal x621=((0.014569245)*x519);
IkReal x622=(gclwh6_11*x536);
IkReal x623=((0.00160261695)*x608);
IkReal x624=((0.00160261695)*x505);
IkReal x625=((0.00160261695)*x613);
IkReal x626=((0.00160261695)*x565);
IkReal x627=((0.00160261695)*x577);
IkReal x628=((0.00160261695)*x512);
IkReal x629=(gclwh7_10*x536);
IkReal x630=((0.014569245)*x490);
IkReal x631=(gclwh13_10*x491);
IkReal x632=(gclwh11_10*x575);
IkReal x633=((0.014569245)*x526);
IkReal x634=(gclwh9_10*x504);
IkReal x635=(gclwh12_14*x571);
IkReal x636=(gclwh6_5*x531);
IkReal x637=(gclwh4_14*x508);
IkReal x638=(gclwh14_14*x559);
IkReal x639=(gclwh10_5*x588);
IkReal x640=(gclwh8_5*x595);
IkReal x641=((0.014569245)*x532);
IkReal x642=(gclwh14_11*x568);
IkReal x643=((0.014569245)*x503);
IkReal x644=(gclwh10_11*x510);
IkReal x645=((0.0072846225)*x605);
IkReal x646=(gclwh6_11*x496);
IkReal x647=(gclwh4_11*x514);
IkReal x648=((0.014569245)*x520);
IkReal x649=(gclwh12_11*x476);
IkReal x650=((0.037554)*x562);
IkReal x651=(gclwh13_15*x524);
IkReal x652=((0.037554)*x601);
IkReal x653=(gclwh5_10*x575);
IkReal x654=(gclwh7_10*x491);
IkReal x655=(gclwh13_10*x536);
IkReal x656=(gclwh13_10*x476);
IkReal x657=(gclwh7_10*x496);
IkReal x658=((0.014569245)*x549);
IkReal x659=(gclwh5_10*x514);
IkReal x660=((0.014569245)*x553);
IkReal x661=((0.014569245)*x544);
IkReal x662=(gclwh11_10*x510);
IkReal x663=(gclwh15_10*x568);
IkReal x664=((0.0072846225)*x534);
IkReal x665=(gclwh5_15*x508);
IkReal x666=(gclwh13_15*x571);
IkReal x667=(gclwh7_7*x531);
IkReal x668=(gclwh15_15*x559);
IkReal x669=(gclwh9_7*x595);
IkReal x670=(gclwh11_7*x588);
IkReal x671=((0.000801308475)*x505);
IkReal x672=(gclwh10_5*x508);
IkReal x673=(gclwh12_14*x531);
IkReal x674=(gclwh8_5*x559);
IkReal x675=(gclwh14_14*x595);
IkReal x676=(gclwh6_5*x571);
IkReal x677=((0.000621742530375)*x576);
IkReal x678=(gclwh6_11*x476);
IkReal x679=((0.0072846225)*x519);
IkReal x680=((0.000621742530375)*x567);
IkReal x681=((0.000621742530375)*x612);
IkReal x682=(gclwh8_11*x568);
IkReal x683=(gclwh10_11*x514);
IkReal x684=(gclwh12_11*x496);
IkReal x685=(gclwh4_11*x510);
IkReal x686=(r20*x471);
IkReal x687=(r21*x471);
IkReal x688=((2.0)*x472);
IkReal x689=(x482*x497);
IkReal x690=(x475*x578);
IkReal x691=(x488*x522);
IkReal x692=(x492*x616);
IkReal x693=(x474*x481);
IkReal x694=(x487*x564);
IkReal x695=(x482*x573);
IkReal x696=(x475*x593);
IkReal x697=(x488*x614);
IkReal x698=(x492*x594);
IkReal x699=(x487*x546);
IkReal x700=(x474*x542);
IkReal x701=(x488*x585);
IkReal x702=(x475*x598);
IkReal x703=(x482*x582);
IkReal x704=(x483*x487);
IkReal x705=(x474*x587);
IkReal x706=(x492*x493);
IkReal x707=(x490*x518);
IkReal x708=(x487*x596);
IkReal x709=(x474*x590);
IkReal x710=(x475*x604);
IkReal x711=((4.0)*gclwh15_10*x488);
IkReal x712=(x482*x597);
IkReal x713=((0.11)*gclwh6_5*x475);
IkReal x714=((0.22)*gclwh8_5*x488);
IkReal x715=((0.22)*gclwh10_5*x487);
IkReal x716=((0.11)*gclwh10_5*x482);
IkReal x717=((0.22)*gclwh6_5*x474);
IkReal x718=((0.11)*gclwh8_5*x492);
IkReal x719=(gclwh12_3*pp*x476);
IkReal x720=(gclwh14_2*rxp0_2*x473);
IkReal x721=(gclwh6_3*x687);
IkReal x722=(x485*x545);
IkReal x723=(x474*x570);
IkReal x724=(x482*x586);
IkReal x725=(x513*x555);
IkReal x726=(gclwh8_2*r20*x485);
IkReal x727=(gclwh8_2*pz*x492);
IkReal x728=(x485*x580);
IkReal x729=(gclwh12_2*rxp1_2*x473);
IkReal x730=(x487*x533);
IkReal x731=(gclwh4_2*rxp2_2*x473);
IkReal x732=(x488*x589);
IkReal x733=(x513*x574);
IkReal x734=(x475*x538);
IkReal x735=((4.0)*gclwh9_10*x488);
IkReal x736=((4.0)*gclwh11_10*x487);
IkReal x737=(x487*x494);
IkReal x738=(x476*x477);
IkReal x739=(x488*x516);
IkReal x740=(gclwh7_1*x687);
IkReal x741=(x485*x579);
IkReal x742=(x473*x528);
IkReal x743=(x482*x584);
IkReal x744=(x480*x513);
IkReal x745=(x478*x485);
IkReal x746=(pp*pz*x478);
IkReal x747=(x513*x521);
IkReal x748=(gclwh13_0*rxp1_2*x473);
IkReal x749=(gclwh5_0*rxp2_2*x473);
IkReal x750=(x474*x538);
IkReal x751=(x485*x543);
IkReal x752=((0.11)*gclwh7_7*x475);
IkReal x753=((0.22)*gclwh9_7*x488);
IkReal x754=((0.22)*gclwh11_7*x487);
IkReal x755=((0.22)*gclwh7_7*x474);
IkReal x756=((0.11)*gclwh11_7*x482);
IkReal x757=((0.11)*gclwh9_7*x492);
IkReal x758=((0.11)*gclwh4_14*x482);
IkReal x759=((0.11)*gclwh12_14*x475);
IkReal x760=(x488*x594);
IkReal x761=(x487*x573);
IkReal x762=(x474*x593);
IkReal x763=((0.11)*gclwh14_14*x492);
IkReal x764=(gclwh14_8*npx*x473);
IkReal x765=(x492*x495);
IkReal x766=(gclwh12_3*x687);
IkReal x767=(x485*x607);
IkReal x768=((0.08535)*gclwh12_8*x475);
IkReal x769=(x487*x497);
IkReal x770=(gclwh6_2*rxp1_2*x473);
IkReal x771=(x513*x530);
IkReal x772=(gclwh3_3*x687);
IkReal x773=(x471*x548);
IkReal x774=((0.08535)*gclwh4_8*x482);
IkReal x775=(x485*x558);
IkReal x776=(x471*x541);
IkReal x777=(x485*x566);
IkReal x778=(x474*x578);
IkReal x779=(gclwh12_8*npy*x473);
IkReal x780=(gclwh4_8*npz*x473);
IkReal x781=(x473*x501);
IkReal x782=((0.08535)*gclwh14_8*x492);
IkReal x783=(x488*x616);
IkReal x784=(gclwh6_3*pp*x476);
IkReal x785=(gclwh10_2*rxp2_2*x473);
IkReal x786=(x485*x486);
IkReal x787=(x485*x507);
IkReal x788=((1.0)*r22*x471);
IkReal x789=(gclwh6_2*npy*x688);
IkReal x790=(gclwh10_3*x487*x518);
IkReal x791=((1.0)*x471*x561);
IkReal x792=(gclwh6_3*x474*x518);
IkReal x793=(gclwh6_2*x475*x511);
IkReal x794=(gclwh10_2*npz*x688);
IkReal x795=(gclwh8_2*npx*x688);
IkReal x796=(gclwh11_1*x487*x518);
IkReal x797=(gclwh7_0*npy*x688);
IkReal x798=(gclwh9_0*npx*x688);
IkReal x799=((1.0)*x471*x610);
IkReal x800=(gclwh7_1*x474*x518);
IkReal x801=(gclwh11_0*npz*x688);
IkReal x802=(gclwh7_0*x475*x511);
IkReal x803=(gclwh12_2*npy*x688);
IkReal x804=(gclwh3_2*npy*x688);
IkReal x805=(gclwh1_2*npx*x688);
IkReal x806=(gclwh14_3*x488*x518);
IkReal x807=(gclwh4_2*npz*x688);
IkReal x808=(gclwh4_3*x487*x518);
IkReal x809=(gclwh12_2*x475*x511);
IkReal x810=(gclwh1_2*x492*x511);
IkReal x811=(gclwh3_3*x474*x518);
IkReal x812=(gclwh4_2*x482*x511);
IkReal x813=(gclwh1_3*x488*x518);
IkReal x814=(gclwh3_2*x475*x511);
IkReal x815=(gclwh12_3*x474*x518);
IkReal x816=(gclwh14_2*npx*x688);
IkReal x817=((1.0)*gclwh14_3*x686);
IkReal x818=(x665+x666);
IkReal x819=(x637+x635);
IkReal x820=(x651+x652);
IkReal x821=(x672+x674);
IkReal x822=(x663+x662+x664+x750);
IkReal x823=(x645+x644+x642+x723);
IkReal x824=(x678+x679+x778+x769);
IkReal x825=(x625+x698+x699+x700);
IkReal x826=(x636+x713+x715+x714);
IkReal x827=(x628+x706+x704+x705);
IkReal x828=(x667+x754+x753+x752);
IkReal x829=(x675+x761+x762+x763);
IkReal x830=(x683+x682+x685+x684+x783);
IkReal x831=(x647+x646+x649+x732+x730);
IkReal x832=(x656+x657+x659+x737+x739);
IkReal x833=(x621+x622+x694+x692+x693);
IkReal x834=(x669+x670+x755+x757+x756);
IkReal x835=(x624+x623+x695+x696+x697);
IkReal x836=(x629+x630+x708+x709+x707);
IkReal x837=(x673+x671+x759+x758+x760);
IkReal x838=(x627+x626+x702+x703+x701);
IkReal x839=(x640+x639+x718+x717+x716);
IkReal x840=((((0.014569245)*x534))+((gclwh11_10*x602))+(((4.0)*gclwh7_10*x474))+((x492*x516))+((x482*x494))+((gclwh15_10*x504)));
IkReal x841=(x653+x654+x655+x736+x735+x734);
IkReal x842=(x634+x632+x633+x631+x711+x710+x712);
IkReal x843=(x618+x619+x617+x620+x689+x690+x691);
IkReal x844=(x661+x751+x747+x748+x749+x799+x798+x801+x800+x802);
IkReal x845=(x648+x733+x731+x728+x729+x791+x793+x792+x795+x794);
IkReal x846=(x658+x660+x738+x746+x744+x745+x742+x743+x740+x741+x797+x796);
IkReal x847=(x643+x641+x719+x720+x721+x722+x724+x725+x726+x727+x790+x789);
IkReal x848=(x681+x779+x782+x780+x781+x786+x787+x784+x785+x816+x817+x814+x815+x812+x813+x810+x811+x809+x808);
IkReal x849=(x473+x677+x680+x773+x772+x771+x770+x777+x776+x775+x774+x768+x764+x765+x766+x767+x805+x804+x807+x806+x803);
op[33]=((((-1.706)*gclwh11_13*x487))+(((-0.075108)*x601))+(((0.0062137829925)*x489))+(((-0.075108)*gclwh13_15*rxp1_2))+(((0.853)*gclwh9_13*x492))+(((-1.706)*gclwh9_13*x488))+(((0.853)*gclwh11_13*x482))+(((-0.853)*gclwh7_13*x475))+(((0.0062137829925)*gclwh9_13*r20))+(((1.706)*gclwh7_13*x474))+(((-0.0062137829925)*x557))+(((0.075108)*x562)));
op[34]=((((0.000442905048)*x478))+(((-0.0608)*gclwh7_0*x475))+(((0.0608)*gclwh11_0*x482))+(((0.000442905048)*x579))+(((-1.0)*gclwh5_0*x583))+(((-1.0)*x820))+(((-0.000442905048)*x543))+(((0.0608)*pp*x478))+(((-0.1216)*gclwh9_0*x488))+(((0.1216)*gclwh7_0*x474))+(((-0.1216)*gclwh11_0*x487))+x650+(((-1.0)*gclwh13_0*x572))+(((0.01037856)*x528)));
op[35]=((-0.013376)+(((-1.0)*x840))+x841);
op[36]=((0.39331522)+(((-1.0)*x843))+x833);
op[37]=((((-0.15598566)*x501))+(((-0.9138)*gclwh1_2*x492))+(((0.0066566880405)*x558))+(((-0.0066566880405)*x486))+(((1.8276)*gclwh12_2*x474))+(((-0.9138)*gclwh3_2*x475))+(((-1.8276)*gclwh14_2*x488))+(((1.8276)*gclwh1_2*x488))+(((0.0066566880405)*x566))+(((-1.0)*x835))+((gclwh6_2*x551))+(((-0.9138)*gclwh12_2*x475))+(((0.9138)*gclwh14_2*x492))+(((-0.0066566880405)*x507))+x825+(((1.8276)*gclwh4_2*x487))+(((0.0066566880405)*x607))+(((1.8276)*gclwh3_2*x474))+(((-1.0)*gclwh10_2*x591))+(((-0.9138)*gclwh4_2*x482)));
op[38]=((((-0.0032052339)*x505))+(((-0.1456071)*x600))+(((-1.0)*x482*x546))+(((0.88)*gclwh4_14*x487))+((x492*x614))+(((-0.0032052339)*x608))+(((-0.88)*gclwh14_14*x488))+(((0.88)*gclwh12_14*x474))+(((0.1456071)*x527))+(((-0.1456071)*x484))+(((0.0032052339)*x613))+(((-1.0)*x475*x542)));
op[39]=((-0.00715904)+((gclwh12_11*x603))+(((-0.02913849)*x519))+((gclwh8_11*x537))+((x475*x481))+(((0.02913849)*gclwh4_11*r22))+((gclwh10_11*x509))+(((-1.0)*gclwh6_11*x599))+(((-8.0)*gclwh4_11*x487))+(((-1.0)*x492*x522))+((x482*x564))+(((-8.0)*gclwh12_11*x474))+(((8.0)*gclwh14_11*x488)));
op[40]=((0.02235168)+(((-1.0)*x833))+x843);
op[41]=((((-0.01037856)*x501))+(((-0.0608)*gclwh1_2*x492))+(((0.000442905048)*x558))+(((-0.1216)*gclwh14_2*x488))+(((-0.000442905048)*x486))+(((0.1216)*gclwh3_2*x474))+(((0.0608)*gclwh14_2*x492))+(((0.000442905048)*x607))+(((-1.0)*x825))+(((0.1216)*gclwh1_2*x488))+(((-1.0)*gclwh10_2*x583))+(((0.1216)*gclwh12_2*x474))+(((-0.0608)*gclwh12_2*x475))+(((0.000442905048)*x566))+(((-0.0608)*gclwh3_2*x475))+(((-0.000442905048)*x507))+(((0.1216)*gclwh4_2*x487))+((gclwh6_2*x572))+x835+(((-0.0608)*gclwh4_2*x482)));
op[42]=((((0.0066566880405)*x552))+(((-1.8276)*gclwh13_0*x474))+(((-1.0)*gclwh7_0*x551))+(((0.15598566)*x499))+(((-0.9138)*gclwh0_0*x492))+(((0.0066566880405)*x539))+(((0.0066566880405)*x498))+(((0.9138)*gclwh13_0*x475))+(((1.8276)*gclwh0_0*x488))+(((-1.8276)*gclwh5_0*x487))+(((0.9138)*gclwh5_0*x482))+(((1.8276)*gclwh15_0*x488))+(((-1.0)*x838))+((gclwh11_0*x591))+(((-1.0)*gclwh15_0*x611))+(((1.8276)*gclwh2_0*x474))+x827+((gclwh0_0*x611))+(((-0.9138)*gclwh15_0*x492))+(((-0.9138)*gclwh2_0*x475)));
op[43]=((0.39331522)+(((-1.0)*x836))+x842);
op[44]=((0.00715904)+((gclwh11_10*x509))+((x475*x590))+(((-8.0)*gclwh13_10*x474))+(((8.0)*gclwh15_10*x488))+(((-4.0)*pp*x490))+((x482*x596))+(((-1.0)*gclwh7_10*x599))+(((-8.0)*gclwh5_10*x487))+(((-0.02913849)*x490))+((gclwh13_10*x603))+((gclwh9_10*x537))+(((0.02913849)*x526)));
op[45]=((((-0.88)*gclwh5_15*x487))+(((0.88)*gclwh15_15*x488))+(((-0.1456071)*x615))+(((-0.88)*gclwh13_15*x474))+(((0.1456071)*x479))+((x475*x587))+(((0.0032052339)*x565))+(((-1.0)*x492*x585))+(((-0.0032052339)*x512))+((x482*x483))+(((0.1456071)*x609))+(((0.0032052339)*x577)));
op[46]=((((0.1216)*gclwh15_0*x488))+(((0.1216)*gclwh2_0*x474))+(((-0.1216)*gclwh13_0*x474))+(((-1.0)*gclwh15_0*x592))+(((0.000442905048)*x552))+(((0.01037856)*x499))+(((-0.0608)*gclwh15_0*x492))+(((-0.0608)*gclwh2_0*x475))+(((0.1216)*gclwh0_0*x488))+(((0.000442905048)*x498))+(((-1.0)*x827))+(((-0.0608)*gclwh0_0*x492))+(((0.0608)*gclwh13_0*x475))+(((-0.1216)*gclwh5_0*x487))+((gclwh0_0*x592))+x838+(((0.0608)*gclwh5_0*x482))+(((-1.0)*gclwh7_0*x572))+(((0.000442905048)*x539))+((gclwh11_0*x583)));
op[47]=((0.02235168)+(((-1.0)*x842))+x836);
op[48]=(((gclwh10_12*x523))+(((0.9138)*gclwh6_12*x474))+(((0.4569)*gclwh8_12*x492))+(((-0.07799283)*x503))+(((-0.9138)*gclwh10_12*x487))+(((-1.0)*x819))+(((-0.9138)*gclwh8_12*x488))+((gclwh8_12*x569))+(((0.07799283)*x520))+(((-1.0)*x839))+(((-1.0)*gclwh6_12*x556))+(((-0.07799283)*x532))+x638+(((0.4569)*gclwh10_12*x482))+x826+(((-0.4569)*gclwh6_12*x475)));
op[49]=((((0.03645690896625)*x574))+(((-0.427145975)*gclwh10_3*x487))+(((0.00155579859013472)*x561))+(((-1.0)*x823))+(((0.427145975)*gclwh6_3*x474))+(((-1.0)*gclwh8_11*x492))+(((-1.0)*gclwh4_3*x517))+(((-1.0)*gclwh12_3*x581))+(((-0.206288365)*gclwh6_3*x475))+((gclwh6_11*x475))+(((-1.0)*x845))+x831+x847+(((-1.0)*gclwh6_3*x502))+(((-1.0)*gclwh10_11*x482))+(((0.206288365)*gclwh10_3*x482)));
op[50]=((0.09383)+(((4.0)*gclwh10_11*x487))+(((-1.0)*x482*x533))+((gclwh12_11*x536))+(((-4.0)*gclwh6_11*x474))+((gclwh6_11*x491))+(((-1.0)*x492*x589))+(((-0.014569245)*x605))+((x475*x570))+((gclwh4_11*x575))+(((-1.0)*gclwh14_11*x504))+(((-1.0)*gclwh10_11*x602))+(((4.0)*gclwh8_11*x488)));
op[51]=((((-1.0)*gclwh8_2*x535))+(((-0.00310689149625)*x545))+(((-0.037554)*gclwh14_14*rxp0_2))+((gclwh4_2*x560))+((gclwh12_14*x524))+(((0.4265)*gclwh6_2*x475))+(((0.08318211)*x532))+((gclwh12_2*x540))+(((-0.07280355)*gclwh14_2*rxp0_2))+(((-0.853)*gclwh6_2*x474))+(((-0.4265)*gclwh10_2*x482))+(((0.853)*gclwh10_2*x487))+(((-0.4265)*gclwh8_2*x492))+(((0.037554)*gclwh4_14*rxp2_2))+(((0.853)*gclwh8_2*x488))+(((0.00310689149625)*x580))+(((-0.08318211)*x520))+(((0.08318211)*x503)));
op[52]=((((0.0608)*gclwh6_12*x474))+((gclwh8_12*x554))+(((-0.0608)*gclwh10_12*x487))+(((-1.0)*x638))+(((0.000221452524)*gclwh10_12*r22))+(((0.0304)*gclwh10_12*x482))+(((-0.000221452524)*gclwh6_12*r21))+(((0.00518928)*x503))+(((-1.0)*x839))+(((0.0304)*gclwh8_12*x492))+x819+x826+(((-0.0304)*gclwh6_12*x475))+(((-0.00518928)*x520))+(((-0.0608)*gclwh8_12*x488))+(((0.00518928)*x532)));
op[53]=((((0.001545085)*gclwh6_3*x475))+(((-1.0)*gclwh6_3*x550))+(((-1.0)*gclwh6_11*x475))+(((-1.0)*x845))+(((-1.0)*x831))+(((0.00097973905125)*x574))+(((-0.011479075)*gclwh10_3*x487))+(((-0.00097973905125)*x555))+((gclwh10_11*x482))+x823+x847+(((0.011479075)*gclwh6_3*x474))+(((-1.0)*gclwh12_3*x547))+(((-0.001545085)*gclwh10_3*x482))+(((4.18103640120938e-5)*x561))+((gclwh8_11*x492)));
op[54]=(((gclwh11_10*x482))+(((0.427145975)*gclwh7_1*x474))+((gclwh9_10*x492))+(((-1.0)*gclwh7_10*x475))+(((-0.206288365)*gclwh7_1*x475))+(((-1.0)*gclwh7_1*x502))+(((0.00155579859013472)*x610))+(((-0.427145975)*gclwh11_1*x487))+(((-0.03645690896625)*x480))+(((-1.0)*x844))+(((-1.0)*x832))+x822+x846+(((0.03645690896625)*x521))+(((-0.03645690896625)*x525))+(((0.206288365)*gclwh11_1*x482)));
op[55]=((((-0.4569)*gclwh7_13*x475))+(((0.00332834402025)*x489))+(((0.9138)*gclwh7_13*x474))+(((0.4569)*gclwh9_13*x492))+(((-1.0)*x818))+(((-0.07799283)*x553))+((gclwh9_13*x569))+(((-1.0)*gclwh7_13*x556))+(((0.07799283)*x544))+(((-1.0)*x834))+(((-0.9138)*gclwh11_13*x487))+x668+(((-0.9138)*gclwh9_13*x488))+(((-0.07799283)*x549))+x828+(((0.4569)*gclwh11_13*x482)));
op[56]=((((-0.07280355)*x528))+(((0.853)*gclwh11_0*x487))+(((0.853)*gclwh9_0*x488))+(((-0.4265)*pp*x478))+(((-1.0)*x820))+(((0.08318211)*x544))+(((0.00310689149625)*x543))+(((-0.853)*gclwh7_0*x474))+(((-0.4265)*gclwh11_0*x482))+(((-0.00310689149625)*x478))+x650+(((-0.08318211)*x549))+(((-0.00310689149625)*x579))+(((-0.08318211)*x553))+(((0.4265)*gclwh7_0*x475))+((gclwh5_0*x560))+((gclwh13_0*x540)));
op[57]=((0.09383)+(((-1.0)*x840))+x841);
op[58]=((((-0.011479075)*gclwh11_1*x487))+(((-1.0)*gclwh7_1*x550))+(((0.001545085)*gclwh7_1*x475))+(((0.011479075)*gclwh7_1*x474))+((gclwh7_10*x475))+(((-1.0)*x822))+(((4.18103640120938e-5)*x610))+(((-1.0)*gclwh11_10*x482))+(((-0.001545085)*gclwh11_1*x482))+(((-1.0)*gclwh9_10*x492))+(((-1.0)*x844))+(((-0.00097973905125)*x525))+x832+x846+(((0.00097973905125)*x521))+(((-0.00097973905125)*x480)));
op[59]=((((0.0608)*gclwh7_13*x474))+(((-0.0304)*gclwh7_13*x475))+(((0.0304)*gclwh9_13*x492))+(((0.00518928)*x549))+((gclwh9_13*x554))+(((0.000221452524)*x489))+(((-1.0)*x668))+(((-1.0)*x834))+(((-0.0608)*gclwh11_13*x487))+x818+x828+(((-0.000221452524)*x557))+(((0.0304)*gclwh11_13*x482))+(((0.00518928)*x553))+(((-0.00518928)*x544))+(((-0.0608)*gclwh9_13*x488)));
op[60]=((((0.9138)*gclwh12_8*x474))+((gclwh14_8*x569))+(((-1.0)*gclwh4_8*x523))+(((-0.07799283)*x600))+(((0.9138)*gclwh4_8*x487))+(((-1.0)*gclwh12_8*x556))+(((-0.07799283)*x484))+(((0.4569)*gclwh14_8*x492))+(((0.07799283)*x527))+(((-1.0)*x837))+(((-0.4569)*gclwh4_8*x482))+(((-0.9138)*gclwh14_8*x488))+(((-0.4569)*gclwh12_8*x475))+x829+x821+(((-1.0)*x676)));
op[61]=((0.22085761)+(((-0.22085761)*gclwh1_3*x492))+((gclwh3_3*x502))+(((0.427145975)*gclwh4_3*x487))+(((0.427145975)*gclwh1_3*x488))+((gclwh6_3*x581))+(((-0.427145975)*gclwh14_3*x488))+((gclwh14_3*x563))+(((-1.0)*gclwh12_3*x502))+(((0.427145975)*gclwh12_3*x474))+(((-0.206288365)*gclwh4_3*x482))+(((-1.0)*x824))+((gclwh4_11*x482))+((gclwh12_11*x475))+(((-0.206288365)*gclwh12_3*x475))+(((-1.0)*x848))+(((-1.0)*gclwh10_3*x517))+(((-1.0)*gclwh14_11*x492))+(((0.00155579859013472)*x548))+(((0.206288365)*gclwh14_3*x492))+(((0.427145975)*gclwh3_3*x474))+(((-0.22085761)*gclwh3_3*x475))+x830+x849+(((-0.00155579859013472)*x541)));
op[62]=((0.05197952)+(((-1.0)*x833))+x843);
op[63]=((((0.4265)*gclwh12_2*x475))+(((0.00354979654425)*x567))+(((0.4265)*gclwh3_2*x475))+(((-1.0)*gclwh1_2*x535))+(((-0.00310689149625)*x607))+(((-1.0)*x825))+(((-0.00354979654425)*x612))+(((-0.4265)*gclwh14_2*x492))+(((0.4265)*gclwh4_2*x482))+(((-0.853)*gclwh4_2*x487))+((gclwh10_2*x560))+(((0.4873)*gclwh12_8*x475))+(((0.00310689149625)*x486))+(((0.00310689149625)*x507))+(((0.853)*gclwh14_2*x488))+(((-0.853)*gclwh3_2*x474))+(((0.4873)*gclwh4_8*x482))+(((0.9746)*gclwh14_8*x488))+(((-1.0)*gclwh14_2*x535))+(((-0.9746)*gclwh12_8*x474))+(((0.4265)*gclwh1_2*x492))+x835+(((-0.853)*gclwh1_2*x488))+(((0.07280355)*x501))+(((-0.9746)*gclwh4_8*x487))+(((-0.853)*gclwh12_2*x474))+(((0.00354979654425)*x576))+(((-0.4873)*gclwh14_8*x492))+(((-1.0)*gclwh6_2*x540)));
op[64]=((((-0.0304)*gclwh14_8*x492))+(((-1.0)*x829))+(((0.000221452524)*x576))+(((0.0304)*gclwh12_8*x475))+(((-0.0608)*gclwh12_8*x474))+(((-0.00518928)*x600))+(((-1.0)*gclwh14_8*x554))+x821+x837+(((0.0304)*gclwh4_8*x482))+(((0.000221452524)*x567))+(((0.0608)*gclwh14_8*x488))+(((-1.0)*x676))+(((0.00518928)*x527))+(((-0.0608)*gclwh4_8*x487))+(((-0.00518928)*x484)));
op[65]=((-0.01302416)+(((-1.0)*gclwh12_3*x550))+((gclwh14_11*x492))+(((-0.001545085)*gclwh14_3*x492))+(((-1.0)*gclwh12_11*x475))+((gclwh6_3*x547))+(((4.18103640120938e-5)*x548))+(((-1.0)*gclwh4_11*x482))+(((-0.01302416)*gclwh1_3*x492))+(((0.011479075)*gclwh4_3*x487))+(((0.011479075)*gclwh1_3*x488))+(((0.011479075)*gclwh12_3*x474))+(((-0.01302416)*gclwh3_3*x475))+(((-1.0)*x848))+(((0.011479075)*gclwh3_3*x474))+(((-0.00097973905125)*x530))+(((-1.0)*x830))+((gclwh3_3*x550))+(((0.001545085)*gclwh4_3*x482))+x824+x849+(((-0.011479075)*gclwh14_3*x488))+(((-4.18103640120938e-5)*x541))+(((0.001545085)*gclwh12_3*x475))+(((4.18103640120938e-5)*gclwh14_3*r20)));
op[66]=((-0.22085761)+((gclwh7_1*pp*x476))+(((-0.427145975)*gclwh13_1*x474))+((gclwh5_10*x510))+(((-0.22085761)*gclwh2_1*x475))+(((0.000621742530375)*x529))+(((-1.0)*gclwh2_1*x474*x518))+((x485*x539))+(((0.427145975)*gclwh2_1*x474))+(((0.206288365)*gclwh5_1*x482))+(((-1.0)*gclwh15_9*npx*x473))+(((-0.000621742530375)*x500))+((x473*x499))+(((-0.427145975)*gclwh5_1*x487))+(((-1.0)*gclwh0_1*x488*x518))+((gclwh11_0*rxp2_2*x473))+((gclwh5_10*x482))+((x485*x552))+((gclwh5_9*npz*x473))+((gclwh5_1*x487*x518))+(((2.0)*x474*x477))+((gclwh2_0*npy*x688))+((gclwh0_1*x563))+(((-1.0)*gclwh15_1*x488*x518))+((x475*x506))+((gclwh2_1*x502))+((gclwh0_1*x686))+((gclwh13_9*npy*x473))+(((-1.0)*gclwh7_0*rxp1_2*x473))+(((-1.0)*pp*x490))+((gclwh15_1*x686))+(((-1.0)*gclwh15_0*r20*x485))+(((-1.0)*gclwh5_1*x788))+(((-0.0072846225)*x490))+(((-0.206288365)*gclwh15_1*x492))+((gclwh0_0*r20*x485))+((gclwh15_0*npx*x688))+(((-0.08535)*gclwh5_9*x482))+((gclwh9_10*x568))+(((-1.0)*gclwh15_0*x492*x511))+(((-1.0)*gclwh7_1*x581))+((gclwh0_0*npx*x688))+x473+(((0.00155579859013472)*gclwh5_1*r22))+(((0.427145975)*gclwh15_1*x488))+((gclwh2_1*x687))+(((-0.22085761)*gclwh0_1*x492))+(((0.427145975)*gclwh0_1*x488))+(((0.206288365)*gclwh13_1*x475))+(((-1.0)*gclwh13_0*npy*x688))+((gclwh11_10*x514))+((gclwh13_10*x496))+(((-1.0)*x474*x604))+(((-1.0)*gclwh2_0*x475*x511))+(((-1.0)*gclwh7_10*x476))+(((-0.000621742530375)*x606))+(((-1.0)*gclwh13_1*x687))+(((-1.0)*gclwh11_1*rxp2_2*x513))+(((0.08535)*gclwh15_9*x492))+(((-1.0)*x487*x597))+(((-0.08535)*gclwh13_9*x475))+(((2.0)*gclwh15_10*x488))+((gclwh13_10*x475))+((x485*x498))+((gclwh13_1*x502))+(((-1.0)*gclwh5_0*npz*x688))+(((-1.0)*gclwh0_0*x492*x511))+(((-1.0)*gclwh15_1*x563))+((x482*x515))+((gclwh11_1*x517)));
op[67]=((((0.9138)*gclwh15_9*x488))+((x488*x493))+((gclwh7_7*x571))+(((-0.9138)*gclwh13_9*x474))+(((-1.0)*gclwh9_7*x559))+(((0.11)*gclwh5_15*x482))+(((0.07799283)*x609))+(((-0.07799283)*x615))+(((-0.000801308475)*x512))+(((-1.0)*x487*x582))+(((-0.9138)*gclwh5_9*x487))+(((0.000801308475)*x565))+(((-1.0)*x474*x598))+(((-0.4569)*gclwh15_9*x492))+(((-0.00332834402025)*x529))+(((0.07799283)*x479))+((gclwh13_9*x556))+(((-0.11)*gclwh15_15*x492))+(((0.4569)*gclwh5_9*x482))+((gclwh13_15*x531))+(((0.00332834402025)*x500))+(((0.11)*gclwh13_15*x475))+(((0.4569)*gclwh13_9*x475))+(((-1.0)*gclwh11_7*x508)));
op[68]=(((gclwh15_0*x535))+(((0.853)*gclwh5_0*x487))+(((-0.4265)*gclwh13_0*x475))+(((-0.00310689149625)*x539))+(((0.853)*gclwh13_0*x474))+(((-0.07280355)*x499))+(((-0.9746)*gclwh5_9*x487))+(((0.4265)*gclwh15_0*x492))+(((-1.0)*gclwh0_0*x535))+(((0.9746)*gclwh15_9*x488))+(((-1.0)*gclwh11_0*x560))+(((-1.0)*x827))+(((0.00354979654425)*x500))+(((0.4265)*gclwh0_0*x492))+(((-0.853)*gclwh0_0*x488))+(((0.4265)*gclwh2_0*x475))+((gclwh7_0*x540))+(((-0.853)*gclwh15_0*x488))+(((0.4873)*gclwh5_9*x482))+(((-0.9746)*gclwh13_9*x474))+(((-0.00310689149625)*x498))+x838+(((-0.00354979654425)*x529))+(((0.4873)*gclwh13_9*x475))+(((-0.4265)*gclwh5_0*x482))+(((-0.4873)*gclwh15_9*x492))+(((0.00354979654425)*x606))+(((-0.00310689149625)*x552))+(((-0.853)*gclwh2_0*x474)));
IkReal x850=pz*pz;
IkReal x851=pp*pp;
IkReal x852=(gclwh13_9*r21);
IkReal x853=((0.0304)*pp);
IkReal x854=(npy*pz);
IkReal x855=(npx*pz);
IkReal x856=((2.0)*gclwh15_10);
IkReal x857=(gclwh15_10*r20);
IkReal x858=((0.1707)*pz);
IkReal x859=(gclwh13_10*r21);
IkReal x860=(gclwh15_1*r20);
IkReal x861=(gclwh15_9*r20);
IkReal x862=(gclwh2_1*pp);
IkReal x863=(gclwh7_1*rxp1_2);
IkReal x864=((0.11)*pp);
IkReal x865=(gclwh5_15*r22);
IkReal x866=(pp*r20);
IkReal x867=(gclwh15_15*r20);
IkReal x868=(npz*pz);
IkReal x869=(gclwh11_10*rxp2_2);
IkReal x870=((4.18103640120938e-5)*r21);
IkReal x871=(gclwh5_9*r22);
IkReal x872=((0.08535)*pp);
IkReal x873=(pp*r21);
IkReal x874=((0.1707)*pp);
IkReal x875=((2.0)*gclwh5_10);
IkReal x876=(gclwh13_15*r21);
IkReal x877=(gclwh2_0*pz);
IkReal x878=(gclwh11_1*rxp2_2);
IkReal x879=(gclwh5_1*r22);
IkReal x880=((0.001545085)*pp);
IkReal x881=(gclwh5_10*r22);
IkReal x882=(gclwh9_10*rxp0_2);
IkReal x883=(gclwh7_10*rxp1_2);
IkReal x884=(gclwh13_0*pz);
IkReal x885=((2.0)*pp);
IkReal x886=((0.0072846225)*r21);
IkReal x887=(pp*r22);
IkReal x888=(gclwh0_1*r20);
IkReal x889=((1.0)*pz);
IkReal x890=((1.0)*pp);
IkReal x891=(gclwh5_0*pz);
IkReal x892=((2.0)*x850);
IkReal x893=((1.0)*x851);
IkReal x894=((0.0072846225)*pz*r20);
op[69]=((0.05197952)+(((-1.0)*x859*x885))+(((-4.0)*gclwh15_10*x855))+(((-0.014569245)*x881))+(((0.014569245)*x857))+(((-0.3414)*x869))+((x856*x866))+(((-0.014569245)*x859))+(((4.0)*gclwh13_10*x854))+(((0.3414)*x883))+(((-0.3414)*x882))+(((4.0)*gclwh5_10*x868))+(((-1.0)*x875*x887)));
op[70]=((0.01302416)+((gclwh0_0*x894))+(((-1.0)*gclwh13_1*r21*x893))+(((-1.0)*x879*x880))+(((-1.0)*gclwh0_1*x855*x885))+(((-1.0)*gclwh15_0*x894))+((gclwh2_0*npy*x892))+((gclwh15_0*npx*x892))+(((-1.0)*x879*x893))+(((-1.0)*gclwh13_0*npy*x892))+(((0.0072846225)*x857))+((x868*x875))+(((-1.0)*x871*x872))+(((0.1707)*gclwh13_9*x854))+(((-1.0)*x859*x890))+((x863*x874))+(((0.1707)*x883))+(((0.011479075)*gclwh15_1*x855))+(((4.18103640120938e-5)*x888))+((gclwh13_1*x854*x885))+((x877*x886))+(((-0.00097973905125)*x863))+(((-1.0)*x881*x890))+(((-0.1707)*x882))+((x851*x860))+(((-1.0)*x852*x872))+(((2.0)*gclwh13_10*x854))+(((-0.011479075)*gclwh5_1*x868))+(((-1.0)*x873*x877))+((gclwh5_9*npz*x858))+(((0.0072846225)*r22*x891))+(((0.00097973905125)*x878))+(((0.000621742530375)*x861))+(((4.18103640120938e-5)*x879))+((gclwh2_1*r21*x851))+((gclwh13_1*x870))+((gclwh11_0*rxp2_2*x858))+(((-0.0072846225)*x859))+(((-0.001545085)*gclwh13_1*x873))+((gclwh2_1*x870))+(((-0.1707)*gclwh15_9*x855))+(((-0.01302416)*gclwh0_1*x866))+(((-1.0)*gclwh15_1*x855*x885))+((x861*x872))+(((-0.0072846225)*x881))+(((-0.000621742530375)*x852))+(((-1.0)*x874*x878))+(((-1.0)*x855*x856))+((x851*x888))+(((0.011479075)*gclwh2_1*x854))+x858+((gclwh0_0*npx*x892))+(((-2.0)*x854*x862))+((x860*x880))+(((-0.1707)*x869))+(((-1.0)*gclwh15_0*x866*x889))+(((-1.0)*gclwh7_0*rxp1_2*x858))+(((0.011479075)*gclwh0_1*x855))+(((-1.0)*gclwh5_0*npz*x892))+(((-0.011479075)*gclwh13_1*x854))+((gclwh9_0*rxp0_2*x858))+((gclwh5_1*x868*x885))+(((-0.000621742530375)*x871))+(((-1.0)*gclwh0_0*x866*x889))+(((-0.01302416)*r21*x862))+((x873*x884))+((pp*x857))+((x884*x886))+((x887*x891))+(((-4.18103640120938e-5)*x860)));
op[71]=((((0.00518928)*gclwh11_13*rxp2_2))+(((0.000221452524)*x861))+(((0.018777)*gclwh7_7*rxp1_2))+(((-0.000221452524)*x871))+(((-0.018777)*gclwh9_7*rxp0_2))+(((-0.000801308475)*x876))+(((-0.000801308475)*x865))+(((-1.0)*x852*x853))+(((-1.0)*x853*x871))+(((-0.000221452524)*x852))+(((0.22)*gclwh5_15*x868))+(((0.00518928)*gclwh9_13*rxp0_2))+(((-1.0)*x864*x865))+(((-1.0)*x864*x876))+(((-0.0608)*gclwh15_9*x855))+((x853*x861))+(((-0.018777)*gclwh11_7*rxp2_2))+(((0.0608)*gclwh5_9*x868))+(((0.0608)*gclwh13_9*x854))+(((0.22)*gclwh13_15*x854))+(((-0.00518928)*gclwh7_13*rxp1_2))+((x864*x867))+(((-0.22)*gclwh15_15*x855))+(((0.000801308475)*x867)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x895=htj1*htj1;
CheckValue<IkReal> x896=IKPowWithIntegerCheck(((1.0)+x895),-1);
if(!x896.valid){
continue;
}
cj1array[numsolutions]=((x896.value)*(((1.0)+(((-1.0)*x895)))));
CheckValue<IkReal> x897=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x897.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x897.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x898=htj2*htj2;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(((1.0)+x898),-1);
if(!x899.valid){
continue;
}
cj2array[numsolutions]=((x899.value)*(((1.0)+(((-1.0)*x898)))));
CheckValue<IkReal> x900=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x900.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x900.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x901=htj3*htj3;
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((1.0)+x901),-1);
if(!x902.valid){
continue;
}
cj3array[numsolutions]=((x902.value)*(((1.0)+(((-1.0)*x901)))));
CheckValue<IkReal> x903=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x903.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x903.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x904=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x904);
rxp1_0=(pz*r11);
rxp1_1=(r01*x904);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x905=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x905);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(r22,-1);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907=IKPowWithIntegerCheck(sj3,-1);
if(!x907.valid){
continue;
}
sj4array[0]=((x906.value)*(x907.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x908=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x908);
rxp1_0=(pz*r11);
rxp1_1=(r01*x908);
IkReal x909=((16.0)*sj4);
IkReal x910=(cj1*cj2);
IkReal x911=((4.0)*sj3);
IkReal x912=((8.0)*sj4);
IkReal x913=((4.0)*cj4);
IkReal x914=(sj1*sj2);
IkReal x915=((4.0)*sj4);
IkReal x916=(cj3*r02);
IkReal x917=((16.0)*sj3);
IkReal x918=((8.0)*sj3);
IkReal x919=((12.0)*cj4);
IkReal x920=((12.0)*sj4);
IkReal x921=(cj3*r12);
IkReal x922=(r11*x911);
IkReal x923=(r01*x911);
IkReal x924=(r01*x914);
IkReal x925=(cj3*cj4*r01);
IkReal x926=(cj3*cj4*r11);
IkReal x927=(cj3*r10*x913);
IkReal x928=(x920*x921);
IkReal x929=(cj3*r00*x913);
IkReal x930=(x916*x920);
IkReal x931=(r00*x914*x915);
IkReal x932=(r02*x914*x919);
IkReal x933=(r00*x910*x915);
IkReal x934=(r02*x910*x919);
IkReal x935=(r10*x914*x915);
IkReal x936=(r12*x910*x919);
IkReal x937=(r12*x914*x919);
IkReal x938=(r10*x910*x915);
IkReal x939=(x933+x922);
IkReal x940=(x935+x923);
IkReal x941=(x931+x927);
IkReal x942=(x934+x928);
IkReal x943=(x938+x929);
IkReal x944=(x937+x930);
j5eval[0]=((IKabs(((((-1.0)*x912*x924))+((r01*x910*x912))+(((-8.0)*x926))+(((-1.0)*r10*x918)))))+(((0.5)*(IKabs(((((-1.0)*x944))+(((-1.0)*x943))+x936+x940)))))+(((0.5)*(IKabs(((((-1.0)*x940))+(((-1.0)*x944))+x936+x943)))))+(((0.5)*(IKabs(((((-1.0)*r00*x917))+((r11*x909*x914))+(((-16.0)*x925))+(((-1.0)*r11*x909*x910)))))))+(((0.5)*(IKabs(((((-1.0)*x942))+x932+x941+(((-1.0)*x939)))))))+(((0.5)*(IKabs(((((-1.0)*x943))+((r12*x910*x913))+(((-1.0)*r12*x913*x914))+x940+(((-1.0)*x915*x916)))))))+(IKabs(((((-8.0)*x925))+(((-1.0)*r00*x918))+((r11*x912*x914))+(((-1.0)*r11*x910*x912)))))+(((0.5)*(IKabs(((((-1.0)*x942))+(((-1.0)*x941))+x939+x932)))))+(((0.5)*(IKabs((((r01*x909*x910))+(((-1.0)*x909*x924))+(((-1.0)*r10*x917))+(((-16.0)*x926)))))))+(((0.5)*(IKabs(((((-1.0)*x941))+((r02*x913*x914))+(((-1.0)*r02*x910*x913))+(((-1.0)*x915*x921))+x939))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x945=(r10*sj3);
IkReal x946=(r01*sj4);
IkReal x947=(cj1*cj2);
IkReal x948=(cj3*cj4);
IkReal x949=(sj1*sj2);
IkReal x950=(cj4*r02);
IkReal x951=((4.0)*r11*sj3);
IkReal x952=(cj3*r12*sj4);
IkReal x953=((4.0)*r00*sj4);
IkReal x954=((4.0)*r10*x948);
IkReal x955=((12.0)*x952);
IkReal x956=((4.0)*x952);
IkReal x957=(x947*x953);
IkReal x958=(x949*x953);
IkReal x959=((12.0)*x949*x950);
IkReal x960=((12.0)*x947*x950);
IkReal x961=((4.0)*x949*x950);
IkReal x962=((4.0)*x947*x950);
IkReal x963=(x957+x951);
IkReal x964=(x958+x954);
IkReal x965=(x962+x956);
IkReal x966=(x960+x955);
IkReal x967=((((-8.0)*r11*x948))+(((-8.0)*x945))+(((-8.0)*x946*x949))+(((8.0)*x946*x947)));
op[0]=(x963+x961+(((-1.0)*x965))+(((-1.0)*x964)));
op[1]=x967;
op[2]=(x963+x959+(((-1.0)*x964))+(((-1.0)*x966)));
op[3]=((((16.0)*x946*x947))+(((-16.0)*x946*x949))+(((-16.0)*x945))+(((-16.0)*r11*x948)));
op[4]=(x964+x959+(((-1.0)*x966))+(((-1.0)*x963)));
op[5]=x967;
op[6]=(x961+x964+(((-1.0)*x965))+(((-1.0)*x963)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x968=(cj1*cj2);
IkReal x969=((4.0)*cj4);
IkReal x970=(sj1*sj2);
IkReal x971=((4.0)*sj4);
IkReal x972=(r00*sj3);
IkReal x973=(cj3*r02);
IkReal x974=((4.0)*r01*sj3);
IkReal x975=((16.0)*r11*sj4);
IkReal x976=(cj3*cj4*r01);
IkReal x977=((12.0)*cj4*r12);
IkReal x978=((8.0)*r11*sj4);
IkReal x979=(cj3*r00*x969);
IkReal x980=((12.0)*sj4*x973);
IkReal x981=(x971*x973);
IkReal x982=(r10*x968*x971);
IkReal x983=(r10*x970*x971);
IkReal x984=(x968*x977);
IkReal x985=(x970*x977);
IkReal x986=(r12*x968*x969);
IkReal x987=(r12*x969*x970);
IkReal x988=(x983+x974);
IkReal x989=(x982+x979);
IkReal x990=(x987+x981);
IkReal x991=(x985+x980);
IkReal x992=((((-8.0)*x976))+(((-8.0)*x972))+((x970*x978))+(((-1.0)*x968*x978)));
j5evalpoly[0]=((((-1.0)*x988))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x989))+(((-1.0)*x991))+x988+x984))))+(((htj5*htj5)*(((((-1.0)*x988))+(((-1.0)*x991))+x989+x984))))+(((-1.0)*x990))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x989))+(((-1.0)*x990))+x988+x986))))+(((htj5*htj5*htj5)*(((((-16.0)*x976))+(((-16.0)*x972))+((x970*x975))+(((-1.0)*x968*x975))))))+((htj5*x992))+x989+x986+((x992*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x993=(cj5*sj4);
IkReal x994=(sj4*sj5);
if( IKabs((((r00*x993))+(((-1.0)*r01*x994))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x993))+((r11*x994))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x993))+(((-1.0)*r01*x994))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x993))+((r11*x994))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x993))+(((-1.0)*r01*x994))+((cj4*r02))), ((((-1.0)*r10*x993))+((r11*x994))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x995=IKsin(j0);
IkReal x996=IKcos(j0);
IkReal x997=(r02*sj4);
IkReal x998=((1.0)*sj3);
IkReal x999=(r12*sj4);
IkReal x1000=(cj1*cj2);
IkReal x1001=((1.0)*cj3);
IkReal x1002=((1.0)*sj1);
IkReal x1003=(r11*sj5);
IkReal x1004=(cj5*r01);
IkReal x1005=(cj5*r11);
IkReal x1006=(r00*sj5);
IkReal x1007=((0.24365)*cj1);
IkReal x1008=(cj2*sj1);
IkReal x1009=(r10*sj5);
IkReal x1010=((1.0)*cj4);
IkReal x1011=((0.21325)*x995);
IkReal x1012=(cj4*cj5*r00);
IkReal x1013=(sj2*x995);
IkReal x1014=(cj4*cj5*r10);
IkReal x1015=(cj4*r01*sj5);
IkReal x1016=(sj2*x996);
IkReal x1017=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x1010))+((r01*sj4*sj5))+(((-1.0)*r00*x1017))+x995);
evalcond[1]=(((sj4*x1003))+(((-1.0)*x996))+(((-1.0)*r12*x1010))+(((-1.0)*r10*x1017)));
evalcond[2]=((((0.21325)*sj1*x1016))+(((0.11)*x995))+(((-1.0)*x1007*x996))+(((-1.0)*px))+(((-0.21325)*x1000*x996))+(((-0.08535)*x1006))+(((-0.08535)*x1004)));
evalcond[3]=(((sj1*sj2*x1011))+(((-0.11)*x996))+(((-1.0)*x1007*x995))+(((-1.0)*py))+(((-0.08535)*x1005))+(((-0.08535)*x1009))+(((-1.0)*x1000*x1011)));
evalcond[4]=(((cj3*x1006))+((cj3*x1004))+(((-1.0)*x997*x998))+((sj3*x1012))+((x1008*x996))+((cj1*x1016))+(((-1.0)*x1015*x998)));
evalcond[5]=(((x1000*x996))+((cj3*x1015))+((sj3*x1004))+((sj3*x1006))+(((-1.0)*x1001*x1012))+((cj3*x997))+(((-1.0)*x1002*x1016)));
evalcond[6]=(((cj3*x1009))+((cj3*x1005))+(((-1.0)*cj4*x1003*x998))+((sj3*x1014))+((x1008*x995))+((cj1*x1013))+(((-1.0)*x998*x999)));
evalcond[7]=(((x1000*x995))+((sj3*x1005))+((sj3*x1009))+(((-1.0)*x1001*x1014))+((cj3*cj4*x1003))+((cj3*x999))+(((-1.0)*x1002*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(cj3,-1);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(r22,-1);
if(!x1019.valid){
continue;
}
sj4array[0]=((-1.0)*(x1018.value)*(x1019.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1020=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1020);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1020);
IkReal x1021=((16.0)*sj4);
IkReal x1022=(cj1*cj2);
IkReal x1023=((4.0)*sj3);
IkReal x1024=((8.0)*sj4);
IkReal x1025=((4.0)*cj4);
IkReal x1026=(sj1*sj2);
IkReal x1027=((4.0)*sj4);
IkReal x1028=(cj3*r02);
IkReal x1029=((16.0)*sj3);
IkReal x1030=((8.0)*sj3);
IkReal x1031=((12.0)*cj4);
IkReal x1032=((12.0)*sj4);
IkReal x1033=(cj3*r12);
IkReal x1034=(r11*x1023);
IkReal x1035=(r01*x1023);
IkReal x1036=(r01*x1026);
IkReal x1037=(cj3*cj4*r01);
IkReal x1038=(cj3*cj4*r11);
IkReal x1039=(cj3*r10*x1025);
IkReal x1040=(x1032*x1033);
IkReal x1041=(cj3*r00*x1025);
IkReal x1042=(x1028*x1032);
IkReal x1043=(r00*x1026*x1027);
IkReal x1044=(r02*x1026*x1031);
IkReal x1045=(r00*x1022*x1027);
IkReal x1046=(r02*x1022*x1031);
IkReal x1047=(r10*x1026*x1027);
IkReal x1048=(r12*x1022*x1031);
IkReal x1049=(r12*x1026*x1031);
IkReal x1050=(r10*x1022*x1027);
IkReal x1051=(x1045+x1034);
IkReal x1052=(x1047+x1035);
IkReal x1053=(x1043+x1039);
IkReal x1054=(x1040+x1046);
IkReal x1055=(x1050+x1041);
IkReal x1056=(x1042+x1049);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1052))+x1055+x1048)))))+(((0.5)*(IKabs(((((-16.0)*x1038))+(((-1.0)*x1021*x1036))+((r01*x1021*x1022))+(((-1.0)*r10*x1029)))))))+(((0.5)*(IKabs(((((-1.0)*x1027*x1033))+(((-1.0)*x1053))+x1051+((r02*x1025*x1026))+(((-1.0)*r02*x1022*x1025)))))))+(((0.5)*(IKabs(((((-1.0)*x1055))+x1052+(((-1.0)*r12*x1025*x1026))+((r12*x1022*x1025))+(((-1.0)*x1027*x1028)))))))+(IKabs(((((-1.0)*x1024*x1036))+(((-1.0)*r10*x1030))+(((-8.0)*x1038))+((r01*x1022*x1024)))))+(((0.5)*(IKabs(((((-1.0)*r11*x1021*x1022))+(((-16.0)*x1037))+((r11*x1021*x1026))+(((-1.0)*r00*x1029)))))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1053))+x1051+x1044)))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1051))+x1053+x1044)))))+(((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1055))+x1052+x1048)))))+(IKabs(((((-1.0)*r11*x1022*x1024))+((r11*x1024*x1026))+(((-8.0)*x1037))+(((-1.0)*r00*x1030))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1057=(r10*sj3);
IkReal x1058=(r01*sj4);
IkReal x1059=(cj1*cj2);
IkReal x1060=(cj3*cj4);
IkReal x1061=(sj1*sj2);
IkReal x1062=(cj4*r02);
IkReal x1063=((4.0)*r11*sj3);
IkReal x1064=(cj3*r12*sj4);
IkReal x1065=((4.0)*r00*sj4);
IkReal x1066=((4.0)*r10*x1060);
IkReal x1067=((12.0)*x1064);
IkReal x1068=((4.0)*x1064);
IkReal x1069=(x1059*x1065);
IkReal x1070=(x1061*x1065);
IkReal x1071=((12.0)*x1061*x1062);
IkReal x1072=((12.0)*x1059*x1062);
IkReal x1073=((4.0)*x1061*x1062);
IkReal x1074=((4.0)*x1059*x1062);
IkReal x1075=(x1069+x1063);
IkReal x1076=(x1070+x1066);
IkReal x1077=(x1074+x1068);
IkReal x1078=(x1072+x1067);
IkReal x1079=((((-8.0)*r11*x1060))+(((-8.0)*x1057))+(((-8.0)*x1058*x1061))+(((8.0)*x1058*x1059)));
op[0]=(x1075+x1073+(((-1.0)*x1077))+(((-1.0)*x1076)));
op[1]=x1079;
op[2]=(x1075+x1071+(((-1.0)*x1076))+(((-1.0)*x1078)));
op[3]=((((16.0)*x1058*x1059))+(((-16.0)*x1058*x1061))+(((-16.0)*x1057))+(((-16.0)*r11*x1060)));
op[4]=(x1076+x1071+(((-1.0)*x1075))+(((-1.0)*x1078)));
op[5]=x1079;
op[6]=(x1076+x1073+(((-1.0)*x1075))+(((-1.0)*x1077)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1080=(cj1*cj2);
IkReal x1081=((4.0)*cj4);
IkReal x1082=(sj1*sj2);
IkReal x1083=((4.0)*sj4);
IkReal x1084=(r00*sj3);
IkReal x1085=(cj3*r02);
IkReal x1086=((4.0)*r01*sj3);
IkReal x1087=((16.0)*r11*sj4);
IkReal x1088=(cj3*cj4*r01);
IkReal x1089=((12.0)*cj4*r12);
IkReal x1090=((8.0)*r11*sj4);
IkReal x1091=(cj3*r00*x1081);
IkReal x1092=((12.0)*sj4*x1085);
IkReal x1093=(x1083*x1085);
IkReal x1094=(r10*x1080*x1083);
IkReal x1095=(r10*x1082*x1083);
IkReal x1096=(x1080*x1089);
IkReal x1097=(x1082*x1089);
IkReal x1098=(r12*x1080*x1081);
IkReal x1099=(r12*x1081*x1082);
IkReal x1100=(x1095+x1086);
IkReal x1101=(x1094+x1091);
IkReal x1102=(x1093+x1099);
IkReal x1103=(x1097+x1092);
IkReal x1104=((((-1.0)*x1080*x1090))+((x1082*x1090))+(((-8.0)*x1088))+(((-8.0)*x1084)));
j5evalpoly[0]=(x1101+x1098+(((htj5*htj5*htj5)*((((x1082*x1087))+(((-1.0)*x1080*x1087))+(((-16.0)*x1084))+(((-16.0)*x1088))))))+(((htj5*htj5)*((x1101+x1096+(((-1.0)*x1100))+(((-1.0)*x1103))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1100+x1098+(((-1.0)*x1102))+(((-1.0)*x1101))))))+(((htj5*htj5*htj5*htj5)*((x1100+x1096+(((-1.0)*x1103))+(((-1.0)*x1101))))))+((x1104*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1100))+(((-1.0)*x1102))+((htj5*x1104)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1105=(cj5*sj4);
IkReal x1106=(sj4*sj5);
if( IKabs((((r00*x1105))+(((-1.0)*r01*x1106))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1105))+((r11*x1106))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1105))+(((-1.0)*r01*x1106))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1105))+((r11*x1106))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1105))+(((-1.0)*r01*x1106))+((cj4*r02))), ((((-1.0)*r10*x1105))+((r11*x1106))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1107=IKsin(j0);
IkReal x1108=IKcos(j0);
IkReal x1109=(r02*sj4);
IkReal x1110=((1.0)*sj3);
IkReal x1111=(r12*sj4);
IkReal x1112=(cj1*cj2);
IkReal x1113=((1.0)*cj3);
IkReal x1114=((1.0)*sj1);
IkReal x1115=(r11*sj5);
IkReal x1116=(cj5*r01);
IkReal x1117=(cj5*r11);
IkReal x1118=(r00*sj5);
IkReal x1119=((0.24365)*cj1);
IkReal x1120=(cj2*sj1);
IkReal x1121=(r10*sj5);
IkReal x1122=((1.0)*cj4);
IkReal x1123=((0.21325)*x1107);
IkReal x1124=(cj4*cj5*r00);
IkReal x1125=(sj2*x1107);
IkReal x1126=(cj4*cj5*r10);
IkReal x1127=(cj4*r01*sj5);
IkReal x1128=(sj2*x1108);
IkReal x1129=((1.0)*cj5*sj4);
evalcond[0]=(x1107+((r01*sj4*sj5))+(((-1.0)*r00*x1129))+(((-1.0)*r02*x1122)));
evalcond[1]=((((-1.0)*r12*x1122))+(((-1.0)*r10*x1129))+(((-1.0)*x1108))+((sj4*x1115)));
evalcond[2]=((((-0.21325)*x1108*x1112))+(((0.11)*x1107))+(((-0.08535)*x1118))+(((-0.08535)*x1116))+(((-1.0)*px))+(((-1.0)*x1108*x1119))+(((0.21325)*sj1*x1128)));
evalcond[3]=((((-0.08535)*x1121))+(((-1.0)*x1112*x1123))+((sj1*sj2*x1123))+(((-0.08535)*x1117))+(((-1.0)*py))+(((-1.0)*x1107*x1119))+(((-0.11)*x1108)));
evalcond[4]=((((-1.0)*x1109*x1110))+((x1108*x1120))+(((-1.0)*x1110*x1127))+((cj1*x1128))+((sj3*x1124))+((cj3*x1116))+((cj3*x1118)));
evalcond[5]=(((x1108*x1112))+((sj3*x1116))+((sj3*x1118))+(((-1.0)*x1114*x1128))+(((-1.0)*x1113*x1124))+((cj3*x1109))+((cj3*x1127)));
evalcond[6]=(((x1107*x1120))+((cj1*x1125))+((sj3*x1126))+(((-1.0)*x1110*x1111))+(((-1.0)*cj4*x1110*x1115))+((cj3*x1117))+((cj3*x1121)));
evalcond[7]=(((sj3*x1117))+((cj3*cj4*x1115))+(((-1.0)*x1114*x1125))+(((-1.0)*x1113*x1126))+((sj3*x1121))+((cj3*x1111))+((x1107*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1130=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1130);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1130);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1131=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1131);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1131);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1134=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1134);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1134);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
<<<<<<< HEAD
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(r22,-1);
if(!x1132.valid){
continue;
}
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(sj3,-1);
if(!x1133.valid){
continue;
}
sj4array[0]=((x1132.value)*(x1133.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
=======
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(r22,-1);
if(!x1135.valid){
continue;
}
sj4array[0]=((-1.0)*(x1135.value)*((((cj2*sj1))+((cj1*sj2)))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1134=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1134);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1134);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
<<<<<<< HEAD
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1135=((4.0)*r01);
IkReal x1136=((16.0)*r00);
IkReal x1137=(cj3*sj2);
IkReal x1138=((8.0)*r00);
IkReal x1139=(cj2*cj3);
IkReal x1140=(cj4*r01);
IkReal x1141=((16.0)*cj1);
IkReal x1142=((8.0)*sj1);
IkReal x1143=((16.0)*sj1);
IkReal x1144=((8.0)*cj1);
IkReal x1145=(cj2*sj3);
IkReal x1146=(sj2*sj3);
IkReal x1147=(sj1*x1145);
IkReal x1148=((4.0)*cj4*r00);
IkReal x1149=(cj1*x1146);
IkReal x1150=(((sj1*x1135*x1137))+((sj1*x1146*x1148))+((x1135*x1149))+((x1135*x1147)));
IkReal x1151=(((cj1*x1135*x1139))+((cj1*x1145*x1148))+((cj1*x1137*x1148))+((sj1*x1139*x1148)));
IkReal x1152=(x1150+(((-1.0)*x1151)));
IkReal x1153=((((-1.0)*x1139*x1140*x1142))+((cj1*x1138*x1139))+(((-1.0)*sj1*x1137*x1138))+((x1140*x1142*x1146))+(((-1.0)*x1140*x1144*x1145))+(((-1.0)*x1137*x1140*x1144))+(((-1.0)*x1138*x1147))+(((-1.0)*x1138*x1149)));
IkReal x1154=(x1151+(((-1.0)*x1150)));
op[0]=x1152;
op[1]=x1153;
op[2]=x1152;
op[3]=((((-1.0)*x1136*x1147))+(((-1.0)*x1136*x1149))+((x1140*x1143*x1146))+(((-1.0)*x1140*x1141*x1145))+(((-1.0)*x1139*x1140*x1143))+(((-1.0)*sj1*x1136*x1137))+((cj1*x1136*x1139))+(((-1.0)*x1137*x1140*x1141)));
op[4]=x1154;
op[5]=x1153;
op[6]=x1154;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
=======
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1138 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1138.valid){
continue;
}
IkReal x1137=x1138.value;
j5array[0]=((-1.0)*x1137);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1137)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
<<<<<<< HEAD
IkReal x1155=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1155))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1155))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1155))));
=======
IkReal x1139=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1139))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1139))+((cj5*r00*sj4))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1139))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1139))+((cj5*r00*sj4))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1139))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
<<<<<<< HEAD
IkReal evalcond[8];
IkReal x1156=IKcos(j0);
IkReal x1157=IKsin(j0);
IkReal x1158=((1.0)*cj3);
IkReal x1159=((1.0)*sj1);
IkReal x1160=(r11*sj5);
IkReal x1161=(cj5*r01);
IkReal x1162=(r01*sj5);
IkReal x1163=((0.21325)*sj1);
IkReal x1164=(cj5*r11);
IkReal x1165=(cj3*cj4);
IkReal x1166=(r00*sj5);
IkReal x1167=((0.24365)*cj1);
IkReal x1168=(r10*sj5);
IkReal x1169=(cj4*cj5*r00);
IkReal x1170=(sj2*x1157);
IkReal x1171=(cj4*cj5*r10);
IkReal x1172=((1.0)*cj4*sj3);
IkReal x1173=(cj2*x1156);
IkReal x1174=(sj2*x1156);
IkReal x1175=((1.0)*cj5*sj4);
IkReal x1176=(cj1*cj2*x1157);
evalcond[0]=(x1157+((sj4*x1162))+(((-1.0)*r00*x1175)));
evalcond[1]=(((sj4*x1160))+(((-1.0)*x1156))+(((-1.0)*r10*x1175)));
evalcond[2]=(((cj1*x1174))+((sj1*x1173))+(((-1.0)*x1162*x1172))+((cj3*x1166))+((cj3*x1161))+((sj3*x1169)));
evalcond[3]=(((sj3*x1171))+((cj1*x1170))+((cj2*sj1*x1157))+((cj3*x1164))+((cj3*x1168))+(((-1.0)*x1160*x1172)));
evalcond[4]=(((cj1*x1173))+(((-1.0)*x1158*x1169))+(((-1.0)*x1159*x1174))+((x1162*x1165))+((sj3*x1166))+((sj3*x1161)));
evalcond[5]=(x1176+(((-1.0)*x1158*x1171))+(((-1.0)*x1159*x1170))+((x1160*x1165))+((sj3*x1164))+((sj3*x1168)));
evalcond[6]=((((-1.0)*x1156*x1167))+(((-0.08535)*x1161))+(((-0.08535)*x1166))+((x1163*x1174))+(((-1.0)*px))+(((0.11)*x1157))+(((-0.21325)*cj1*x1173)));
evalcond[7]=((((-0.08535)*x1164))+(((-0.08535)*x1168))+((x1163*x1170))+(((-0.11)*x1156))+(((-1.0)*py))+(((-0.21325)*x1176))+(((-1.0)*x1157*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[6];
IkReal x1140=IKcos(j0);
IkReal x1141=IKsin(j0);
IkReal x1142=(cj5*r01);
IkReal x1143=(sj4*sj5);
IkReal x1144=(cj2*sj1);
IkReal x1145=(cj5*r11);
IkReal x1146=((0.24365)*cj1);
IkReal x1147=(cj1*sj2);
IkReal x1148=(r00*sj5);
IkReal x1149=(r10*sj5);
IkReal x1150=((1.0)*cj5*sj4);
evalcond[0]=(x1141+(((-1.0)*r00*x1150))+((r01*x1143)));
evalcond[1]=(((r11*x1143))+(((-1.0)*x1140))+(((-1.0)*r10*x1150)));
evalcond[2]=(((x1140*x1144))+((x1140*x1147))+x1142+x1148);
evalcond[3]=(x1145+x1149+((x1141*x1144))+((x1141*x1147)));
evalcond[4]=((((-1.0)*x1140*x1146))+(((0.11)*x1141))+(((-1.0)*px))+(((-0.08535)*x1142))+(((-0.08535)*x1148)));
evalcond[5]=((((-1.0)*x1141*x1146))+(((-0.11)*x1140))+(((-1.0)*py))+(((-0.08535)*x1145))+(((-0.08535)*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1151=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
<<<<<<< HEAD
CheckValue<IkReal> x1177=IKPowWithIntegerCheck(cj3,-1);
if(!x1177.valid){
continue;
}
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(r22,-1);
if(!x1178.valid){
continue;
}
sj4array[0]=((-1.0)*(x1177.value)*(x1178.value)*((((cj2*sj1))+((cj1*sj2)))));
=======
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(r22,-1);
if(!x1152.valid){
continue;
}
sj4array[0]=((x1152.value)*((((cj2*sj1))+((cj1*sj2)))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
<<<<<<< HEAD
IkReal x1179=((-1.0)*pz);
=======
IkReal x1153=((-1.0)*pz);
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
<<<<<<< HEAD
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
=======
rxp0_1=(r00*x1153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1153);
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
<<<<<<< HEAD
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1180=((4.0)*r01);
IkReal x1181=((16.0)*r00);
IkReal x1182=(cj3*sj2);
IkReal x1183=((8.0)*r00);
IkReal x1184=(cj2*cj3);
IkReal x1185=(cj4*r01);
IkReal x1186=((16.0)*cj1);
IkReal x1187=((8.0)*sj1);
IkReal x1188=((16.0)*sj1);
IkReal x1189=((8.0)*cj1);
IkReal x1190=(cj2*sj3);
IkReal x1191=(sj2*sj3);
IkReal x1192=(sj1*x1190);
IkReal x1193=((4.0)*cj4*r00);
IkReal x1194=(cj1*x1191);
IkReal x1195=(((x1180*x1192))+((x1180*x1194))+((sj1*x1180*x1182))+((sj1*x1191*x1193)));
IkReal x1196=(((cj1*x1180*x1184))+((sj1*x1184*x1193))+((cj1*x1190*x1193))+((cj1*x1182*x1193)));
IkReal x1197=(x1195+(((-1.0)*x1196)));
IkReal x1198=((((-1.0)*x1184*x1185*x1187))+(((-1.0)*x1185*x1189*x1190))+((x1185*x1187*x1191))+(((-1.0)*x1182*x1185*x1189))+(((-1.0)*x1183*x1192))+(((-1.0)*x1183*x1194))+(((-1.0)*sj1*x1182*x1183))+((cj1*x1183*x1184)));
IkReal x1199=(x1196+(((-1.0)*x1195)));
op[0]=x1197;
op[1]=x1198;
op[2]=x1197;
op[3]=((((-1.0)*x1184*x1185*x1188))+((x1185*x1188*x1191))+(((-1.0)*x1181*x1192))+(((-1.0)*x1181*x1194))+(((-1.0)*sj1*x1181*x1182))+((cj1*x1181*x1184))+(((-1.0)*x1182*x1185*x1186))+(((-1.0)*x1185*x1186*x1190)));
op[4]=x1199;
op[5]=x1198;
op[6]=x1199;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
=======
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1155 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1155.valid){
continue;
}
IkReal x1154=x1155.value;
j5array[0]=((-1.0)*x1154);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1154)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
<<<<<<< HEAD
IkReal x1200=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1200))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1200))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1200))));
=======
IkReal x1156=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1156))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1156))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1156))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
<<<<<<< HEAD
IkReal evalcond[8];
IkReal x1201=IKcos(j0);
IkReal x1202=IKsin(j0);
IkReal x1203=((1.0)*cj3);
IkReal x1204=((1.0)*sj1);
IkReal x1205=(r11*sj5);
IkReal x1206=(cj5*r01);
IkReal x1207=(r01*sj5);
IkReal x1208=((0.21325)*sj1);
IkReal x1209=(cj5*r11);
IkReal x1210=(cj3*cj4);
IkReal x1211=(r00*sj5);
IkReal x1212=((0.24365)*cj1);
IkReal x1213=(r10*sj5);
IkReal x1214=(cj4*cj5*r00);
IkReal x1215=(sj2*x1202);
IkReal x1216=(cj4*cj5*r10);
IkReal x1217=((1.0)*cj4*sj3);
IkReal x1218=(cj2*x1201);
IkReal x1219=(sj2*x1201);
IkReal x1220=((1.0)*cj5*sj4);
IkReal x1221=(cj1*cj2*x1202);
evalcond[0]=(x1202+(((-1.0)*r00*x1220))+((sj4*x1207)));
evalcond[1]=(((sj4*x1205))+(((-1.0)*x1201))+(((-1.0)*r10*x1220)));
evalcond[2]=((((-1.0)*x1207*x1217))+((sj3*x1214))+((cj3*x1211))+((cj3*x1206))+((sj1*x1218))+((cj1*x1219)));
evalcond[3]=((((-1.0)*x1205*x1217))+((sj3*x1216))+((cj3*x1213))+((cj3*x1209))+((cj1*x1215))+((cj2*sj1*x1202)));
evalcond[4]=((((-1.0)*x1204*x1219))+(((-1.0)*x1203*x1214))+((x1207*x1210))+((sj3*x1211))+((sj3*x1206))+((cj1*x1218)));
evalcond[5]=((((-1.0)*x1204*x1215))+x1221+(((-1.0)*x1203*x1216))+((sj3*x1213))+((sj3*x1209))+((x1205*x1210)));
evalcond[6]=((((-1.0)*x1201*x1212))+(((-0.08535)*x1206))+(((-1.0)*px))+(((-0.21325)*cj1*x1218))+(((0.11)*x1202))+((x1208*x1219))+(((-0.08535)*x1211)));
evalcond[7]=((((-0.08535)*x1209))+(((-1.0)*x1202*x1212))+(((-0.21325)*x1221))+(((-1.0)*py))+(((-0.11)*x1201))+((x1208*x1215))+(((-0.08535)*x1213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[6];
IkReal x1157=IKcos(j0);
IkReal x1158=IKsin(j0);
IkReal x1159=(sj4*sj5);
IkReal x1160=(cj5*r11);
IkReal x1161=(cj2*sj1);
IkReal x1162=((1.0)*sj5);
IkReal x1163=((0.24365)*cj1);
IkReal x1164=(cj1*sj2);
IkReal x1165=((1.0)*cj5);
IkReal x1166=((0.08535)*sj5);
evalcond[0]=(x1158+(((-1.0)*r00*sj4*x1165))+((r01*x1159)));
evalcond[1]=(((r11*x1159))+(((-1.0)*r10*sj4*x1165))+(((-1.0)*x1157)));
evalcond[2]=(((x1157*x1161))+((x1157*x1164))+(((-1.0)*r00*x1162))+(((-1.0)*r01*x1165)));
evalcond[3]=((((-1.0)*r10*x1162))+((x1158*x1164))+((x1158*x1161))+(((-1.0)*x1160)));
evalcond[4]=((((-0.08535)*cj5*r01))+(((-1.0)*px))+(((0.11)*x1158))+(((-1.0)*r00*x1166))+(((-1.0)*x1157*x1163)));
evalcond[5]=((((-1.0)*r10*x1166))+(((-1.0)*x1158*x1163))+(((-0.08535)*x1160))+(((-0.11)*x1157))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(r22,-1);
if(!x1168.valid){
continue;
}
sj4array[0]=((x1168.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1169=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
<<<<<<< HEAD
CheckValue<IkReal> x1224 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1224.valid){
continue;
}
IkReal x1222=((1.0)*(x1224.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1225.valid){
continue;
}
if( (((-1.0)*(x1225.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1225.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1223=((-1.0)*(IKasin(((-1.0)*(x1225.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1222))+(((-1.0)*x1223)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1222))+(((1.0)*x1223)));
=======
CheckValue<IkReal> x1171 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1171.valid){
continue;
}
IkReal x1170=x1171.value;
j5array[0]=((-1.0)*x1170);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1170)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
<<<<<<< HEAD

{
IkReal j4eval[2];
IkReal x1226=cj5*cj5;
IkReal x1227=r21*r21;
IkReal x1228=(sj3*x1226);
IkReal x1229=(((sj3*(r22*r22)))+((x1228*(r20*r20)))+(((-1.0)*x1227*x1228))+((sj3*x1227))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1229;
j4eval[1]=IKsign(x1229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1230=cj5*cj5;
IkReal x1231=r21*r21;
IkReal x1232=((1.0)*cj3);
IkReal x1233=(cj3*x1230);
IkReal x1234=((((-1.0)*x1230*x1232*(r20*r20)))+(((-1.0)*x1232*(r22*r22)))+((x1231*x1233))+(((-1.0)*x1231*x1232))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1234;
j4eval[1]=IKsign(x1234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1235=cj1*cj1;
IkReal x1236=cj2*cj2;
IkReal x1237=(cj1*sj1*sj2);
IkReal x1238=(cj2*x1235);
IkReal x1239=(x1235*x1236);
j0eval[0]=((-4.14518051427814)+(((-1.0)*x1235))+(((-7.48153495812743)*x1238))+(((6.54807030503047)*cj2*x1237))+(((3.27403515251523)*x1236))+(((-6.54807030503047)*x1239))+(((7.48153495812743)*x1237)));
j0eval[1]=IKsign(((-575.755625)+(((909.51125)*cj2*x1237))+(((454.755625)*x1236))+(((-138.8976)*x1235))+(((1039.16725)*x1237))+(((-909.51125)*x1239))+(((-1039.16725)*x1238))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1240=((1.0)*cj5);
IkReal x1241=((1.0)*sj5);
IkReal x1242=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1242;
j0eval[1]=IKsign(x1242);
j0eval[2]=((IKabs(((((-1.0)*r11*x1240))+(((-1.0)*r10*x1241)))))+(IKabs(((((-1.0)*r01*x1240))+(((-1.0)*r00*x1241))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1243=cj5*cj5;
IkReal x1244=r21*r21;
IkReal x1245=(sj1*sj2);
IkReal x1246=(r21*sj5);
IkReal x1247=(cj5*r20);
IkReal x1248=(cj1*cj2);
IkReal x1249=(x1244+(((-2.0)*x1246*x1247))+(r22*r22)+((x1243*(r20*r20)))+(((-1.0)*x1243*x1244)));
j4eval[0]=x1249;
j4eval[1]=IKsign(x1249);
j4eval[2]=((IKabs((((r22*x1245))+(((-1.0)*r22*x1248)))))+(IKabs(((((-1.0)*x1245*x1247))+(((-1.0)*x1246*x1248))+((x1247*x1248))+((x1245*x1246))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
=======
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
<<<<<<< HEAD
IkReal x1250=(cj1*cj2);
IkReal x1251=(sj1*sj2);
IkReal x1252=((24.365)*cj1);
IkReal x1253=(r00*sj5);
IkReal x1254=((100.0)*px);
IkReal x1255=(cj5*r01);
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(((((-11.0)*x1251))+(((11.0)*x1250))),-1);
if(!x1256.valid){
continue;
}
CheckValue<IkReal> x1257=IKPowWithIntegerCheck((x1250+(((-1.0)*x1251))),-1);
if(!x1257.valid){
continue;
}
if( IKabs(((x1256.value)*(((((-12.79)*x1250*x1255))+(((-12.79)*x1250*x1253))+(((-1.0)*x1252*x1255))+(((-1.0)*x1252*x1253))+((x1250*x1254))+(((-1.0)*x1251*x1254))+(((12.79)*x1251*x1253))+(((12.79)*x1251*x1255)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1257.value)*(((((-1.0)*x1255))+(((-1.0)*x1253)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1256.value)*(((((-12.79)*x1250*x1255))+(((-12.79)*x1250*x1253))+(((-1.0)*x1252*x1255))+(((-1.0)*x1252*x1253))+((x1250*x1254))+(((-1.0)*x1251*x1254))+(((12.79)*x1251*x1253))+(((12.79)*x1251*x1255))))))+IKsqr(((x1257.value)*(((((-1.0)*x1255))+(((-1.0)*x1253))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1256.value)*(((((-12.79)*x1250*x1255))+(((-12.79)*x1250*x1253))+(((-1.0)*x1252*x1255))+(((-1.0)*x1252*x1253))+((x1250*x1254))+(((-1.0)*x1251*x1254))+(((12.79)*x1251*x1253))+(((12.79)*x1251*x1255))))), ((x1257.value)*(((((-1.0)*x1255))+(((-1.0)*x1253))))));
=======
IkReal x1172=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1172))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1172))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1172))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1172))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1172))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1172))+((r11*sj4*sj5))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
<<<<<<< HEAD
IkReal evalcond[4];
IkReal x1258=IKcos(j0);
IkReal x1259=IKsin(j0);
IkReal x1260=(cj5*r01);
IkReal x1261=(sj1*sj2);
IkReal x1262=(cj5*r11);
IkReal x1263=(r00*sj5);
IkReal x1264=((0.24365)*cj1);
IkReal x1265=(r10*sj5);
IkReal x1266=(cj1*cj2*x1259);
IkReal x1267=(cj1*cj2*x1258);
evalcond[0]=(x1263+x1260+x1267+(((-1.0)*x1258*x1261)));
evalcond[1]=(x1262+x1266+x1265+(((-1.0)*x1259*x1261)));
evalcond[2]=((((-1.0)*x1258*x1264))+(((0.21325)*x1258*x1261))+(((-0.08535)*x1260))+(((-0.08535)*x1263))+(((-1.0)*px))+(((-0.21325)*x1267))+(((0.11)*x1259)));
evalcond[3]=((((-0.08535)*x1262))+(((-0.08535)*x1265))+(((-1.0)*py))+(((0.21325)*x1259*x1261))+(((-0.21325)*x1266))+(((-1.0)*x1259*x1264))+(((-0.11)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1268=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1268;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1269=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1269;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1270=((1.0)*cj5);
IkReal x1271=((((-1.0)*r21*x1270))+(((-1.0)*r20*sj5)));
j4eval[0]=x1271;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1270))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1270)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1272=((1.0)*cj5);
CheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1272))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1272))+(((-1.0)*r20*sj5)))),-1);
if(!x1274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1273.value)+(((1.5707963267949)*(x1274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1275=IKsin(j4);
IkReal x1276=IKcos(j4);
IkReal x1277=(cj5*r10);
IkReal x1278=(cj2*sj1);
IkReal x1279=(r01*sj5);
IkReal x1280=(cj5*r00);
IkReal x1281=(cj5*r20);
IkReal x1282=(cj1*sj2);
IkReal x1283=((1.0)*x1276);
IkReal x1284=((1.0)*x1275);
IkReal x1285=(sj5*x1275);
evalcond[0]=((((-1.0)*r22*x1283))+((r21*x1285))+(((-1.0)*x1281*x1284)));
evalcond[1]=((((-1.0)*r02*x1283))+((x1275*x1279))+sj0+(((-1.0)*x1280*x1284)));
evalcond[2]=(((r11*x1285))+(((-1.0)*x1277*x1284))+(((-1.0)*r12*x1283))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1284))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1276*x1281))+(((-1.0)*r21*sj5*x1283)));
evalcond[4]=((((-1.0)*r02*x1284))+((cj0*x1278))+((cj0*x1282))+((x1276*x1280))+(((-1.0)*x1279*x1283)));
evalcond[5]=(((x1276*x1277))+((sj0*x1278))+(((-1.0)*r11*sj5*x1283))+((sj0*x1282))+(((-1.0)*r12*x1284)));
=======
IkReal evalcond[6];
IkReal x1173=IKcos(j0);
IkReal x1174=IKsin(j0);
IkReal x1175=(cj5*r01);
IkReal x1176=(sj1*sj2);
IkReal x1177=(sj4*sj5);
IkReal x1178=(r00*sj5);
IkReal x1179=(cj5*r11);
IkReal x1180=(r10*sj5);
IkReal x1181=(cj1*x1173);
IkReal x1182=((1.0)*x1173);
IkReal x1183=((1.0)*cj5*sj4);
IkReal x1184=(cj1*cj2*x1174);
evalcond[0]=(x1174+((r01*x1177))+(((-1.0)*r00*x1183)));
evalcond[1]=((((-1.0)*r10*x1183))+(((-1.0)*x1182))+((r11*x1177)));
evalcond[2]=((((-1.0)*x1176*x1182))+x1175+x1178+((cj2*x1181)));
evalcond[3]=(x1184+x1180+x1179+(((-1.0)*x1174*x1176)));
evalcond[4]=((((-0.08535)*x1175))+(((-0.08535)*x1178))+(((0.21325)*x1173*x1176))+(((-1.0)*px))+(((-0.24365)*x1181))+(((-0.21325)*cj2*x1181))+(((0.11)*x1174)));
evalcond[5]=((((-0.24365)*cj1*x1174))+(((-0.21325)*x1184))+(((-0.08535)*x1180))+(((-0.08535)*x1179))+(((0.21325)*x1174*x1176))+(((-1.0)*py))+(((-0.11)*x1173)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1185=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1185);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1185);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1286.valid){
continue;
}
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1286.value)))+(x1287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(r22,-1);
if(!x1186.valid){
continue;
}
sj4array[0]=((-1.0)*(x1186.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1288=IKsin(j4);
IkReal x1289=IKcos(j4);
IkReal x1290=(cj5*r10);
IkReal x1291=(cj2*sj1);
IkReal x1292=(r01*sj5);
IkReal x1293=(cj5*r00);
IkReal x1294=(cj5*r20);
IkReal x1295=(cj1*sj2);
IkReal x1296=((1.0)*x1289);
IkReal x1297=((1.0)*x1288);
IkReal x1298=(sj5*x1288);
evalcond[0]=(((r21*x1298))+(((-1.0)*r22*x1296))+(((-1.0)*x1294*x1297)));
evalcond[1]=(sj0+(((-1.0)*x1293*x1297))+((x1288*x1292))+(((-1.0)*r02*x1296)));
evalcond[2]=((((-1.0)*r12*x1296))+((r11*x1298))+(((-1.0)*x1290*x1297))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1296))+(((-1.0)*r22*x1297))+((x1289*x1294)));
evalcond[4]=((((-1.0)*x1292*x1296))+(((-1.0)*r02*x1297))+((cj0*x1291))+((cj0*x1295))+((x1289*x1293)));
evalcond[5]=(((sj0*x1291))+((sj0*x1295))+(((-1.0)*r12*x1297))+(((-1.0)*r11*sj5*x1296))+((x1289*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1187=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1187);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1187);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1189 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1189.valid){
continue;
}
IkReal x1188=x1189.value;
j5array[0]=((-1.0)*x1188);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1188)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1190=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1190))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1190))))+IKsqr(((((-1.0)*cj5*r10*x1190))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1190))), ((((-1.0)*cj5*r10*x1190))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1191=IKcos(j0);
IkReal x1192=IKsin(j0);
IkReal x1193=(sj1*sj2);
IkReal x1194=(sj4*sj5);
IkReal x1195=((1.0)*cj5);
IkReal x1196=((1.0)*sj5);
IkReal x1197=((0.08535)*cj5);
IkReal x1198=((0.08535)*sj5);
IkReal x1199=(cj1*x1191);
IkReal x1200=((1.0)*x1191);
IkReal x1201=(cj1*cj2*x1192);
evalcond[0]=(x1192+(((-1.0)*r00*sj4*x1195))+((r01*x1194)));
evalcond[1]=(((r11*x1194))+(((-1.0)*x1200))+(((-1.0)*r10*sj4*x1195)));
evalcond[2]=((((-1.0)*r00*x1196))+((cj2*x1199))+(((-1.0)*r01*x1195))+(((-1.0)*x1193*x1200)));
evalcond[3]=(x1201+(((-1.0)*x1192*x1193))+(((-1.0)*r10*x1196))+(((-1.0)*r11*x1195)));
evalcond[4]=((((-1.0)*r00*x1198))+(((-1.0)*px))+(((-0.24365)*x1199))+(((-0.21325)*cj2*x1199))+(((0.11)*x1192))+(((0.21325)*x1191*x1193))+(((-1.0)*r01*x1197)));
evalcond[5]=((((-0.21325)*x1201))+(((-1.0)*r10*x1198))+(((-0.24365)*cj1*x1192))+(((-1.0)*py))+(((-0.11)*x1191))+(((-1.0)*r11*x1197))+(((0.21325)*x1192*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(r22,-1);
if(!x1202.valid){
continue;
}
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(sj3,-1);
if(!x1203.valid){
continue;
}
sj4array[0]=((x1202.value)*(x1203.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1204=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1204);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1204);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1205=((4.0)*r01);
IkReal x1206=((16.0)*r00);
IkReal x1207=(cj3*sj2);
IkReal x1208=((8.0)*r00);
IkReal x1209=(cj2*cj3);
IkReal x1210=(cj4*r01);
IkReal x1211=((16.0)*cj1);
IkReal x1212=((8.0)*sj1);
IkReal x1213=((16.0)*sj1);
IkReal x1214=((8.0)*cj1);
IkReal x1215=(cj2*sj3);
IkReal x1216=(sj2*sj3);
IkReal x1217=(sj1*x1215);
IkReal x1218=((4.0)*cj4*r00);
IkReal x1219=(cj1*x1216);
IkReal x1220=(((sj1*x1205*x1207))+((sj1*x1216*x1218))+((x1205*x1219))+((x1205*x1217)));
IkReal x1221=(((cj1*x1207*x1218))+((sj1*x1209*x1218))+((cj1*x1205*x1209))+((cj1*x1215*x1218)));
IkReal x1222=(x1220+(((-1.0)*x1221)));
IkReal x1223=((((-1.0)*x1208*x1219))+(((-1.0)*x1208*x1217))+((x1210*x1212*x1216))+(((-1.0)*sj1*x1207*x1208))+(((-1.0)*x1210*x1214*x1215))+(((-1.0)*x1209*x1210*x1212))+((cj1*x1208*x1209))+(((-1.0)*x1207*x1210*x1214)));
IkReal x1224=(x1221+(((-1.0)*x1220)));
op[0]=x1222;
op[1]=x1223;
op[2]=x1222;
op[3]=((((-1.0)*x1206*x1217))+(((-1.0)*x1206*x1219))+(((-1.0)*sj1*x1206*x1207))+((cj1*x1206*x1209))+((x1210*x1213*x1216))+(((-1.0)*x1209*x1210*x1213))+(((-1.0)*x1210*x1211*x1215))+(((-1.0)*x1207*x1210*x1211)));
op[4]=x1224;
op[5]=x1223;
op[6]=x1224;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1225=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1225))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1225))))+IKsqr(((((-1.0)*cj5*r10*x1225))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1225))), ((((-1.0)*cj5*r10*x1225))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1226=IKcos(j0);
IkReal x1227=IKsin(j0);
IkReal x1228=((1.0)*cj3);
IkReal x1229=((1.0)*sj1);
IkReal x1230=(r11*sj5);
IkReal x1231=(cj5*r01);
IkReal x1232=(r01*sj5);
IkReal x1233=((0.21325)*sj1);
IkReal x1234=(cj5*r11);
IkReal x1235=(cj3*cj4);
IkReal x1236=(r00*sj5);
IkReal x1237=((0.24365)*cj1);
IkReal x1238=(r10*sj5);
IkReal x1239=(cj4*cj5*r00);
IkReal x1240=(sj2*x1227);
IkReal x1241=(cj4*cj5*r10);
IkReal x1242=((1.0)*cj4*sj3);
IkReal x1243=(cj2*x1226);
IkReal x1244=(sj2*x1226);
IkReal x1245=((1.0)*cj5*sj4);
IkReal x1246=(cj1*cj2*x1227);
evalcond[0]=(x1227+((sj4*x1232))+(((-1.0)*r00*x1245)));
evalcond[1]=((((-1.0)*x1226))+(((-1.0)*r10*x1245))+((sj4*x1230)));
evalcond[2]=(((cj3*x1236))+((cj3*x1231))+((cj1*x1244))+((sj3*x1239))+((sj1*x1243))+(((-1.0)*x1232*x1242)));
evalcond[3]=(((cj3*x1234))+((cj3*x1238))+((cj1*x1240))+((sj3*x1241))+((cj2*sj1*x1227))+(((-1.0)*x1230*x1242)));
evalcond[4]=(((cj1*x1243))+((sj3*x1236))+((sj3*x1231))+(((-1.0)*x1229*x1244))+(((-1.0)*x1228*x1239))+((x1232*x1235)));
evalcond[5]=(x1246+((sj3*x1234))+((sj3*x1238))+(((-1.0)*x1228*x1241))+(((-1.0)*x1229*x1240))+((x1230*x1235)));
evalcond[6]=((((0.11)*x1227))+(((-1.0)*x1226*x1237))+((x1233*x1244))+(((-1.0)*px))+(((-0.08535)*x1231))+(((-0.08535)*x1236))+(((-0.21325)*cj1*x1243)));
evalcond[7]=((((-0.21325)*x1246))+(((-0.11)*x1226))+((x1233*x1240))+(((-1.0)*x1227*x1237))+(((-1.0)*py))+(((-0.08535)*x1234))+(((-0.08535)*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1247=IKPowWithIntegerCheck(cj3,-1);
if(!x1247.valid){
continue;
}
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(r22,-1);
if(!x1248.valid){
continue;
}
sj4array[0]=((-1.0)*(x1247.value)*(x1248.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1249=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1249);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1249);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1250=((4.0)*r01);
IkReal x1251=((16.0)*r00);
IkReal x1252=(cj3*sj2);
IkReal x1253=((8.0)*r00);
IkReal x1254=(cj2*cj3);
IkReal x1255=(cj4*r01);
IkReal x1256=((16.0)*cj1);
IkReal x1257=((8.0)*sj1);
IkReal x1258=((16.0)*sj1);
IkReal x1259=((8.0)*cj1);
IkReal x1260=(cj2*sj3);
IkReal x1261=(sj2*sj3);
IkReal x1262=(sj1*x1260);
IkReal x1263=((4.0)*cj4*r00);
IkReal x1264=(cj1*x1261);
IkReal x1265=(((sj1*x1261*x1263))+((x1250*x1262))+((x1250*x1264))+((sj1*x1250*x1252)));
IkReal x1266=(((cj1*x1260*x1263))+((cj1*x1250*x1254))+((cj1*x1252*x1263))+((sj1*x1254*x1263)));
IkReal x1267=(x1265+(((-1.0)*x1266)));
IkReal x1268=((((-1.0)*x1253*x1262))+(((-1.0)*x1253*x1264))+(((-1.0)*x1252*x1255*x1259))+((cj1*x1253*x1254))+((x1255*x1257*x1261))+(((-1.0)*x1254*x1255*x1257))+(((-1.0)*sj1*x1252*x1253))+(((-1.0)*x1255*x1259*x1260)));
IkReal x1269=(x1266+(((-1.0)*x1265)));
op[0]=x1267;
op[1]=x1268;
op[2]=x1267;
op[3]=((((-1.0)*x1255*x1256*x1260))+(((-1.0)*sj1*x1251*x1252))+(((-1.0)*x1252*x1255*x1256))+((cj1*x1251*x1254))+(((-1.0)*x1254*x1255*x1258))+(((-1.0)*x1251*x1264))+(((-1.0)*x1251*x1262))+((x1255*x1258*x1261)));
op[4]=x1269;
op[5]=x1268;
op[6]=x1269;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1270=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1270))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1270))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1270))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1271=IKcos(j0);
IkReal x1272=IKsin(j0);
IkReal x1273=((1.0)*cj3);
IkReal x1274=((1.0)*sj1);
IkReal x1275=(r11*sj5);
IkReal x1276=(cj5*r01);
IkReal x1277=(r01*sj5);
IkReal x1278=((0.21325)*sj1);
IkReal x1279=(cj5*r11);
IkReal x1280=(cj3*cj4);
IkReal x1281=(r00*sj5);
IkReal x1282=((0.24365)*cj1);
IkReal x1283=(r10*sj5);
IkReal x1284=(cj4*cj5*r00);
IkReal x1285=(sj2*x1272);
IkReal x1286=(cj4*cj5*r10);
IkReal x1287=((1.0)*cj4*sj3);
IkReal x1288=(cj2*x1271);
IkReal x1289=(sj2*x1271);
IkReal x1290=((1.0)*cj5*sj4);
IkReal x1291=(cj1*cj2*x1272);
evalcond[0]=(x1272+(((-1.0)*r00*x1290))+((sj4*x1277)));
evalcond[1]=(((sj4*x1275))+(((-1.0)*x1271))+(((-1.0)*r10*x1290)));
evalcond[2]=((((-1.0)*x1277*x1287))+((cj3*x1276))+((sj3*x1284))+((cj3*x1281))+((sj1*x1288))+((cj1*x1289)));
evalcond[3]=((((-1.0)*x1275*x1287))+((cj3*x1279))+((cj2*sj1*x1272))+((sj3*x1286))+((cj3*x1283))+((cj1*x1285)));
evalcond[4]=(((sj3*x1276))+(((-1.0)*x1273*x1284))+((x1277*x1280))+((sj3*x1281))+(((-1.0)*x1274*x1289))+((cj1*x1288)));
evalcond[5]=(((sj3*x1279))+x1291+((x1275*x1280))+(((-1.0)*x1273*x1286))+((sj3*x1283))+(((-1.0)*x1274*x1285)));
evalcond[6]=((((-0.08535)*x1281))+((x1278*x1289))+(((-0.08535)*x1276))+(((-1.0)*px))+(((-1.0)*x1271*x1282))+(((-0.21325)*cj1*x1288))+(((0.11)*x1272)));
evalcond[7]=((((-0.08535)*x1283))+((x1278*x1285))+(((-0.08535)*x1279))+(((-1.0)*py))+(((-1.0)*x1272*x1282))+(((-0.21325)*x1291))+(((-0.11)*x1271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1294 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1294.valid){
continue;
}
IkReal x1292=((1.0)*(x1294.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1295.valid){
continue;
}
if( (((-1.0)*(x1295.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1295.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1293=((-1.0)*(IKasin(((-1.0)*(x1295.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1292))+(((-1.0)*x1293)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1292))+(((1.0)*x1293)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1296=cj5*cj5;
IkReal x1297=r21*r21;
IkReal x1298=(sj3*x1296);
IkReal x1299=(((sj3*(r22*r22)))+((sj3*x1297))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1297*x1298))+((x1298*(r20*r20))));
j4eval[0]=x1299;
j4eval[1]=IKsign(x1299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1300=cj5*cj5;
IkReal x1301=r21*r21;
IkReal x1302=((1.0)*cj3);
IkReal x1303=(cj3*x1300);
IkReal x1304=((((-1.0)*x1300*x1302*(r20*r20)))+(((-1.0)*x1302*(r22*r22)))+(((-1.0)*x1301*x1302))+((x1301*x1303))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1304;
j4eval[1]=IKsign(x1304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1305=cj1*cj1;
IkReal x1306=cj2*cj2;
IkReal x1307=(cj1*sj1*sj2);
IkReal x1308=(cj2*x1305);
IkReal x1309=(x1305*x1306);
j0eval[0]=((-4.14518051427814)+(((-7.48153495812743)*x1308))+(((7.48153495812743)*x1307))+(((-1.0)*x1305))+(((3.27403515251523)*x1306))+(((-6.54807030503047)*x1309))+(((6.54807030503047)*cj2*x1307)));
j0eval[1]=IKsign(((-575.755625)+(((-1039.16725)*x1308))+(((-138.8976)*x1305))+(((-909.51125)*x1309))+(((909.51125)*cj2*x1307))+(((1039.16725)*x1307))+(((454.755625)*x1306))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1310=((1.0)*cj5);
IkReal x1311=((1.0)*sj5);
IkReal x1312=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1312;
j0eval[1]=IKsign(x1312);
j0eval[2]=((IKabs(((((-1.0)*r11*x1310))+(((-1.0)*r10*x1311)))))+(IKabs(((((-1.0)*r00*x1311))+(((-1.0)*r01*x1310))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1313=cj5*cj5;
IkReal x1314=r21*r21;
IkReal x1315=(sj1*sj2);
IkReal x1316=(r21*sj5);
IkReal x1317=(cj5*r20);
IkReal x1318=(cj1*cj2);
IkReal x1319=(x1314+(r22*r22)+(((-1.0)*x1313*x1314))+(((-2.0)*x1316*x1317))+((x1313*(r20*r20))));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
j4eval[2]=((IKabs(((((-1.0)*r22*x1318))+((r22*x1315)))))+(IKabs((((x1317*x1318))+(((-1.0)*x1315*x1317))+(((-1.0)*x1316*x1318))+((x1315*x1316))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40934584042491)*py))+(((1.53920805436791)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40934584042491)*py))+(((1.53920805436791)*px))))+IKsqr(((((-3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40934584042491)*py))+(((1.53920805436791)*px))), ((((-3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1320=IKsin(j0);
IkReal x1321=IKcos(j0);
evalcond[0]=((((-0.24365)*x1321))+(((-1.0)*px))+(((0.11)*x1320)));
evalcond[1]=((((-0.24365)*x1320))+(((-0.11)*x1321))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1322=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1322;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1323=cj5*cj5;
IkReal x1324=((1.0)*r21);
IkReal x1325=(cj5*sj5);
IkReal x1326=((1.0)*r20);
IkReal x1327=(((r00*r20*x1323))+(((-1.0)*r00*x1324*x1325))+(((-1.0)*r01*x1323*x1324))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1325*x1326)));
j4eval[0]=x1327;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1326)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1328=cj5*cj5;
IkReal x1329=(r21*sj5);
IkReal x1330=(r11*r21);
IkReal x1331=((1.0)*cj5*r20);
IkReal x1332=(x1330+(((-1.0)*x1328*x1330))+((r12*r22))+(((-1.0)*r11*sj5*x1331))+((r10*r20*x1328))+(((-1.0)*cj5*r10*x1329)));
j4eval[0]=x1332;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1329))+(((-1.0)*sj0*x1331))))));
j4eval[2]=IKsign(x1332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1333=cj5*cj5;
IkReal x1334=(r21*sj5);
IkReal x1335=(r11*r21);
IkReal x1336=((1.0)*cj5*r20);
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKsign((x1335+(((-1.0)*x1333*x1335))+((r10*r20*x1333))+(((-1.0)*cj5*r10*x1334))+((r12*r22))+(((-1.0)*r11*sj5*x1336)))),-1);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1334))+(((-1.0)*sj0*x1336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1337.value)))+(x1338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1339=IKsin(j4);
IkReal x1340=IKcos(j4);
IkReal x1341=(r11*sj5);
IkReal x1342=(cj5*r00);
IkReal x1343=(cj5*r10);
IkReal x1344=(r21*sj5);
IkReal x1345=(cj5*r20);
IkReal x1346=(r01*sj5);
IkReal x1347=((1.0)*x1340);
IkReal x1348=((1.0)*x1339);
evalcond[0]=(((x1339*x1344))+(((-1.0)*r22*x1347))+(((-1.0)*x1345*x1348)));
evalcond[1]=(((x1340*x1345))+(((-1.0)*r22*x1348))+(((-1.0)*x1344*x1347)));
evalcond[2]=(sj0+(((-1.0)*r02*x1347))+((x1339*x1346))+(((-1.0)*x1342*x1348)));
evalcond[3]=((((-1.0)*x1346*x1347))+(((-1.0)*r02*x1348))+cj0+((x1340*x1342)));
evalcond[4]=(sj0+(((-1.0)*x1341*x1347))+(((-1.0)*r12*x1348))+((x1340*x1343)));
evalcond[5]=(((x1339*x1341))+(((-1.0)*r12*x1347))+(((-1.0)*x1343*x1348))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1349=cj5*cj5;
IkReal x1350=((1.0)*r21);
IkReal x1351=(cj5*sj5);
IkReal x1352=((1.0)*r20);
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
CheckValue<IkReal> x1354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1349*x1350))+((r01*r21))+(((-1.0)*r00*x1350*x1351))+(((-1.0)*r01*x1351*x1352))+((r02*r22))+((r00*r20*x1349)))),-1);
if(!x1354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1353.value)+(((1.5707963267949)*(x1354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1355=IKsin(j4);
IkReal x1356=IKcos(j4);
IkReal x1357=(r11*sj5);
IkReal x1358=(cj5*r00);
IkReal x1359=(cj5*r10);
IkReal x1360=(r21*sj5);
IkReal x1361=(cj5*r20);
IkReal x1362=(r01*sj5);
IkReal x1363=((1.0)*x1356);
IkReal x1364=((1.0)*x1355);
evalcond[0]=(((x1355*x1360))+(((-1.0)*r22*x1363))+(((-1.0)*x1361*x1364)));
evalcond[1]=(((x1356*x1361))+(((-1.0)*r22*x1364))+(((-1.0)*x1360*x1363)));
evalcond[2]=(((x1355*x1362))+sj0+(((-1.0)*r02*x1363))+(((-1.0)*x1358*x1364)));
evalcond[3]=(cj0+(((-1.0)*r02*x1364))+(((-1.0)*x1362*x1363))+((x1356*x1358)));
evalcond[4]=(sj0+(((-1.0)*r12*x1364))+(((-1.0)*x1357*x1363))+((x1356*x1359)));
evalcond[5]=(((x1355*x1357))+(((-1.0)*r12*x1363))+(((-1.0)*x1359*x1364))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1365=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1365.valid){
continue;
}
CheckValue<IkReal> x1366 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1365.value)))+(x1366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1367=IKsin(j4);
IkReal x1368=IKcos(j4);
IkReal x1369=(r11*sj5);
IkReal x1370=(cj5*r00);
IkReal x1371=(cj5*r10);
IkReal x1372=(r21*sj5);
IkReal x1373=(cj5*r20);
IkReal x1374=(r01*sj5);
IkReal x1375=((1.0)*x1368);
IkReal x1376=((1.0)*x1367);
evalcond[0]=((((-1.0)*r22*x1375))+((x1367*x1372))+(((-1.0)*x1373*x1376)));
evalcond[1]=((((-1.0)*r22*x1376))+(((-1.0)*x1372*x1375))+((x1368*x1373)));
evalcond[2]=(sj0+(((-1.0)*x1370*x1376))+((x1367*x1374))+(((-1.0)*r02*x1375)));
evalcond[3]=(cj0+(((-1.0)*r02*x1376))+(((-1.0)*x1374*x1375))+((x1368*x1370)));
evalcond[4]=(sj0+(((-1.0)*r12*x1376))+((x1368*x1371))+(((-1.0)*x1369*x1375)));
evalcond[5]=(((x1367*x1369))+(((-1.0)*x1371*x1376))+(((-1.0)*r12*x1375))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40934584042491)*py))+(((1.53920805436791)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40934584042491)*py))+(((1.53920805436791)*px))))+IKsqr(((((-3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40934584042491)*py))+(((1.53920805436791)*px))), ((((-3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1377=IKsin(j0);
IkReal x1378=IKcos(j0);
evalcond[0]=((((-0.24365)*x1378))+(((-1.0)*px))+(((0.11)*x1377)));
evalcond[1]=((((-0.11)*x1378))+(((-0.24365)*x1377))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1379=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1379;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1380=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1380;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1381=cj5*cj5;
IkReal x1382=((1.0)*r21);
IkReal x1383=(cj5*r20);
IkReal x1384=((((-1.0)*r01*sj5*x1383))+((r01*r21))+(((-1.0)*cj5*r00*sj5*x1382))+(((-1.0)*r01*x1381*x1382))+((r02*r22))+((r00*r20*x1381)));
j4eval[0]=x1384;
j4eval[1]=IKsign(x1384);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x1382))+((sj0*x1383)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=cj5*cj5;
IkReal x1386=((1.0)*r21);
IkReal x1387=(cj5*r20);
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1386))+((sj0*x1387)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1385*x1386))+(((-1.0)*r01*sj5*x1387))+((r01*r21))+(((-1.0)*cj5*r00*sj5*x1386))+((r02*r22))+((r00*r20*x1385)))),-1);
if(!x1389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1388.value)+(((1.5707963267949)*(x1389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1390=IKsin(j4);
IkReal x1391=IKcos(j4);
IkReal x1392=((1.0)*cj0);
IkReal x1393=(cj5*r00);
IkReal x1394=(r11*sj5);
IkReal x1395=(cj5*r10);
IkReal x1396=(r21*sj5);
IkReal x1397=(cj5*r20);
IkReal x1398=(r01*sj5);
IkReal x1399=((1.0)*x1391);
IkReal x1400=((1.0)*x1390);
evalcond[0]=(((x1390*x1396))+(((-1.0)*r22*x1399))+(((-1.0)*x1397*x1400)));
evalcond[1]=((((-1.0)*r22*x1400))+(((-1.0)*x1396*x1399))+((x1391*x1397)));
evalcond[2]=(sj0+(((-1.0)*r02*x1399))+((x1390*x1398))+(((-1.0)*x1393*x1400)));
evalcond[3]=((((-1.0)*r12*x1399))+((x1390*x1394))+(((-1.0)*x1395*x1400))+(((-1.0)*x1392)));
evalcond[4]=((((-1.0)*r02*x1400))+((x1391*x1393))+(((-1.0)*x1398*x1399))+(((-1.0)*x1392)));
evalcond[5]=((((-1.0)*r12*x1400))+(((-1.0)*sj0))+(((-1.0)*x1394*x1399))+((x1391*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1401=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1401.value)))+(x1402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1403=IKsin(j4);
IkReal x1404=IKcos(j4);
IkReal x1405=((1.0)*cj0);
IkReal x1406=(cj5*r00);
IkReal x1407=(r11*sj5);
IkReal x1408=(cj5*r10);
IkReal x1409=(r21*sj5);
IkReal x1410=(cj5*r20);
IkReal x1411=(r01*sj5);
IkReal x1412=((1.0)*x1404);
IkReal x1413=((1.0)*x1403);
evalcond[0]=((((-1.0)*r22*x1412))+((x1403*x1409))+(((-1.0)*x1410*x1413)));
evalcond[1]=((((-1.0)*r22*x1413))+((x1404*x1410))+(((-1.0)*x1409*x1412)));
evalcond[2]=(sj0+(((-1.0)*r02*x1412))+(((-1.0)*x1406*x1413))+((x1403*x1411)));
evalcond[3]=((((-1.0)*x1405))+(((-1.0)*x1408*x1413))+((x1403*x1407))+(((-1.0)*r12*x1412)));
evalcond[4]=((((-1.0)*r02*x1413))+(((-1.0)*x1405))+(((-1.0)*x1411*x1412))+((x1404*x1406)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1407*x1412))+(((-1.0)*r12*x1413))+((x1404*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1414.valid){
continue;
}
CheckValue<IkReal> x1415 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1414.value)))+(x1415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1416=IKsin(j4);
IkReal x1417=IKcos(j4);
IkReal x1418=((1.0)*cj0);
IkReal x1419=(cj5*r00);
IkReal x1420=(r11*sj5);
IkReal x1421=(cj5*r10);
IkReal x1422=(r21*sj5);
IkReal x1423=(cj5*r20);
IkReal x1424=(r01*sj5);
IkReal x1425=((1.0)*x1417);
IkReal x1426=((1.0)*x1416);
evalcond[0]=((((-1.0)*x1423*x1426))+(((-1.0)*r22*x1425))+((x1416*x1422)));
evalcond[1]=((((-1.0)*x1422*x1425))+(((-1.0)*r22*x1426))+((x1417*x1423)));
evalcond[2]=(sj0+(((-1.0)*x1419*x1426))+(((-1.0)*r02*x1425))+((x1416*x1424)));
evalcond[3]=((((-1.0)*x1421*x1426))+(((-1.0)*x1418))+(((-1.0)*r12*x1425))+((x1416*x1420)));
evalcond[4]=((((-1.0)*x1418))+((x1417*x1419))+(((-1.0)*x1424*x1425))+(((-1.0)*r02*x1426)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1420*x1425))+(((-1.0)*r12*x1426))+((x1417*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1427=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1427;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1428=cj5*cj5;
IkReal x1429=((1.0)*r21);
IkReal x1430=(cj5*sj5);
IkReal x1431=((1.0)*r20);
IkReal x1432=((((-1.0)*r00*x1429*x1430))+(((-1.0)*r01*x1430*x1431))+((r00*r20*x1428))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1428*x1429)));
j4eval[0]=x1432;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1431))))));
j4eval[2]=IKsign(x1432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1433=cj5*cj5;
IkReal x1434=(r21*sj5);
IkReal x1435=(r11*r21);
IkReal x1436=((1.0)*cj5*r20);
IkReal x1437=((((-1.0)*cj5*r10*x1434))+((r10*r20*x1433))+(((-1.0)*r11*sj5*x1436))+((r12*r22))+x1435+(((-1.0)*x1433*x1435)));
j4eval[0]=x1437;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1436))+((sj0*x1434))))));
j4eval[2]=IKsign(x1437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1438=cj5*cj5;
IkReal x1439=(r21*sj5);
IkReal x1440=(r11*r21);
IkReal x1441=((1.0)*cj5*r20);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1439))+(((-1.0)*sj0*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1439))+((r10*r20*x1438))+(((-1.0)*x1438*x1440))+((r12*r22))+x1440+(((-1.0)*r11*sj5*x1441)))),-1);
if(!x1443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1442.value)+(((1.5707963267949)*(x1443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1444=IKsin(j4);
IkReal x1445=IKcos(j4);
IkReal x1446=(r11*sj5);
IkReal x1447=(cj5*r00);
IkReal x1448=(cj5*r10);
IkReal x1449=(r21*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(r01*sj5);
IkReal x1452=((1.0)*x1445);
IkReal x1453=((1.0)*x1444);
evalcond[0]=(((x1444*x1449))+(((-1.0)*r22*x1452))+(((-1.0)*x1450*x1453)));
evalcond[1]=(((x1445*x1450))+(((-1.0)*r22*x1453))+(((-1.0)*x1449*x1452)));
evalcond[2]=((((-1.0)*x1447*x1453))+sj0+(((-1.0)*r02*x1452))+((x1444*x1451)));
evalcond[3]=(((x1445*x1447))+cj0+(((-1.0)*r02*x1453))+(((-1.0)*x1451*x1452)));
evalcond[4]=(((x1445*x1448))+sj0+(((-1.0)*x1446*x1452))+(((-1.0)*r12*x1453)));
evalcond[5]=(((x1444*x1446))+(((-1.0)*x1448*x1453))+(((-1.0)*cj0))+(((-1.0)*r12*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1454=cj5*cj5;
IkReal x1455=((1.0)*r21);
IkReal x1456=(cj5*sj5);
IkReal x1457=((1.0)*r20);
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1454*x1455))+((r01*r21))+((r00*r20*x1454))+(((-1.0)*r01*x1456*x1457))+(((-1.0)*r00*x1455*x1456))+((r02*r22)))),-1);
if(!x1459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1458.value)+(((1.5707963267949)*(x1459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1460=IKsin(j4);
IkReal x1461=IKcos(j4);
IkReal x1462=(r11*sj5);
IkReal x1463=(cj5*r00);
IkReal x1464=(cj5*r10);
IkReal x1465=(r21*sj5);
IkReal x1466=(cj5*r20);
IkReal x1467=(r01*sj5);
IkReal x1468=((1.0)*x1461);
IkReal x1469=((1.0)*x1460);
evalcond[0]=((((-1.0)*r22*x1468))+(((-1.0)*x1466*x1469))+((x1460*x1465)));
evalcond[1]=((((-1.0)*r22*x1469))+((x1461*x1466))+(((-1.0)*x1465*x1468)));
evalcond[2]=(sj0+(((-1.0)*r02*x1468))+(((-1.0)*x1463*x1469))+((x1460*x1467)));
evalcond[3]=((((-1.0)*r02*x1469))+(((-1.0)*x1467*x1468))+cj0+((x1461*x1463)));
evalcond[4]=(sj0+((x1461*x1464))+(((-1.0)*x1462*x1468))+(((-1.0)*r12*x1469)));
evalcond[5]=((((-1.0)*x1464*x1469))+((x1460*x1462))+(((-1.0)*r12*x1468))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1470.value)))+(x1471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1472=IKsin(j4);
IkReal x1473=IKcos(j4);
IkReal x1474=(r11*sj5);
IkReal x1475=(cj5*r00);
IkReal x1476=(cj5*r10);
IkReal x1477=(r21*sj5);
IkReal x1478=(cj5*r20);
IkReal x1479=(r01*sj5);
IkReal x1480=((1.0)*x1473);
IkReal x1481=((1.0)*x1472);
evalcond[0]=(((x1472*x1477))+(((-1.0)*r22*x1480))+(((-1.0)*x1478*x1481)));
evalcond[1]=(((x1473*x1478))+(((-1.0)*r22*x1481))+(((-1.0)*x1477*x1480)));
evalcond[2]=(sj0+((x1472*x1479))+(((-1.0)*r02*x1480))+(((-1.0)*x1475*x1481)));
evalcond[3]=((((-1.0)*x1479*x1480))+cj0+((x1473*x1475))+(((-1.0)*r02*x1481)));
evalcond[4]=(sj0+(((-1.0)*r12*x1481))+((x1473*x1476))+(((-1.0)*x1474*x1480)));
evalcond[5]=((((-1.0)*r12*x1480))+((x1472*x1474))+(((-1.0)*cj0))+(((-1.0)*x1476*x1481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1482=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1482;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1483=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1483;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1484=cj5*cj5;
IkReal x1485=((1.0)*r21);
IkReal x1486=(cj5*r20);
IkReal x1487=((((-1.0)*r01*x1484*x1485))+(((-1.0)*cj5*r00*sj5*x1485))+((r01*r21))+(((-1.0)*r01*sj5*x1486))+((r00*r20*x1484))+((r02*r22)));
j4eval[0]=x1487;
j4eval[1]=IKsign(x1487);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1486))+(((-1.0)*sj0*sj5*x1485))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=cj5*cj5;
IkReal x1489=((1.0)*r21);
IkReal x1490=(cj5*r20);
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x1489))+((r01*r21))+(((-1.0)*r01*sj5*x1490))+((r00*r20*x1488))+(((-1.0)*r01*x1488*x1489))+((r02*r22)))),-1);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal((((sj0*x1490))+(((-1.0)*sj0*sj5*x1489)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1491.value)))+(x1492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1493=IKsin(j4);
IkReal x1494=IKcos(j4);
IkReal x1495=((1.0)*cj0);
IkReal x1496=(cj5*r00);
IkReal x1497=(r11*sj5);
IkReal x1498=(cj5*r10);
IkReal x1499=(r21*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r01*sj5);
IkReal x1502=((1.0)*x1494);
IkReal x1503=((1.0)*x1493);
evalcond[0]=((((-1.0)*r22*x1502))+((x1493*x1499))+(((-1.0)*x1500*x1503)));
evalcond[1]=((((-1.0)*x1499*x1502))+((x1494*x1500))+(((-1.0)*r22*x1503)));
evalcond[2]=(sj0+(((-1.0)*r02*x1502))+(((-1.0)*x1496*x1503))+((x1493*x1501)));
evalcond[3]=((((-1.0)*x1498*x1503))+(((-1.0)*x1495))+((x1493*x1497))+(((-1.0)*r12*x1502)));
evalcond[4]=((((-1.0)*x1495))+((x1494*x1496))+(((-1.0)*x1501*x1502))+(((-1.0)*r02*x1503)));
evalcond[5]=((((-1.0)*sj0))+((x1494*x1498))+(((-1.0)*x1497*x1502))+(((-1.0)*r12*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1504.valid){
continue;
}
CheckValue<IkReal> x1505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1504.value)))+(x1505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1506=IKsin(j4);
IkReal x1507=IKcos(j4);
IkReal x1508=((1.0)*cj0);
IkReal x1509=(cj5*r00);
IkReal x1510=(r11*sj5);
IkReal x1511=(cj5*r10);
IkReal x1512=(r21*sj5);
IkReal x1513=(cj5*r20);
IkReal x1514=(r01*sj5);
IkReal x1515=((1.0)*x1507);
IkReal x1516=((1.0)*x1506);
evalcond[0]=((((-1.0)*r22*x1515))+(((-1.0)*x1513*x1516))+((x1506*x1512)));
evalcond[1]=((((-1.0)*r22*x1516))+((x1507*x1513))+(((-1.0)*x1512*x1515)));
evalcond[2]=(sj0+((x1506*x1514))+(((-1.0)*r02*x1515))+(((-1.0)*x1509*x1516)));
evalcond[3]=((((-1.0)*x1508))+((x1506*x1510))+(((-1.0)*x1511*x1516))+(((-1.0)*r12*x1515)));
evalcond[4]=((((-1.0)*x1508))+((x1507*x1509))+(((-1.0)*r02*x1516))+(((-1.0)*x1514*x1515)));
evalcond[5]=((((-1.0)*sj0))+((x1507*x1511))+(((-1.0)*x1510*x1515))+(((-1.0)*r12*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1517.value)))+(x1518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1519=IKsin(j4);
IkReal x1520=IKcos(j4);
IkReal x1521=((1.0)*cj0);
IkReal x1522=(cj5*r00);
IkReal x1523=(r11*sj5);
IkReal x1524=(cj5*r10);
IkReal x1525=(r21*sj5);
IkReal x1526=(cj5*r20);
IkReal x1527=(r01*sj5);
IkReal x1528=((1.0)*x1520);
IkReal x1529=((1.0)*x1519);
evalcond[0]=(((x1519*x1525))+(((-1.0)*r22*x1528))+(((-1.0)*x1526*x1529)));
evalcond[1]=((((-1.0)*x1525*x1528))+(((-1.0)*r22*x1529))+((x1520*x1526)));
evalcond[2]=(sj0+((x1519*x1527))+(((-1.0)*r02*x1528))+(((-1.0)*x1522*x1529)));
evalcond[3]=((((-1.0)*r12*x1528))+(((-1.0)*x1524*x1529))+((x1519*x1523))+(((-1.0)*x1521)));
evalcond[4]=((((-1.0)*x1521))+(((-1.0)*r02*x1529))+((x1520*x1522))+(((-1.0)*x1527*x1528)));
evalcond[5]=((((-1.0)*r12*x1529))+(((-1.0)*sj0))+((x1520*x1524))+(((-1.0)*x1523*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.53920805436791)*px))+(((3.40934584042491)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.53920805436791)*px))+(((3.40934584042491)*py))))+IKsqr(((((3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.53920805436791)*px))+(((3.40934584042491)*py))), ((((3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1530=IKsin(j0);
IkReal x1531=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.24365)*x1531))+(((0.11)*x1530)));
evalcond[1]=((((-0.11)*x1531))+(((-1.0)*py))+(((0.24365)*x1530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1532=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1532;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1533=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1533;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1534=cj5*cj5;
IkReal x1535=((1.0)*r21);
IkReal x1536=(cj5*r20);
IkReal x1537=((((-1.0)*r01*sj5*x1536))+((r01*r21))+(((-1.0)*r01*x1534*x1535))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1535))+((r00*r20*x1534)));
j4eval[0]=x1537;
j4eval[1]=IKsign(x1537);
j4eval[2]=((IKabs((((sj0*x1536))+(((-1.0)*sj0*sj5*x1535)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1538=cj5*cj5;
IkReal x1539=((1.0)*r21);
IkReal x1540=(cj5*r20);
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1539))+((sj0*x1540)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1540))+((r01*r21))+(((-1.0)*r01*x1538*x1539))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1539))+((r00*r20*x1538)))),-1);
if(!x1542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1541.value)+(((1.5707963267949)*(x1542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1543=IKsin(j4);
IkReal x1544=IKcos(j4);
IkReal x1545=((1.0)*cj0);
IkReal x1546=(cj5*r00);
IkReal x1547=(r11*sj5);
IkReal x1548=(cj5*r10);
IkReal x1549=(r21*sj5);
IkReal x1550=(cj5*r20);
IkReal x1551=(r01*sj5);
IkReal x1552=((1.0)*x1544);
IkReal x1553=((1.0)*x1543);
evalcond[0]=((((-1.0)*r22*x1552))+(((-1.0)*x1550*x1553))+((x1543*x1549)));
evalcond[1]=(((x1544*x1550))+(((-1.0)*x1549*x1552))+(((-1.0)*r22*x1553)));
evalcond[2]=(sj0+(((-1.0)*x1546*x1553))+(((-1.0)*r02*x1552))+((x1543*x1551)));
evalcond[3]=((((-1.0)*x1548*x1553))+(((-1.0)*r12*x1552))+((x1543*x1547))+(((-1.0)*x1545)));
evalcond[4]=(((x1544*x1546))+(((-1.0)*r02*x1553))+(((-1.0)*x1551*x1552))+(((-1.0)*x1545)));
evalcond[5]=((((-1.0)*sj0))+((x1544*x1548))+(((-1.0)*r12*x1553))+(((-1.0)*x1547*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1554.value)))+(x1555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1556=IKsin(j4);
IkReal x1557=IKcos(j4);
IkReal x1558=((1.0)*cj0);
IkReal x1559=(cj5*r00);
IkReal x1560=(r11*sj5);
IkReal x1561=(cj5*r10);
IkReal x1562=(r21*sj5);
IkReal x1563=(cj5*r20);
IkReal x1564=(r01*sj5);
IkReal x1565=((1.0)*x1557);
IkReal x1566=((1.0)*x1556);
evalcond[0]=(((x1556*x1562))+(((-1.0)*r22*x1565))+(((-1.0)*x1563*x1566)));
evalcond[1]=((((-1.0)*x1562*x1565))+(((-1.0)*r22*x1566))+((x1557*x1563)));
evalcond[2]=((((-1.0)*x1559*x1566))+((x1556*x1564))+sj0+(((-1.0)*r02*x1565)));
evalcond[3]=(((x1556*x1560))+(((-1.0)*r12*x1565))+(((-1.0)*x1558))+(((-1.0)*x1561*x1566)));
evalcond[4]=((((-1.0)*r02*x1566))+((x1557*x1559))+(((-1.0)*x1564*x1565))+(((-1.0)*x1558)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1560*x1565))+((x1557*x1561))+(((-1.0)*r12*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1567=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1567.valid){
continue;
}
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1567.value)))+(x1568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1569=IKsin(j4);
IkReal x1570=IKcos(j4);
IkReal x1571=((1.0)*cj0);
IkReal x1572=(cj5*r00);
IkReal x1573=(r11*sj5);
IkReal x1574=(cj5*r10);
IkReal x1575=(r21*sj5);
IkReal x1576=(cj5*r20);
IkReal x1577=(r01*sj5);
IkReal x1578=((1.0)*x1570);
IkReal x1579=((1.0)*x1569);
evalcond[0]=((((-1.0)*x1576*x1579))+((x1569*x1575))+(((-1.0)*r22*x1578)));
evalcond[1]=((((-1.0)*x1575*x1578))+((x1570*x1576))+(((-1.0)*r22*x1579)));
evalcond[2]=((((-1.0)*r02*x1578))+sj0+((x1569*x1577))+(((-1.0)*x1572*x1579)));
evalcond[3]=(((x1569*x1573))+(((-1.0)*x1574*x1579))+(((-1.0)*r12*x1578))+(((-1.0)*x1571)));
evalcond[4]=((((-1.0)*r02*x1579))+((x1570*x1572))+(((-1.0)*x1577*x1578))+(((-1.0)*x1571)));
evalcond[5]=((((-1.0)*sj0))+((x1570*x1574))+(((-1.0)*x1573*x1578))+(((-1.0)*r12*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.53920805436791)*px))+(((3.40934584042491)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.53920805436791)*px))+(((3.40934584042491)*py))))+IKsqr(((((3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.53920805436791)*px))+(((3.40934584042491)*py))), ((((3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1580=IKsin(j0);
IkReal x1581=IKcos(j0);
evalcond[0]=((((0.24365)*x1581))+(((-1.0)*px))+(((0.11)*x1580)));
evalcond[1]=((((0.24365)*x1580))+(((-0.11)*x1581))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1582=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1582;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1583=cj5*cj5;
IkReal x1584=((1.0)*r21);
IkReal x1585=(cj5*sj5);
IkReal x1586=((1.0)*r20);
IkReal x1587=(((r01*r21))+(((-1.0)*r01*x1583*x1584))+(((-1.0)*r00*x1584*x1585))+((r00*r20*x1583))+((r02*r22))+(((-1.0)*r01*x1585*x1586)));
j4eval[0]=x1587;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1586))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1588=cj5*cj5;
IkReal x1589=(r21*sj5);
IkReal x1590=(r11*r21);
IkReal x1591=((1.0)*cj5*r20);
IkReal x1592=((((-1.0)*cj5*r10*x1589))+((r10*r20*x1588))+((r12*r22))+x1590+(((-1.0)*r11*sj5*x1591))+(((-1.0)*x1588*x1590)));
j4eval[0]=x1592;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1591))+((sj0*x1589))))));
j4eval[2]=IKsign(x1592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1593=cj5*cj5;
IkReal x1594=(r21*sj5);
IkReal x1595=(r11*r21);
IkReal x1596=((1.0)*cj5*r20);
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1596))+((sj0*x1594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign((((r10*r20*x1593))+(((-1.0)*x1593*x1595))+((r12*r22))+x1595+(((-1.0)*r11*sj5*x1596))+(((-1.0)*cj5*r10*x1594)))),-1);
if(!x1598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1597.value)+(((1.5707963267949)*(x1598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1599=IKsin(j4);
IkReal x1600=IKcos(j4);
IkReal x1601=(r11*sj5);
IkReal x1602=(cj5*r00);
IkReal x1603=(cj5*r10);
IkReal x1604=(r21*sj5);
IkReal x1605=(cj5*r20);
IkReal x1606=(r01*sj5);
IkReal x1607=((1.0)*x1600);
IkReal x1608=((1.0)*x1599);
evalcond[0]=(((x1599*x1604))+(((-1.0)*r22*x1607))+(((-1.0)*x1605*x1608)));
evalcond[1]=(((x1600*x1605))+(((-1.0)*r22*x1608))+(((-1.0)*x1604*x1607)));
evalcond[2]=(sj0+((x1599*x1606))+(((-1.0)*r02*x1607))+(((-1.0)*x1602*x1608)));
evalcond[3]=(cj0+((x1600*x1602))+(((-1.0)*r02*x1608))+(((-1.0)*x1606*x1607)));
evalcond[4]=(sj0+((x1600*x1603))+(((-1.0)*x1601*x1607))+(((-1.0)*r12*x1608)));
evalcond[5]=(((x1599*x1601))+(((-1.0)*x1603*x1608))+(((-1.0)*r12*x1607))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1609=cj5*cj5;
IkReal x1610=((1.0)*r21);
IkReal x1611=(cj5*sj5);
IkReal x1612=((1.0)*r20);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1611*x1612))+((r00*r20*x1609))+(((-1.0)*r00*x1610*x1611))+((r01*r21))+(((-1.0)*r01*x1609*x1610))+((r02*r22)))),-1);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1613.value)))+(x1614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1615=IKsin(j4);
IkReal x1616=IKcos(j4);
IkReal x1617=(r11*sj5);
IkReal x1618=(cj5*r00);
IkReal x1619=(cj5*r10);
IkReal x1620=(r21*sj5);
IkReal x1621=(cj5*r20);
IkReal x1622=(r01*sj5);
IkReal x1623=((1.0)*x1616);
IkReal x1624=((1.0)*x1615);
evalcond[0]=(((x1615*x1620))+(((-1.0)*x1621*x1624))+(((-1.0)*r22*x1623)));
evalcond[1]=((((-1.0)*r22*x1624))+(((-1.0)*x1620*x1623))+((x1616*x1621)));
evalcond[2]=(sj0+(((-1.0)*r02*x1623))+((x1615*x1622))+(((-1.0)*x1618*x1624)));
evalcond[3]=(cj0+(((-1.0)*r02*x1624))+(((-1.0)*x1622*x1623))+((x1616*x1618)));
evalcond[4]=((((-1.0)*r12*x1624))+sj0+(((-1.0)*x1617*x1623))+((x1616*x1619)));
evalcond[5]=((((-1.0)*r12*x1623))+(((-1.0)*x1619*x1624))+((x1615*x1617))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1625.valid){
continue;
}
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1625.value)))+(x1626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1627=IKsin(j4);
IkReal x1628=IKcos(j4);
IkReal x1629=(r11*sj5);
IkReal x1630=(cj5*r00);
IkReal x1631=(cj5*r10);
IkReal x1632=(r21*sj5);
IkReal x1633=(cj5*r20);
IkReal x1634=(r01*sj5);
IkReal x1635=((1.0)*x1628);
IkReal x1636=((1.0)*x1627);
evalcond[0]=(((x1627*x1632))+(((-1.0)*r22*x1635))+(((-1.0)*x1633*x1636)));
evalcond[1]=((((-1.0)*r22*x1636))+((x1628*x1633))+(((-1.0)*x1632*x1635)));
evalcond[2]=(((x1627*x1634))+sj0+(((-1.0)*x1630*x1636))+(((-1.0)*r02*x1635)));
evalcond[3]=(cj0+(((-1.0)*x1634*x1635))+((x1628*x1630))+(((-1.0)*r02*x1636)));
evalcond[4]=(sj0+(((-1.0)*r12*x1636))+((x1628*x1631))+(((-1.0)*x1629*x1635)));
evalcond[5]=(((x1627*x1629))+(((-1.0)*r12*x1635))+(((-1.0)*x1631*x1636))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1637=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1637;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1638=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1638;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1639=cj5*cj5;
IkReal x1640=((1.0)*r21);
IkReal x1641=(cj5*r20);
IkReal x1642=((((-1.0)*cj5*r00*sj5*x1640))+(((-1.0)*r01*sj5*x1641))+((r00*r20*x1639))+((r01*r21))+(((-1.0)*r01*x1639*x1640))+((r02*r22)));
j4eval[0]=x1642;
j4eval[1]=IKsign(x1642);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1641))+(((-1.0)*sj0*sj5*x1640))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1643=cj5*cj5;
IkReal x1644=((1.0)*r21);
IkReal x1645=(cj5*r20);
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x1644))+(((-1.0)*r01*sj5*x1645))+((r01*r21))+((r00*r20*x1643))+((r02*r22))+(((-1.0)*r01*x1643*x1644)))),-1);
if(!x1646.valid){
continue;
}
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal((((sj0*x1645))+(((-1.0)*sj0*sj5*x1644)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1646.value)))+(x1647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1648=IKsin(j4);
IkReal x1649=IKcos(j4);
IkReal x1650=((1.0)*cj0);
IkReal x1651=(cj5*r00);
IkReal x1652=(r11*sj5);
IkReal x1653=(cj5*r10);
IkReal x1654=(r21*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r01*sj5);
IkReal x1657=((1.0)*x1649);
IkReal x1658=((1.0)*x1648);
evalcond[0]=(((x1648*x1654))+(((-1.0)*r22*x1657))+(((-1.0)*x1655*x1658)));
evalcond[1]=((((-1.0)*x1654*x1657))+(((-1.0)*r22*x1658))+((x1649*x1655)));
evalcond[2]=(sj0+((x1648*x1656))+(((-1.0)*r02*x1657))+(((-1.0)*x1651*x1658)));
evalcond[3]=(((x1648*x1652))+(((-1.0)*x1653*x1658))+(((-1.0)*r12*x1657))+(((-1.0)*x1650)));
evalcond[4]=((((-1.0)*x1656*x1657))+((x1649*x1651))+(((-1.0)*x1650))+(((-1.0)*r02*x1658)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1652*x1657))+(((-1.0)*r12*x1658))+((x1649*x1653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1659.valid){
continue;
}
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1659.value)))+(x1660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j4);
IkReal x1662=IKcos(j4);
IkReal x1663=((1.0)*cj0);
IkReal x1664=(cj5*r00);
IkReal x1665=(r11*sj5);
IkReal x1666=(cj5*r10);
IkReal x1667=(r21*sj5);
IkReal x1668=(cj5*r20);
IkReal x1669=(r01*sj5);
IkReal x1670=((1.0)*x1662);
IkReal x1671=((1.0)*x1661);
evalcond[0]=((((-1.0)*x1668*x1671))+((x1661*x1667))+(((-1.0)*r22*x1670)));
evalcond[1]=((((-1.0)*x1667*x1670))+((x1662*x1668))+(((-1.0)*r22*x1671)));
evalcond[2]=(sj0+(((-1.0)*r02*x1670))+(((-1.0)*x1664*x1671))+((x1661*x1669)));
evalcond[3]=((((-1.0)*r12*x1670))+(((-1.0)*x1663))+(((-1.0)*x1666*x1671))+((x1661*x1665)));
evalcond[4]=((((-1.0)*r02*x1671))+(((-1.0)*x1669*x1670))+((x1662*x1664))+(((-1.0)*x1663)));
evalcond[5]=((((-1.0)*sj0))+((x1662*x1666))+(((-1.0)*r12*x1671))+(((-1.0)*x1665*x1670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1674=IKsin(j4);
IkReal x1675=IKcos(j4);
IkReal x1676=((1.0)*cj0);
IkReal x1677=(cj5*r00);
IkReal x1678=(r11*sj5);
IkReal x1679=(cj5*r10);
IkReal x1680=(r21*sj5);
IkReal x1681=(cj5*r20);
IkReal x1682=(r01*sj5);
IkReal x1683=((1.0)*x1675);
IkReal x1684=((1.0)*x1674);
evalcond[0]=((((-1.0)*x1681*x1684))+(((-1.0)*r22*x1683))+((x1674*x1680)));
evalcond[1]=(((x1675*x1681))+(((-1.0)*r22*x1684))+(((-1.0)*x1680*x1683)));
evalcond[2]=((((-1.0)*x1677*x1684))+sj0+((x1674*x1682))+(((-1.0)*r02*x1683)));
evalcond[3]=((((-1.0)*r12*x1683))+((x1674*x1678))+(((-1.0)*x1679*x1684))+(((-1.0)*x1676)));
evalcond[4]=(((x1675*x1677))+(((-1.0)*x1682*x1683))+(((-1.0)*r02*x1684))+(((-1.0)*x1676)));
evalcond[5]=((((-1.0)*r12*x1684))+((x1675*x1679))+(((-1.0)*sj0))+(((-1.0)*x1678*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1685=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1685;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1686=cj5*cj5;
IkReal x1687=((1.0)*r21);
IkReal x1688=(cj5*sj5);
IkReal x1689=((1.0)*r20);
IkReal x1690=((((-1.0)*r01*x1686*x1687))+((r01*r21))+((r00*r20*x1686))+(((-1.0)*r00*x1687*x1688))+((r02*r22))+(((-1.0)*r01*x1688*x1689)));
j4eval[0]=x1690;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1689)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1691=cj5*cj5;
IkReal x1692=(r21*sj5);
IkReal x1693=(r11*r21);
IkReal x1694=((1.0)*cj5*r20);
IkReal x1695=((((-1.0)*x1691*x1693))+x1693+((r12*r22))+(((-1.0)*r11*sj5*x1694))+((r10*r20*x1691))+(((-1.0)*cj5*r10*x1692)));
j4eval[0]=x1695;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1694))+((sj0*x1692)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1696=cj5*cj5;
IkReal x1697=(r21*sj5);
IkReal x1698=(r11*r21);
IkReal x1699=((1.0)*cj5*r20);
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1699))+((sj0*x1697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(IKsign((x1698+((r12*r22))+(((-1.0)*r11*sj5*x1699))+((r10*r20*x1696))+(((-1.0)*cj5*r10*x1697))+(((-1.0)*x1696*x1698)))),-1);
if(!x1701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1700.value)+(((1.5707963267949)*(x1701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1702=IKsin(j4);
IkReal x1703=IKcos(j4);
IkReal x1704=(r11*sj5);
IkReal x1705=(cj5*r00);
IkReal x1706=(cj5*r10);
IkReal x1707=(r21*sj5);
IkReal x1708=(cj5*r20);
IkReal x1709=(r01*sj5);
IkReal x1710=((1.0)*x1703);
IkReal x1711=((1.0)*x1702);
evalcond[0]=((((-1.0)*x1708*x1711))+(((-1.0)*r22*x1710))+((x1702*x1707)));
evalcond[1]=((((-1.0)*x1707*x1710))+((x1703*x1708))+(((-1.0)*r22*x1711)));
evalcond[2]=(sj0+(((-1.0)*r02*x1710))+(((-1.0)*x1705*x1711))+((x1702*x1709)));
evalcond[3]=(cj0+(((-1.0)*x1709*x1710))+((x1703*x1705))+(((-1.0)*r02*x1711)));
evalcond[4]=(sj0+((x1703*x1706))+(((-1.0)*x1704*x1710))+(((-1.0)*r12*x1711)));
evalcond[5]=((((-1.0)*x1706*x1711))+((x1702*x1704))+(((-1.0)*r12*x1710))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1712=cj5*cj5;
IkReal x1713=((1.0)*r21);
IkReal x1714=(cj5*sj5);
IkReal x1715=((1.0)*r20);
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(IKsign((((r00*r20*x1712))+((r01*r21))+(((-1.0)*r01*x1714*x1715))+(((-1.0)*r01*x1712*x1713))+(((-1.0)*r00*x1713*x1714))+((r02*r22)))),-1);
if(!x1717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1716.value)+(((1.5707963267949)*(x1717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1718=IKsin(j4);
IkReal x1719=IKcos(j4);
IkReal x1720=(r11*sj5);
IkReal x1721=(cj5*r00);
IkReal x1722=(cj5*r10);
IkReal x1723=(r21*sj5);
IkReal x1724=(cj5*r20);
IkReal x1725=(r01*sj5);
IkReal x1726=((1.0)*x1719);
IkReal x1727=((1.0)*x1718);
evalcond[0]=((((-1.0)*r22*x1726))+((x1718*x1723))+(((-1.0)*x1724*x1727)));
evalcond[1]=((((-1.0)*r22*x1727))+(((-1.0)*x1723*x1726))+((x1719*x1724)));
evalcond[2]=(sj0+((x1718*x1725))+(((-1.0)*x1721*x1727))+(((-1.0)*r02*x1726)));
evalcond[3]=(cj0+(((-1.0)*x1725*x1726))+((x1719*x1721))+(((-1.0)*r02*x1727)));
evalcond[4]=(sj0+(((-1.0)*r12*x1727))+(((-1.0)*x1720*x1726))+((x1719*x1722)));
evalcond[5]=((((-1.0)*r12*x1726))+(((-1.0)*x1722*x1727))+((x1718*x1720))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1728.valid){
continue;
}
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1728.value)))+(x1729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1730=IKsin(j4);
IkReal x1731=IKcos(j4);
IkReal x1732=(r11*sj5);
IkReal x1733=(cj5*r00);
IkReal x1734=(cj5*r10);
IkReal x1735=(r21*sj5);
IkReal x1736=(cj5*r20);
IkReal x1737=(r01*sj5);
IkReal x1738=((1.0)*x1731);
IkReal x1739=((1.0)*x1730);
evalcond[0]=(((x1730*x1735))+(((-1.0)*x1736*x1739))+(((-1.0)*r22*x1738)));
evalcond[1]=(((x1731*x1736))+(((-1.0)*x1735*x1738))+(((-1.0)*r22*x1739)));
evalcond[2]=((((-1.0)*x1733*x1739))+((x1730*x1737))+sj0+(((-1.0)*r02*x1738)));
evalcond[3]=(((x1731*x1733))+cj0+(((-1.0)*x1737*x1738))+(((-1.0)*r02*x1739)));
evalcond[4]=(sj0+((x1731*x1734))+(((-1.0)*r12*x1739))+(((-1.0)*x1732*x1738)));
evalcond[5]=(((x1730*x1732))+(((-1.0)*r12*x1738))+(((-1.0)*x1734*x1739))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1740=(cj1*cj2);
IkReal x1741=(sj1*sj2);
IkReal x1742=((24.365)*cj1);
IkReal x1743=(r00*sj5);
IkReal x1744=((100.0)*px);
IkReal x1745=(cj5*r01);
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(((((11.0)*x1740))+(((-11.0)*x1741))),-1);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747=IKPowWithIntegerCheck((x1740+(((-1.0)*x1741))),-1);
if(!x1747.valid){
continue;
}
if( IKabs(((x1746.value)*(((((-1.0)*x1741*x1744))+(((-12.79)*x1740*x1743))+(((-12.79)*x1740*x1745))+(((12.79)*x1741*x1745))+(((12.79)*x1741*x1743))+((x1740*x1744))+(((-1.0)*x1742*x1745))+(((-1.0)*x1742*x1743)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1747.value)*(((((-1.0)*x1743))+(((-1.0)*x1745)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1746.value)*(((((-1.0)*x1741*x1744))+(((-12.79)*x1740*x1743))+(((-12.79)*x1740*x1745))+(((12.79)*x1741*x1745))+(((12.79)*x1741*x1743))+((x1740*x1744))+(((-1.0)*x1742*x1745))+(((-1.0)*x1742*x1743))))))+IKsqr(((x1747.value)*(((((-1.0)*x1743))+(((-1.0)*x1745))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1746.value)*(((((-1.0)*x1741*x1744))+(((-12.79)*x1740*x1743))+(((-12.79)*x1740*x1745))+(((12.79)*x1741*x1745))+(((12.79)*x1741*x1743))+((x1740*x1744))+(((-1.0)*x1742*x1745))+(((-1.0)*x1742*x1743))))), ((x1747.value)*(((((-1.0)*x1743))+(((-1.0)*x1745))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1748=IKcos(j0);
IkReal x1749=IKsin(j0);
IkReal x1750=(cj5*r01);
IkReal x1751=(sj1*sj2);
IkReal x1752=(cj5*r11);
IkReal x1753=(r00*sj5);
IkReal x1754=((0.24365)*cj1);
IkReal x1755=(r10*sj5);
IkReal x1756=(cj1*cj2*x1749);
IkReal x1757=(cj1*cj2*x1748);
evalcond[0]=(x1757+x1753+x1750+(((-1.0)*x1748*x1751)));
evalcond[1]=((((-1.0)*x1749*x1751))+x1756+x1755+x1752);
evalcond[2]=((((-1.0)*x1748*x1754))+(((-0.21325)*x1757))+(((0.21325)*x1748*x1751))+(((-0.08535)*x1750))+(((-0.08535)*x1753))+(((-1.0)*px))+(((0.11)*x1749)));
evalcond[3]=((((-0.21325)*x1756))+(((-0.08535)*x1755))+(((-0.08535)*x1752))+(((-1.0)*x1749*x1754))+(((-1.0)*py))+(((-0.11)*x1748))+(((0.21325)*x1749*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1758=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1758;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1759=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1759;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1760=((1.0)*cj5);
IkReal x1761=((((-1.0)*r21*x1760))+(((-1.0)*r20*sj5)));
j4eval[0]=x1761;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1760))+(((-1.0)*r10*sj0*x1760))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1762=((-1.0)*r20);
IkReal x1764 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1764)==0){
continue;
}
IkReal x1763=pow(x1764,-0.5);
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1762),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1765.value));
IkReal gconst79=(r21*x1763);
IkReal gconst80=(x1762*x1763);
CheckValue<IkReal> x1766 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1766.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1767=((-1.0)*r20);
IkReal x1768=x1763;
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1767),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
IkReal x1769=((-1.0)*(x1770.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1769;
IkReal gconst78=x1769;
IkReal gconst79=(r21*x1768);
IkReal gconst80=(x1767*x1768);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1771=((-1.0)*r20);
IkReal x1772=x1763;
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1771),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
IkReal x1773=((-1.0)*(x1774.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1773;
IkReal gconst78=x1773;
IkReal gconst79=(r21*x1772);
IkReal gconst80=(x1771*x1772);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1775=((-1.0)*r20);
IkReal x1776=x1763;
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1775),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
IkReal x1777=((-1.0)*(x1778.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1777;
IkReal gconst78=x1777;
IkReal gconst79=(r21*x1776);
IkReal gconst80=(x1775*x1776);
IkReal x1779=r22*r22;
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1779))),-1);
if(!x1782.valid){
continue;
}
IkReal x1780=x1782.value;
IkReal x1781=(x1779+((x1780*(r20*r20*r20*r20)))+((x1780*(r21*r21*r21*r21)))+(((2.0)*x1780*(r20*r20)*(r21*r21))));
j4eval[0]=x1781;
j4eval[1]=IKsign(x1781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1783=(sj1*sj2);
IkReal x1784=(gconst80*r20);
IkReal x1785=(gconst79*r21);
IkReal x1786=(cj1*cj2);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((((r22*x1783))+(((-1.0)*r22*x1786)))),IkReal((((x1783*x1785))+(((-1.0)*x1783*x1784))+((x1784*x1786))+(((-1.0)*x1785*x1786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1784*x1785))+(r22*r22)+(x1785*x1785)+(x1784*x1784))),-1);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=(gconst79*r01);
IkReal x1792=(cj2*sj1);
IkReal x1793=(gconst79*r21);
IkReal x1794=(gconst79*r11);
IkReal x1795=(cj1*sj2);
IkReal x1796=((1.0)*x1790);
IkReal x1797=(gconst80*x1790);
IkReal x1798=((1.0)*x1789);
IkReal x1799=(gconst80*x1798);
evalcond[0]=((((-1.0)*r22*x1796))+((x1789*x1793))+(((-1.0)*r20*x1799)));
evalcond[1]=(sj0+(((-1.0)*r00*x1799))+((x1789*x1791))+(((-1.0)*r02*x1796)));
evalcond[2]=((((-1.0)*r10*x1799))+(((-1.0)*r12*x1796))+((x1789*x1794))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1798))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1793*x1796))+((r20*x1797)));
evalcond[4]=(((r00*x1797))+(((-1.0)*r02*x1798))+((cj0*x1792))+((cj0*x1795))+(((-1.0)*x1791*x1796)));
evalcond[5]=(((r10*x1797))+((sj0*x1795))+((sj0*x1792))+(((-1.0)*r12*x1798))+(((-1.0)*x1794*x1796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1800.valid){
continue;
}
CheckValue<IkReal> x1801 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1800.value)))+(x1801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1802=IKsin(j4);
IkReal x1803=IKcos(j4);
IkReal x1804=(gconst79*r01);
IkReal x1805=(cj2*sj1);
IkReal x1806=(gconst79*r21);
IkReal x1807=(gconst79*r11);
IkReal x1808=(cj1*sj2);
IkReal x1809=((1.0)*x1803);
IkReal x1810=(gconst80*x1803);
IkReal x1811=((1.0)*x1802);
IkReal x1812=(gconst80*x1811);
evalcond[0]=(((x1802*x1806))+(((-1.0)*r22*x1809))+(((-1.0)*r20*x1812)));
evalcond[1]=(((x1802*x1804))+sj0+(((-1.0)*r00*x1812))+(((-1.0)*r02*x1809)));
evalcond[2]=(((x1802*x1807))+(((-1.0)*r10*x1812))+(((-1.0)*r12*x1809))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1810))+(((-1.0)*x1806*x1809))+(((-1.0)*r22*x1811)));
evalcond[4]=(((cj0*x1808))+((cj0*x1805))+(((-1.0)*x1804*x1809))+(((-1.0)*r02*x1811))+((r00*x1810)));
evalcond[5]=(((sj0*x1805))+((sj0*x1808))+(((-1.0)*r12*x1811))+((r10*x1810))+(((-1.0)*x1807*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1813.valid){
continue;
}
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1813.value)))+(x1814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1815=IKsin(j4);
IkReal x1816=IKcos(j4);
IkReal x1817=(gconst79*r01);
IkReal x1818=(cj2*sj1);
IkReal x1819=(gconst79*r21);
IkReal x1820=(gconst79*r11);
IkReal x1821=(cj1*sj2);
IkReal x1822=((1.0)*x1816);
IkReal x1823=(gconst80*x1816);
IkReal x1824=((1.0)*x1815);
IkReal x1825=(gconst80*x1824);
evalcond[0]=((((-1.0)*r22*x1822))+((x1815*x1819))+(((-1.0)*r20*x1825)));
evalcond[1]=(sj0+(((-1.0)*r00*x1825))+((x1815*x1817))+(((-1.0)*r02*x1822)));
evalcond[2]=((((-1.0)*r12*x1822))+(((-1.0)*cj0))+(((-1.0)*r10*x1825))+((x1815*x1820)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1819*x1822))+(((-1.0)*r22*x1824))+((r20*x1823)));
evalcond[4]=(((cj0*x1821))+((cj0*x1818))+((r00*x1823))+(((-1.0)*x1817*x1822))+(((-1.0)*r02*x1824)));
evalcond[5]=(((r10*x1823))+((sj0*x1818))+(((-1.0)*r12*x1824))+((sj0*x1821))+(((-1.0)*x1820*x1822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1826=((-1.0)*r21);
IkReal x1828 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1828)==0){
continue;
}
IkReal x1827=pow(x1828,-0.5);
CheckValue<IkReal> x1829 = IKatan2WithCheck(IkReal(x1826),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1829.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1829.value))));
IkReal gconst82=(x1826*x1827);
IkReal gconst83=((1.0)*r20*x1827);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1830.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1831=((-1.0)*r21);
CheckValue<IkReal> x1834 = IKatan2WithCheck(IkReal(x1831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1834.valid){
continue;
}
IkReal x1832=((1.0)*(x1834.value));
IkReal x1833=x1827;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1832)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1832)));
IkReal gconst82=(x1831*x1833);
IkReal gconst83=((1.0)*r20*x1833);
IkReal x1835=r22*r22;
IkReal x1836=((1.0)*x1835);
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(((-1.0)+x1835),-1);
if(!x1840.valid){
continue;
}
IkReal x1837=x1840.value;
if((((1.0)+(((-1.0)*x1836)))) < -0.00001)
continue;
IkReal x1838=IKsqrt(((1.0)+(((-1.0)*x1836))));
IkReal x1839=(sj0*x1837*x1838);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1836*x1839))+x1839))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1841=((-1.0)*r21);
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(x1841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1842=((1.0)*(x1844.value));
IkReal x1843=x1827;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1842)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1842)));
IkReal gconst82=(x1841*x1843);
IkReal gconst83=((1.0)*r20*x1843);
IkReal x1845=r22*r22;
IkReal x1846=((1.0)*x1845);
CheckValue<IkReal> x1850=IKPowWithIntegerCheck(((-1.0)+x1845),-1);
if(!x1850.valid){
continue;
}
IkReal x1847=x1850.value;
if((((1.0)+(((-1.0)*x1846)))) < -0.00001)
continue;
IkReal x1848=IKsqrt(((1.0)+(((-1.0)*x1846))));
IkReal x1849=(cj0*x1847*x1848);
j4eval[0]=((IKabs((x1849+(((-1.0)*x1846*x1849)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1851=((-1.0)*r21);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(x1851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
IkReal x1852=((1.0)*(x1854.value));
IkReal x1853=x1827;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1852)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1852)));
IkReal gconst82=(x1851*x1853);
IkReal gconst83=((1.0)*r20*x1853);
IkReal x1855=r22*r22;
IkReal x1856=(cj0*r02);
IkReal x1857=(r12*sj0);
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(((-1.0)+x1855),-1);
if(!x1861.valid){
continue;
}
IkReal x1858=x1861.value;
if((((1.0)+(((-1.0)*x1855)))) < -0.00001)
continue;
IkReal x1859=IKsqrt(((1.0)+(((-1.0)*x1855))));
IkReal x1860=((1.0)*r22*x1858*x1859);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x1856+x1857)))+(IKabs(((((-1.0)*x1856*x1860))+(((-1.0)*x1857*x1860))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1862=((1.0)*gconst83);
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1862))+((gconst82*r11*sj0))+((cj0*gconst82*r01))+(((-1.0)*cj0*r00*x1862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1862)))),-1);
if(!x1864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1863.value)+(((1.5707963267949)*(x1864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1865=IKsin(j4);
IkReal x1866=IKcos(j4);
IkReal x1867=(cj2*sj1);
IkReal x1868=(gconst82*r11);
IkReal x1869=(cj1*sj2);
IkReal x1870=((1.0)*x1866);
IkReal x1871=(gconst83*x1866);
IkReal x1872=(gconst82*x1865);
IkReal x1873=((1.0)*x1865);
evalcond[0]=((((-1.0)*gconst83*r20*x1873))+(((-1.0)*r22*x1870))+((r21*x1872)));
evalcond[1]=(sj0+(((-1.0)*r02*x1870))+((r01*x1872))+(((-1.0)*gconst83*r00*x1873)));
evalcond[2]=(((x1865*x1868))+(((-1.0)*r12*x1870))+(((-1.0)*gconst83*r10*x1873))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1873))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1871))+(((-1.0)*gconst82*r21*x1870)));
evalcond[4]=((((-1.0)*r02*x1873))+(((-1.0)*gconst82*r01*x1870))+((cj0*x1867))+((cj0*x1869))+((r00*x1871)));
evalcond[5]=((((-1.0)*x1868*x1870))+(((-1.0)*r12*x1873))+((r10*x1871))+((sj0*x1869))+((sj0*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1874.value)+(((1.5707963267949)*(x1875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1876=IKsin(j4);
IkReal x1877=IKcos(j4);
IkReal x1878=(cj2*sj1);
IkReal x1879=(gconst82*r11);
IkReal x1880=(cj1*sj2);
IkReal x1881=((1.0)*x1877);
IkReal x1882=(gconst83*x1877);
IkReal x1883=(gconst82*x1876);
IkReal x1884=((1.0)*x1876);
evalcond[0]=(((r21*x1883))+(((-1.0)*r22*x1881))+(((-1.0)*gconst83*r20*x1884)));
evalcond[1]=((((-1.0)*gconst83*r00*x1884))+sj0+(((-1.0)*r02*x1881))+((r01*x1883)));
evalcond[2]=(((x1876*x1879))+(((-1.0)*r12*x1881))+(((-1.0)*gconst83*r10*x1884))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1882))+(((-1.0)*r22*x1884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1881)));
evalcond[4]=((((-1.0)*r02*x1884))+((r00*x1882))+(((-1.0)*gconst82*r01*x1881))+((cj0*x1880))+((cj0*x1878)));
evalcond[5]=((((-1.0)*x1879*x1881))+(((-1.0)*r12*x1884))+((sj0*x1878))+((r10*x1882))+((sj0*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
CheckValue<IkReal> x1886=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1885.value)+(((1.5707963267949)*(x1886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1887=IKsin(j4);
IkReal x1888=IKcos(j4);
IkReal x1889=(cj2*sj1);
IkReal x1890=(gconst82*r11);
IkReal x1891=(cj1*sj2);
IkReal x1892=((1.0)*x1888);
IkReal x1893=(gconst83*x1888);
IkReal x1894=(gconst82*x1887);
IkReal x1895=((1.0)*x1887);
evalcond[0]=((((-1.0)*r22*x1892))+(((-1.0)*gconst83*r20*x1895))+((r21*x1894)));
evalcond[1]=((((-1.0)*r02*x1892))+sj0+((r01*x1894))+(((-1.0)*gconst83*r00*x1895)));
evalcond[2]=((((-1.0)*r12*x1892))+((x1887*x1890))+(((-1.0)*gconst83*r10*x1895))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x1892))+((r20*x1893))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1895)));
evalcond[4]=((((-1.0)*r02*x1895))+((r00*x1893))+(((-1.0)*gconst82*r01*x1892))+((cj0*x1891))+((cj0*x1889)));
evalcond[5]=(((r10*x1893))+(((-1.0)*x1890*x1892))+(((-1.0)*r12*x1895))+((sj0*x1891))+((sj0*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1897 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1897)==0){
continue;
}
IkReal x1896=pow(x1897,-0.5);
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1898.value));
IkReal gconst85=((-1.0)*r01*x1896);
IkReal gconst86=(r00*x1896);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1899.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1902 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1902.valid){
continue;
}
IkReal x1900=((-1.0)*(x1902.value));
IkReal x1901=x1896;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1900;
IkReal gconst84=x1900;
IkReal gconst85=((-1.0)*r01*x1901);
IkReal gconst86=(r00*x1901);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1903=((1.0)*gconst86);
CheckValue<IkReal> x1904=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1903)))),-1);
if(!x1904.valid){
continue;
}
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1903))+((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x1903))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1904.value)))+(x1905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1906=IKsin(j4);
IkReal x1907=IKcos(j4);
IkReal x1908=(gconst85*r21);
IkReal x1909=(cj2*sj1);
IkReal x1910=(gconst86*r00);
IkReal x1911=(gconst86*r10);
IkReal x1912=(gconst85*r11);
IkReal x1913=(gconst85*r01);
IkReal x1914=(gconst86*r20);
IkReal x1915=(cj1*sj2);
IkReal x1916=((1.0)*x1907);
IkReal x1917=((1.0)*x1906);
evalcond[0]=((((-1.0)*x1914*x1917))+(((-1.0)*r22*x1916))+((x1906*x1908)));
evalcond[1]=((((-1.0)*x1910*x1917))+sj0+(((-1.0)*r02*x1916))+((x1906*x1913)));
evalcond[2]=((((-1.0)*x1911*x1917))+(((-1.0)*r12*x1916))+((x1906*x1912))+(((-1.0)*cj0)));
evalcond[3]=(((x1907*x1914))+(((-1.0)*r22*x1917))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1908*x1916)));
evalcond[4]=((((-1.0)*r02*x1917))+((x1907*x1910))+((cj0*x1909))+(((-1.0)*x1913*x1916))+((cj0*x1915)));
evalcond[5]=(((x1907*x1911))+(((-1.0)*r12*x1917))+((sj0*x1909))+((sj0*x1915))+(((-1.0)*x1912*x1916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1918=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x1918.valid){
continue;
}
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1918.value)))+(x1919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1920=IKsin(j4);
IkReal x1921=IKcos(j4);
IkReal x1922=(gconst85*r21);
IkReal x1923=(cj2*sj1);
IkReal x1924=(gconst86*r00);
IkReal x1925=(gconst86*r10);
IkReal x1926=(gconst85*r11);
IkReal x1927=(gconst85*r01);
IkReal x1928=(gconst86*r20);
IkReal x1929=(cj1*sj2);
IkReal x1930=((1.0)*x1921);
IkReal x1931=((1.0)*x1920);
evalcond[0]=((((-1.0)*x1928*x1931))+(((-1.0)*r22*x1930))+((x1920*x1922)));
evalcond[1]=(sj0+(((-1.0)*x1924*x1931))+((x1920*x1927))+(((-1.0)*r02*x1930)));
evalcond[2]=((((-1.0)*r12*x1930))+(((-1.0)*x1925*x1931))+((x1920*x1926))+(((-1.0)*cj0)));
evalcond[3]=(((x1921*x1928))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1931))+(((-1.0)*x1922*x1930)));
evalcond[4]=(((x1921*x1924))+((cj0*x1923))+((cj0*x1929))+(((-1.0)*x1927*x1930))+(((-1.0)*r02*x1931)));
evalcond[5]=(((x1921*x1925))+(((-1.0)*r12*x1931))+(((-1.0)*x1926*x1930))+((sj0*x1923))+((sj0*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1933 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1933)==0){
continue;
}
IkReal x1932=pow(x1933,-0.5);
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1934.value))));
IkReal gconst88=((1.0)*r01*x1932);
IkReal gconst89=((-1.0)*r00*x1932);
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1935.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
IkReal x1936=((1.0)*(x1938.value));
IkReal x1937=x1932;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1936)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1936)));
IkReal gconst88=((1.0)*r01*x1937);
IkReal gconst89=((-1.0)*r00*x1937);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
IkReal x1939=((1.0)*(x1941.value));
IkReal x1940=x1932;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1939)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1939)));
IkReal gconst88=((1.0)*r01*x1940);
IkReal gconst89=((-1.0)*r00*x1940);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1944 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
IkReal x1942=((1.0)*(x1944.value));
IkReal x1943=x1932;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1942)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1942)));
IkReal gconst88=((1.0)*r01*x1943);
IkReal gconst89=((-1.0)*r00*x1943);
IkReal x1945=r02*r02;
IkReal x1946=(r12*sj0);
IkReal x1947=x1932;
IkReal x1948=(cj0*x1947);
j4eval[0]=((IKabs((x1946+((cj0*r02)))))+(IKabs((((x1945*x1948))+((r02*x1946*x1947))+(((-1.0)*x1948))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1949=((1.0)*gconst89);
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*cj0*r00*x1949))+((gconst88*r11*sj0))+(((-1.0)*r10*sj0*x1949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1949))+(((-1.0)*gconst88*r20)))),-1);
if(!x1951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1950.value)+(((1.5707963267949)*(x1951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1952=IKsin(j4);
IkReal x1953=IKcos(j4);
IkReal x1954=(cj2*sj1);
IkReal x1955=(cj1*sj2);
IkReal x1956=((1.0)*x1953);
IkReal x1957=(gconst89*x1953);
IkReal x1958=((1.0)*x1952);
IkReal x1959=(gconst88*x1952);
IkReal x1960=(gconst89*x1958);
evalcond[0]=((((-1.0)*r22*x1956))+((r21*x1959))+(((-1.0)*r20*x1960)));
evalcond[1]=(sj0+(((-1.0)*r02*x1956))+(((-1.0)*r00*x1960))+((r01*x1959)));
evalcond[2]=(((r11*x1959))+(((-1.0)*r10*x1960))+(((-1.0)*r12*x1956))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1958))+((r20*x1957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1956)));
evalcond[4]=(((cj0*x1954))+((cj0*x1955))+(((-1.0)*gconst88*r01*x1956))+(((-1.0)*r02*x1958))+((r00*x1957)));
evalcond[5]=(((r10*x1957))+((sj0*x1954))+((sj0*x1955))+(((-1.0)*gconst88*r11*x1956))+(((-1.0)*r12*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1961.valid){
continue;
}
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1961.value)))+(x1962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1963=IKsin(j4);
IkReal x1964=IKcos(j4);
IkReal x1965=(cj2*sj1);
IkReal x1966=(cj1*sj2);
IkReal x1967=((1.0)*x1964);
IkReal x1968=(gconst89*x1964);
IkReal x1969=((1.0)*x1963);
IkReal x1970=(gconst88*x1963);
IkReal x1971=(gconst89*x1969);
evalcond[0]=((((-1.0)*r22*x1967))+((r21*x1970))+(((-1.0)*r20*x1971)));
evalcond[1]=(sj0+(((-1.0)*r02*x1967))+(((-1.0)*r00*x1971))+((r01*x1970)));
evalcond[2]=(((r11*x1970))+(((-1.0)*r10*x1971))+(((-1.0)*r12*x1967))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1968))+(((-1.0)*r22*x1969))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1967)));
evalcond[4]=(((cj0*x1966))+((cj0*x1965))+(((-1.0)*r02*x1969))+(((-1.0)*gconst88*r01*x1967))+((r00*x1968)));
evalcond[5]=(((r10*x1968))+((sj0*x1966))+((sj0*x1965))+(((-1.0)*gconst88*r11*x1967))+(((-1.0)*r12*x1969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1972.value)))+(x1973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1974=IKsin(j4);
IkReal x1975=IKcos(j4);
IkReal x1976=(cj2*sj1);
IkReal x1977=(cj1*sj2);
IkReal x1978=((1.0)*x1975);
IkReal x1979=(gconst89*x1975);
IkReal x1980=((1.0)*x1974);
IkReal x1981=(gconst88*x1974);
IkReal x1982=(gconst89*x1980);
evalcond[0]=((((-1.0)*r22*x1978))+((r21*x1981))+(((-1.0)*r20*x1982)));
evalcond[1]=(sj0+(((-1.0)*r02*x1978))+((r01*x1981))+(((-1.0)*r00*x1982)));
evalcond[2]=(((r11*x1981))+(((-1.0)*r10*x1982))+(((-1.0)*r12*x1978))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1979))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1978))+(((-1.0)*r22*x1980)));
evalcond[4]=((((-1.0)*r02*x1980))+(((-1.0)*gconst88*r01*x1978))+((r00*x1979))+((cj0*x1977))+((cj0*x1976)));
evalcond[5]=(((r10*x1979))+((sj0*x1977))+((sj0*x1976))+(((-1.0)*gconst88*r11*x1978))+(((-1.0)*r12*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1983=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1983;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1984=((1.0)*cj5);
IkReal x1985=((((-1.0)*r21*x1984))+(((-1.0)*r20*sj5)));
j4eval[0]=x1985;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x1984))))));
j4eval[2]=IKsign(x1985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1986=cj5*cj5;
IkReal x1987=r01*r01;
IkReal x1988=(cj5*r00);
IkReal x1989=(r01*sj5);
IkReal x1990=((((-2.0)*x1988*x1989))+x1987+(((-1.0)*x1986*x1987))+(r02*r02)+((x1986*(r00*r00))));
j4eval[0]=x1990;
j4eval[1]=((IKabs(r02))+(IKabs((x1988+(((-1.0)*x1989))))));
j4eval[2]=IKsign(x1990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1991=cj5*cj5;
IkReal x1992=r01*r01;
IkReal x1993=(r01*sj5);
IkReal x1994=(cj5*r00);
CheckValue<IkReal> x1995 = IKatan2WithCheck(IkReal((x1994+(((-1.0)*x1993)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1993*x1994))+((x1991*(r00*r00)))+x1992+(((-1.0)*x1991*x1992))+(r02*r02))),-1);
if(!x1996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1995.value)+(((1.5707963267949)*(x1996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1997=IKsin(j4);
IkReal x1998=IKcos(j4);
IkReal x1999=(cj5*r10);
IkReal x2000=(r01*sj5);
IkReal x2001=(cj5*r00);
IkReal x2002=(cj5*r20);
IkReal x2003=((1.0)*x1998);
IkReal x2004=((1.0)*x1997);
IkReal x2005=(sj5*x1997);
evalcond[0]=(((r21*x2005))+(((-1.0)*r22*x2003))+(((-1.0)*x2002*x2004)));
evalcond[1]=(((r11*x2005))+(((-1.0)*r12*x2003))+(((-1.0)*x1999*x2004)));
evalcond[2]=((((-1.0)*x2000*x2003))+(((-1.0)*r02*x2004))+((x1998*x2001)));
evalcond[3]=((1.0)+((x1997*x2000))+(((-1.0)*x2001*x2004))+(((-1.0)*r02*x2003)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2004))+((cj1*sj2))+(((-1.0)*r11*sj5*x2003))+((x1998*x1999)));
evalcond[5]=((((-1.0)*r22*x2004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2003))+((x1998*x2002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2006=((1.0)*cj5);
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2006))+(((-1.0)*r20*sj5)))),-1);
if(!x2007.valid){
continue;
}
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2006))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2007.value)))+(x2008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2009=IKsin(j4);
IkReal x2010=IKcos(j4);
IkReal x2011=(cj5*r10);
IkReal x2012=(r01*sj5);
IkReal x2013=(cj5*r00);
IkReal x2014=(cj5*r20);
IkReal x2015=((1.0)*x2010);
IkReal x2016=((1.0)*x2009);
IkReal x2017=(sj5*x2009);
evalcond[0]=((((-1.0)*x2014*x2016))+((r21*x2017))+(((-1.0)*r22*x2015)));
evalcond[1]=((((-1.0)*x2011*x2016))+(((-1.0)*r12*x2015))+((r11*x2017)));
evalcond[2]=(((x2010*x2013))+(((-1.0)*x2012*x2015))+(((-1.0)*r02*x2016)));
evalcond[3]=((1.0)+(((-1.0)*x2013*x2016))+((x2009*x2012))+(((-1.0)*r02*x2015)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2015))+((cj1*sj2))+((x2010*x2011))+(((-1.0)*r12*x2016)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2015))+((x2010*x2014))+(((-1.0)*r22*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2018.value)+(((1.5707963267949)*(x2019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2020=IKsin(j4);
IkReal x2021=IKcos(j4);
IkReal x2022=(cj5*r10);
IkReal x2023=(r01*sj5);
IkReal x2024=(cj5*r00);
IkReal x2025=(cj5*r20);
IkReal x2026=((1.0)*x2021);
IkReal x2027=((1.0)*x2020);
IkReal x2028=(sj5*x2020);
evalcond[0]=((((-1.0)*r22*x2026))+(((-1.0)*x2025*x2027))+((r21*x2028)));
evalcond[1]=((((-1.0)*x2022*x2027))+((r11*x2028))+(((-1.0)*r12*x2026)));
evalcond[2]=((((-1.0)*x2023*x2026))+(((-1.0)*r02*x2027))+((x2021*x2024)));
evalcond[3]=((1.0)+((x2020*x2023))+(((-1.0)*r02*x2026))+(((-1.0)*x2024*x2027)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2027))+(((-1.0)*r11*sj5*x2026))+((x2021*x2022)));
evalcond[5]=((((-1.0)*r21*sj5*x2026))+(((-1.0)*r22*x2027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2021*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2029=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2029;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2030=((1.0)*cj5);
IkReal x2031=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2030)));
j4eval[0]=x2031;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2030)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2032=cj5*cj5;
IkReal x2033=r01*r01;
IkReal x2034=(r01*sj5);
IkReal x2035=(cj5*r00);
IkReal x2036=((((-1.0)*(r02*r02)))+((x2032*x2033))+(((-1.0)*x2032*(r00*r00)))+(((2.0)*x2034*x2035))+(((-1.0)*x2033)));
j4eval[0]=x2036;
j4eval[1]=IKsign(x2036);
j4eval[2]=((IKabs(r02))+(IKabs((x2035+(((-1.0)*x2034))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2037=cj5*cj5;
IkReal x2038=r01*r01;
IkReal x2039=(r01*sj5);
IkReal x2040=(cj5*r00);
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal((x2040+(((-1.0)*x2039)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2039*x2040))+(((-1.0)*x2038))+(((-1.0)*x2037*(r00*r00)))+((x2037*x2038)))),-1);
if(!x2042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2041.value)+(((1.5707963267949)*(x2042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2043=IKsin(j4);
IkReal x2044=IKcos(j4);
IkReal x2045=(cj5*r10);
IkReal x2046=(r01*sj5);
IkReal x2047=((1.0)*cj2);
IkReal x2048=(cj5*r00);
IkReal x2049=(cj5*r20);
IkReal x2050=((1.0)*x2044);
IkReal x2051=((1.0)*x2043);
IkReal x2052=(sj5*x2043);
evalcond[0]=((((-1.0)*r22*x2050))+(((-1.0)*x2049*x2051))+((r21*x2052)));
evalcond[1]=(((r11*x2052))+(((-1.0)*x2045*x2051))+(((-1.0)*r12*x2050)));
evalcond[2]=((((-1.0)*r02*x2051))+(((-1.0)*x2046*x2050))+((x2044*x2048)));
evalcond[3]=((-1.0)+((x2043*x2046))+(((-1.0)*r02*x2050))+(((-1.0)*x2048*x2051)));
evalcond[4]=((((-1.0)*r21*sj5*x2050))+(((-1.0)*r22*x2051))+((sj1*sj2))+((x2044*x2049))+(((-1.0)*cj1*x2047)));
evalcond[5]=((((-1.0)*sj1*x2047))+(((-1.0)*r12*x2051))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2050))+((x2044*x2045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2053=((1.0)*cj5);
CheckValue<IkReal> x2054 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2054.valid){
continue;
}
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2053)))),-1);
if(!x2055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2054.value)+(((1.5707963267949)*(x2055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2056=IKsin(j4);
IkReal x2057=IKcos(j4);
IkReal x2058=(cj5*r10);
IkReal x2059=(r01*sj5);
IkReal x2060=((1.0)*cj2);
IkReal x2061=(cj5*r00);
IkReal x2062=(cj5*r20);
IkReal x2063=((1.0)*x2057);
IkReal x2064=((1.0)*x2056);
IkReal x2065=(sj5*x2056);
evalcond[0]=(((r21*x2065))+(((-1.0)*r22*x2063))+(((-1.0)*x2062*x2064)));
evalcond[1]=((((-1.0)*r12*x2063))+(((-1.0)*x2058*x2064))+((r11*x2065)));
evalcond[2]=((((-1.0)*r02*x2064))+((x2057*x2061))+(((-1.0)*x2059*x2063)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2063))+(((-1.0)*x2061*x2064))+((x2056*x2059)));
evalcond[4]=((((-1.0)*r22*x2064))+((sj1*sj2))+(((-1.0)*cj1*x2060))+((x2057*x2062))+(((-1.0)*r21*sj5*x2063)));
evalcond[5]=((((-1.0)*r12*x2064))+(((-1.0)*r11*sj5*x2063))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2060))+((x2057*x2058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2066=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2066.valid){
continue;
}
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2066.value)))+(x2067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2068=IKsin(j4);
IkReal x2069=IKcos(j4);
IkReal x2070=(cj5*r10);
IkReal x2071=(r01*sj5);
IkReal x2072=((1.0)*cj2);
IkReal x2073=(cj5*r00);
IkReal x2074=(cj5*r20);
IkReal x2075=((1.0)*x2069);
IkReal x2076=((1.0)*x2068);
IkReal x2077=(sj5*x2068);
evalcond[0]=((((-1.0)*r22*x2075))+(((-1.0)*x2074*x2076))+((r21*x2077)));
evalcond[1]=((((-1.0)*x2070*x2076))+(((-1.0)*r12*x2075))+((r11*x2077)));
evalcond[2]=((((-1.0)*r02*x2076))+(((-1.0)*x2071*x2075))+((x2069*x2073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2075))+((x2068*x2071))+(((-1.0)*x2073*x2076)));
evalcond[4]=((((-1.0)*r22*x2076))+((x2069*x2074))+((sj1*sj2))+(((-1.0)*r21*sj5*x2075))+(((-1.0)*cj1*x2072)));
evalcond[5]=((((-1.0)*r12*x2076))+(((-1.0)*r11*sj5*x2075))+((x2069*x2070))+(((-1.0)*sj1*x2072))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2079 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2079)==0){
continue;
}
IkReal x2078=pow(x2079,-0.5);
CheckValue<IkReal> x2080 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2080.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2080.value));
IkReal gconst91=((-1.0)*r11*x2078);
IkReal gconst92=(r10*x2078);
CheckValue<IkReal> x2081 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2081.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2081.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
IkReal x2082=((-1.0)*(x2084.value));
IkReal x2083=x2078;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2082;
IkReal gconst90=x2082;
IkReal gconst91=((-1.0)*r11*x2083);
IkReal gconst92=(r10*x2083);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2085=((1.0)*gconst92);
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2085))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*cj0*r00*x2085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2085))+(((-1.0)*gconst91*r20)))),-1);
if(!x2087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2086.value)+(((1.5707963267949)*(x2087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2088=IKsin(j4);
IkReal x2089=IKcos(j4);
IkReal x2090=(cj2*sj1);
IkReal x2091=(gconst92*r00);
IkReal x2092=(gconst92*r20);
IkReal x2093=(gconst92*r10);
IkReal x2094=(cj1*sj2);
IkReal x2095=((1.0)*x2089);
IkReal x2096=(gconst91*x2088);
IkReal x2097=((1.0)*x2088);
evalcond[0]=((((-1.0)*x2092*x2097))+((r21*x2096))+(((-1.0)*r22*x2095)));
evalcond[1]=(sj0+(((-1.0)*x2091*x2097))+((r01*x2096))+(((-1.0)*r02*x2095)));
evalcond[2]=((((-1.0)*x2093*x2097))+(((-1.0)*r12*x2095))+((r11*x2096))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2089*x2092))+(((-1.0)*gconst91*r21*x2095))+(((-1.0)*r22*x2097)));
evalcond[4]=((((-1.0)*gconst91*r01*x2095))+((x2089*x2091))+((cj0*x2094))+((cj0*x2090))+(((-1.0)*r02*x2097)));
evalcond[5]=(((sj0*x2090))+((sj0*x2094))+(((-1.0)*gconst91*r11*x2095))+((x2089*x2093))+(((-1.0)*r12*x2097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2098 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2098.valid){
continue;
}
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2098.value)+(((1.5707963267949)*(x2099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2100=IKsin(j4);
IkReal x2101=IKcos(j4);
IkReal x2102=(cj2*sj1);
IkReal x2103=(gconst92*r00);
IkReal x2104=(gconst92*r20);
IkReal x2105=(gconst92*r10);
IkReal x2106=(cj1*sj2);
IkReal x2107=((1.0)*x2101);
IkReal x2108=(gconst91*x2100);
IkReal x2109=((1.0)*x2100);
evalcond[0]=((((-1.0)*r22*x2107))+((r21*x2108))+(((-1.0)*x2104*x2109)));
evalcond[1]=((((-1.0)*r02*x2107))+(((-1.0)*x2103*x2109))+sj0+((r01*x2108)));
evalcond[2]=((((-1.0)*r12*x2107))+((r11*x2108))+(((-1.0)*x2105*x2109))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst91*r21*x2107))+(((-1.0)*r22*x2109))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2101*x2104)));
evalcond[4]=((((-1.0)*r02*x2109))+(((-1.0)*gconst91*r01*x2107))+((cj0*x2102))+((cj0*x2106))+((x2101*x2103)));
evalcond[5]=((((-1.0)*r12*x2109))+((x2101*x2105))+(((-1.0)*gconst91*r11*x2107))+((sj0*x2102))+((sj0*x2106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2111 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2111)==0){
continue;
}
IkReal x2110=pow(x2111,-0.5);
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2112.value))));
IkReal gconst94=((1.0)*r11*x2110);
IkReal gconst95=((-1.0)*r10*x2110);
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2113.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2116 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2116.valid){
continue;
}
IkReal x2114=((1.0)*(x2116.value));
IkReal x2115=x2110;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2114)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2114)));
IkReal gconst94=((1.0)*r11*x2115);
IkReal gconst95=((-1.0)*r10*x2115);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
IkReal x2117=((1.0)*(x2119.value));
IkReal x2118=x2110;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2117)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2117)));
IkReal gconst94=((1.0)*r11*x2118);
IkReal gconst95=((-1.0)*r10*x2118);
IkReal x2120=r12*r12;
IkReal x2121=(cj0*r02);
IkReal x2122=x2110;
IkReal x2123=(sj0*x2122);
j4eval[0]=((IKabs((((r12*x2121*x2122))+(((-1.0)*x2123))+((x2120*x2123)))))+(IKabs((x2121+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
IkReal x2124=((1.0)*(x2126.value));
IkReal x2125=x2110;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2124)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2124)));
IkReal gconst94=((1.0)*r11*x2125);
IkReal gconst95=((-1.0)*r10*x2125);
IkReal x2127=r12*r12;
IkReal x2128=(sj1*sj2);
IkReal x2129=((1.0)*cj1*cj2);
CheckValue<IkReal> x2133=IKPowWithIntegerCheck(((-1.0)+x2127),-1);
if(!x2133.valid){
continue;
}
IkReal x2130=x2133.value;
if((((1.0)+(((-1.0)*x2127)))) < -0.00001)
continue;
IkReal x2131=IKsqrt(((1.0)+(((-1.0)*x2127))));
IkReal x2132=(r12*r22*x2130*x2131);
j4eval[0]=((IKabs(((((-1.0)*r22*x2129))+((r22*x2128)))))+(IKabs((((x2128*x2132))+(((-1.0)*x2129*x2132))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2134=(gconst94*r21);
IkReal x2135=(cj1*cj2);
IkReal x2136=(sj1*sj2);
IkReal x2137=(gconst95*r20);
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal((((r22*x2136))+(((-1.0)*r22*x2135)))),IkReal(((((-1.0)*x2136*x2137))+((x2135*x2137))+((x2134*x2136))+(((-1.0)*x2134*x2135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2137*x2137)+(((-2.0)*x2134*x2137))+(x2134*x2134))),-1);
if(!x2139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2138.value)+(((1.5707963267949)*(x2139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2140=IKsin(j4);
IkReal x2141=IKcos(j4);
IkReal x2142=(cj2*sj1);
IkReal x2143=(gconst94*r11);
IkReal x2144=(gconst95*r10);
IkReal x2145=(gconst94*r21);
IkReal x2146=(gconst94*r01);
IkReal x2147=(cj1*sj2);
IkReal x2148=((1.0)*x2141);
IkReal x2149=((1.0)*x2140);
IkReal x2150=(gconst95*x2141);
evalcond[0]=((((-1.0)*gconst95*r20*x2149))+((x2140*x2145))+(((-1.0)*r22*x2148)));
evalcond[1]=((((-1.0)*gconst95*r00*x2149))+sj0+(((-1.0)*r02*x2148))+((x2140*x2146)));
evalcond[2]=((((-1.0)*x2144*x2149))+(((-1.0)*r12*x2148))+((x2140*x2143))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2149))+(((-1.0)*x2145*x2148)));
evalcond[4]=((((-1.0)*r02*x2149))+((cj0*x2147))+((cj0*x2142))+((r00*x2150))+(((-1.0)*x2146*x2148)));
evalcond[5]=((((-1.0)*x2143*x2148))+((sj0*x2147))+((sj0*x2142))+(((-1.0)*r12*x2149))+((x2141*x2144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2151=((1.0)*gconst95);
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2151))+((cj0*gconst94*r01))+(((-1.0)*r10*sj0*x2151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
CheckValue<IkReal> x2153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2151))+(((-1.0)*gconst94*r20)))),-1);
if(!x2153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2152.value)+(((1.5707963267949)*(x2153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2154=IKsin(j4);
IkReal x2155=IKcos(j4);
IkReal x2156=(cj2*sj1);
IkReal x2157=(gconst94*r11);
IkReal x2158=(gconst95*r10);
IkReal x2159=(gconst94*r21);
IkReal x2160=(gconst94*r01);
IkReal x2161=(cj1*sj2);
IkReal x2162=((1.0)*x2155);
IkReal x2163=((1.0)*x2154);
IkReal x2164=(gconst95*x2155);
evalcond[0]=(((x2154*x2159))+(((-1.0)*gconst95*r20*x2163))+(((-1.0)*r22*x2162)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2163))+((x2154*x2160))+(((-1.0)*r02*x2162)));
evalcond[2]=(((x2154*x2157))+(((-1.0)*x2158*x2163))+(((-1.0)*r12*x2162))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2164))+(((-1.0)*x2159*x2162))+(((-1.0)*r22*x2163)));
evalcond[4]=((((-1.0)*x2160*x2162))+((r00*x2164))+((cj0*x2161))+((cj0*x2156))+(((-1.0)*r02*x2163)));
evalcond[5]=(((sj0*x2161))+((x2155*x2158))+(((-1.0)*x2157*x2162))+((sj0*x2156))+(((-1.0)*r12*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2165.value)+(((1.5707963267949)*(x2166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2167=IKsin(j4);
IkReal x2168=IKcos(j4);
IkReal x2169=(cj2*sj1);
IkReal x2170=(gconst94*r11);
IkReal x2171=(gconst95*r10);
IkReal x2172=(gconst94*r21);
IkReal x2173=(gconst94*r01);
IkReal x2174=(cj1*sj2);
IkReal x2175=((1.0)*x2168);
IkReal x2176=((1.0)*x2167);
IkReal x2177=(gconst95*x2168);
evalcond[0]=(((x2167*x2172))+(((-1.0)*gconst95*r20*x2176))+(((-1.0)*r22*x2175)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2176))+(((-1.0)*r02*x2175))+((x2167*x2173)));
evalcond[2]=((((-1.0)*x2171*x2176))+((x2167*x2170))+(((-1.0)*r12*x2175))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2177))+(((-1.0)*x2172*x2175))+(((-1.0)*r22*x2176)));
evalcond[4]=(((r00*x2177))+((cj0*x2174))+((cj0*x2169))+(((-1.0)*r02*x2176))+(((-1.0)*x2173*x2175)));
evalcond[5]=((((-1.0)*x2170*x2175))+((sj0*x2169))+((x2168*x2171))+(((-1.0)*r12*x2176))+((sj0*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2178=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2178;
j4eval[1]=IKsign(x2178);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2179=((1.0)*cj5);
IkReal x2180=((((-1.0)*r21*x2179))+(((-1.0)*r20*sj5)));
j4eval[0]=x2180;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2179))))));
j4eval[2]=IKsign(x2180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2181=cj5*cj5;
IkReal x2182=r11*r11;
IkReal x2183=(cj5*r10);
IkReal x2184=(r11*sj5);
IkReal x2185=((((-1.0)*x2182))+(((-1.0)*x2181*(r10*r10)))+((x2181*x2182))+(((-1.0)*(r12*r12)))+(((2.0)*x2183*x2184)));
j4eval[0]=x2185;
j4eval[1]=((IKabs((x2183+(((-1.0)*x2184)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2186=cj5*cj5;
IkReal x2187=r11*r11;
IkReal x2188=(cj5*r10);
IkReal x2189=(r11*sj5);
CheckValue<IkReal> x2190 = IKatan2WithCheck(IkReal((x2188+(((-1.0)*x2189)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2190.valid){
continue;
}
CheckValue<IkReal> x2191=IKPowWithIntegerCheck(IKsign(((((2.0)*x2188*x2189))+((x2186*x2187))+(((-1.0)*x2187))+(((-1.0)*(r12*r12)))+(((-1.0)*x2186*(r10*r10))))),-1);
if(!x2191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2190.value)+(((1.5707963267949)*(x2191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2192=IKsin(j4);
IkReal x2193=IKcos(j4);
IkReal x2194=(cj5*r10);
IkReal x2195=(r01*sj5);
IkReal x2196=(cj5*r00);
IkReal x2197=(cj5*r20);
IkReal x2198=((1.0)*x2193);
IkReal x2199=((1.0)*x2192);
IkReal x2200=(sj5*x2192);
evalcond[0]=((((-1.0)*x2197*x2199))+(((-1.0)*r22*x2198))+((r21*x2200)));
evalcond[1]=((((-1.0)*x2196*x2199))+((x2192*x2195))+(((-1.0)*r02*x2198)));
evalcond[2]=(((x2193*x2194))+(((-1.0)*r12*x2199))+(((-1.0)*r11*sj5*x2198)));
evalcond[3]=((-1.0)+((r11*x2200))+(((-1.0)*x2194*x2199))+(((-1.0)*r12*x2198)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2195*x2198))+((x2193*x2196))+((cj1*sj2))+(((-1.0)*r02*x2199)));
evalcond[5]=(((x2193*x2197))+(((-1.0)*r21*sj5*x2198))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2201=((1.0)*cj5);
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2201))+(((-1.0)*r20*sj5)))),-1);
if(!x2203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2202.value)+(((1.5707963267949)*(x2203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2204=IKsin(j4);
IkReal x2205=IKcos(j4);
IkReal x2206=(cj5*r10);
IkReal x2207=(r01*sj5);
IkReal x2208=(cj5*r00);
IkReal x2209=(cj5*r20);
IkReal x2210=((1.0)*x2205);
IkReal x2211=((1.0)*x2204);
IkReal x2212=(sj5*x2204);
evalcond[0]=((((-1.0)*r22*x2210))+(((-1.0)*x2209*x2211))+((r21*x2212)));
evalcond[1]=((((-1.0)*x2208*x2211))+((x2204*x2207))+(((-1.0)*r02*x2210)));
evalcond[2]=((((-1.0)*r12*x2211))+((x2205*x2206))+(((-1.0)*r11*sj5*x2210)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2210))+((r11*x2212))+(((-1.0)*x2206*x2211)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2207*x2210))+((cj1*sj2))+((x2205*x2208))+(((-1.0)*r02*x2211)));
evalcond[5]=((((-1.0)*r22*x2211))+(((-1.0)*r21*sj5*x2210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2205*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2213.value)+(((1.5707963267949)*(x2214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2215=IKsin(j4);
IkReal x2216=IKcos(j4);
IkReal x2217=(cj5*r10);
IkReal x2218=(r01*sj5);
IkReal x2219=(cj5*r00);
IkReal x2220=(cj5*r20);
IkReal x2221=((1.0)*x2216);
IkReal x2222=((1.0)*x2215);
IkReal x2223=(sj5*x2215);
evalcond[0]=((((-1.0)*x2220*x2222))+((r21*x2223))+(((-1.0)*r22*x2221)));
evalcond[1]=((((-1.0)*x2219*x2222))+(((-1.0)*r02*x2221))+((x2215*x2218)));
evalcond[2]=((((-1.0)*r11*sj5*x2221))+(((-1.0)*r12*x2222))+((x2216*x2217)));
evalcond[3]=((-1.0)+(((-1.0)*x2217*x2222))+(((-1.0)*r12*x2221))+((r11*x2223)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2222))+((x2216*x2219))+(((-1.0)*x2218*x2221)));
evalcond[5]=(((x2216*x2220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2221))+(((-1.0)*r22*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2224=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2224;
j4eval[1]=IKsign(x2224);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2225=((1.0)*cj5);
IkReal x2226=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2225)));
j4eval[0]=x2226;
j4eval[1]=((IKabs(((((-1.0)*r20*x2225))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2227=cj5*cj5;
IkReal x2228=r11*r11;
IkReal x2229=(r11*sj5);
IkReal x2230=(cj5*r10);
IkReal x2231=((r12*r12)+x2228+(((-1.0)*x2227*x2228))+((x2227*(r10*r10)))+(((-2.0)*x2229*x2230)));
j4eval[0]=x2231;
j4eval[1]=IKsign(x2231);
j4eval[2]=((IKabs(r12))+(IKabs((x2230+(((-1.0)*x2229))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2232=cj5*cj5;
IkReal x2233=r11*r11;
IkReal x2234=(cj5*r10);
IkReal x2235=(r11*sj5);
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal((x2234+(((-1.0)*x2235)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2232*(r10*r10)))+x2233+(((-2.0)*x2234*x2235))+(((-1.0)*x2232*x2233)))),-1);
if(!x2237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2236.value)+(((1.5707963267949)*(x2237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2238=IKsin(j4);
IkReal x2239=IKcos(j4);
IkReal x2240=(cj5*r10);
IkReal x2241=(r01*sj5);
IkReal x2242=((1.0)*cj2);
IkReal x2243=(cj5*r00);
IkReal x2244=(cj5*r20);
IkReal x2245=((1.0)*x2239);
IkReal x2246=((1.0)*x2238);
IkReal x2247=(sj5*x2238);
evalcond[0]=((((-1.0)*r22*x2245))+(((-1.0)*x2244*x2246))+((r21*x2247)));
evalcond[1]=((((-1.0)*r02*x2245))+(((-1.0)*x2243*x2246))+((x2238*x2241)));
evalcond[2]=((((-1.0)*r12*x2246))+((x2239*x2240))+(((-1.0)*r11*sj5*x2245)));
evalcond[3]=((1.0)+((r11*x2247))+(((-1.0)*x2240*x2246))+(((-1.0)*r12*x2245)));
evalcond[4]=((((-1.0)*r22*x2246))+((sj1*sj2))+(((-1.0)*r21*sj5*x2245))+(((-1.0)*cj1*x2242))+((x2239*x2244)));
evalcond[5]=((((-1.0)*r02*x2246))+(((-1.0)*sj1*x2242))+(((-1.0)*cj1*sj2))+(((-1.0)*x2241*x2245))+((x2239*x2243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2248=((1.0)*cj5);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2248))+(((-1.0)*r00*sj5)))),-1);
if(!x2250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2249.value)+(((1.5707963267949)*(x2250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2251=IKsin(j4);
IkReal x2252=IKcos(j4);
IkReal x2253=(cj5*r10);
IkReal x2254=(r01*sj5);
IkReal x2255=((1.0)*cj2);
IkReal x2256=(cj5*r00);
IkReal x2257=(cj5*r20);
IkReal x2258=((1.0)*x2252);
IkReal x2259=((1.0)*x2251);
IkReal x2260=(sj5*x2251);
evalcond[0]=((((-1.0)*r22*x2258))+((r21*x2260))+(((-1.0)*x2257*x2259)));
evalcond[1]=((((-1.0)*x2256*x2259))+(((-1.0)*r02*x2258))+((x2251*x2254)));
evalcond[2]=(((x2252*x2253))+(((-1.0)*r12*x2259))+(((-1.0)*r11*sj5*x2258)));
evalcond[3]=((1.0)+(((-1.0)*x2253*x2259))+(((-1.0)*r12*x2258))+((r11*x2260)));
evalcond[4]=((((-1.0)*r22*x2259))+((sj1*sj2))+((x2252*x2257))+(((-1.0)*r21*sj5*x2258))+(((-1.0)*cj1*x2255)));
evalcond[5]=((((-1.0)*sj1*x2255))+(((-1.0)*r02*x2259))+(((-1.0)*cj1*sj2))+((x2252*x2256))+(((-1.0)*x2254*x2258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2261=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2261.valid){
continue;
}
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2261.value)))+(x2262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2263=IKsin(j4);
IkReal x2264=IKcos(j4);
IkReal x2265=(cj5*r10);
IkReal x2266=(r01*sj5);
IkReal x2267=((1.0)*cj2);
IkReal x2268=(cj5*r00);
IkReal x2269=(cj5*r20);
IkReal x2270=((1.0)*x2264);
IkReal x2271=((1.0)*x2263);
IkReal x2272=(sj5*x2263);
evalcond[0]=(((r21*x2272))+(((-1.0)*r22*x2270))+(((-1.0)*x2269*x2271)));
evalcond[1]=(((x2263*x2266))+(((-1.0)*r02*x2270))+(((-1.0)*x2268*x2271)));
evalcond[2]=(((x2264*x2265))+(((-1.0)*r11*sj5*x2270))+(((-1.0)*r12*x2271)));
evalcond[3]=((1.0)+((r11*x2272))+(((-1.0)*x2265*x2271))+(((-1.0)*r12*x2270)));
evalcond[4]=((((-1.0)*cj1*x2267))+((sj1*sj2))+(((-1.0)*r22*x2271))+((x2264*x2269))+(((-1.0)*r21*sj5*x2270)));
evalcond[5]=((((-1.0)*x2266*x2270))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2271))+(((-1.0)*sj1*x2267))+((x2264*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2273=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2273);
rxp0_2=(py*r00);
rxp1_0=(r21*x2273);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2274=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2274);
rxp0_2=(py*r00);
rxp1_0=(r21*x2274);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2275=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2275);
rxp0_2=(py*r00);
rxp1_0=(r21*x2275);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2278=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2278.valid){
continue;
}
IkReal x2276=x2278.value;
IkReal x2277=((1.0)*cj0*x2276);
cj4array[0]=((((-1.0)*cj2*sj1*x2277))+(((-1.0)*cj1*sj2*x2277)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2279=IKsin(j4);
IkReal x2280=IKcos(j4);
IkReal x2281=(r21*sj5);
IkReal x2282=((1.0)*x2280);
IkReal x2283=((1.0)*cj5*x2279);
evalcond[0]=((-1.0)*r12*x2279);
evalcond[1]=((((-1.0)*r12*x2282))+(((-1.0)*cj0)));
evalcond[2]=(((x2279*x2281))+(((-1.0)*r20*x2283)));
evalcond[3]=(((r01*sj5*x2279))+(((-1.0)*r00*x2283)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2281*x2282))+((cj5*r20*x2280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2285=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2285.valid){
continue;
}
IkReal x2284=x2285.value;
cj4array[0]=(((cj1*cj2*x2284))+(((-1.0)*sj1*sj2*x2284)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2286=IKsin(j4);
IkReal x2287=IKcos(j4);
IkReal x2288=(cj5*r00);
IkReal x2289=((1.0)*x2286);
IkReal x2290=(sj5*x2286);
IkReal x2291=((1.0)*x2287);
evalcond[0]=((-1.0)*r12*x2286);
evalcond[1]=((((-1.0)*r12*x2291))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2290))+(((-1.0)*cj5*r20*x2289)));
evalcond[3]=((((-1.0)*x2288*x2289))+((r01*x2290)));
evalcond[4]=(((x2287*x2288))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*sj5*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(r12,-1);
if(!x2292.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2292.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2293=IKsin(j4);
IkReal x2294=IKcos(j4);
IkReal x2295=(cj5*r00);
IkReal x2296=(cj5*r20);
IkReal x2297=(r21*sj5);
IkReal x2298=(r01*sj5);
IkReal x2299=((1.0)*x2293);
IkReal x2300=((1.0)*x2294);
evalcond[0]=((-1.0)*r12*x2293);
evalcond[1]=((((-1.0)*x2296*x2299))+((x2293*x2297)));
evalcond[2]=((((-1.0)*x2295*x2299))+((x2293*x2298)));
evalcond[3]=((((-1.0)*x2297*x2300))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2294*x2296)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x2298*x2300))+((cj0*cj1*sj2))+((x2294*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2301=((1.0)*cj5);
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2301))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
CheckValue<IkReal> x2303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2301))+(((-1.0)*r20*sj5)))),-1);
if(!x2303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2302.value)+(((1.5707963267949)*(x2303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2304=IKsin(j4);
IkReal x2305=IKcos(j4);
IkReal x2306=(cj5*r10);
IkReal x2307=(cj2*sj1);
IkReal x2308=(r01*sj5);
IkReal x2309=(cj5*r00);
IkReal x2310=(cj5*r20);
IkReal x2311=(cj1*sj2);
IkReal x2312=((1.0)*x2305);
IkReal x2313=((1.0)*x2304);
IkReal x2314=(sj5*x2304);
evalcond[0]=((((-1.0)*r22*x2312))+((r21*x2314))+(((-1.0)*x2310*x2313)));
evalcond[1]=(sj0+((x2304*x2308))+(((-1.0)*x2309*x2313))+(((-1.0)*r02*x2312)));
evalcond[2]=(((r11*x2314))+(((-1.0)*r12*x2312))+(((-1.0)*x2306*x2313))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2313))+((x2305*x2310))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2312)));
evalcond[4]=(((x2305*x2309))+((cj0*x2307))+(((-1.0)*x2308*x2312))+(((-1.0)*r02*x2313))+((cj0*x2311)));
evalcond[5]=(((sj0*x2307))+((x2305*x2306))+(((-1.0)*r11*sj5*x2312))+((sj0*x2311))+(((-1.0)*r12*x2313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2315.valid){
continue;
}
CheckValue<IkReal> x2316 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2315.value)))+(x2316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2317=IKsin(j4);
IkReal x2318=IKcos(j4);
IkReal x2319=(cj5*r10);
IkReal x2320=(cj2*sj1);
IkReal x2321=(r01*sj5);
IkReal x2322=(cj5*r00);
IkReal x2323=(cj5*r20);
IkReal x2324=(cj1*sj2);
IkReal x2325=((1.0)*x2318);
IkReal x2326=((1.0)*x2317);
IkReal x2327=(sj5*x2317);
evalcond[0]=((((-1.0)*r22*x2325))+((r21*x2327))+(((-1.0)*x2323*x2326)));
evalcond[1]=(sj0+((x2317*x2321))+(((-1.0)*x2322*x2326))+(((-1.0)*r02*x2325)));
evalcond[2]=(((r11*x2327))+(((-1.0)*x2319*x2326))+(((-1.0)*r12*x2325))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2326))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2318*x2323))+(((-1.0)*r21*sj5*x2325)));
evalcond[4]=(((cj0*x2324))+((cj0*x2320))+(((-1.0)*x2321*x2325))+((x2318*x2322))+(((-1.0)*r02*x2326)));
evalcond[5]=((((-1.0)*r11*sj5*x2325))+((x2318*x2319))+((sj0*x2320))+((sj0*x2324))+(((-1.0)*r12*x2326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2328.valid){
continue;
}
CheckValue<IkReal> x2329 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2328.value)))+(x2329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2330=IKsin(j4);
IkReal x2331=IKcos(j4);
IkReal x2332=(cj5*r10);
IkReal x2333=(cj2*sj1);
IkReal x2334=(r01*sj5);
IkReal x2335=(cj5*r00);
IkReal x2336=(cj5*r20);
IkReal x2337=(cj1*sj2);
IkReal x2338=((1.0)*x2331);
IkReal x2339=((1.0)*x2330);
IkReal x2340=(sj5*x2330);
evalcond[0]=((((-1.0)*r22*x2338))+((r21*x2340))+(((-1.0)*x2336*x2339)));
evalcond[1]=(sj0+(((-1.0)*r02*x2338))+(((-1.0)*x2335*x2339))+((x2330*x2334)));
evalcond[2]=((((-1.0)*x2332*x2339))+((r11*x2340))+(((-1.0)*r12*x2338))+(((-1.0)*cj0)));
evalcond[3]=(((x2331*x2336))+(((-1.0)*r22*x2339))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2338)));
evalcond[4]=(((x2331*x2335))+(((-1.0)*r02*x2339))+(((-1.0)*x2334*x2338))+((cj0*x2333))+((cj0*x2337)));
evalcond[5]=(((x2331*x2332))+((sj0*x2333))+((sj0*x2337))+(((-1.0)*r11*sj5*x2338))+(((-1.0)*r12*x2339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2341=cj5*cj5;
IkReal x2342=r21*r21;
IkReal x2343=(sj1*sj2);
IkReal x2344=(r21*sj5);
IkReal x2345=(cj1*cj2);
IkReal x2346=(cj5*r20);
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal((((r22*x2343))+(((-1.0)*r22*x2345)))),IkReal(((((-1.0)*x2344*x2345))+((x2345*x2346))+((x2343*x2344))+(((-1.0)*x2343*x2346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2344*x2346))+((x2341*(r20*r20)))+(r22*r22)+x2342+(((-1.0)*x2341*x2342)))),-1);
if(!x2348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2347.value)+(((1.5707963267949)*(x2348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2349=IKsin(j4);
IkReal x2350=IKcos(j4);
IkReal x2351=(r21*sj5);
IkReal x2352=(cj5*r20);
IkReal x2353=((1.0)*x2350);
IkReal x2354=((1.0)*x2349);
evalcond[0]=((((-1.0)*x2352*x2354))+(((-1.0)*r22*x2353))+((x2349*x2351)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2350*x2352))+(((-1.0)*r22*x2354))+(((-1.0)*x2351*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2355=(cj5*sj4);
IkReal x2356=(sj4*sj5);
if( IKabs((((r00*x2355))+(((-1.0)*r01*x2356))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2355))+((r11*x2356))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2355))+(((-1.0)*r01*x2356))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2355))+((r11*x2356))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2355))+(((-1.0)*r01*x2356))+((cj4*r02))), ((((-1.0)*r10*x2355))+((r11*x2356))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2357=IKcos(j0);
IkReal x2358=IKsin(j0);
IkReal x2359=(cj4*cj5);
IkReal x2360=(cj5*r01);
IkReal x2361=((1.0)*sj1);
IkReal x2362=(r11*sj5);
IkReal x2363=((1.0)*sj4);
IkReal x2364=((0.21325)*sj1);
IkReal x2365=((0.24365)*cj1);
IkReal x2366=(r00*sj5);
IkReal x2367=(cj5*r11);
IkReal x2368=((1.0)*cj4);
IkReal x2369=(r01*sj5);
IkReal x2370=(r10*sj5);
IkReal x2371=(sj2*x2358);
IkReal x2372=(cj2*x2357);
IkReal x2373=(sj2*x2357);
IkReal x2374=(cj1*cj2*x2358);
evalcond[0]=(x2358+(((-1.0)*cj5*r00*x2363))+((sj4*x2369))+(((-1.0)*r02*x2368)));
evalcond[1]=((((-1.0)*x2357))+(((-1.0)*cj5*r10*x2363))+((sj4*x2362))+(((-1.0)*r12*x2368)));
evalcond[2]=(x2366+x2360+((cj1*x2372))+(((-1.0)*x2361*x2373)));
evalcond[3]=(x2374+x2370+x2367+(((-1.0)*x2361*x2371)));
evalcond[4]=(((r00*x2359))+((sj1*x2372))+(((-1.0)*x2368*x2369))+((cj1*x2373))+(((-1.0)*r02*x2363)));
evalcond[5]=(((r10*x2359))+((cj2*sj1*x2358))+((cj1*x2371))+(((-1.0)*x2362*x2368))+(((-1.0)*r12*x2363)));
evalcond[6]=((((-0.08535)*x2366))+(((-0.08535)*x2360))+(((-0.21325)*cj1*x2372))+((x2364*x2373))+(((-1.0)*x2357*x2365))+(((-1.0)*px))+(((0.11)*x2358)));
evalcond[7]=((((-0.08535)*x2367))+((x2364*x2371))+(((-1.0)*x2358*x2365))+(((-1.0)*py))+(((-0.11)*x2357))+(((-0.21325)*x2374))+(((-0.08535)*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2375=((1.0)*cj5);
IkReal x2376=((1.0)*sj5);
CheckValue<IkReal> x2377 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2376))+(((-1.0)*r11*x2375)))),IkReal(((((-1.0)*r00*x2376))+(((-1.0)*r01*x2375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2377.valid){
continue;
}
CheckValue<IkReal> x2378=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2378.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2377.value)+(((1.5707963267949)*(x2378.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2379=IKcos(j0);
IkReal x2380=IKsin(j0);
IkReal x2381=(cj5*r01);
IkReal x2382=(sj1*sj2);
IkReal x2383=(cj5*r11);
IkReal x2384=(r00*sj5);
IkReal x2385=((0.24365)*cj1);
IkReal x2386=(r10*sj5);
IkReal x2387=(cj1*cj2*x2380);
IkReal x2388=(cj1*cj2*x2379);
evalcond[0]=(x2381+x2384+x2388+(((-1.0)*x2379*x2382)));
evalcond[1]=(x2383+x2387+x2386+(((-1.0)*x2380*x2382)));
evalcond[2]=((((-0.08535)*x2381))+(((-0.08535)*x2384))+(((-1.0)*px))+(((-1.0)*x2379*x2385))+(((-0.21325)*x2388))+(((0.21325)*x2379*x2382))+(((0.11)*x2380)));
evalcond[3]=((((-1.0)*x2380*x2385))+(((0.21325)*x2380*x2382))+(((-0.08535)*x2383))+(((-0.08535)*x2386))+(((-1.0)*py))+(((-0.11)*x2379))+(((-0.21325)*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2389=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2389;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2390=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2390;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2391=((1.0)*cj5);
IkReal x2392=((((-1.0)*r21*x2391))+(((-1.0)*r20*sj5)));
j4eval[0]=x2392;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2391))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2391)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2393=((-1.0)*r20);
IkReal x2395 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2395)==0){
continue;
}
IkReal x2394=pow(x2395,-0.5);
CheckValue<IkReal> x2396 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2393),IKFAST_ATAN2_MAGTHRESH);
if(!x2396.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2396.value));
IkReal gconst79=(r21*x2394);
IkReal gconst80=(x2393*x2394);
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2397.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2398=((-1.0)*r20);
IkReal x2399=x2394;
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2398),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
IkReal x2400=((-1.0)*(x2401.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2400;
IkReal gconst78=x2400;
IkReal gconst79=(r21*x2399);
IkReal gconst80=(x2398*x2399);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2402=((-1.0)*r20);
IkReal x2403=x2394;
CheckValue<IkReal> x2405 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2402),IKFAST_ATAN2_MAGTHRESH);
if(!x2405.valid){
continue;
}
IkReal x2404=((-1.0)*(x2405.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2404;
IkReal gconst78=x2404;
IkReal gconst79=(r21*x2403);
IkReal gconst80=(x2402*x2403);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2406=((-1.0)*r20);
IkReal x2407=x2394;
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2406),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
IkReal x2408=((-1.0)*(x2409.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2408;
IkReal gconst78=x2408;
IkReal gconst79=(r21*x2407);
IkReal gconst80=(x2406*x2407);
IkReal x2410=r22*r22;
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2410))),-1);
if(!x2413.valid){
continue;
}
IkReal x2411=x2413.value;
IkReal x2412=(x2410+((x2411*(r21*r21*r21*r21)))+((x2411*(r20*r20*r20*r20)))+(((2.0)*x2411*(r20*r20)*(r21*r21))));
j4eval[0]=x2412;
j4eval[1]=IKsign(x2412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2414=(sj1*sj2);
IkReal x2415=(gconst80*r20);
IkReal x2416=(gconst79*r21);
IkReal x2417=(cj1*cj2);
CheckValue<IkReal> x2418=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2415*x2415)+(x2416*x2416)+(((-2.0)*x2415*x2416)))),-1);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal((((r22*x2414))+(((-1.0)*r22*x2417)))),IkReal(((((-1.0)*x2414*x2415))+((x2414*x2416))+((x2415*x2417))+(((-1.0)*x2416*x2417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2418.value)))+(x2419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2420=IKsin(j4);
IkReal x2421=IKcos(j4);
IkReal x2422=(gconst79*r01);
IkReal x2423=(cj2*sj1);
IkReal x2424=(gconst79*r21);
IkReal x2425=(gconst79*r11);
IkReal x2426=(cj1*sj2);
IkReal x2427=((1.0)*x2421);
IkReal x2428=(gconst80*x2421);
IkReal x2429=((1.0)*x2420);
IkReal x2430=(gconst80*x2429);
evalcond[0]=(((x2420*x2424))+(((-1.0)*r22*x2427))+(((-1.0)*r20*x2430)));
evalcond[1]=((((-1.0)*r02*x2427))+((x2420*x2422))+sj0+(((-1.0)*r00*x2430)));
evalcond[2]=(((x2420*x2425))+(((-1.0)*r12*x2427))+(((-1.0)*r10*x2430))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2424*x2427))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2429))+((r20*x2428)));
evalcond[4]=((((-1.0)*r02*x2429))+(((-1.0)*x2422*x2427))+((r00*x2428))+((cj0*x2423))+((cj0*x2426)));
evalcond[5]=(((r10*x2428))+(((-1.0)*x2425*x2427))+((sj0*x2423))+((sj0*x2426))+(((-1.0)*r12*x2429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2431.value)))+(x2432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2433=IKsin(j4);
IkReal x2434=IKcos(j4);
IkReal x2435=(gconst79*r01);
IkReal x2436=(cj2*sj1);
IkReal x2437=(gconst79*r21);
IkReal x2438=(gconst79*r11);
IkReal x2439=(cj1*sj2);
IkReal x2440=((1.0)*x2434);
IkReal x2441=(gconst80*x2434);
IkReal x2442=((1.0)*x2433);
IkReal x2443=(gconst80*x2442);
evalcond[0]=((((-1.0)*r20*x2443))+((x2433*x2437))+(((-1.0)*r22*x2440)));
evalcond[1]=(sj0+((x2433*x2435))+(((-1.0)*r00*x2443))+(((-1.0)*r02*x2440)));
evalcond[2]=((((-1.0)*r10*x2443))+(((-1.0)*r12*x2440))+((x2433*x2438))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2437*x2440))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2442))+((r20*x2441)));
evalcond[4]=(((cj0*x2436))+((cj0*x2439))+((r00*x2441))+(((-1.0)*x2435*x2440))+(((-1.0)*r02*x2442)));
evalcond[5]=(((r10*x2441))+(((-1.0)*r12*x2442))+(((-1.0)*x2438*x2440))+((sj0*x2436))+((sj0*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2444.value)))+(x2445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2446=IKsin(j4);
IkReal x2447=IKcos(j4);
IkReal x2448=(gconst79*r01);
IkReal x2449=(cj2*sj1);
IkReal x2450=(gconst79*r21);
IkReal x2451=(gconst79*r11);
IkReal x2452=(cj1*sj2);
IkReal x2453=((1.0)*x2447);
IkReal x2454=(gconst80*x2447);
IkReal x2455=((1.0)*x2446);
IkReal x2456=(gconst80*x2455);
evalcond[0]=((((-1.0)*r20*x2456))+(((-1.0)*r22*x2453))+((x2446*x2450)));
evalcond[1]=(((x2446*x2448))+sj0+(((-1.0)*r02*x2453))+(((-1.0)*r00*x2456)));
evalcond[2]=((((-1.0)*r10*x2456))+(((-1.0)*r12*x2453))+(((-1.0)*cj0))+((x2446*x2451)));
evalcond[3]=((((-1.0)*x2450*x2453))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2455))+((r20*x2454)));
evalcond[4]=((((-1.0)*x2448*x2453))+((r00*x2454))+((cj0*x2452))+((cj0*x2449))+(((-1.0)*r02*x2455)));
evalcond[5]=(((sj0*x2452))+((sj0*x2449))+((r10*x2454))+(((-1.0)*x2451*x2453))+(((-1.0)*r12*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2457=((-1.0)*r21);
IkReal x2459 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2459)==0){
continue;
}
IkReal x2458=pow(x2459,-0.5);
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal(x2457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2460.value))));
IkReal gconst82=(x2457*x2458);
IkReal gconst83=((1.0)*r20*x2458);
CheckValue<IkReal> x2461 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2461.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2461.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2462=((-1.0)*r21);
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal(x2462),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
IkReal x2463=((1.0)*(x2465.value));
IkReal x2464=x2458;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2463)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2463)));
IkReal gconst82=(x2462*x2464);
IkReal gconst83=((1.0)*r20*x2464);
IkReal x2466=r22*r22;
IkReal x2467=((1.0)*x2466);
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(((-1.0)+x2466),-1);
if(!x2471.valid){
continue;
}
IkReal x2468=x2471.value;
if((((1.0)+(((-1.0)*x2467)))) < -0.00001)
continue;
IkReal x2469=IKsqrt(((1.0)+(((-1.0)*x2467))));
IkReal x2470=(sj0*x2468*x2469);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2470+(((-1.0)*x2467*x2470))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2472=((-1.0)*r21);
CheckValue<IkReal> x2475 = IKatan2WithCheck(IkReal(x2472),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2475.valid){
continue;
}
IkReal x2473=((1.0)*(x2475.value));
IkReal x2474=x2458;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2473)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2473)));
IkReal gconst82=(x2472*x2474);
IkReal gconst83=((1.0)*r20*x2474);
IkReal x2476=r22*r22;
IkReal x2477=((1.0)*x2476);
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(((-1.0)+x2476),-1);
if(!x2481.valid){
continue;
}
IkReal x2478=x2481.value;
if((((1.0)+(((-1.0)*x2477)))) < -0.00001)
continue;
IkReal x2479=IKsqrt(((1.0)+(((-1.0)*x2477))));
IkReal x2480=(cj0*x2478*x2479);
j4eval[0]=((IKabs((x2480+(((-1.0)*x2477*x2480)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2482=((-1.0)*r21);
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal(x2482),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
IkReal x2483=((1.0)*(x2485.value));
IkReal x2484=x2458;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2483)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2483)));
IkReal gconst82=(x2482*x2484);
IkReal gconst83=((1.0)*r20*x2484);
IkReal x2486=r22*r22;
IkReal x2487=(cj0*r02);
IkReal x2488=(r12*sj0);
CheckValue<IkReal> x2492=IKPowWithIntegerCheck(((-1.0)+x2486),-1);
if(!x2492.valid){
continue;
}
IkReal x2489=x2492.value;
if((((1.0)+(((-1.0)*x2486)))) < -0.00001)
continue;
IkReal x2490=IKsqrt(((1.0)+(((-1.0)*x2486))));
IkReal x2491=((1.0)*r22*x2489*x2490);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2488*x2491))+(((-1.0)*x2487*x2491)))))+(IKabs((x2488+x2487))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2493=((1.0)*gconst83);
CheckValue<IkReal> x2494=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2493)))),-1);
if(!x2494.valid){
continue;
}
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2493))+(((-1.0)*cj0*r00*x2493))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2494.value)))+(x2495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2496=IKsin(j4);
IkReal x2497=IKcos(j4);
IkReal x2498=(cj2*sj1);
IkReal x2499=(gconst82*r11);
IkReal x2500=(cj1*sj2);
IkReal x2501=((1.0)*x2497);
IkReal x2502=(gconst83*x2497);
IkReal x2503=(gconst82*x2496);
IkReal x2504=((1.0)*x2496);
evalcond[0]=((((-1.0)*r22*x2501))+((r21*x2503))+(((-1.0)*gconst83*r20*x2504)));
evalcond[1]=((((-1.0)*r02*x2501))+sj0+(((-1.0)*gconst83*r00*x2504))+((r01*x2503)));
evalcond[2]=(((x2496*x2499))+(((-1.0)*gconst83*r10*x2504))+(((-1.0)*r12*x2501))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2504))+((r20*x2502))+(((-1.0)*gconst82*r21*x2501)));
evalcond[4]=((((-1.0)*r02*x2504))+((cj0*x2500))+(((-1.0)*gconst82*r01*x2501))+((cj0*x2498))+((r00*x2502)));
evalcond[5]=(((r10*x2502))+(((-1.0)*r12*x2504))+((sj0*x2500))+(((-1.0)*x2499*x2501))+((sj0*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2505.value)+(((1.5707963267949)*(x2506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2507=IKsin(j4);
IkReal x2508=IKcos(j4);
IkReal x2509=(cj2*sj1);
IkReal x2510=(gconst82*r11);
IkReal x2511=(cj1*sj2);
IkReal x2512=((1.0)*x2508);
IkReal x2513=(gconst83*x2508);
IkReal x2514=(gconst82*x2507);
IkReal x2515=((1.0)*x2507);
evalcond[0]=((((-1.0)*gconst83*r20*x2515))+(((-1.0)*r22*x2512))+((r21*x2514)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2515))+((r01*x2514))+(((-1.0)*r02*x2512)));
evalcond[2]=((((-1.0)*gconst83*r10*x2515))+(((-1.0)*r12*x2512))+((x2507*x2510))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2512))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2515))+((r20*x2513)));
evalcond[4]=(((cj0*x2511))+((cj0*x2509))+(((-1.0)*gconst82*r01*x2512))+((r00*x2513))+(((-1.0)*r02*x2515)));
evalcond[5]=(((r10*x2513))+(((-1.0)*x2510*x2512))+((sj0*x2511))+(((-1.0)*r12*x2515))+((sj0*x2509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2516.value)+(((1.5707963267949)*(x2517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2518=IKsin(j4);
IkReal x2519=IKcos(j4);
IkReal x2520=(cj2*sj1);
IkReal x2521=(gconst82*r11);
IkReal x2522=(cj1*sj2);
IkReal x2523=((1.0)*x2519);
IkReal x2524=(gconst83*x2519);
IkReal x2525=(gconst82*x2518);
IkReal x2526=((1.0)*x2518);
evalcond[0]=((((-1.0)*gconst83*r20*x2526))+((r21*x2525))+(((-1.0)*r22*x2523)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2526))+((r01*x2525))+(((-1.0)*r02*x2523)));
evalcond[2]=((((-1.0)*gconst83*r10*x2526))+(((-1.0)*r12*x2523))+((x2518*x2521))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2523))+((r20*x2524))+(((-1.0)*r22*x2526)));
evalcond[4]=(((r00*x2524))+(((-1.0)*r02*x2526))+((cj0*x2520))+((cj0*x2522))+(((-1.0)*gconst82*r01*x2523)));
evalcond[5]=((((-1.0)*r12*x2526))+((sj0*x2520))+((sj0*x2522))+((r10*x2524))+(((-1.0)*x2521*x2523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2528 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2528)==0){
continue;
}
IkReal x2527=pow(x2528,-0.5);
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2529.value));
IkReal gconst85=((-1.0)*r01*x2527);
IkReal gconst86=(r00*x2527);
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2530.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
IkReal x2531=((-1.0)*(x2533.value));
IkReal x2532=x2527;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2531;
IkReal gconst84=x2531;
IkReal gconst85=((-1.0)*r01*x2532);
IkReal gconst86=(r00*x2532);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2534=((1.0)*gconst86);
CheckValue<IkReal> x2535=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2534)))),-1);
if(!x2535.valid){
continue;
}
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2534))+((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x2534))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2535.value)))+(x2536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2537=IKsin(j4);
IkReal x2538=IKcos(j4);
IkReal x2539=(gconst85*r21);
IkReal x2540=(cj2*sj1);
IkReal x2541=(gconst86*r00);
IkReal x2542=(gconst86*r10);
IkReal x2543=(gconst85*r11);
IkReal x2544=(gconst85*r01);
IkReal x2545=(gconst86*r20);
IkReal x2546=(cj1*sj2);
IkReal x2547=((1.0)*x2538);
IkReal x2548=((1.0)*x2537);
evalcond[0]=((((-1.0)*x2545*x2548))+(((-1.0)*r22*x2547))+((x2537*x2539)));
evalcond[1]=((((-1.0)*x2541*x2548))+sj0+((x2537*x2544))+(((-1.0)*r02*x2547)));
evalcond[2]=((((-1.0)*x2542*x2548))+(((-1.0)*r12*x2547))+((x2537*x2543))+(((-1.0)*cj0)));
evalcond[3]=(((x2538*x2545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2539*x2547))+(((-1.0)*r22*x2548)));
evalcond[4]=(((x2538*x2541))+(((-1.0)*x2544*x2547))+(((-1.0)*r02*x2548))+((cj0*x2540))+((cj0*x2546)));
evalcond[5]=((((-1.0)*r12*x2548))+(((-1.0)*x2543*x2547))+((x2538*x2542))+((sj0*x2540))+((sj0*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2549.value)))+(x2550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2551=IKsin(j4);
IkReal x2552=IKcos(j4);
IkReal x2553=(gconst85*r21);
IkReal x2554=(cj2*sj1);
IkReal x2555=(gconst86*r00);
IkReal x2556=(gconst86*r10);
IkReal x2557=(gconst85*r11);
IkReal x2558=(gconst85*r01);
IkReal x2559=(gconst86*r20);
IkReal x2560=(cj1*sj2);
IkReal x2561=((1.0)*x2552);
IkReal x2562=((1.0)*x2551);
evalcond[0]=((((-1.0)*r22*x2561))+((x2551*x2553))+(((-1.0)*x2559*x2562)));
evalcond[1]=(sj0+(((-1.0)*x2555*x2562))+((x2551*x2558))+(((-1.0)*r02*x2561)));
evalcond[2]=(((x2551*x2557))+(((-1.0)*x2556*x2562))+(((-1.0)*r12*x2561))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2552*x2559))+(((-1.0)*x2553*x2561)));
evalcond[4]=((((-1.0)*r02*x2562))+(((-1.0)*x2558*x2561))+((cj0*x2560))+((cj0*x2554))+((x2552*x2555)));
evalcond[5]=((((-1.0)*x2557*x2561))+((sj0*x2554))+((x2552*x2556))+((sj0*x2560))+(((-1.0)*r12*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2564 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2564)==0){
continue;
}
IkReal x2563=pow(x2564,-0.5);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2565.value))));
IkReal gconst88=((1.0)*r01*x2563);
IkReal gconst89=((-1.0)*r00*x2563);
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2566.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
IkReal x2567=((1.0)*(x2569.value));
IkReal x2568=x2563;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2567)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2567)));
IkReal gconst88=((1.0)*r01*x2568);
IkReal gconst89=((-1.0)*r00*x2568);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
IkReal x2570=((1.0)*(x2572.value));
IkReal x2571=x2563;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2570)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2570)));
IkReal gconst88=((1.0)*r01*x2571);
IkReal gconst89=((-1.0)*r00*x2571);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2575 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2575.valid){
continue;
}
IkReal x2573=((1.0)*(x2575.value));
IkReal x2574=x2563;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2573)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2573)));
IkReal gconst88=((1.0)*r01*x2574);
IkReal gconst89=((-1.0)*r00*x2574);
IkReal x2576=r02*r02;
IkReal x2577=(r12*sj0);
IkReal x2578=x2563;
IkReal x2579=(cj0*x2578);
j4eval[0]=((IKabs((x2577+((cj0*r02)))))+(IKabs(((((-1.0)*x2579))+((r02*x2577*x2578))+((x2576*x2579))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2580=((1.0)*gconst89);
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2580))+(((-1.0)*gconst88*r20)))),-1);
if(!x2581.valid){
continue;
}
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*r10*sj0*x2580))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x2580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2581.value)))+(x2582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2583=IKsin(j4);
IkReal x2584=IKcos(j4);
IkReal x2585=(cj2*sj1);
IkReal x2586=(cj1*sj2);
IkReal x2587=((1.0)*x2584);
IkReal x2588=(gconst89*x2584);
IkReal x2589=((1.0)*x2583);
IkReal x2590=(gconst88*x2583);
IkReal x2591=(gconst89*x2589);
evalcond[0]=((((-1.0)*r20*x2591))+((r21*x2590))+(((-1.0)*r22*x2587)));
evalcond[1]=((((-1.0)*r00*x2591))+sj0+((r01*x2590))+(((-1.0)*r02*x2587)));
evalcond[2]=(((r11*x2590))+(((-1.0)*r10*x2591))+(((-1.0)*cj0))+(((-1.0)*r12*x2587)));
evalcond[3]=(((r20*x2588))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2587))+(((-1.0)*r22*x2589)));
evalcond[4]=(((r00*x2588))+(((-1.0)*r02*x2589))+((cj0*x2586))+((cj0*x2585))+(((-1.0)*gconst88*r01*x2587)));
evalcond[5]=(((r10*x2588))+(((-1.0)*gconst88*r11*x2587))+((sj0*x2586))+((sj0*x2585))+(((-1.0)*r12*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2592.valid){
continue;
}
CheckValue<IkReal> x2593 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2592.value)))+(x2593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2594=IKsin(j4);
IkReal x2595=IKcos(j4);
IkReal x2596=(cj2*sj1);
IkReal x2597=(cj1*sj2);
IkReal x2598=((1.0)*x2595);
IkReal x2599=(gconst89*x2595);
IkReal x2600=((1.0)*x2594);
IkReal x2601=(gconst88*x2594);
IkReal x2602=(gconst89*x2600);
evalcond[0]=((((-1.0)*r22*x2598))+((r21*x2601))+(((-1.0)*r20*x2602)));
evalcond[1]=(sj0+(((-1.0)*r02*x2598))+((r01*x2601))+(((-1.0)*r00*x2602)));
evalcond[2]=((((-1.0)*r10*x2602))+(((-1.0)*r12*x2598))+((r11*x2601))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2599))+(((-1.0)*r22*x2600))+(((-1.0)*gconst88*r21*x2598)));
evalcond[4]=(((r00*x2599))+(((-1.0)*gconst88*r01*x2598))+((cj0*x2597))+((cj0*x2596))+(((-1.0)*r02*x2600)));
evalcond[5]=(((r10*x2599))+(((-1.0)*r12*x2600))+(((-1.0)*gconst88*r11*x2598))+((sj0*x2597))+((sj0*x2596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2603.valid){
continue;
}
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2603.value)))+(x2604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2605=IKsin(j4);
IkReal x2606=IKcos(j4);
IkReal x2607=(cj2*sj1);
IkReal x2608=(cj1*sj2);
IkReal x2609=((1.0)*x2606);
IkReal x2610=(gconst89*x2606);
IkReal x2611=((1.0)*x2605);
IkReal x2612=(gconst88*x2605);
IkReal x2613=(gconst89*x2611);
evalcond[0]=((((-1.0)*r22*x2609))+(((-1.0)*r20*x2613))+((r21*x2612)));
evalcond[1]=((((-1.0)*r00*x2613))+((r01*x2612))+sj0+(((-1.0)*r02*x2609)));
evalcond[2]=((((-1.0)*r12*x2609))+((r11*x2612))+(((-1.0)*r10*x2613))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2609))+(((-1.0)*r22*x2611)));
evalcond[4]=(((r00*x2610))+(((-1.0)*gconst88*r01*x2609))+((cj0*x2608))+((cj0*x2607))+(((-1.0)*r02*x2611)));
evalcond[5]=((((-1.0)*gconst88*r11*x2609))+(((-1.0)*r12*x2611))+((sj0*x2607))+((sj0*x2608))+((r10*x2610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2614=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2614;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2615=((1.0)*cj5);
IkReal x2616=((((-1.0)*r21*x2615))+(((-1.0)*r20*sj5)));
j4eval[0]=x2616;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2615)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2617=cj5*cj5;
IkReal x2618=r01*r01;
IkReal x2619=(cj5*r00);
IkReal x2620=(r01*sj5);
IkReal x2621=(((x2617*(r00*r00)))+(r02*r02)+(((-1.0)*x2617*x2618))+(((-2.0)*x2619*x2620))+x2618);
j4eval[0]=x2621;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2620))+x2619))));
j4eval[2]=IKsign(x2621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2622=cj5*cj5;
IkReal x2623=r01*r01;
IkReal x2624=(r01*sj5);
IkReal x2625=(cj5*r00);
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2622*x2623))+(((-2.0)*x2624*x2625))+((x2622*(r00*r00)))+(r02*r02)+x2623)),-1);
if(!x2626.valid){
continue;
}
CheckValue<IkReal> x2627 = IKatan2WithCheck(IkReal(((((-1.0)*x2624))+x2625)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2626.value)))+(x2627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2628=IKsin(j4);
IkReal x2629=IKcos(j4);
IkReal x2630=(cj5*r10);
IkReal x2631=(r01*sj5);
IkReal x2632=(cj5*r00);
IkReal x2633=(cj5*r20);
IkReal x2634=((1.0)*x2629);
IkReal x2635=((1.0)*x2628);
IkReal x2636=(sj5*x2628);
evalcond[0]=(((r21*x2636))+(((-1.0)*x2633*x2635))+(((-1.0)*r22*x2634)));
evalcond[1]=(((r11*x2636))+(((-1.0)*r12*x2634))+(((-1.0)*x2630*x2635)));
evalcond[2]=((((-1.0)*r02*x2635))+(((-1.0)*x2631*x2634))+((x2629*x2632)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2634))+(((-1.0)*x2632*x2635))+((x2628*x2631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2634))+(((-1.0)*r12*x2635))+((x2629*x2630)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2634))+(((-1.0)*r22*x2635))+((x2629*x2633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2637=((1.0)*cj5);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2637))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2637))+(((-1.0)*r20*sj5)))),-1);
if(!x2639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2638.value)+(((1.5707963267949)*(x2639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2640=IKsin(j4);
IkReal x2641=IKcos(j4);
IkReal x2642=(cj5*r10);
IkReal x2643=(r01*sj5);
IkReal x2644=(cj5*r00);
IkReal x2645=(cj5*r20);
IkReal x2646=((1.0)*x2641);
IkReal x2647=((1.0)*x2640);
IkReal x2648=(sj5*x2640);
evalcond[0]=((((-1.0)*r22*x2646))+((r21*x2648))+(((-1.0)*x2645*x2647)));
evalcond[1]=(((r11*x2648))+(((-1.0)*r12*x2646))+(((-1.0)*x2642*x2647)));
evalcond[2]=((((-1.0)*r02*x2647))+(((-1.0)*x2643*x2646))+((x2641*x2644)));
evalcond[3]=((1.0)+(((-1.0)*x2644*x2647))+(((-1.0)*r02*x2646))+((x2640*x2643)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2646))+(((-1.0)*r12*x2647))+((cj1*sj2))+((x2641*x2642)));
evalcond[5]=((((-1.0)*r22*x2647))+(((-1.0)*r21*sj5*x2646))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2641*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2649 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2649.value)+(((1.5707963267949)*(x2650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2651=IKsin(j4);
IkReal x2652=IKcos(j4);
IkReal x2653=(cj5*r10);
IkReal x2654=(r01*sj5);
IkReal x2655=(cj5*r00);
IkReal x2656=(cj5*r20);
IkReal x2657=((1.0)*x2652);
IkReal x2658=((1.0)*x2651);
IkReal x2659=(sj5*x2651);
evalcond[0]=((((-1.0)*r22*x2657))+((r21*x2659))+(((-1.0)*x2656*x2658)));
evalcond[1]=(((r11*x2659))+(((-1.0)*r12*x2657))+(((-1.0)*x2653*x2658)));
evalcond[2]=((((-1.0)*r02*x2658))+((x2652*x2655))+(((-1.0)*x2654*x2657)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2657))+((x2651*x2654))+(((-1.0)*x2655*x2658)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2657))+(((-1.0)*r12*x2658))+((cj1*sj2))+((x2652*x2653)));
evalcond[5]=((((-1.0)*r22*x2658))+(((-1.0)*r21*sj5*x2657))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2652*x2656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2660=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2660;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2661=((1.0)*cj5);
IkReal x2662=((((-1.0)*r11*x2661))+(((-1.0)*r10*sj5)));
j4eval[0]=x2662;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2661))))));
j4eval[2]=IKsign(x2662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2663=cj5*cj5;
IkReal x2664=r01*r01;
IkReal x2665=(r01*sj5);
IkReal x2666=(cj5*r00);
IkReal x2667=((((-1.0)*x2664))+((x2663*x2664))+(((-1.0)*(r02*r02)))+(((-1.0)*x2663*(r00*r00)))+(((2.0)*x2665*x2666)));
j4eval[0]=x2667;
j4eval[1]=IKsign(x2667);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2665))+x2666))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=cj5*cj5;
IkReal x2669=r01*r01;
IkReal x2670=(r01*sj5);
IkReal x2671=(cj5*r00);
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal(((((-1.0)*x2670))+x2671)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
CheckValue<IkReal> x2673=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2669))+(((-1.0)*x2668*(r00*r00)))+((x2668*x2669))+(((-1.0)*(r02*r02)))+(((2.0)*x2670*x2671)))),-1);
if(!x2673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2672.value)+(((1.5707963267949)*(x2673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2674=IKsin(j4);
IkReal x2675=IKcos(j4);
IkReal x2676=(cj5*r10);
IkReal x2677=(r01*sj5);
IkReal x2678=((1.0)*cj2);
IkReal x2679=(cj5*r00);
IkReal x2680=(cj5*r20);
IkReal x2681=((1.0)*x2675);
IkReal x2682=((1.0)*x2674);
IkReal x2683=(sj5*x2674);
evalcond[0]=((((-1.0)*x2680*x2682))+((r21*x2683))+(((-1.0)*r22*x2681)));
evalcond[1]=((((-1.0)*r12*x2681))+((r11*x2683))+(((-1.0)*x2676*x2682)));
evalcond[2]=((((-1.0)*r02*x2682))+((x2675*x2679))+(((-1.0)*x2677*x2681)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2681))+(((-1.0)*x2679*x2682))+((x2674*x2677)));
evalcond[4]=((((-1.0)*cj1*x2678))+((sj1*sj2))+(((-1.0)*r21*sj5*x2681))+(((-1.0)*r22*x2682))+((x2675*x2680)));
evalcond[5]=((((-1.0)*r12*x2682))+(((-1.0)*r11*sj5*x2681))+(((-1.0)*cj1*sj2))+((x2675*x2676))+(((-1.0)*sj1*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2684=((1.0)*cj5);
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2684)))),-1);
if(!x2685.valid){
continue;
}
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2685.value)))+(x2686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2687=IKsin(j4);
IkReal x2688=IKcos(j4);
IkReal x2689=(cj5*r10);
IkReal x2690=(r01*sj5);
IkReal x2691=((1.0)*cj2);
IkReal x2692=(cj5*r00);
IkReal x2693=(cj5*r20);
IkReal x2694=((1.0)*x2688);
IkReal x2695=((1.0)*x2687);
IkReal x2696=(sj5*x2687);
evalcond[0]=((((-1.0)*r22*x2694))+((r21*x2696))+(((-1.0)*x2693*x2695)));
evalcond[1]=((((-1.0)*x2689*x2695))+(((-1.0)*r12*x2694))+((r11*x2696)));
evalcond[2]=((((-1.0)*r02*x2695))+(((-1.0)*x2690*x2694))+((x2688*x2692)));
evalcond[3]=((-1.0)+(((-1.0)*x2692*x2695))+(((-1.0)*r02*x2694))+((x2687*x2690)));
evalcond[4]=((((-1.0)*cj1*x2691))+((sj1*sj2))+(((-1.0)*r21*sj5*x2694))+(((-1.0)*r22*x2695))+((x2688*x2693)));
evalcond[5]=((((-1.0)*sj1*x2691))+(((-1.0)*r11*sj5*x2694))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2695))+((x2688*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2697.valid){
continue;
}
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2697.value)))+(x2698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2699=IKsin(j4);
IkReal x2700=IKcos(j4);
IkReal x2701=(cj5*r10);
IkReal x2702=(r01*sj5);
IkReal x2703=((1.0)*cj2);
IkReal x2704=(cj5*r00);
IkReal x2705=(cj5*r20);
IkReal x2706=((1.0)*x2700);
IkReal x2707=((1.0)*x2699);
IkReal x2708=(sj5*x2699);
evalcond[0]=((((-1.0)*r22*x2706))+(((-1.0)*x2705*x2707))+((r21*x2708)));
evalcond[1]=(((r11*x2708))+(((-1.0)*r12*x2706))+(((-1.0)*x2701*x2707)));
evalcond[2]=((((-1.0)*x2702*x2706))+(((-1.0)*r02*x2707))+((x2700*x2704)));
evalcond[3]=((-1.0)+((x2699*x2702))+(((-1.0)*r02*x2706))+(((-1.0)*x2704*x2707)));
evalcond[4]=((((-1.0)*r22*x2707))+((sj1*sj2))+(((-1.0)*cj1*x2703))+((x2700*x2705))+(((-1.0)*r21*sj5*x2706)));
evalcond[5]=((((-1.0)*r11*sj5*x2706))+(((-1.0)*r12*x2707))+(((-1.0)*cj1*sj2))+((x2700*x2701))+(((-1.0)*sj1*x2703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2710 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2710)==0){
continue;
}
IkReal x2709=pow(x2710,-0.5);
CheckValue<IkReal> x2711 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2711.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2711.value));
IkReal gconst91=((-1.0)*r11*x2709);
IkReal gconst92=(r10*x2709);
CheckValue<IkReal> x2712 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2712.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2712.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2715 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2715.valid){
continue;
}
IkReal x2713=((-1.0)*(x2715.value));
IkReal x2714=x2709;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2713;
IkReal gconst90=x2713;
IkReal gconst91=((-1.0)*r11*x2714);
IkReal gconst92=(r10*x2714);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2716=((1.0)*gconst92);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2716))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*cj0*r00*x2716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2716)))),-1);
if(!x2718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2717.value)+(((1.5707963267949)*(x2718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2719=IKsin(j4);
IkReal x2720=IKcos(j4);
IkReal x2721=(cj2*sj1);
IkReal x2722=(gconst92*r00);
IkReal x2723=(gconst92*r20);
IkReal x2724=(gconst92*r10);
IkReal x2725=(cj1*sj2);
IkReal x2726=((1.0)*x2720);
IkReal x2727=(gconst91*x2719);
IkReal x2728=((1.0)*x2719);
evalcond[0]=(((r21*x2727))+(((-1.0)*x2723*x2728))+(((-1.0)*r22*x2726)));
evalcond[1]=(sj0+(((-1.0)*x2722*x2728))+((r01*x2727))+(((-1.0)*r02*x2726)));
evalcond[2]=((((-1.0)*x2724*x2728))+(((-1.0)*r12*x2726))+((r11*x2727))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2728))+((x2720*x2723))+(((-1.0)*gconst91*r21*x2726)));
evalcond[4]=((((-1.0)*gconst91*r01*x2726))+((x2720*x2722))+((cj0*x2725))+((cj0*x2721))+(((-1.0)*r02*x2728)));
evalcond[5]=((((-1.0)*gconst91*r11*x2726))+(((-1.0)*r12*x2728))+((x2720*x2724))+((sj0*x2725))+((sj0*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2729.value)+(((1.5707963267949)*(x2730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2731=IKsin(j4);
IkReal x2732=IKcos(j4);
IkReal x2733=(cj2*sj1);
IkReal x2734=(gconst92*r00);
IkReal x2735=(gconst92*r20);
IkReal x2736=(gconst92*r10);
IkReal x2737=(cj1*sj2);
IkReal x2738=((1.0)*x2732);
IkReal x2739=(gconst91*x2731);
IkReal x2740=((1.0)*x2731);
evalcond[0]=(((r21*x2739))+(((-1.0)*x2735*x2740))+(((-1.0)*r22*x2738)));
evalcond[1]=(sj0+((r01*x2739))+(((-1.0)*x2734*x2740))+(((-1.0)*r02*x2738)));
evalcond[2]=((((-1.0)*x2736*x2740))+(((-1.0)*r12*x2738))+((r11*x2739))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2732*x2735))+(((-1.0)*gconst91*r21*x2738))+(((-1.0)*r22*x2740)));
evalcond[4]=((((-1.0)*gconst91*r01*x2738))+((x2732*x2734))+((cj0*x2737))+((cj0*x2733))+(((-1.0)*r02*x2740)));
evalcond[5]=((((-1.0)*gconst91*r11*x2738))+((x2732*x2736))+(((-1.0)*r12*x2740))+((sj0*x2737))+((sj0*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2742 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2742)==0){
continue;
}
IkReal x2741=pow(x2742,-0.5);
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2743.value))));
IkReal gconst94=((1.0)*r11*x2741);
IkReal gconst95=((-1.0)*r10*x2741);
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2744.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
IkReal x2745=((1.0)*(x2747.value));
IkReal x2746=x2741;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2745)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2745)));
IkReal gconst94=((1.0)*r11*x2746);
IkReal gconst95=((-1.0)*r10*x2746);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
IkReal x2748=((1.0)*(x2750.value));
IkReal x2749=x2741;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2748)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2748)));
IkReal gconst94=((1.0)*r11*x2749);
IkReal gconst95=((-1.0)*r10*x2749);
IkReal x2751=r12*r12;
IkReal x2752=(cj0*r02);
IkReal x2753=x2741;
IkReal x2754=(sj0*x2753);
j4eval[0]=((IKabs(((((-1.0)*x2754))+((r12*x2752*x2753))+((x2751*x2754)))))+(IKabs((x2752+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2757 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2757.valid){
continue;
}
IkReal x2755=((1.0)*(x2757.value));
IkReal x2756=x2741;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2755)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2755)));
IkReal gconst94=((1.0)*r11*x2756);
IkReal gconst95=((-1.0)*r10*x2756);
IkReal x2758=r12*r12;
IkReal x2759=(sj1*sj2);
IkReal x2760=((1.0)*cj1*cj2);
CheckValue<IkReal> x2764=IKPowWithIntegerCheck(((-1.0)+x2758),-1);
if(!x2764.valid){
continue;
}
IkReal x2761=x2764.value;
if((((1.0)+(((-1.0)*x2758)))) < -0.00001)
continue;
IkReal x2762=IKsqrt(((1.0)+(((-1.0)*x2758))));
IkReal x2763=(r12*r22*x2761*x2762);
j4eval[0]=((IKabs((((r22*x2759))+(((-1.0)*r22*x2760)))))+(IKabs((((x2759*x2763))+(((-1.0)*x2760*x2763))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2765=(gconst94*r21);
IkReal x2766=(cj1*cj2);
IkReal x2767=(sj1*sj2);
IkReal x2768=(gconst95*r20);
CheckValue<IkReal> x2769 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2766))+((r22*x2767)))),IkReal((((x2765*x2767))+(((-1.0)*x2767*x2768))+(((-1.0)*x2765*x2766))+((x2766*x2768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2769.valid){
continue;
}
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2765*x2768))+(x2768*x2768)+(x2765*x2765))),-1);
if(!x2770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2769.value)+(((1.5707963267949)*(x2770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2771=IKsin(j4);
IkReal x2772=IKcos(j4);
IkReal x2773=(cj2*sj1);
IkReal x2774=(gconst94*r11);
IkReal x2775=(gconst95*r10);
IkReal x2776=(gconst94*r21);
IkReal x2777=(gconst94*r01);
IkReal x2778=(cj1*sj2);
IkReal x2779=((1.0)*x2772);
IkReal x2780=((1.0)*x2771);
IkReal x2781=(gconst95*x2772);
evalcond[0]=(((x2771*x2776))+(((-1.0)*gconst95*r20*x2780))+(((-1.0)*r22*x2779)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2780))+((x2771*x2777))+(((-1.0)*r02*x2779)));
evalcond[2]=(((x2771*x2774))+(((-1.0)*r12*x2779))+(((-1.0)*cj0))+(((-1.0)*x2775*x2780)));
evalcond[3]=((((-1.0)*x2776*x2779))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2780))+((r20*x2781)));
evalcond[4]=((((-1.0)*x2777*x2779))+((cj0*x2778))+((cj0*x2773))+((r00*x2781))+(((-1.0)*r02*x2780)));
evalcond[5]=((((-1.0)*r12*x2780))+(((-1.0)*x2774*x2779))+((x2772*x2775))+((sj0*x2778))+((sj0*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2782=((1.0)*gconst95);
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2782))+((cj0*gconst94*r01))+(((-1.0)*r10*sj0*x2782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2782))+(((-1.0)*gconst94*r20)))),-1);
if(!x2784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2783.value)+(((1.5707963267949)*(x2784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2785=IKsin(j4);
IkReal x2786=IKcos(j4);
IkReal x2787=(cj2*sj1);
IkReal x2788=(gconst94*r11);
IkReal x2789=(gconst95*r10);
IkReal x2790=(gconst94*r21);
IkReal x2791=(gconst94*r01);
IkReal x2792=(cj1*sj2);
IkReal x2793=((1.0)*x2786);
IkReal x2794=((1.0)*x2785);
IkReal x2795=(gconst95*x2786);
evalcond[0]=(((x2785*x2790))+(((-1.0)*gconst95*r20*x2794))+(((-1.0)*r22*x2793)));
evalcond[1]=(sj0+((x2785*x2791))+(((-1.0)*gconst95*r00*x2794))+(((-1.0)*r02*x2793)));
evalcond[2]=(((x2785*x2788))+(((-1.0)*x2789*x2794))+(((-1.0)*cj0))+(((-1.0)*r12*x2793)));
evalcond[3]=((((-1.0)*x2790*x2793))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2794))+((r20*x2795)));
evalcond[4]=((((-1.0)*x2791*x2793))+((r00*x2795))+((cj0*x2787))+((cj0*x2792))+(((-1.0)*r02*x2794)));
evalcond[5]=(((sj0*x2787))+((sj0*x2792))+(((-1.0)*x2788*x2793))+(((-1.0)*r12*x2794))+((x2786*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2796.value)+(((1.5707963267949)*(x2797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2798=IKsin(j4);
IkReal x2799=IKcos(j4);
IkReal x2800=(cj2*sj1);
IkReal x2801=(gconst94*r11);
IkReal x2802=(gconst95*r10);
IkReal x2803=(gconst94*r21);
IkReal x2804=(gconst94*r01);
IkReal x2805=(cj1*sj2);
IkReal x2806=((1.0)*x2799);
IkReal x2807=((1.0)*x2798);
IkReal x2808=(gconst95*x2799);
evalcond[0]=(((x2798*x2803))+(((-1.0)*gconst95*r20*x2807))+(((-1.0)*r22*x2806)));
evalcond[1]=(sj0+((x2798*x2804))+(((-1.0)*gconst95*r00*x2807))+(((-1.0)*r02*x2806)));
evalcond[2]=(((x2798*x2801))+(((-1.0)*x2802*x2807))+(((-1.0)*r12*x2806))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2803*x2806))+((r20*x2808))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2807)));
evalcond[4]=((((-1.0)*x2804*x2806))+((cj0*x2805))+((cj0*x2800))+(((-1.0)*r02*x2807))+((r00*x2808)));
evalcond[5]=((((-1.0)*r12*x2807))+((x2799*x2802))+((sj0*x2805))+((sj0*x2800))+(((-1.0)*x2801*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2809=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2809;
j4eval[1]=IKsign(x2809);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2810=((1.0)*cj5);
IkReal x2811=((((-1.0)*r21*x2810))+(((-1.0)*r20*sj5)));
j4eval[0]=x2811;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2810)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2812=cj5*cj5;
IkReal x2813=r11*r11;
IkReal x2814=(cj5*r10);
IkReal x2815=(r11*sj5);
IkReal x2816=(((x2812*x2813))+(((-1.0)*x2813))+(((2.0)*x2814*x2815))+(((-1.0)*(r12*r12)))+(((-1.0)*x2812*(r10*r10))));
j4eval[0]=x2816;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2815))+x2814))));
j4eval[2]=IKsign(x2816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2817=cj5*cj5;
IkReal x2818=r11*r11;
IkReal x2819=(cj5*r10);
IkReal x2820=(r11*sj5);
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2818))+(((-1.0)*x2817*(r10*r10)))+(((2.0)*x2819*x2820))+(((-1.0)*(r12*r12)))+((x2817*x2818)))),-1);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822 = IKatan2WithCheck(IkReal(((((-1.0)*x2820))+x2819)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2821.value)))+(x2822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2823=IKsin(j4);
IkReal x2824=IKcos(j4);
IkReal x2825=(cj5*r10);
IkReal x2826=(r01*sj5);
IkReal x2827=(cj5*r00);
IkReal x2828=(cj5*r20);
IkReal x2829=((1.0)*x2824);
IkReal x2830=((1.0)*x2823);
IkReal x2831=(sj5*x2823);
evalcond[0]=((((-1.0)*r22*x2829))+(((-1.0)*x2828*x2830))+((r21*x2831)));
evalcond[1]=(((x2823*x2826))+(((-1.0)*r02*x2829))+(((-1.0)*x2827*x2830)));
evalcond[2]=(((x2824*x2825))+(((-1.0)*r11*sj5*x2829))+(((-1.0)*r12*x2830)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2829))+(((-1.0)*x2825*x2830))+((r11*x2831)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2824*x2827))+(((-1.0)*x2826*x2829))+(((-1.0)*r02*x2830)));
evalcond[5]=(((x2824*x2828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2830))+(((-1.0)*r21*sj5*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2832=((1.0)*cj5);
CheckValue<IkReal> x2833 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2832))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2833.valid){
continue;
}
CheckValue<IkReal> x2834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2832))+(((-1.0)*r20*sj5)))),-1);
if(!x2834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2833.value)+(((1.5707963267949)*(x2834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2835=IKsin(j4);
IkReal x2836=IKcos(j4);
IkReal x2837=(cj5*r10);
IkReal x2838=(r01*sj5);
IkReal x2839=(cj5*r00);
IkReal x2840=(cj5*r20);
IkReal x2841=((1.0)*x2836);
IkReal x2842=((1.0)*x2835);
IkReal x2843=(sj5*x2835);
evalcond[0]=(((r21*x2843))+(((-1.0)*x2840*x2842))+(((-1.0)*r22*x2841)));
evalcond[1]=((((-1.0)*x2839*x2842))+(((-1.0)*r02*x2841))+((x2835*x2838)));
evalcond[2]=(((x2836*x2837))+(((-1.0)*r12*x2842))+(((-1.0)*r11*sj5*x2841)));
evalcond[3]=((-1.0)+((r11*x2843))+(((-1.0)*r12*x2841))+(((-1.0)*x2837*x2842)));
evalcond[4]=(((x2836*x2839))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2842))+(((-1.0)*x2838*x2841)));
evalcond[5]=(((x2836*x2840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2842))+(((-1.0)*r21*sj5*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKsin(j4);
IkReal x2847=IKcos(j4);
IkReal x2848=(cj5*r10);
IkReal x2849=(r01*sj5);
IkReal x2850=(cj5*r00);
IkReal x2851=(cj5*r20);
IkReal x2852=((1.0)*x2847);
IkReal x2853=((1.0)*x2846);
IkReal x2854=(sj5*x2846);
evalcond[0]=(((r21*x2854))+(((-1.0)*x2851*x2853))+(((-1.0)*r22*x2852)));
evalcond[1]=(((x2846*x2849))+(((-1.0)*x2850*x2853))+(((-1.0)*r02*x2852)));
evalcond[2]=((((-1.0)*r11*sj5*x2852))+((x2847*x2848))+(((-1.0)*r12*x2853)));
evalcond[3]=((-1.0)+((r11*x2854))+(((-1.0)*r12*x2852))+(((-1.0)*x2848*x2853)));
evalcond[4]=(((cj2*sj1))+((x2847*x2850))+((cj1*sj2))+(((-1.0)*x2849*x2852))+(((-1.0)*r02*x2853)));
evalcond[5]=(((x2847*x2851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2853))+(((-1.0)*r21*sj5*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2855=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2855;
j4eval[1]=IKsign(x2855);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2856=((1.0)*cj5);
IkReal x2857=((((-1.0)*r01*x2856))+(((-1.0)*r00*sj5)));
j4eval[0]=x2857;
j4eval[1]=((IKabs(((((-1.0)*r20*x2856))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2858=cj5*cj5;
IkReal x2859=r11*r11;
IkReal x2860=(r11*sj5);
IkReal x2861=(cj5*r10);
IkReal x2862=((r12*r12)+(((-1.0)*x2858*x2859))+(((-2.0)*x2860*x2861))+x2859+((x2858*(r10*r10))));
j4eval[0]=x2862;
j4eval[1]=IKsign(x2862);
j4eval[2]=((IKabs(((((-1.0)*x2860))+x2861)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2863=cj5*cj5;
IkReal x2864=r11*r11;
IkReal x2865=(cj5*r10);
IkReal x2866=(r11*sj5);
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(((((-1.0)*x2866))+x2865)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2863*(r10*r10)))+(((-2.0)*x2865*x2866))+x2864+(((-1.0)*x2863*x2864)))),-1);
if(!x2868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2867.value)+(((1.5707963267949)*(x2868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2869=IKsin(j4);
IkReal x2870=IKcos(j4);
IkReal x2871=(cj5*r10);
IkReal x2872=(r01*sj5);
IkReal x2873=((1.0)*cj2);
IkReal x2874=(cj5*r00);
IkReal x2875=(cj5*r20);
IkReal x2876=((1.0)*x2870);
IkReal x2877=((1.0)*x2869);
IkReal x2878=(sj5*x2869);
evalcond[0]=((((-1.0)*r22*x2876))+((r21*x2878))+(((-1.0)*x2875*x2877)));
evalcond[1]=((((-1.0)*r02*x2876))+((x2869*x2872))+(((-1.0)*x2874*x2877)));
evalcond[2]=(((x2870*x2871))+(((-1.0)*r11*sj5*x2876))+(((-1.0)*r12*x2877)));
evalcond[3]=((1.0)+(((-1.0)*x2871*x2877))+((r11*x2878))+(((-1.0)*r12*x2876)));
evalcond[4]=(((x2870*x2875))+(((-1.0)*r22*x2877))+(((-1.0)*cj1*x2873))+((sj1*sj2))+(((-1.0)*r21*sj5*x2876)));
evalcond[5]=(((x2870*x2874))+(((-1.0)*r02*x2877))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2873))+(((-1.0)*x2872*x2876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*cj5);
CheckValue<IkReal> x2880 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2879)))),-1);
if(!x2881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2880.value)+(((1.5707963267949)*(x2881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2882=IKsin(j4);
IkReal x2883=IKcos(j4);
IkReal x2884=(cj5*r10);
IkReal x2885=(r01*sj5);
IkReal x2886=((1.0)*cj2);
IkReal x2887=(cj5*r00);
IkReal x2888=(cj5*r20);
IkReal x2889=((1.0)*x2883);
IkReal x2890=((1.0)*x2882);
IkReal x2891=(sj5*x2882);
evalcond[0]=((((-1.0)*r22*x2889))+(((-1.0)*x2888*x2890))+((r21*x2891)));
evalcond[1]=((((-1.0)*x2887*x2890))+(((-1.0)*r02*x2889))+((x2882*x2885)));
evalcond[2]=((((-1.0)*r11*sj5*x2889))+((x2883*x2884))+(((-1.0)*r12*x2890)));
evalcond[3]=((1.0)+((r11*x2891))+(((-1.0)*x2884*x2890))+(((-1.0)*r12*x2889)));
evalcond[4]=((((-1.0)*r22*x2890))+((sj1*sj2))+(((-1.0)*r21*sj5*x2889))+(((-1.0)*cj1*x2886))+((x2883*x2888)));
evalcond[5]=((((-1.0)*r02*x2890))+(((-1.0)*cj1*sj2))+(((-1.0)*x2885*x2889))+(((-1.0)*sj1*x2886))+((x2883*x2887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2892=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2892.value)))+(x2893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2894=IKsin(j4);
IkReal x2895=IKcos(j4);
IkReal x2896=(cj5*r10);
IkReal x2897=(r01*sj5);
IkReal x2898=((1.0)*cj2);
IkReal x2899=(cj5*r00);
IkReal x2900=(cj5*r20);
IkReal x2901=((1.0)*x2895);
IkReal x2902=((1.0)*x2894);
IkReal x2903=(sj5*x2894);
evalcond[0]=((((-1.0)*x2900*x2902))+((r21*x2903))+(((-1.0)*r22*x2901)));
evalcond[1]=((((-1.0)*r02*x2901))+((x2894*x2897))+(((-1.0)*x2899*x2902)));
evalcond[2]=(((x2895*x2896))+(((-1.0)*r11*sj5*x2901))+(((-1.0)*r12*x2902)));
evalcond[3]=((1.0)+(((-1.0)*x2896*x2902))+(((-1.0)*r12*x2901))+((r11*x2903)));
evalcond[4]=((((-1.0)*r21*sj5*x2901))+((sj1*sj2))+(((-1.0)*cj1*x2898))+((x2895*x2900))+(((-1.0)*r22*x2902)));
evalcond[5]=((((-1.0)*r02*x2902))+((x2895*x2899))+(((-1.0)*x2897*x2901))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2904=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2904);
rxp0_2=(py*r00);
rxp1_0=(r21*x2904);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2905=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2905);
rxp0_2=(py*r00);
rxp1_0=(r21*x2905);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2906=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2906);
rxp0_2=(py*r00);
rxp1_0=(r21*x2906);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2909.valid){
continue;
}
IkReal x2907=x2909.value;
IkReal x2908=((1.0)*cj0*x2907);
cj4array[0]=((((-1.0)*cj1*sj2*x2908))+(((-1.0)*cj2*sj1*x2908)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2910=IKsin(j4);
IkReal x2911=IKcos(j4);
IkReal x2912=(r21*sj5);
IkReal x2913=((1.0)*x2911);
IkReal x2914=((1.0)*cj5*x2910);
evalcond[0]=((-1.0)*r12*x2910);
evalcond[1]=((((-1.0)*r12*x2913))+(((-1.0)*cj0)));
evalcond[2]=(((x2910*x2912))+(((-1.0)*r20*x2914)));
evalcond[3]=((((-1.0)*r00*x2914))+((r01*sj5*x2910)));
evalcond[4]=((((-1.0)*x2912*x2913))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*r20*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2916=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2916.valid){
continue;
}
IkReal x2915=x2916.value;
cj4array[0]=(((cj1*cj2*x2915))+(((-1.0)*sj1*sj2*x2915)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2917=IKsin(j4);
IkReal x2918=IKcos(j4);
IkReal x2919=(cj5*r00);
IkReal x2920=((1.0)*x2917);
IkReal x2921=(sj5*x2917);
IkReal x2922=((1.0)*x2918);
evalcond[0]=((-1.0)*r12*x2917);
evalcond[1]=((((-1.0)*r12*x2922))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2921))+(((-1.0)*cj5*r20*x2920)));
evalcond[3]=((((-1.0)*x2919*x2920))+((r01*x2921)));
evalcond[4]=(((x2918*x2919))+(((-1.0)*r01*sj5*x2922))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2923=IKPowWithIntegerCheck(r12,-1);
if(!x2923.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2923.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2924=IKsin(j4);
IkReal x2925=IKcos(j4);
IkReal x2926=(cj5*r00);
IkReal x2927=(cj5*r20);
IkReal x2928=(r21*sj5);
IkReal x2929=(r01*sj5);
IkReal x2930=((1.0)*x2924);
IkReal x2931=((1.0)*x2925);
evalcond[0]=((-1.0)*r12*x2924);
evalcond[1]=((((-1.0)*x2927*x2930))+((x2924*x2928)));
evalcond[2]=(((x2924*x2929))+(((-1.0)*x2926*x2930)));
evalcond[3]=(((x2925*x2927))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2928*x2931)));
evalcond[4]=(((x2925*x2926))+(((-1.0)*x2929*x2931))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2932=((1.0)*cj5);
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2932))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2932))+(((-1.0)*r20*sj5)))),-1);
if(!x2934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2933.value)+(((1.5707963267949)*(x2934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2935=IKsin(j4);
IkReal x2936=IKcos(j4);
IkReal x2937=(cj5*r10);
IkReal x2938=(cj2*sj1);
IkReal x2939=(r01*sj5);
IkReal x2940=(cj5*r00);
IkReal x2941=(cj5*r20);
IkReal x2942=(cj1*sj2);
IkReal x2943=((1.0)*x2936);
IkReal x2944=((1.0)*x2935);
IkReal x2945=(sj5*x2935);
evalcond[0]=(((r21*x2945))+(((-1.0)*r22*x2943))+(((-1.0)*x2941*x2944)));
evalcond[1]=((((-1.0)*x2940*x2944))+sj0+(((-1.0)*r02*x2943))+((x2935*x2939)));
evalcond[2]=((((-1.0)*r12*x2943))+((r11*x2945))+(((-1.0)*cj0))+(((-1.0)*x2937*x2944)));
evalcond[3]=(((x2936*x2941))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2943))+(((-1.0)*r22*x2944)));
evalcond[4]=((((-1.0)*x2939*x2943))+((x2936*x2940))+((cj0*x2938))+(((-1.0)*r02*x2944))+((cj0*x2942)));
evalcond[5]=((((-1.0)*r12*x2944))+(((-1.0)*r11*sj5*x2943))+((x2936*x2937))+((sj0*x2942))+((sj0*x2938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(cj5*r10);
IkReal x2951=(cj2*sj1);
IkReal x2952=(r01*sj5);
IkReal x2953=(cj5*r00);
IkReal x2954=(cj5*r20);
IkReal x2955=(cj1*sj2);
IkReal x2956=((1.0)*x2949);
IkReal x2957=((1.0)*x2948);
IkReal x2958=(sj5*x2948);
evalcond[0]=(((r21*x2958))+(((-1.0)*x2954*x2957))+(((-1.0)*r22*x2956)));
evalcond[1]=((((-1.0)*x2953*x2957))+(((-1.0)*r02*x2956))+sj0+((x2948*x2952)));
evalcond[2]=((((-1.0)*r12*x2956))+(((-1.0)*x2950*x2957))+((r11*x2958))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2957))+((x2949*x2954))+(((-1.0)*r21*sj5*x2956)));
evalcond[4]=((((-1.0)*r02*x2957))+(((-1.0)*x2952*x2956))+((cj0*x2955))+((cj0*x2951))+((x2949*x2953)));
evalcond[5]=(((sj0*x2955))+((sj0*x2951))+(((-1.0)*r11*sj5*x2956))+(((-1.0)*r12*x2957))+((x2949*x2950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2959=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2959.valid){
continue;
}
CheckValue<IkReal> x2960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2959.value)))+(x2960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2961=IKsin(j4);
IkReal x2962=IKcos(j4);
IkReal x2963=(cj5*r10);
IkReal x2964=(cj2*sj1);
IkReal x2965=(r01*sj5);
IkReal x2966=(cj5*r00);
IkReal x2967=(cj5*r20);
IkReal x2968=(cj1*sj2);
IkReal x2969=((1.0)*x2962);
IkReal x2970=((1.0)*x2961);
IkReal x2971=(sj5*x2961);
evalcond[0]=((((-1.0)*r22*x2969))+(((-1.0)*x2967*x2970))+((r21*x2971)));
evalcond[1]=(sj0+((x2961*x2965))+(((-1.0)*r02*x2969))+(((-1.0)*x2966*x2970)));
evalcond[2]=((((-1.0)*x2963*x2970))+((r11*x2971))+(((-1.0)*cj0))+(((-1.0)*r12*x2969)));
evalcond[3]=((((-1.0)*r21*sj5*x2969))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2962*x2967))+(((-1.0)*r22*x2970)));
evalcond[4]=((((-1.0)*x2965*x2969))+(((-1.0)*r02*x2970))+((x2962*x2966))+((cj0*x2968))+((cj0*x2964)));
evalcond[5]=(((sj0*x2964))+((sj0*x2968))+(((-1.0)*r11*sj5*x2969))+(((-1.0)*r12*x2970))+((x2962*x2963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2972=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2972;
j0eval[1]=IKsign(x2972);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2973=r21*r21;
IkReal x2974=cj5*cj5;
IkReal x2975=(sj1*sj2);
IkReal x2976=(r21*sj5);
IkReal x2977=(cj5*r20);
IkReal x2978=(cj1*cj2);
IkReal x2979=((((-1.0)*x2973))+(((2.0)*x2976*x2977))+(((-1.0)*x2974*(r20*r20)))+(((-1.0)*(r22*r22)))+((x2973*x2974)));
j4eval[0]=x2979;
j4eval[1]=((IKabs((((r22*x2975))+(((-1.0)*r22*x2978)))))+(IKabs(((((-1.0)*x2975*x2977))+((x2977*x2978))+(((-1.0)*x2976*x2978))+((x2975*x2976))))));
j4eval[2]=IKsign(x2979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40934584042491)*py))+(((1.53920805436791)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40934584042491)*py))+(((1.53920805436791)*px))))+IKsqr(((((-3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40934584042491)*py))+(((1.53920805436791)*px))), ((((-3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2980=IKsin(j0);
IkReal x2981=IKcos(j0);
evalcond[0]=((((-0.24365)*x2981))+(((0.11)*x2980))+(((-1.0)*px)));
evalcond[1]=((((-0.24365)*x2980))+(((-1.0)*py))+(((-0.11)*x2981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2982=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2982;
j4eval[1]=IKsign(x2982);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2983=((1.0)*cj5);
IkReal x2984=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2983)));
j4eval[0]=x2984;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x2983))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x2984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2985=cj5*cj5;
IkReal x2986=((1.0)*r20);
IkReal x2987=(r01*r21);
IkReal x2988=(r21*sj5);
IkReal x2989=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x2988))+(((-1.0)*x2987))+(((-1.0)*r00*x2985*x2986))+((x2985*x2987)));
j4eval[0]=x2989;
j4eval[1]=((IKabs((((cj0*x2988))+(((-1.0)*cj0*cj5*x2986)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2990=cj5*cj5;
IkReal x2991=((1.0)*r20);
IkReal x2992=(r01*r21);
IkReal x2993=(r21*sj5);
CheckValue<IkReal> x2994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x2993))+(((-1.0)*cj0*cj5*x2991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2994.valid){
continue;
}
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x2990*x2992))+(((-1.0)*r02*r22))+(((-1.0)*x2992))+((cj5*r00*x2993))+(((-1.0)*r00*x2990*x2991)))),-1);
if(!x2995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2994.value)+(((1.5707963267949)*(x2995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2996=IKcos(j4);
IkReal x2997=IKsin(j4);
IkReal x2998=(cj5*r00);
IkReal x2999=(cj5*r10);
IkReal x3000=(cj5*r20);
IkReal x3001=((1.0)*x2996);
IkReal x3002=((1.0)*x2997);
IkReal x3003=(sj5*x2996);
IkReal x3004=(sj5*x2997);
evalcond[0]=((((-1.0)*x3000*x3001))+((r21*x3003))+((r22*x2997)));
evalcond[1]=((((-1.0)*r22*x3001))+(((-1.0)*x3000*x3002))+((r21*x3004)));
evalcond[2]=(((r01*x3003))+cj0+(((-1.0)*x2998*x3001))+((r02*x2997)));
evalcond[3]=(sj0+((r12*x2997))+((r11*x3003))+(((-1.0)*x2999*x3001)));
evalcond[4]=(((r01*x3004))+sj0+(((-1.0)*r02*x3001))+(((-1.0)*x2998*x3002)));
evalcond[5]=((((-1.0)*r12*x3001))+((r11*x3004))+(((-1.0)*x2999*x3002))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3005=((1.0)*cj5);
CheckValue<IkReal> x3006 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3005))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3005)))),-1);
if(!x3007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3006.value)+(((1.5707963267949)*(x3007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3008=IKcos(j4);
IkReal x3009=IKsin(j4);
IkReal x3010=(cj5*r00);
IkReal x3011=(cj5*r10);
IkReal x3012=(cj5*r20);
IkReal x3013=((1.0)*x3008);
IkReal x3014=((1.0)*x3009);
IkReal x3015=(sj5*x3008);
IkReal x3016=(sj5*x3009);
evalcond[0]=(((r22*x3009))+((r21*x3015))+(((-1.0)*x3012*x3013)));
evalcond[1]=((((-1.0)*r22*x3013))+((r21*x3016))+(((-1.0)*x3012*x3014)));
evalcond[2]=(((r01*x3015))+cj0+(((-1.0)*x3010*x3013))+((r02*x3009)));
evalcond[3]=(sj0+((r12*x3009))+(((-1.0)*x3011*x3013))+((r11*x3015)));
evalcond[4]=(sj0+((r01*x3016))+(((-1.0)*r02*x3013))+(((-1.0)*x3010*x3014)));
evalcond[5]=((((-1.0)*r12*x3013))+(((-1.0)*x3011*x3014))+((r11*x3016))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3017 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3017.valid){
continue;
}
CheckValue<IkReal> x3018=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3017.value)+(((1.5707963267949)*(x3018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3019=IKcos(j4);
IkReal x3020=IKsin(j4);
IkReal x3021=(cj5*r00);
IkReal x3022=(cj5*r10);
IkReal x3023=(cj5*r20);
IkReal x3024=((1.0)*x3019);
IkReal x3025=((1.0)*x3020);
IkReal x3026=(sj5*x3019);
IkReal x3027=(sj5*x3020);
evalcond[0]=(((r21*x3026))+((r22*x3020))+(((-1.0)*x3023*x3024)));
evalcond[1]=(((r21*x3027))+(((-1.0)*x3023*x3025))+(((-1.0)*r22*x3024)));
evalcond[2]=(cj0+(((-1.0)*x3021*x3024))+((r02*x3020))+((r01*x3026)));
evalcond[3]=(((r12*x3020))+sj0+((r11*x3026))+(((-1.0)*x3022*x3024)));
evalcond[4]=(sj0+(((-1.0)*x3021*x3025))+((r01*x3027))+(((-1.0)*r02*x3024)));
evalcond[5]=((((-1.0)*r12*x3024))+((r11*x3027))+(((-1.0)*x3022*x3025))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40934584042491)*py))+(((1.53920805436791)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40934584042491)*py))+(((1.53920805436791)*px))))+IKsqr(((((-3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40934584042491)*py))+(((1.53920805436791)*px))), ((((-3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3028=IKsin(j0);
IkReal x3029=IKcos(j0);
evalcond[0]=((((0.11)*x3028))+(((-1.0)*px))+(((-0.24365)*x3029)));
evalcond[1]=((((-1.0)*py))+(((-0.11)*x3029))+(((-0.24365)*x3028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3030=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3030;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3031=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3031;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3032=((1.0)*cj5);
IkReal x3033=((((-1.0)*r01*x3032))+(((-1.0)*r00*sj5)));
j4eval[0]=x3033;
j4eval[1]=IKsign(x3033);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3032))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3034=((1.0)*cj5);
CheckValue<IkReal> x3035 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3034))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3034))+(((-1.0)*r00*sj5)))),-1);
if(!x3036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3035.value)+(((1.5707963267949)*(x3036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3037=IKcos(j4);
IkReal x3038=IKsin(j4);
IkReal x3039=((1.0)*cj0);
IkReal x3040=(cj5*r00);
IkReal x3041=(cj5*r10);
IkReal x3042=(cj5*r20);
IkReal x3043=((1.0)*x3037);
IkReal x3044=((1.0)*x3038);
IkReal x3045=(sj5*x3037);
IkReal x3046=(sj5*x3038);
evalcond[0]=((((-1.0)*x3042*x3043))+((r21*x3045))+((r22*x3038)));
evalcond[1]=((((-1.0)*x3042*x3044))+((r21*x3046))+(((-1.0)*r22*x3043)));
evalcond[2]=(sj0+(((-1.0)*x3040*x3044))+(((-1.0)*r02*x3043))+((r01*x3046)));
evalcond[3]=(((r02*x3038))+(((-1.0)*x3039))+(((-1.0)*x3040*x3043))+((r01*x3045)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3038))+(((-1.0)*x3041*x3043))+((r11*x3045)));
evalcond[5]=((((-1.0)*r12*x3043))+(((-1.0)*x3039))+(((-1.0)*x3041*x3044))+((r11*x3046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3047 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3047.valid){
continue;
}
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3047.value)+(((1.5707963267949)*(x3048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3049=IKcos(j4);
IkReal x3050=IKsin(j4);
IkReal x3051=((1.0)*cj0);
IkReal x3052=(cj5*r00);
IkReal x3053=(cj5*r10);
IkReal x3054=(cj5*r20);
IkReal x3055=((1.0)*x3049);
IkReal x3056=((1.0)*x3050);
IkReal x3057=(sj5*x3049);
IkReal x3058=(sj5*x3050);
evalcond[0]=(((r21*x3057))+((r22*x3050))+(((-1.0)*x3054*x3055)));
evalcond[1]=(((r21*x3058))+(((-1.0)*x3054*x3056))+(((-1.0)*r22*x3055)));
evalcond[2]=(sj0+(((-1.0)*x3052*x3056))+((r01*x3058))+(((-1.0)*r02*x3055)));
evalcond[3]=((((-1.0)*x3052*x3055))+((r02*x3050))+((r01*x3057))+(((-1.0)*x3051)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3053*x3055))+((r12*x3050))+((r11*x3057)));
evalcond[5]=((((-1.0)*x3053*x3056))+((r11*x3058))+(((-1.0)*x3051))+(((-1.0)*r12*x3055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3059=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3059.value)))+(x3060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKcos(j4);
IkReal x3062=IKsin(j4);
IkReal x3063=((1.0)*cj0);
IkReal x3064=(cj5*r00);
IkReal x3065=(cj5*r10);
IkReal x3066=(cj5*r20);
IkReal x3067=((1.0)*x3061);
IkReal x3068=((1.0)*x3062);
IkReal x3069=(sj5*x3061);
IkReal x3070=(sj5*x3062);
evalcond[0]=(((r22*x3062))+(((-1.0)*x3066*x3067))+((r21*x3069)));
evalcond[1]=((((-1.0)*r22*x3067))+(((-1.0)*x3066*x3068))+((r21*x3070)));
evalcond[2]=(((r01*x3070))+sj0+(((-1.0)*r02*x3067))+(((-1.0)*x3064*x3068)));
evalcond[3]=(((r01*x3069))+(((-1.0)*x3063))+((r02*x3062))+(((-1.0)*x3064*x3067)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3069))+((r12*x3062))+(((-1.0)*x3065*x3067)));
evalcond[5]=((((-1.0)*r12*x3067))+(((-1.0)*x3063))+((r11*x3070))+(((-1.0)*x3065*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3071=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3071;
j4eval[1]=IKsign(x3071);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3072=((1.0)*cj5);
IkReal x3073=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3072)));
j4eval[0]=x3073;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3072))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3074=cj5*cj5;
IkReal x3075=((1.0)*r20);
IkReal x3076=(r01*r21);
IkReal x3077=(r21*sj5);
IkReal x3078=(((cj5*r01*r20*sj5))+(((-1.0)*x3076))+(((-1.0)*r02*r22))+((cj5*r00*x3077))+(((-1.0)*r00*x3074*x3075))+((x3074*x3076)));
j4eval[0]=x3078;
j4eval[1]=((IKabs((((cj0*x3077))+(((-1.0)*cj0*cj5*x3075)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3079=cj5*cj5;
IkReal x3080=((1.0)*r20);
IkReal x3081=(r01*r21);
IkReal x3082=(r21*sj5);
CheckValue<IkReal> x3083 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3082))+(((-1.0)*cj0*cj5*x3080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3083.valid){
continue;
}
CheckValue<IkReal> x3084=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3081))+(((-1.0)*r00*x3079*x3080))+((x3079*x3081))+((cj5*r00*x3082)))),-1);
if(!x3084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3083.value)+(((1.5707963267949)*(x3084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3085=IKcos(j4);
IkReal x3086=IKsin(j4);
IkReal x3087=(cj5*r00);
IkReal x3088=(cj5*r10);
IkReal x3089=(cj5*r20);
IkReal x3090=((1.0)*x3085);
IkReal x3091=((1.0)*x3086);
IkReal x3092=(sj5*x3085);
IkReal x3093=(sj5*x3086);
evalcond[0]=(((r21*x3092))+(((-1.0)*x3089*x3090))+((r22*x3086)));
evalcond[1]=((((-1.0)*r22*x3090))+((r21*x3093))+(((-1.0)*x3089*x3091)));
evalcond[2]=(((r01*x3092))+cj0+((r02*x3086))+(((-1.0)*x3087*x3090)));
evalcond[3]=(sj0+((r12*x3086))+(((-1.0)*x3088*x3090))+((r11*x3092)));
evalcond[4]=(((r01*x3093))+(((-1.0)*r02*x3090))+sj0+(((-1.0)*x3087*x3091)));
evalcond[5]=((((-1.0)*r12*x3090))+(((-1.0)*x3088*x3091))+((r11*x3093))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3094=((1.0)*cj5);
CheckValue<IkReal> x3095 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3094)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3094))+(((-1.0)*r10*sj5)))),-1);
if(!x3096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3095.value)+(((1.5707963267949)*(x3096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3097=IKcos(j4);
IkReal x3098=IKsin(j4);
IkReal x3099=(cj5*r00);
IkReal x3100=(cj5*r10);
IkReal x3101=(cj5*r20);
IkReal x3102=((1.0)*x3097);
IkReal x3103=((1.0)*x3098);
IkReal x3104=(sj5*x3097);
IkReal x3105=(sj5*x3098);
evalcond[0]=(((r21*x3104))+(((-1.0)*x3101*x3102))+((r22*x3098)));
evalcond[1]=(((r21*x3105))+(((-1.0)*r22*x3102))+(((-1.0)*x3101*x3103)));
evalcond[2]=(cj0+((r02*x3098))+(((-1.0)*x3099*x3102))+((r01*x3104)));
evalcond[3]=(((r11*x3104))+sj0+(((-1.0)*x3100*x3102))+((r12*x3098)));
evalcond[4]=(sj0+(((-1.0)*x3099*x3103))+((r01*x3105))+(((-1.0)*r02*x3102)));
evalcond[5]=(((r11*x3105))+(((-1.0)*r12*x3102))+(((-1.0)*x3100*x3103))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3106 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3106.valid){
continue;
}
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3106.value)+(((1.5707963267949)*(x3107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3108=IKcos(j4);
IkReal x3109=IKsin(j4);
IkReal x3110=(cj5*r00);
IkReal x3111=(cj5*r10);
IkReal x3112=(cj5*r20);
IkReal x3113=((1.0)*x3108);
IkReal x3114=((1.0)*x3109);
IkReal x3115=(sj5*x3108);
IkReal x3116=(sj5*x3109);
evalcond[0]=(((r22*x3109))+((r21*x3115))+(((-1.0)*x3112*x3113)));
evalcond[1]=(((r21*x3116))+(((-1.0)*r22*x3113))+(((-1.0)*x3112*x3114)));
evalcond[2]=(cj0+(((-1.0)*x3110*x3113))+((r02*x3109))+((r01*x3115)));
evalcond[3]=(sj0+(((-1.0)*x3111*x3113))+((r12*x3109))+((r11*x3115)));
evalcond[4]=((((-1.0)*r02*x3113))+sj0+(((-1.0)*x3110*x3114))+((r01*x3116)));
evalcond[5]=((((-1.0)*r12*x3113))+(((-1.0)*x3111*x3114))+((r11*x3116))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3117=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3117;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3118=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3118;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3119=((1.0)*cj5);
IkReal x3120=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3119)));
j4eval[0]=x3120;
j4eval[1]=IKsign(x3120);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3119))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3121=((1.0)*cj5);
CheckValue<IkReal> x3122 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3121))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3121)))),-1);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3122.value)+(((1.5707963267949)*(x3123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKcos(j4);
IkReal x3125=IKsin(j4);
IkReal x3126=((1.0)*cj0);
IkReal x3127=(cj5*r00);
IkReal x3128=(cj5*r10);
IkReal x3129=(cj5*r20);
IkReal x3130=((1.0)*x3124);
IkReal x3131=((1.0)*x3125);
IkReal x3132=(sj5*x3124);
IkReal x3133=(sj5*x3125);
evalcond[0]=(((r21*x3132))+((r22*x3125))+(((-1.0)*x3129*x3130)));
evalcond[1]=(((r21*x3133))+(((-1.0)*r22*x3130))+(((-1.0)*x3129*x3131)));
evalcond[2]=(sj0+((r01*x3133))+(((-1.0)*r02*x3130))+(((-1.0)*x3127*x3131)));
evalcond[3]=(((r01*x3132))+((r02*x3125))+(((-1.0)*x3126))+(((-1.0)*x3127*x3130)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3128*x3130))+((r12*x3125))+((r11*x3132)));
evalcond[5]=((((-1.0)*x3128*x3131))+(((-1.0)*r12*x3130))+((r11*x3133))+(((-1.0)*x3126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3134 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3134.valid){
continue;
}
CheckValue<IkReal> x3135=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3134.value)+(((1.5707963267949)*(x3135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3136=IKcos(j4);
IkReal x3137=IKsin(j4);
IkReal x3138=((1.0)*cj0);
IkReal x3139=(cj5*r00);
IkReal x3140=(cj5*r10);
IkReal x3141=(cj5*r20);
IkReal x3142=((1.0)*x3136);
IkReal x3143=((1.0)*x3137);
IkReal x3144=(sj5*x3136);
IkReal x3145=(sj5*x3137);
evalcond[0]=((((-1.0)*x3141*x3142))+((r22*x3137))+((r21*x3144)));
evalcond[1]=((((-1.0)*r22*x3142))+(((-1.0)*x3141*x3143))+((r21*x3145)));
evalcond[2]=(sj0+((r01*x3145))+(((-1.0)*r02*x3142))+(((-1.0)*x3139*x3143)));
evalcond[3]=(((r01*x3144))+((r02*x3137))+(((-1.0)*x3139*x3142))+(((-1.0)*x3138)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3140*x3142))+((r11*x3144))+((r12*x3137)));
evalcond[5]=((((-1.0)*r12*x3142))+(((-1.0)*x3140*x3143))+((r11*x3145))+(((-1.0)*x3138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3146.value)))+(x3147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3148=IKcos(j4);
IkReal x3149=IKsin(j4);
IkReal x3150=((1.0)*cj0);
IkReal x3151=(cj5*r00);
IkReal x3152=(cj5*r10);
IkReal x3153=(cj5*r20);
IkReal x3154=((1.0)*x3148);
IkReal x3155=((1.0)*x3149);
IkReal x3156=(sj5*x3148);
IkReal x3157=(sj5*x3149);
evalcond[0]=((((-1.0)*x3153*x3154))+((r22*x3149))+((r21*x3156)));
evalcond[1]=((((-1.0)*r22*x3154))+(((-1.0)*x3153*x3155))+((r21*x3157)));
evalcond[2]=(sj0+((r01*x3157))+(((-1.0)*r02*x3154))+(((-1.0)*x3151*x3155)));
evalcond[3]=((((-1.0)*x3150))+((r02*x3149))+((r01*x3156))+(((-1.0)*x3151*x3154)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3149))+((r11*x3156))+(((-1.0)*x3152*x3154)));
evalcond[5]=((((-1.0)*x3150))+((r11*x3157))+(((-1.0)*r12*x3154))+(((-1.0)*x3152*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.53920805436791)*px))+(((3.40934584042491)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.53920805436791)*px))+(((3.40934584042491)*py))))+IKsqr(((((3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.53920805436791)*px))+(((3.40934584042491)*py))), ((((3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3158=IKsin(j0);
IkReal x3159=IKcos(j0);
evalcond[0]=((((0.11)*x3158))+(((-1.0)*px))+(((0.24365)*x3159)));
evalcond[1]=((((-0.11)*x3159))+(((-1.0)*py))+(((0.24365)*x3158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3160=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3160;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3160);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3161=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3161;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3162=((1.0)*cj5);
IkReal x3163=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3162)));
j4eval[0]=x3163;
j4eval[1]=IKsign(x3163);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3162))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3164=((1.0)*cj5);
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3164)))),-1);
if(!x3165.valid){
continue;
}
CheckValue<IkReal> x3166 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3164)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3165.value)))+(x3166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3167=IKcos(j4);
IkReal x3168=IKsin(j4);
IkReal x3169=((1.0)*cj0);
IkReal x3170=(cj5*r00);
IkReal x3171=(cj5*r10);
IkReal x3172=(cj5*r20);
IkReal x3173=((1.0)*x3167);
IkReal x3174=((1.0)*x3168);
IkReal x3175=(sj5*x3167);
IkReal x3176=(sj5*x3168);
evalcond[0]=(((r22*x3168))+((r21*x3175))+(((-1.0)*x3172*x3173)));
evalcond[1]=(((r21*x3176))+(((-1.0)*x3172*x3174))+(((-1.0)*r22*x3173)));
evalcond[2]=(sj0+((r01*x3176))+(((-1.0)*x3170*x3174))+(((-1.0)*r02*x3173)));
evalcond[3]=(((r02*x3168))+((r01*x3175))+(((-1.0)*x3170*x3173))+(((-1.0)*x3169)));
evalcond[4]=(((r11*x3175))+(((-1.0)*sj0))+((r12*x3168))+(((-1.0)*x3171*x3173)));
evalcond[5]=(((r11*x3176))+(((-1.0)*r12*x3173))+(((-1.0)*x3171*x3174))+(((-1.0)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3177 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3177.value)+(((1.5707963267949)*(x3178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKcos(j4);
IkReal x3180=IKsin(j4);
IkReal x3181=((1.0)*cj0);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj5*r10);
IkReal x3184=(cj5*r20);
IkReal x3185=((1.0)*x3179);
IkReal x3186=((1.0)*x3180);
IkReal x3187=(sj5*x3179);
IkReal x3188=(sj5*x3180);
evalcond[0]=(((r22*x3180))+(((-1.0)*x3184*x3185))+((r21*x3187)));
evalcond[1]=((((-1.0)*x3184*x3186))+(((-1.0)*r22*x3185))+((r21*x3188)));
evalcond[2]=(sj0+(((-1.0)*r02*x3185))+((r01*x3188))+(((-1.0)*x3182*x3186)));
evalcond[3]=(((r01*x3187))+(((-1.0)*x3182*x3185))+(((-1.0)*x3181))+((r02*x3180)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3183*x3185))+((r12*x3180))+((r11*x3187)));
evalcond[5]=((((-1.0)*x3183*x3186))+((r11*x3188))+(((-1.0)*r12*x3185))+(((-1.0)*x3181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3189=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3189.value)))+(x3190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=((1.0)*cj0);
IkReal x3194=(cj5*r00);
IkReal x3195=(cj5*r10);
IkReal x3196=(cj5*r20);
IkReal x3197=((1.0)*x3191);
IkReal x3198=((1.0)*x3192);
IkReal x3199=(sj5*x3191);
IkReal x3200=(sj5*x3192);
evalcond[0]=((((-1.0)*x3196*x3197))+((r21*x3199))+((r22*x3192)));
evalcond[1]=((((-1.0)*x3196*x3198))+(((-1.0)*r22*x3197))+((r21*x3200)));
evalcond[2]=(sj0+((r01*x3200))+(((-1.0)*r02*x3197))+(((-1.0)*x3194*x3198)));
evalcond[3]=(((r01*x3199))+(((-1.0)*x3193))+((r02*x3192))+(((-1.0)*x3194*x3197)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3199))+((r12*x3192))+(((-1.0)*x3195*x3197)));
evalcond[5]=(((r11*x3200))+(((-1.0)*r12*x3197))+(((-1.0)*x3193))+(((-1.0)*x3195*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.53920805436791)*px))+(((3.40934584042491)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.40934584042491)*px))+(((-1.53920805436791)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.53920805436791)*px))+(((3.40934584042491)*py))))+IKsqr(((((3.40934584042491)*px))+(((-1.53920805436791)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.53920805436791)*px))+(((3.40934584042491)*py))), ((((3.40934584042491)*px))+(((-1.53920805436791)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3201=IKsin(j0);
IkReal x3202=IKcos(j0);
evalcond[0]=((((0.11)*x3201))+(((-1.0)*px))+(((0.24365)*x3202)));
evalcond[1]=((((-0.11)*x3202))+(((-1.0)*py))+(((0.24365)*x3201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3203=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3203;
j4eval[1]=IKsign(x3203);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3204=((1.0)*cj5);
IkReal x3205=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3204)));
j4eval[0]=x3205;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3204)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3206=cj5*cj5;
IkReal x3207=((1.0)*r20);
IkReal x3208=(r01*r21);
IkReal x3209=(r21*sj5);
IkReal x3210=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3206*x3207))+((x3206*x3208))+(((-1.0)*x3208))+((cj5*r00*x3209)));
j4eval[0]=x3210;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3209))+(((-1.0)*cj0*cj5*x3207))))));
j4eval[2]=IKsign(x3210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3211=cj5*cj5;
IkReal x3212=((1.0)*r20);
IkReal x3213=(r01*r21);
IkReal x3214=(r21*sj5);
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3214))+(((-1.0)*r02*r22))+((x3211*x3213))+(((-1.0)*x3213))+(((-1.0)*r00*x3211*x3212)))),-1);
if(!x3215.valid){
continue;
}
CheckValue<IkReal> x3216 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3212))+((cj0*x3214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3215.value)))+(x3216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3217=IKcos(j4);
IkReal x3218=IKsin(j4);
IkReal x3219=(cj5*r00);
IkReal x3220=(cj5*r10);
IkReal x3221=(cj5*r20);
IkReal x3222=((1.0)*x3217);
IkReal x3223=((1.0)*x3218);
IkReal x3224=(sj5*x3217);
IkReal x3225=(sj5*x3218);
evalcond[0]=(((r22*x3218))+((r21*x3224))+(((-1.0)*x3221*x3222)));
evalcond[1]=(((r21*x3225))+(((-1.0)*r22*x3222))+(((-1.0)*x3221*x3223)));
evalcond[2]=(cj0+((r01*x3224))+(((-1.0)*x3219*x3222))+((r02*x3218)));
evalcond[3]=(sj0+((r11*x3224))+((r12*x3218))+(((-1.0)*x3220*x3222)));
evalcond[4]=((((-1.0)*r02*x3222))+sj0+((r01*x3225))+(((-1.0)*x3219*x3223)));
evalcond[5]=(((r11*x3225))+(((-1.0)*x3220*x3223))+(((-1.0)*r12*x3222))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3226=((1.0)*cj5);
CheckValue<IkReal> x3227 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3226)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3227.valid){
continue;
}
CheckValue<IkReal> x3228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3226)))),-1);
if(!x3228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3227.value)+(((1.5707963267949)*(x3228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3229=IKcos(j4);
IkReal x3230=IKsin(j4);
IkReal x3231=(cj5*r00);
IkReal x3232=(cj5*r10);
IkReal x3233=(cj5*r20);
IkReal x3234=((1.0)*x3229);
IkReal x3235=((1.0)*x3230);
IkReal x3236=(sj5*x3229);
IkReal x3237=(sj5*x3230);
evalcond[0]=(((r22*x3230))+(((-1.0)*x3233*x3234))+((r21*x3236)));
evalcond[1]=((((-1.0)*x3233*x3235))+(((-1.0)*r22*x3234))+((r21*x3237)));
evalcond[2]=(cj0+((r01*x3236))+(((-1.0)*x3231*x3234))+((r02*x3230)));
evalcond[3]=(sj0+((r11*x3236))+((r12*x3230))+(((-1.0)*x3232*x3234)));
evalcond[4]=((((-1.0)*r02*x3234))+sj0+((r01*x3237))+(((-1.0)*x3231*x3235)));
evalcond[5]=(((r11*x3237))+(((-1.0)*r12*x3234))+(((-1.0)*x3232*x3235))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3238 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3238.value)+(((1.5707963267949)*(x3239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3240=IKcos(j4);
IkReal x3241=IKsin(j4);
IkReal x3242=(cj5*r00);
IkReal x3243=(cj5*r10);
IkReal x3244=(cj5*r20);
IkReal x3245=((1.0)*x3240);
IkReal x3246=((1.0)*x3241);
IkReal x3247=(sj5*x3240);
IkReal x3248=(sj5*x3241);
evalcond[0]=(((r22*x3241))+((r21*x3247))+(((-1.0)*x3244*x3245)));
evalcond[1]=(((r21*x3248))+(((-1.0)*x3244*x3246))+(((-1.0)*r22*x3245)));
evalcond[2]=(((r01*x3247))+cj0+((r02*x3241))+(((-1.0)*x3242*x3245)));
evalcond[3]=((((-1.0)*x3243*x3245))+sj0+((r12*x3241))+((r11*x3247)));
evalcond[4]=(((r01*x3248))+sj0+(((-1.0)*r02*x3245))+(((-1.0)*x3242*x3246)));
evalcond[5]=((((-1.0)*x3243*x3246))+(((-1.0)*r12*x3245))+((r11*x3248))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3249=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3249;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3250=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3250;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3251=((1.0)*cj5);
IkReal x3252=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3251)));
j4eval[0]=x3252;
j4eval[1]=IKsign(x3252);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3251))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3253=((1.0)*cj5);
CheckValue<IkReal> x3254 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3253))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3254.valid){
continue;
}
CheckValue<IkReal> x3255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3253)))),-1);
if(!x3255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3254.value)+(((1.5707963267949)*(x3255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3256=IKcos(j4);
IkReal x3257=IKsin(j4);
IkReal x3258=((1.0)*cj0);
IkReal x3259=(cj5*r00);
IkReal x3260=(cj5*r10);
IkReal x3261=(cj5*r20);
IkReal x3262=((1.0)*x3256);
IkReal x3263=((1.0)*x3257);
IkReal x3264=(sj5*x3256);
IkReal x3265=(sj5*x3257);
evalcond[0]=((((-1.0)*x3261*x3262))+((r21*x3264))+((r22*x3257)));
evalcond[1]=((((-1.0)*x3261*x3263))+((r21*x3265))+(((-1.0)*r22*x3262)));
evalcond[2]=(sj0+((r01*x3265))+(((-1.0)*r02*x3262))+(((-1.0)*x3259*x3263)));
evalcond[3]=(((r01*x3264))+((r02*x3257))+(((-1.0)*x3259*x3262))+(((-1.0)*x3258)));
evalcond[4]=((((-1.0)*x3260*x3262))+((r12*x3257))+(((-1.0)*sj0))+((r11*x3264)));
evalcond[5]=((((-1.0)*x3260*x3263))+(((-1.0)*r12*x3262))+((r11*x3265))+(((-1.0)*x3258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3266 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3266.value)+(((1.5707963267949)*(x3267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3268=IKcos(j4);
IkReal x3269=IKsin(j4);
IkReal x3270=((1.0)*cj0);
IkReal x3271=(cj5*r00);
IkReal x3272=(cj5*r10);
IkReal x3273=(cj5*r20);
IkReal x3274=((1.0)*x3268);
IkReal x3275=((1.0)*x3269);
IkReal x3276=(sj5*x3268);
IkReal x3277=(sj5*x3269);
evalcond[0]=((((-1.0)*x3273*x3274))+((r21*x3276))+((r22*x3269)));
evalcond[1]=((((-1.0)*x3273*x3275))+((r21*x3277))+(((-1.0)*r22*x3274)));
evalcond[2]=(sj0+((r01*x3277))+(((-1.0)*x3271*x3275))+(((-1.0)*r02*x3274)));
evalcond[3]=(((r01*x3276))+(((-1.0)*x3270))+((r02*x3269))+(((-1.0)*x3271*x3274)));
evalcond[4]=((((-1.0)*x3272*x3274))+(((-1.0)*sj0))+((r11*x3276))+((r12*x3269)));
evalcond[5]=((((-1.0)*x3272*x3275))+(((-1.0)*r12*x3274))+(((-1.0)*x3270))+((r11*x3277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3278.valid){
continue;
}
CheckValue<IkReal> x3279 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3278.value)))+(x3279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3280=IKcos(j4);
IkReal x3281=IKsin(j4);
IkReal x3282=((1.0)*cj0);
IkReal x3283=(cj5*r00);
IkReal x3284=(cj5*r10);
IkReal x3285=(cj5*r20);
IkReal x3286=((1.0)*x3280);
IkReal x3287=((1.0)*x3281);
IkReal x3288=(sj5*x3280);
IkReal x3289=(sj5*x3281);
evalcond[0]=(((r22*x3281))+((r21*x3288))+(((-1.0)*x3285*x3286)));
evalcond[1]=((((-1.0)*r22*x3286))+((r21*x3289))+(((-1.0)*x3285*x3287)));
evalcond[2]=(sj0+(((-1.0)*x3283*x3287))+(((-1.0)*r02*x3286))+((r01*x3289)));
evalcond[3]=(((r02*x3281))+(((-1.0)*x3282))+(((-1.0)*x3283*x3286))+((r01*x3288)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3288))+(((-1.0)*x3284*x3286))+((r12*x3281)));
evalcond[5]=((((-1.0)*r12*x3286))+(((-1.0)*x3282))+((r11*x3289))+(((-1.0)*x3284*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.09090909090909)*px))+IKsqr(((-9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.09090909090909)*px), ((-9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3290=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3290;
j4eval[1]=IKsign(x3290);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3291=((1.0)*cj5);
IkReal x3292=((((-1.0)*r11*x3291))+(((-1.0)*r10*sj5)));
j4eval[0]=x3292;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3291))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3293=cj5*cj5;
IkReal x3294=((1.0)*r20);
IkReal x3295=(r01*r21);
IkReal x3296=(r21*sj5);
IkReal x3297=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3293*x3295))+(((-1.0)*r00*x3293*x3294))+((cj5*r00*x3296))+(((-1.0)*x3295)));
j4eval[0]=x3297;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3294))+((cj0*x3296)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3298=cj5*cj5;
IkReal x3299=((1.0)*r20);
IkReal x3300=(r01*r21);
IkReal x3301=(r21*sj5);
CheckValue<IkReal> x3302=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3301))+(((-1.0)*r02*r22))+((x3298*x3300))+(((-1.0)*x3300))+(((-1.0)*r00*x3298*x3299)))),-1);
if(!x3302.valid){
continue;
}
CheckValue<IkReal> x3303 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3301))+(((-1.0)*cj0*cj5*x3299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3302.value)))+(x3303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3304=IKcos(j4);
IkReal x3305=IKsin(j4);
IkReal x3306=(cj5*r00);
IkReal x3307=(cj5*r10);
IkReal x3308=(cj5*r20);
IkReal x3309=((1.0)*x3304);
IkReal x3310=((1.0)*x3305);
IkReal x3311=(sj5*x3304);
IkReal x3312=(sj5*x3305);
evalcond[0]=(((r21*x3311))+((r22*x3305))+(((-1.0)*x3308*x3309)));
evalcond[1]=(((r21*x3312))+(((-1.0)*r22*x3309))+(((-1.0)*x3308*x3310)));
evalcond[2]=(cj0+((r02*x3305))+(((-1.0)*x3306*x3309))+((r01*x3311)));
evalcond[3]=(sj0+((r11*x3311))+((r12*x3305))+(((-1.0)*x3307*x3309)));
evalcond[4]=(sj0+(((-1.0)*x3306*x3310))+(((-1.0)*r02*x3309))+((r01*x3312)));
evalcond[5]=(((r11*x3312))+(((-1.0)*r12*x3309))+(((-1.0)*x3307*x3310))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3313=((1.0)*cj5);
CheckValue<IkReal> x3314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3313)))),-1);
if(!x3314.valid){
continue;
}
CheckValue<IkReal> x3315 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3313)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3314.value)))+(x3315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3316=IKcos(j4);
IkReal x3317=IKsin(j4);
IkReal x3318=(cj5*r00);
IkReal x3319=(cj5*r10);
IkReal x3320=(cj5*r20);
IkReal x3321=((1.0)*x3316);
IkReal x3322=((1.0)*x3317);
IkReal x3323=(sj5*x3316);
IkReal x3324=(sj5*x3317);
evalcond[0]=(((r22*x3317))+(((-1.0)*x3320*x3321))+((r21*x3323)));
evalcond[1]=((((-1.0)*x3320*x3322))+((r21*x3324))+(((-1.0)*r22*x3321)));
evalcond[2]=(cj0+((r01*x3323))+((r02*x3317))+(((-1.0)*x3318*x3321)));
evalcond[3]=(sj0+((r11*x3323))+(((-1.0)*x3319*x3321))+((r12*x3317)));
evalcond[4]=(sj0+(((-1.0)*r02*x3321))+((r01*x3324))+(((-1.0)*x3318*x3322)));
evalcond[5]=(((r11*x3324))+(((-1.0)*x3319*x3322))+(((-1.0)*r12*x3321))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
CheckValue<IkReal> x3326=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3325.value)+(((1.5707963267949)*(x3326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3327=IKcos(j4);
IkReal x3328=IKsin(j4);
IkReal x3329=(cj5*r00);
IkReal x3330=(cj5*r10);
IkReal x3331=(cj5*r20);
IkReal x3332=((1.0)*x3327);
IkReal x3333=((1.0)*x3328);
IkReal x3334=(sj5*x3327);
IkReal x3335=(sj5*x3328);
evalcond[0]=(((r22*x3328))+((r21*x3334))+(((-1.0)*x3331*x3332)));
evalcond[1]=(((r21*x3335))+(((-1.0)*x3331*x3333))+(((-1.0)*r22*x3332)));
evalcond[2]=(cj0+((r01*x3334))+((r02*x3328))+(((-1.0)*x3329*x3332)));
evalcond[3]=(((r12*x3328))+sj0+(((-1.0)*x3330*x3332))+((r11*x3334)));
evalcond[4]=(sj0+(((-1.0)*r02*x3332))+((r01*x3335))+(((-1.0)*x3329*x3333)));
evalcond[5]=((((-1.0)*x3330*x3333))+((r11*x3335))+(((-1.0)*cj0))+(((-1.0)*r12*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3336=(cj1*cj2);
IkReal x3337=(sj1*sj2);
IkReal x3338=(r00*sj5);
IkReal x3339=((100.0)*px);
IkReal x3340=(cj5*r01);
IkReal x3341=((24.365)*cj1);
CheckValue<IkReal> x3342=IKPowWithIntegerCheck(((((-11.0)*x3337))+(((11.0)*x3336))),-1);
if(!x3342.valid){
continue;
}
CheckValue<IkReal> x3343=IKPowWithIntegerCheck((x3336+(((-1.0)*x3337))),-1);
if(!x3343.valid){
continue;
}
if( IKabs(((x3342.value)*(((((-29.86)*x3337*x3340))+((x3340*x3341))+(((29.86)*x3336*x3340))+((x3338*x3341))+(((29.86)*x3336*x3338))+(((-1.0)*x3337*x3339))+((x3336*x3339))+(((-29.86)*x3337*x3338)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3343.value)*((x3340+x3338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3342.value)*(((((-29.86)*x3337*x3340))+((x3340*x3341))+(((29.86)*x3336*x3340))+((x3338*x3341))+(((29.86)*x3336*x3338))+(((-1.0)*x3337*x3339))+((x3336*x3339))+(((-29.86)*x3337*x3338))))))+IKsqr(((x3343.value)*((x3340+x3338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3342.value)*(((((-29.86)*x3337*x3340))+((x3340*x3341))+(((29.86)*x3336*x3340))+((x3338*x3341))+(((29.86)*x3336*x3338))+(((-1.0)*x3337*x3339))+((x3336*x3339))+(((-29.86)*x3337*x3338))))), ((x3343.value)*((x3340+x3338))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3344=IKcos(j0);
IkReal x3345=IKsin(j0);
IkReal x3346=(sj1*sj2);
IkReal x3347=(cj5*r11);
IkReal x3348=((1.0)*sj5);
IkReal x3349=(cj5*r01);
IkReal x3350=((0.24365)*cj1);
IkReal x3351=((0.08535)*sj5);
IkReal x3352=(cj1*cj2*x3345);
IkReal x3353=(cj1*cj2*x3344);
evalcond[0]=((((-1.0)*x3344*x3346))+(((-1.0)*x3349))+x3353+(((-1.0)*r00*x3348)));
evalcond[1]=((((-1.0)*r10*x3348))+(((-1.0)*x3347))+x3352+(((-1.0)*x3345*x3346)));
evalcond[2]=((((0.21325)*x3344*x3346))+(((-0.08535)*x3349))+(((-1.0)*x3344*x3350))+(((0.11)*x3345))+(((-0.21325)*x3353))+(((-1.0)*px))+(((-1.0)*r00*x3351)));
evalcond[3]=((((-0.08535)*x3347))+(((-0.11)*x3344))+(((-0.21325)*x3352))+(((-1.0)*r10*x3351))+(((-1.0)*py))+(((-1.0)*x3345*x3350))+(((0.21325)*x3345*x3346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3354=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3354;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3355=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3355;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3356=((1.0)*cj5);
IkReal x3357=((((-1.0)*r21*x3356))+(((-1.0)*r20*sj5)));
j4eval[0]=x3357;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3356))+(((-1.0)*r10*sj0*x3356))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x3357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3358=((-1.0)*r20);
IkReal x3360 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3360)==0){
continue;
}
IkReal x3359=pow(x3360,-0.5);
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3358),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3361.value));
IkReal gconst97=(r21*x3359);
IkReal gconst98=(x3358*x3359);
CheckValue<IkReal> x3362 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3362.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3362.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3363=((-1.0)*r20);
IkReal x3364=x3359;
CheckValue<IkReal> x3366 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3363),IKFAST_ATAN2_MAGTHRESH);
if(!x3366.valid){
continue;
}
IkReal x3365=((-1.0)*(x3366.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3365;
IkReal gconst96=x3365;
IkReal gconst97=(r21*x3364);
IkReal gconst98=(x3363*x3364);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3367=((-1.0)*r20);
IkReal x3368=x3359;
CheckValue<IkReal> x3370 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3367),IKFAST_ATAN2_MAGTHRESH);
if(!x3370.valid){
continue;
}
IkReal x3369=((-1.0)*(x3370.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3369;
IkReal gconst96=x3369;
IkReal gconst97=(r21*x3368);
IkReal gconst98=(x3367*x3368);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3371=((-1.0)*r20);
IkReal x3372=x3359;
CheckValue<IkReal> x3374 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3371),IKFAST_ATAN2_MAGTHRESH);
if(!x3374.valid){
continue;
}
IkReal x3373=((-1.0)*(x3374.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3373;
IkReal gconst96=x3373;
IkReal gconst97=(r21*x3372);
IkReal gconst98=(x3371*x3372);
IkReal x3375=((1.0)*(r22*r22));
CheckValue<IkReal> x3379=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3375))),-1);
if(!x3379.valid){
continue;
}
IkReal x3376=x3379.value;
IkReal x3377=((1.0)*x3376);
IkReal x3378=((((-1.0)*x3377*(r20*r20*r20*r20)))+(((-1.0)*x3375))+(((-2.0)*x3376*(r20*r20)*(r21*r21)))+(((-1.0)*x3377*(r21*r21*r21*r21))));
j4eval[0]=x3378;
j4eval[1]=IKsign(x3378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3380=(cj1*cj2);
IkReal x3381=(gconst98*r20);
IkReal x3382=(sj1*sj2);
IkReal x3383=(gconst97*r21);
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3381*x3381)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3383*x3383)))+(((2.0)*x3381*x3383)))),-1);
if(!x3384.valid){
continue;
}
CheckValue<IkReal> x3385 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3380))+((r22*x3382)))),IkReal((((x3382*x3383))+((x3380*x3381))+(((-1.0)*x3380*x3383))+(((-1.0)*x3381*x3382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3384.value)))+(x3385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3386=IKsin(j4);
IkReal x3387=IKcos(j4);
IkReal x3388=(gconst98*r10);
IkReal x3389=(gconst97*r21);
IkReal x3390=(cj2*sj1);
IkReal x3391=(gconst98*r20);
IkReal x3392=(gconst98*r00);
IkReal x3393=(cj1*sj2);
IkReal x3394=((1.0)*x3387);
IkReal x3395=((1.0)*x3386);
IkReal x3396=(gconst97*x3386);
IkReal x3397=(gconst97*x3387);
evalcond[0]=((((-1.0)*r22*x3394))+(((-1.0)*x3391*x3395))+((x3386*x3389)));
evalcond[1]=(sj0+(((-1.0)*x3392*x3395))+((r01*x3396))+(((-1.0)*r02*x3394)));
evalcond[2]=(((r11*x3396))+(((-1.0)*r12*x3394))+(((-1.0)*x3388*x3395))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3386))+((x3387*x3389))+(((-1.0)*x3391*x3394)));
evalcond[4]=((((-1.0)*x3392*x3394))+((r01*x3397))+((cj0*x3393))+((cj0*x3390))+((r02*x3386)));
evalcond[5]=(((sj0*x3393))+((sj0*x3390))+((r11*x3397))+((r12*x3386))+(((-1.0)*x3388*x3394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3398.value)+(((1.5707963267949)*(x3399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3400=IKsin(j4);
IkReal x3401=IKcos(j4);
IkReal x3402=(gconst98*r10);
IkReal x3403=(gconst97*r21);
IkReal x3404=(cj2*sj1);
IkReal x3405=(gconst98*r20);
IkReal x3406=(gconst98*r00);
IkReal x3407=(cj1*sj2);
IkReal x3408=((1.0)*x3401);
IkReal x3409=((1.0)*x3400);
IkReal x3410=(gconst97*x3400);
IkReal x3411=(gconst97*x3401);
evalcond[0]=((((-1.0)*x3405*x3409))+((x3400*x3403))+(((-1.0)*r22*x3408)));
evalcond[1]=(sj0+((r01*x3410))+(((-1.0)*r02*x3408))+(((-1.0)*x3406*x3409)));
evalcond[2]=((((-1.0)*x3402*x3409))+(((-1.0)*r12*x3408))+((r11*x3410))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3400))+(((-1.0)*x3405*x3408))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3401*x3403)));
evalcond[4]=(((r02*x3400))+((r01*x3411))+((cj0*x3407))+((cj0*x3404))+(((-1.0)*x3406*x3408)));
evalcond[5]=((((-1.0)*x3402*x3408))+((sj0*x3407))+((sj0*x3404))+((r11*x3411))+((r12*x3400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3412.valid){
continue;
}
CheckValue<IkReal> x3413=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3412.value)+(((1.5707963267949)*(x3413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3414=IKsin(j4);
IkReal x3415=IKcos(j4);
IkReal x3416=(gconst98*r10);
IkReal x3417=(gconst97*r21);
IkReal x3418=(cj2*sj1);
IkReal x3419=(gconst98*r20);
IkReal x3420=(gconst98*r00);
IkReal x3421=(cj1*sj2);
IkReal x3422=((1.0)*x3415);
IkReal x3423=((1.0)*x3414);
IkReal x3424=(gconst97*x3414);
IkReal x3425=(gconst97*x3415);
evalcond[0]=(((x3414*x3417))+(((-1.0)*x3419*x3423))+(((-1.0)*r22*x3422)));
evalcond[1]=(sj0+(((-1.0)*x3420*x3423))+(((-1.0)*r02*x3422))+((r01*x3424)));
evalcond[2]=((((-1.0)*r12*x3422))+(((-1.0)*x3416*x3423))+(((-1.0)*cj0))+((r11*x3424)));
evalcond[3]=(((r22*x3414))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3419*x3422))+((x3415*x3417)));
evalcond[4]=((((-1.0)*x3420*x3422))+((r02*x3414))+((cj0*x3418))+((cj0*x3421))+((r01*x3425)));
evalcond[5]=(((sj0*x3418))+((r12*x3414))+(((-1.0)*x3416*x3422))+((sj0*x3421))+((r11*x3425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3426=((-1.0)*r21);
IkReal x3428 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3428)==0){
continue;
}
IkReal x3427=pow(x3428,-0.5);
CheckValue<IkReal> x3429 = IKatan2WithCheck(IkReal(x3426),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3429.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3429.value))));
IkReal gconst100=(x3426*x3427);
IkReal gconst101=((1.0)*r20*x3427);
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3430.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3431=((-1.0)*r21);
CheckValue<IkReal> x3434 = IKatan2WithCheck(IkReal(x3431),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3434.valid){
continue;
}
IkReal x3432=((1.0)*(x3434.value));
IkReal x3433=x3427;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3432)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3432)));
IkReal gconst100=(x3431*x3433);
IkReal gconst101=((1.0)*r20*x3433);
IkReal x3435=r22*r22;
IkReal x3436=((1.0)*x3435);
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(((-1.0)+x3435),-1);
if(!x3440.valid){
continue;
}
IkReal x3437=x3440.value;
if((((1.0)+(((-1.0)*x3436)))) < -0.00001)
continue;
IkReal x3438=IKsqrt(((1.0)+(((-1.0)*x3436))));
IkReal x3439=(sj0*x3437*x3438);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3436*x3439))+x3439))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3441=((-1.0)*r21);
CheckValue<IkReal> x3444 = IKatan2WithCheck(IkReal(x3441),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3444.valid){
continue;
}
IkReal x3442=((1.0)*(x3444.value));
IkReal x3443=x3427;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3442)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3442)));
IkReal gconst100=(x3441*x3443);
IkReal gconst101=((1.0)*r20*x3443);
IkReal x3445=r22*r22;
IkReal x3446=((1.0)*x3445);
CheckValue<IkReal> x3450=IKPowWithIntegerCheck(((-1.0)+x3445),-1);
if(!x3450.valid){
continue;
}
IkReal x3447=x3450.value;
if((((1.0)+(((-1.0)*x3446)))) < -0.00001)
continue;
IkReal x3448=IKsqrt(((1.0)+(((-1.0)*x3446))));
IkReal x3449=(cj0*x3447*x3448);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3449+(((-1.0)*x3446*x3449))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3451=((-1.0)*r21);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(x3451),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
IkReal x3452=((1.0)*(x3454.value));
IkReal x3453=x3427;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3452)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3452)));
IkReal gconst100=(x3451*x3453);
IkReal gconst101=((1.0)*r20*x3453);
IkReal x3455=r22*r22;
IkReal x3456=(cj0*r02);
IkReal x3457=(r12*sj0);
CheckValue<IkReal> x3461=IKPowWithIntegerCheck(((-1.0)+x3455),-1);
if(!x3461.valid){
continue;
}
IkReal x3458=x3461.value;
if((((1.0)+(((-1.0)*x3455)))) < -0.00001)
continue;
IkReal x3459=IKsqrt(((1.0)+(((-1.0)*x3455))));
IkReal x3460=((1.0)*r22*x3458*x3459);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3456*x3460))+(((-1.0)*x3457*x3460)))))+(IKabs((x3456+x3457))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3462=((1.0)*gconst101);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3462)))),-1);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3462))+(((-1.0)*r10*sj0*x3462))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3463.value)))+(x3464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3465=IKsin(j4);
IkReal x3466=IKcos(j4);
IkReal x3467=(cj2*sj1);
IkReal x3468=(gconst101*r20);
IkReal x3469=(gconst101*r10);
IkReal x3470=(gconst101*r00);
IkReal x3471=(cj1*sj2);
IkReal x3472=((1.0)*x3466);
IkReal x3473=((1.0)*x3465);
IkReal x3474=(gconst100*x3465);
IkReal x3475=(gconst100*x3466);
evalcond[0]=((((-1.0)*r22*x3472))+((r21*x3474))+(((-1.0)*x3468*x3473)));
evalcond[1]=(sj0+(((-1.0)*r02*x3472))+((r01*x3474))+(((-1.0)*x3470*x3473)));
evalcond[2]=((((-1.0)*r12*x3472))+(((-1.0)*x3469*x3473))+((r11*x3474))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3475))+(((-1.0)*x3468*x3472))+((r22*x3465)));
evalcond[4]=(((cj0*x3467))+((cj0*x3471))+((r01*x3475))+(((-1.0)*x3470*x3472))+((r02*x3465)));
evalcond[5]=(((r12*x3465))+((sj0*x3471))+(((-1.0)*x3469*x3472))+((sj0*x3467))+((r11*x3475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3476.value)+(((1.5707963267949)*(x3477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3478=IKsin(j4);
IkReal x3479=IKcos(j4);
IkReal x3480=(cj2*sj1);
IkReal x3481=(gconst101*r20);
IkReal x3482=(gconst101*r10);
IkReal x3483=(gconst101*r00);
IkReal x3484=(cj1*sj2);
IkReal x3485=((1.0)*x3479);
IkReal x3486=((1.0)*x3478);
IkReal x3487=(gconst100*x3478);
IkReal x3488=(gconst100*x3479);
evalcond[0]=((((-1.0)*x3481*x3486))+(((-1.0)*r22*x3485))+((r21*x3487)));
evalcond[1]=((((-1.0)*x3483*x3486))+sj0+(((-1.0)*r02*x3485))+((r01*x3487)));
evalcond[2]=((((-1.0)*x3482*x3486))+(((-1.0)*r12*x3485))+((r11*x3487))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3481*x3485))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3488))+((r22*x3478)));
evalcond[4]=((((-1.0)*x3483*x3485))+((cj0*x3480))+((cj0*x3484))+((r01*x3488))+((r02*x3478)));
evalcond[5]=((((-1.0)*x3482*x3485))+((r12*x3478))+((sj0*x3484))+((sj0*x3480))+((r11*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3489=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3489.valid){
continue;
}
CheckValue<IkReal> x3490 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3489.value)))+(x3490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3491=IKsin(j4);
IkReal x3492=IKcos(j4);
IkReal x3493=(cj2*sj1);
IkReal x3494=(gconst101*r20);
IkReal x3495=(gconst101*r10);
IkReal x3496=(gconst101*r00);
IkReal x3497=(cj1*sj2);
IkReal x3498=((1.0)*x3492);
IkReal x3499=((1.0)*x3491);
IkReal x3500=(gconst100*x3491);
IkReal x3501=(gconst100*x3492);
evalcond[0]=((((-1.0)*x3494*x3499))+(((-1.0)*r22*x3498))+((r21*x3500)));
evalcond[1]=(((r01*x3500))+(((-1.0)*r02*x3498))+sj0+(((-1.0)*x3496*x3499)));
evalcond[2]=((((-1.0)*r12*x3498))+((r11*x3500))+(((-1.0)*x3495*x3499))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3494*x3498))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3491))+((r21*x3501)));
evalcond[4]=(((r01*x3501))+((cj0*x3493))+((cj0*x3497))+(((-1.0)*x3496*x3498))+((r02*x3491)));
evalcond[5]=(((r11*x3501))+(((-1.0)*x3495*x3498))+((sj0*x3497))+((sj0*x3493))+((r12*x3491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3503 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3503)==0){
continue;
}
IkReal x3502=pow(x3503,-0.5);
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3504.value));
IkReal gconst103=((-1.0)*r01*x3502);
IkReal gconst104=(r00*x3502);
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
IkReal x3506=((-1.0)*(x3508.value));
IkReal x3507=x3502;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3506;
IkReal gconst102=x3506;
IkReal gconst103=((-1.0)*r01*x3507);
IkReal gconst104=(r00*x3507);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3509=((1.0)*gconst104);
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3509)))),-1);
if(!x3510.valid){
continue;
}
CheckValue<IkReal> x3511 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3509))+(((-1.0)*r10*sj0*x3509))+((cj0*gconst103*r01))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3510.value)))+(x3511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3512=IKsin(j4);
IkReal x3513=IKcos(j4);
IkReal x3514=(gconst103*r11);
IkReal x3515=(cj2*sj1);
IkReal x3516=(gconst104*r10);
IkReal x3517=(gconst104*r20);
IkReal x3518=(gconst104*r00);
IkReal x3519=(cj1*sj2);
IkReal x3520=((1.0)*x3513);
IkReal x3521=(gconst103*x3513);
IkReal x3522=(gconst103*x3512);
IkReal x3523=((1.0)*x3512);
evalcond[0]=(((r21*x3522))+(((-1.0)*x3517*x3523))+(((-1.0)*r22*x3520)));
evalcond[1]=((((-1.0)*r02*x3520))+sj0+((r01*x3522))+(((-1.0)*x3518*x3523)));
evalcond[2]=((((-1.0)*r12*x3520))+((x3512*x3514))+(((-1.0)*cj0))+(((-1.0)*x3516*x3523)));
evalcond[3]=(((r21*x3521))+(((-1.0)*x3517*x3520))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3512)));
evalcond[4]=(((r01*x3521))+((cj0*x3515))+((cj0*x3519))+((r02*x3512))+(((-1.0)*x3518*x3520)));
evalcond[5]=(((r12*x3512))+((sj0*x3519))+((sj0*x3515))+((x3513*x3514))+(((-1.0)*x3516*x3520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3524 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3524.valid){
continue;
}
CheckValue<IkReal> x3525=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3524.value)+(((1.5707963267949)*(x3525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3526=IKsin(j4);
IkReal x3527=IKcos(j4);
IkReal x3528=(gconst103*r11);
IkReal x3529=(cj2*sj1);
IkReal x3530=(gconst104*r10);
IkReal x3531=(gconst104*r20);
IkReal x3532=(gconst104*r00);
IkReal x3533=(cj1*sj2);
IkReal x3534=((1.0)*x3527);
IkReal x3535=(gconst103*x3527);
IkReal x3536=(gconst103*x3526);
IkReal x3537=((1.0)*x3526);
evalcond[0]=(((r21*x3536))+(((-1.0)*x3531*x3537))+(((-1.0)*r22*x3534)));
evalcond[1]=(sj0+(((-1.0)*r02*x3534))+((r01*x3536))+(((-1.0)*x3532*x3537)));
evalcond[2]=((((-1.0)*r12*x3534))+((x3526*x3528))+(((-1.0)*x3530*x3537))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3535))+(((-1.0)*x3531*x3534))+((r22*x3526)));
evalcond[4]=(((cj0*x3529))+((r02*x3526))+((r01*x3535))+((cj0*x3533))+(((-1.0)*x3532*x3534)));
evalcond[5]=(((sj0*x3533))+((x3527*x3528))+((r12*x3526))+(((-1.0)*x3530*x3534))+((sj0*x3529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3539 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3539)==0){
continue;
}
IkReal x3538=pow(x3539,-0.5);
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3540.value))));
IkReal gconst106=((1.0)*r01*x3538);
IkReal gconst107=((-1.0)*r00*x3538);
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3541.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3544 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3544.valid){
continue;
}
IkReal x3542=((1.0)*(x3544.value));
IkReal x3543=x3538;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3542)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3542)));
IkReal gconst106=((1.0)*r01*x3543);
IkReal gconst107=((-1.0)*r00*x3543);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
IkReal x3545=((1.0)*(x3547.value));
IkReal x3546=x3538;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3545)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3545)));
IkReal gconst106=((1.0)*r01*x3546);
IkReal gconst107=((-1.0)*r00*x3546);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3550 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3550.valid){
continue;
}
IkReal x3548=((1.0)*(x3550.value));
IkReal x3549=x3538;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3548)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3548)));
IkReal gconst106=((1.0)*r01*x3549);
IkReal gconst107=((-1.0)*r00*x3549);
IkReal x3551=r02*r02;
IkReal x3552=(r12*sj0);
IkReal x3553=x3538;
IkReal x3554=(cj0*x3553);
j4eval[0]=((IKabs(((((-1.0)*x3554))+((r02*x3552*x3553))+((x3551*x3554)))))+(IKabs((x3552+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3555=((1.0)*gconst107);
CheckValue<IkReal> x3556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3555))+(((-1.0)*gconst106*r20)))),-1);
if(!x3556.valid){
continue;
}
CheckValue<IkReal> x3557 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3555))+(((-1.0)*r10*sj0*x3555))+((cj0*gconst106*r01))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3556.value)))+(x3557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3558=IKsin(j4);
IkReal x3559=IKcos(j4);
IkReal x3560=(gconst107*r10);
IkReal x3561=(gconst107*r00);
IkReal x3562=(gconst107*r20);
IkReal x3563=(cj2*sj1);
IkReal x3564=(cj1*sj2);
IkReal x3565=((1.0)*x3559);
IkReal x3566=(gconst106*x3559);
IkReal x3567=(gconst106*x3558);
IkReal x3568=((1.0)*x3558);
evalcond[0]=(((r21*x3567))+(((-1.0)*r22*x3565))+(((-1.0)*x3562*x3568)));
evalcond[1]=((((-1.0)*r02*x3565))+sj0+(((-1.0)*x3561*x3568))+((r01*x3567)));
evalcond[2]=((((-1.0)*x3560*x3568))+(((-1.0)*r12*x3565))+((r11*x3567))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3562*x3565))+((r22*x3558)));
evalcond[4]=((((-1.0)*x3561*x3565))+((r01*x3566))+((cj0*x3563))+((cj0*x3564))+((r02*x3558)));
evalcond[5]=(((sj0*x3564))+((sj0*x3563))+(((-1.0)*x3560*x3565))+((r12*x3558))+((r11*x3566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
CheckValue<IkReal> x3570=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3569.value)+(((1.5707963267949)*(x3570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3571=IKsin(j4);
IkReal x3572=IKcos(j4);
IkReal x3573=(gconst107*r10);
IkReal x3574=(gconst107*r00);
IkReal x3575=(gconst107*r20);
IkReal x3576=(cj2*sj1);
IkReal x3577=(cj1*sj2);
IkReal x3578=((1.0)*x3572);
IkReal x3579=(gconst106*x3572);
IkReal x3580=(gconst106*x3571);
IkReal x3581=((1.0)*x3571);
evalcond[0]=((((-1.0)*x3575*x3581))+(((-1.0)*r22*x3578))+((r21*x3580)));
evalcond[1]=((((-1.0)*x3574*x3581))+sj0+((r01*x3580))+(((-1.0)*r02*x3578)));
evalcond[2]=((((-1.0)*x3573*x3581))+((r11*x3580))+(((-1.0)*r12*x3578))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3579))+(((-1.0)*x3575*x3578))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3571)));
evalcond[4]=(((r01*x3579))+((cj0*x3576))+((cj0*x3577))+(((-1.0)*x3574*x3578))+((r02*x3571)));
evalcond[5]=((((-1.0)*x3573*x3578))+((r12*x3571))+((sj0*x3576))+((sj0*x3577))+((r11*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3582.valid){
continue;
}
CheckValue<IkReal> x3583 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3582.value)))+(x3583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3584=IKsin(j4);
IkReal x3585=IKcos(j4);
IkReal x3586=(gconst107*r10);
IkReal x3587=(gconst107*r00);
IkReal x3588=(gconst107*r20);
IkReal x3589=(cj2*sj1);
IkReal x3590=(cj1*sj2);
IkReal x3591=((1.0)*x3585);
IkReal x3592=(gconst106*x3585);
IkReal x3593=(gconst106*x3584);
IkReal x3594=((1.0)*x3584);
evalcond[0]=(((r21*x3593))+(((-1.0)*r22*x3591))+(((-1.0)*x3588*x3594)));
evalcond[1]=((((-1.0)*x3587*x3594))+sj0+(((-1.0)*r02*x3591))+((r01*x3593)));
evalcond[2]=(((r11*x3593))+(((-1.0)*x3586*x3594))+(((-1.0)*r12*x3591))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3588*x3591))+((r22*x3584)));
evalcond[4]=((((-1.0)*x3587*x3591))+((r02*x3584))+((cj0*x3589))+((r01*x3592))+((cj0*x3590)));
evalcond[5]=(((sj0*x3590))+((r12*x3584))+((r11*x3592))+(((-1.0)*x3586*x3591))+((sj0*x3589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3595=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3595;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3596=((1.0)*cj5);
IkReal x3597=((((-1.0)*r21*x3596))+(((-1.0)*r20*sj5)));
j4eval[0]=x3597;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3596))+((r11*sj5))))));
j4eval[2]=IKsign(x3597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3598=cj5*cj5;
IkReal x3599=r01*r01;
IkReal x3600=(r01*sj5);
IkReal x3601=(cj5*r00);
IkReal x3602=(((x3598*x3599))+(((2.0)*x3600*x3601))+(((-1.0)*(r02*r02)))+(((-1.0)*x3599))+(((-1.0)*x3598*(r00*r00))));
j4eval[0]=x3602;
j4eval[1]=IKsign(x3602);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3601))+x3600))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3603=cj5*cj5;
IkReal x3604=r01*r01;
IkReal x3605=(r01*sj5);
IkReal x3606=(cj5*r00);
CheckValue<IkReal> x3607 = IKatan2WithCheck(IkReal(((((-1.0)*x3606))+x3605)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3607.valid){
continue;
}
CheckValue<IkReal> x3608=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x3604))+(((2.0)*x3605*x3606))+(((-1.0)*x3603*(r00*r00)))+((x3603*x3604)))),-1);
if(!x3608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3607.value)+(((1.5707963267949)*(x3608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3609=IKcos(j4);
IkReal x3610=IKsin(j4);
IkReal x3611=(cj5*r00);
IkReal x3612=(cj5*r10);
IkReal x3613=(r21*sj5);
IkReal x3614=(cj5*r20);
IkReal x3615=((1.0)*x3609);
IkReal x3616=((1.0)*x3610);
IkReal x3617=(sj5*x3610);
IkReal x3618=(sj5*x3609);
evalcond[0]=(((r02*x3610))+(((-1.0)*x3611*x3615))+((r01*x3618)));
evalcond[1]=(((x3610*x3613))+(((-1.0)*x3614*x3616))+(((-1.0)*r22*x3615)));
evalcond[2]=(((r11*x3617))+(((-1.0)*x3612*x3616))+(((-1.0)*r12*x3615)));
evalcond[3]=((1.0)+(((-1.0)*x3611*x3616))+(((-1.0)*r02*x3615))+((r01*x3617)));
evalcond[4]=(((cj2*sj1))+((r11*x3618))+(((-1.0)*x3612*x3615))+((cj1*sj2))+((r12*x3610)));
evalcond[5]=(((x3609*x3613))+((r22*x3610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3614*x3615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3619=((1.0)*cj5);
CheckValue<IkReal> x3620 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3619))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3620.valid){
continue;
}
CheckValue<IkReal> x3621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3619))+(((-1.0)*r20*sj5)))),-1);
if(!x3621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3620.value)+(((1.5707963267949)*(x3621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3622=IKcos(j4);
IkReal x3623=IKsin(j4);
IkReal x3624=(cj5*r00);
IkReal x3625=(cj5*r10);
IkReal x3626=(r21*sj5);
IkReal x3627=(cj5*r20);
IkReal x3628=((1.0)*x3622);
IkReal x3629=((1.0)*x3623);
IkReal x3630=(sj5*x3623);
IkReal x3631=(sj5*x3622);
evalcond[0]=((((-1.0)*x3624*x3628))+((r02*x3623))+((r01*x3631)));
evalcond[1]=((((-1.0)*x3627*x3629))+((x3623*x3626))+(((-1.0)*r22*x3628)));
evalcond[2]=(((r11*x3630))+(((-1.0)*x3625*x3629))+(((-1.0)*r12*x3628)));
evalcond[3]=((1.0)+(((-1.0)*x3624*x3629))+((r01*x3630))+(((-1.0)*r02*x3628)));
evalcond[4]=(((r11*x3631))+((cj2*sj1))+(((-1.0)*x3625*x3628))+((cj1*sj2))+((r12*x3623)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3627*x3628))+((x3622*x3626))+((r22*x3623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3632 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3632.valid){
continue;
}
CheckValue<IkReal> x3633=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3632.value)+(((1.5707963267949)*(x3633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3634=IKcos(j4);
IkReal x3635=IKsin(j4);
IkReal x3636=(cj5*r00);
IkReal x3637=(cj5*r10);
IkReal x3638=(r21*sj5);
IkReal x3639=(cj5*r20);
IkReal x3640=((1.0)*x3634);
IkReal x3641=((1.0)*x3635);
IkReal x3642=(sj5*x3635);
IkReal x3643=(sj5*x3634);
evalcond[0]=(((r02*x3635))+((r01*x3643))+(((-1.0)*x3636*x3640)));
evalcond[1]=((((-1.0)*x3639*x3641))+((x3635*x3638))+(((-1.0)*r22*x3640)));
evalcond[2]=(((r11*x3642))+(((-1.0)*r12*x3640))+(((-1.0)*x3637*x3641)));
evalcond[3]=((1.0)+((r01*x3642))+(((-1.0)*x3636*x3641))+(((-1.0)*r02*x3640)));
evalcond[4]=(((cj2*sj1))+((r12*x3635))+((r11*x3643))+((cj1*sj2))+(((-1.0)*x3637*x3640)));
evalcond[5]=(((r22*x3635))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3639*x3640))+((x3634*x3638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3644=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3644;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3645=((1.0)*cj5);
IkReal x3646=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3645)));
j4eval[0]=x3646;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3645))))));
j4eval[2]=IKsign(x3646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3647=cj5*cj5;
IkReal x3648=r01*r01;
IkReal x3649=(cj5*r00);
IkReal x3650=(r01*sj5);
IkReal x3651=(((x3647*(r00*r00)))+x3648+(((-2.0)*x3649*x3650))+(((-1.0)*x3647*x3648))+(r02*r02));
j4eval[0]=x3651;
j4eval[1]=IKsign(x3651);
j4eval[2]=((IKabs(r02))+(IKabs((x3650+(((-1.0)*x3649))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3652=cj5*cj5;
IkReal x3653=r01*r01;
IkReal x3654=(r01*sj5);
IkReal x3655=(cj5*r00);
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal((x3654+(((-1.0)*x3655)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(IKsign((((x3652*(r00*r00)))+(((-2.0)*x3654*x3655))+x3653+(((-1.0)*x3652*x3653))+(r02*r02))),-1);
if(!x3657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3656.value)+(((1.5707963267949)*(x3657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3658=IKcos(j4);
IkReal x3659=IKsin(j4);
IkReal x3660=(cj5*r00);
IkReal x3661=(cj5*r10);
IkReal x3662=(r21*sj5);
IkReal x3663=((1.0)*cj2);
IkReal x3664=(cj5*r20);
IkReal x3665=((1.0)*x3658);
IkReal x3666=((1.0)*x3659);
IkReal x3667=(sj5*x3659);
IkReal x3668=(sj5*x3658);
evalcond[0]=((((-1.0)*x3660*x3665))+((r01*x3668))+((r02*x3659)));
evalcond[1]=(((x3659*x3662))+(((-1.0)*x3664*x3666))+(((-1.0)*r22*x3665)));
evalcond[2]=((((-1.0)*x3661*x3666))+((r11*x3667))+(((-1.0)*r12*x3665)));
evalcond[3]=((-1.0)+(((-1.0)*x3660*x3666))+(((-1.0)*r02*x3665))+((r01*x3667)));
evalcond[4]=(((x3658*x3662))+((sj1*sj2))+(((-1.0)*x3664*x3665))+(((-1.0)*cj1*x3663))+((r22*x3659)));
evalcond[5]=(((r12*x3659))+(((-1.0)*x3661*x3665))+((r11*x3668))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3669=((1.0)*cj5);
CheckValue<IkReal> x3670 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3670.valid){
continue;
}
CheckValue<IkReal> x3671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3669)))),-1);
if(!x3671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3670.value)+(((1.5707963267949)*(x3671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3672=IKcos(j4);
IkReal x3673=IKsin(j4);
IkReal x3674=(cj5*r00);
IkReal x3675=(cj5*r10);
IkReal x3676=(r21*sj5);
IkReal x3677=((1.0)*cj2);
IkReal x3678=(cj5*r20);
IkReal x3679=((1.0)*x3672);
IkReal x3680=((1.0)*x3673);
IkReal x3681=(sj5*x3673);
IkReal x3682=(sj5*x3672);
evalcond[0]=(((r01*x3682))+((r02*x3673))+(((-1.0)*x3674*x3679)));
evalcond[1]=(((x3673*x3676))+(((-1.0)*r22*x3679))+(((-1.0)*x3678*x3680)));
evalcond[2]=((((-1.0)*r12*x3679))+(((-1.0)*x3675*x3680))+((r11*x3681)));
evalcond[3]=((-1.0)+((r01*x3681))+(((-1.0)*x3674*x3680))+(((-1.0)*r02*x3679)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3678*x3679))+((r22*x3673))+((x3672*x3676))+(((-1.0)*cj1*x3677)));
evalcond[5]=(((r12*x3673))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3677))+((r11*x3682))+(((-1.0)*x3675*x3679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3683.valid){
continue;
}
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3683.value)))+(x3684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3685=IKcos(j4);
IkReal x3686=IKsin(j4);
IkReal x3687=(cj5*r00);
IkReal x3688=(cj5*r10);
IkReal x3689=(r21*sj5);
IkReal x3690=((1.0)*cj2);
IkReal x3691=(cj5*r20);
IkReal x3692=((1.0)*x3685);
IkReal x3693=((1.0)*x3686);
IkReal x3694=(sj5*x3686);
IkReal x3695=(sj5*x3685);
evalcond[0]=(((r01*x3695))+(((-1.0)*x3687*x3692))+((r02*x3686)));
evalcond[1]=((((-1.0)*r22*x3692))+((x3686*x3689))+(((-1.0)*x3691*x3693)));
evalcond[2]=((((-1.0)*x3688*x3693))+(((-1.0)*r12*x3692))+((r11*x3694)));
evalcond[3]=((-1.0)+((r01*x3694))+(((-1.0)*x3687*x3693))+(((-1.0)*r02*x3692)));
evalcond[4]=((((-1.0)*cj1*x3690))+((sj1*sj2))+((x3685*x3689))+((r22*x3686))+(((-1.0)*x3691*x3692)));
evalcond[5]=((((-1.0)*x3688*x3692))+(((-1.0)*sj1*x3690))+(((-1.0)*cj1*sj2))+((r12*x3686))+((r11*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3697 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3697)==0){
continue;
}
IkReal x3696=pow(x3697,-0.5);
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3698.value));
IkReal gconst109=((-1.0)*r11*x3696);
IkReal gconst110=(r10*x3696);
CheckValue<IkReal> x3699 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3699.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
IkReal x3700=((-1.0)*(x3702.value));
IkReal x3701=x3696;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3700;
IkReal gconst108=x3700;
IkReal gconst109=((-1.0)*r11*x3701);
IkReal gconst110=(r10*x3701);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3703=((1.0)*gconst110);
CheckValue<IkReal> x3704 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x3703))+((gconst109*r11*sj0))+(((-1.0)*r10*sj0*x3703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3704.valid){
continue;
}
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3703))+(((-1.0)*gconst109*r20)))),-1);
if(!x3705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3704.value)+(((1.5707963267949)*(x3705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3706=IKsin(j4);
IkReal x3707=IKcos(j4);
IkReal x3708=(gconst109*r21);
IkReal x3709=(cj2*sj1);
IkReal x3710=(cj1*sj2);
IkReal x3711=((1.0)*x3707);
IkReal x3712=(gconst109*x3706);
IkReal x3713=(gconst109*x3707);
IkReal x3714=((1.0)*gconst110*x3706);
evalcond[0]=((((-1.0)*r20*x3714))+(((-1.0)*r22*x3711))+((x3706*x3708)));
evalcond[1]=(sj0+(((-1.0)*r00*x3714))+(((-1.0)*r02*x3711))+((r01*x3712)));
evalcond[2]=(((r11*x3712))+(((-1.0)*r10*x3714))+(((-1.0)*r12*x3711))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3707*x3708))+(((-1.0)*gconst110*r20*x3711))+((r22*x3706)));
evalcond[4]=((((-1.0)*gconst110*r00*x3711))+((r01*x3713))+((cj0*x3709))+((cj0*x3710))+((r02*x3706)));
evalcond[5]=(((sj0*x3709))+((r11*x3713))+((r12*x3706))+(((-1.0)*gconst110*r10*x3711))+((sj0*x3710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3715=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x3715.valid){
continue;
}
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3715.value)))+(x3716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3717=IKsin(j4);
IkReal x3718=IKcos(j4);
IkReal x3719=(gconst109*r21);
IkReal x3720=(cj2*sj1);
IkReal x3721=(cj1*sj2);
IkReal x3722=((1.0)*x3718);
IkReal x3723=(gconst109*x3717);
IkReal x3724=(gconst109*x3718);
IkReal x3725=((1.0)*gconst110*x3717);
evalcond[0]=((((-1.0)*r22*x3722))+((x3717*x3719))+(((-1.0)*r20*x3725)));
evalcond[1]=(sj0+((r01*x3723))+(((-1.0)*r00*x3725))+(((-1.0)*r02*x3722)));
evalcond[2]=((((-1.0)*r12*x3722))+((r11*x3723))+(((-1.0)*r10*x3725))+(((-1.0)*cj0)));
evalcond[3]=(((x3718*x3719))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3722))+((r22*x3717)));
evalcond[4]=((((-1.0)*gconst110*r00*x3722))+((r01*x3724))+((cj0*x3721))+((cj0*x3720))+((r02*x3717)));
evalcond[5]=((((-1.0)*gconst110*r10*x3722))+((r12*x3717))+((r11*x3724))+((sj0*x3721))+((sj0*x3720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3727 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3727)==0){
continue;
}
IkReal x3726=pow(x3727,-0.5);
CheckValue<IkReal> x3728 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3728.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3728.value))));
IkReal gconst112=((1.0)*r11*x3726);
IkReal gconst113=((-1.0)*r10*x3726);
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3729.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
IkReal x3730=((1.0)*(x3732.value));
IkReal x3731=x3726;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3730)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3730)));
IkReal gconst112=((1.0)*r11*x3731);
IkReal gconst113=((-1.0)*r10*x3731);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3735.valid){
continue;
}
IkReal x3733=((1.0)*(x3735.value));
IkReal x3734=x3726;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3733)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3733)));
IkReal gconst112=((1.0)*r11*x3734);
IkReal gconst113=((-1.0)*r10*x3734);
IkReal x3736=r12*r12;
IkReal x3737=(cj0*r02);
IkReal x3738=x3726;
IkReal x3739=(sj0*x3738);
j4eval[0]=((IKabs((x3737+((r12*sj0)))))+(IKabs((((x3736*x3739))+(((-1.0)*x3739))+((r12*x3737*x3738))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
IkReal x3740=((1.0)*(x3742.value));
IkReal x3741=x3726;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3740)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3740)));
IkReal gconst112=((1.0)*r11*x3741);
IkReal gconst113=((-1.0)*r10*x3741);
IkReal x3743=r12*r12;
IkReal x3744=(sj1*sj2);
IkReal x3745=((1.0)+(((-1.0)*x3743)));
IkReal x3746=((1.0)*cj1*cj2);
CheckValue<IkReal> x3753=IKPowWithIntegerCheck(x3745,-1);
if(!x3753.valid){
continue;
}
IkReal x3747=x3753.value;
CheckValue<IkReal> x3754=IKPowWithIntegerCheck(((-1.0)+x3743),-1);
if(!x3754.valid){
continue;
}
IkReal x3748=x3754.value;
IkReal x3749=((1.0)*x3747);
if((x3745) < -0.00001)
continue;
IkReal x3750=IKsqrt(x3745);
IkReal x3751=(r12*r22*x3748*x3750);
IkReal x3752=((((-2.0)*r10*r11*r20*r21*x3747))+(((-1.0)*x3749*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3749*(r10*r10)*(r20*r20))));
j4eval[0]=x3752;
j4eval[1]=((IKabs((((x3744*x3751))+(((-1.0)*x3746*x3751)))))+(IKabs(((((-1.0)*r22*x3746))+((r22*x3744))))));
j4eval[2]=IKsign(x3752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3755=(sj1*sj2);
IkReal x3756=(gconst112*r21);
IkReal x3757=(gconst113*r20);
IkReal x3758=(cj1*cj2);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal((((r22*x3755))+(((-1.0)*r22*x3758)))),IkReal((((x3755*x3756))+(((-1.0)*x3755*x3757))+((x3757*x3758))+(((-1.0)*x3756*x3758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(IKsign(((((2.0)*x3756*x3757))+(((-1.0)*(x3756*x3756)))+(((-1.0)*(x3757*x3757)))+(((-1.0)*(r22*r22))))),-1);
if(!x3760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3759.value)+(((1.5707963267949)*(x3760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3761=IKsin(j4);
IkReal x3762=IKcos(j4);
IkReal x3763=(cj2*sj1);
IkReal x3764=(gconst113*r20);
IkReal x3765=(gconst112*r21);
IkReal x3766=(gconst113*r00);
IkReal x3767=(gconst113*r10);
IkReal x3768=(cj1*sj2);
IkReal x3769=((1.0)*x3762);
IkReal x3770=((1.0)*x3761);
IkReal x3771=(gconst112*x3762);
IkReal x3772=(gconst112*x3761);
evalcond[0]=((((-1.0)*r22*x3769))+(((-1.0)*x3764*x3770))+((x3761*x3765)));
evalcond[1]=(sj0+(((-1.0)*r02*x3769))+(((-1.0)*x3766*x3770))+((r01*x3772)));
evalcond[2]=((((-1.0)*x3767*x3770))+((r11*x3772))+(((-1.0)*r12*x3769))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3761))+(((-1.0)*x3764*x3769))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3762*x3765)));
evalcond[4]=(((r02*x3761))+((cj0*x3763))+((cj0*x3768))+(((-1.0)*x3766*x3769))+((r01*x3771)));
evalcond[5]=((((-1.0)*x3767*x3769))+((sj0*x3768))+((sj0*x3763))+((r11*x3771))+((r12*x3761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3773=((1.0)*gconst113);
CheckValue<IkReal> x3774 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*cj0*r00*x3773))+(((-1.0)*r10*sj0*x3773))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3773))+(((-1.0)*gconst112*r20)))),-1);
if(!x3775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3774.value)+(((1.5707963267949)*(x3775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3776=IKsin(j4);
IkReal x3777=IKcos(j4);
IkReal x3778=(cj2*sj1);
IkReal x3779=(gconst113*r20);
IkReal x3780=(gconst112*r21);
IkReal x3781=(gconst113*r00);
IkReal x3782=(gconst113*r10);
IkReal x3783=(cj1*sj2);
IkReal x3784=((1.0)*x3777);
IkReal x3785=((1.0)*x3776);
IkReal x3786=(gconst112*x3777);
IkReal x3787=(gconst112*x3776);
evalcond[0]=((((-1.0)*x3779*x3785))+(((-1.0)*r22*x3784))+((x3776*x3780)));
evalcond[1]=(sj0+(((-1.0)*r02*x3784))+((r01*x3787))+(((-1.0)*x3781*x3785)));
evalcond[2]=((((-1.0)*x3782*x3785))+(((-1.0)*r12*x3784))+(((-1.0)*cj0))+((r11*x3787)));
evalcond[3]=(((r22*x3776))+(((-1.0)*x3779*x3784))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3777*x3780)));
evalcond[4]=(((r02*x3776))+((cj0*x3778))+((r01*x3786))+(((-1.0)*x3781*x3784))+((cj0*x3783)));
evalcond[5]=((((-1.0)*x3782*x3784))+((sj0*x3778))+((r12*x3776))+((sj0*x3783))+((r11*x3786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3788.valid){
continue;
}
CheckValue<IkReal> x3789 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3788.value)))+(x3789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3790=IKsin(j4);
IkReal x3791=IKcos(j4);
IkReal x3792=(cj2*sj1);
IkReal x3793=(gconst113*r20);
IkReal x3794=(gconst112*r21);
IkReal x3795=(gconst113*r00);
IkReal x3796=(gconst113*r10);
IkReal x3797=(cj1*sj2);
IkReal x3798=((1.0)*x3791);
IkReal x3799=((1.0)*x3790);
IkReal x3800=(gconst112*x3791);
IkReal x3801=(gconst112*x3790);
evalcond[0]=((((-1.0)*r22*x3798))+(((-1.0)*x3793*x3799))+((x3790*x3794)));
evalcond[1]=(((r01*x3801))+sj0+(((-1.0)*r02*x3798))+(((-1.0)*x3795*x3799)));
evalcond[2]=((((-1.0)*r12*x3798))+((r11*x3801))+(((-1.0)*x3796*x3799))+(((-1.0)*cj0)));
evalcond[3]=(((x3791*x3794))+((r22*x3790))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3793*x3798)));
evalcond[4]=(((r01*x3800))+((cj0*x3797))+((cj0*x3792))+((r02*x3790))+(((-1.0)*x3795*x3798)));
evalcond[5]=(((r11*x3800))+(((-1.0)*x3796*x3798))+((sj0*x3797))+((sj0*x3792))+((r12*x3790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3802=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3802;
j4eval[1]=IKsign(x3802);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3803=((1.0)*cj5);
IkReal x3804=((((-1.0)*r21*x3803))+(((-1.0)*r20*sj5)));
j4eval[0]=x3804;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3803))))));
j4eval[2]=IKsign(x3804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3805=cj5*cj5;
IkReal x3806=r11*r11;
IkReal x3807=(r11*sj5);
IkReal x3808=(cj5*r10);
IkReal x3809=((r12*r12)+(((-2.0)*x3807*x3808))+x3806+((x3805*(r10*r10)))+(((-1.0)*x3805*x3806)));
j4eval[0]=x3809;
j4eval[1]=IKsign(x3809);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3808))+x3807))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3810=cj5*cj5;
IkReal x3811=r11*r11;
IkReal x3812=(cj5*r10);
IkReal x3813=(r11*sj5);
CheckValue<IkReal> x3814=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3810*(r10*r10)))+x3811+(((-1.0)*x3810*x3811))+(((-2.0)*x3812*x3813)))),-1);
if(!x3814.valid){
continue;
}
CheckValue<IkReal> x3815 = IKatan2WithCheck(IkReal(((((-1.0)*x3812))+x3813)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3814.value)))+(x3815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3816=IKcos(j4);
IkReal x3817=IKsin(j4);
IkReal x3818=(cj5*r00);
IkReal x3819=(cj5*r10);
IkReal x3820=(r21*sj5);
IkReal x3821=(cj5*r20);
IkReal x3822=((1.0)*x3816);
IkReal x3823=((1.0)*x3817);
IkReal x3824=(sj5*x3817);
IkReal x3825=(sj5*x3816);
evalcond[0]=(((r12*x3817))+((r11*x3825))+(((-1.0)*x3819*x3822)));
evalcond[1]=((((-1.0)*r22*x3822))+(((-1.0)*x3821*x3823))+((x3817*x3820)));
evalcond[2]=((((-1.0)*r02*x3822))+((r01*x3824))+(((-1.0)*x3818*x3823)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3822))+((r11*x3824))+(((-1.0)*x3819*x3823)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x3817))+((r01*x3825))+(((-1.0)*x3818*x3822)));
evalcond[5]=((((-1.0)*x3821*x3822))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3817))+((x3816*x3820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3826=((1.0)*cj5);
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3826))+(((-1.0)*r20*sj5)))),-1);
if(!x3828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3827.value)+(((1.5707963267949)*(x3828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3829=IKcos(j4);
IkReal x3830=IKsin(j4);
IkReal x3831=(cj5*r00);
IkReal x3832=(cj5*r10);
IkReal x3833=(r21*sj5);
IkReal x3834=(cj5*r20);
IkReal x3835=((1.0)*x3829);
IkReal x3836=((1.0)*x3830);
IkReal x3837=(sj5*x3830);
IkReal x3838=(sj5*x3829);
evalcond[0]=((((-1.0)*x3832*x3835))+((r12*x3830))+((r11*x3838)));
evalcond[1]=((((-1.0)*r22*x3835))+(((-1.0)*x3834*x3836))+((x3830*x3833)));
evalcond[2]=((((-1.0)*x3831*x3836))+((r01*x3837))+(((-1.0)*r02*x3835)));
evalcond[3]=((-1.0)+(((-1.0)*x3832*x3836))+(((-1.0)*r12*x3835))+((r11*x3837)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3831*x3835))+((r02*x3830))+((cj1*sj2))+((r01*x3838)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3829*x3833))+(((-1.0)*x3834*x3835))+((r22*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3839.value)+(((1.5707963267949)*(x3840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3841=IKcos(j4);
IkReal x3842=IKsin(j4);
IkReal x3843=(cj5*r00);
IkReal x3844=(cj5*r10);
IkReal x3845=(r21*sj5);
IkReal x3846=(cj5*r20);
IkReal x3847=((1.0)*x3841);
IkReal x3848=((1.0)*x3842);
IkReal x3849=(sj5*x3842);
IkReal x3850=(sj5*x3841);
evalcond[0]=(((r12*x3842))+((r11*x3850))+(((-1.0)*x3844*x3847)));
evalcond[1]=(((x3842*x3845))+(((-1.0)*r22*x3847))+(((-1.0)*x3846*x3848)));
evalcond[2]=((((-1.0)*r02*x3847))+(((-1.0)*x3843*x3848))+((r01*x3849)));
evalcond[3]=((-1.0)+(((-1.0)*x3844*x3848))+(((-1.0)*r12*x3847))+((r11*x3849)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3843*x3847))+((cj1*sj2))+((r01*x3850))+((r02*x3842)));
evalcond[5]=(((x3841*x3845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3842))+(((-1.0)*x3846*x3847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3851=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3851;
j4eval[1]=IKsign(x3851);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3852=((1.0)*cj5);
IkReal x3853=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3852)));
j4eval[0]=x3853;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3852))+((r21*sj5))))));
j4eval[2]=IKsign(x3853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3854=(sj1*sj2);
IkReal x3855=(cj5*r10);
IkReal x3856=(r11*sj5);
IkReal x3857=(cj1*cj2);
IkReal x3858=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3858;
j4eval[1]=((IKabs((((x3854*x3856))+(((-1.0)*x3854*x3855))+((x3855*x3857))+(((-1.0)*x3856*x3857)))))+(IKabs(((((-1.0)*r12*x3854))+((r12*x3857))))));
j4eval[2]=IKsign(x3858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3859=(sj1*sj2);
IkReal x3860=(cj5*r10);
IkReal x3861=(r11*sj5);
IkReal x3862=(cj1*cj2);
CheckValue<IkReal> x3863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864 = IKatan2WithCheck(IkReal((((x3860*x3862))+((x3859*x3861))+(((-1.0)*x3859*x3860))+(((-1.0)*x3861*x3862)))),IkReal(((((-1.0)*r12*x3859))+((r12*x3862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3863.value)))+(x3864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKcos(j4);
IkReal x3866=IKsin(j4);
IkReal x3867=(cj5*r00);
IkReal x3868=(cj5*r10);
IkReal x3869=(r21*sj5);
IkReal x3870=((1.0)*cj2);
IkReal x3871=(cj5*r20);
IkReal x3872=((1.0)*x3865);
IkReal x3873=((1.0)*x3866);
IkReal x3874=(sj5*x3866);
IkReal x3875=(sj5*x3865);
evalcond[0]=((((-1.0)*x3868*x3872))+((r11*x3875))+((r12*x3866)));
evalcond[1]=(((x3866*x3869))+(((-1.0)*x3871*x3873))+(((-1.0)*r22*x3872)));
evalcond[2]=((((-1.0)*x3867*x3873))+((r01*x3874))+(((-1.0)*r02*x3872)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3872))+(((-1.0)*x3868*x3873))+((r11*x3874)));
evalcond[4]=(((x3865*x3869))+((sj1*sj2))+(((-1.0)*x3871*x3872))+(((-1.0)*cj1*x3870))+((r22*x3866)));
evalcond[5]=((((-1.0)*x3867*x3872))+((r02*x3866))+((r01*x3875))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3876=((1.0)*cj5);
CheckValue<IkReal> x3877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3876)))),-1);
if(!x3877.valid){
continue;
}
CheckValue<IkReal> x3878 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3877.value)))+(x3878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3879=IKcos(j4);
IkReal x3880=IKsin(j4);
IkReal x3881=(cj5*r00);
IkReal x3882=(cj5*r10);
IkReal x3883=(r21*sj5);
IkReal x3884=((1.0)*cj2);
IkReal x3885=(cj5*r20);
IkReal x3886=((1.0)*x3879);
IkReal x3887=((1.0)*x3880);
IkReal x3888=(sj5*x3880);
IkReal x3889=(sj5*x3879);
evalcond[0]=(((r12*x3880))+((r11*x3889))+(((-1.0)*x3882*x3886)));
evalcond[1]=(((x3880*x3883))+(((-1.0)*r22*x3886))+(((-1.0)*x3885*x3887)));
evalcond[2]=((((-1.0)*r02*x3886))+((r01*x3888))+(((-1.0)*x3881*x3887)));
evalcond[3]=((1.0)+((r11*x3888))+(((-1.0)*r12*x3886))+(((-1.0)*x3882*x3887)));
evalcond[4]=((((-1.0)*cj1*x3884))+((r22*x3880))+((sj1*sj2))+(((-1.0)*x3885*x3886))+((x3879*x3883)));
evalcond[5]=((((-1.0)*sj1*x3884))+(((-1.0)*cj1*sj2))+((r02*x3880))+((r01*x3889))+(((-1.0)*x3881*x3886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3890.valid){
continue;
}
CheckValue<IkReal> x3891 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3890.value)))+(x3891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3892=IKcos(j4);
IkReal x3893=IKsin(j4);
IkReal x3894=(cj5*r00);
IkReal x3895=(cj5*r10);
IkReal x3896=(r21*sj5);
IkReal x3897=((1.0)*cj2);
IkReal x3898=(cj5*r20);
IkReal x3899=((1.0)*x3892);
IkReal x3900=((1.0)*x3893);
IkReal x3901=(sj5*x3893);
IkReal x3902=(sj5*x3892);
evalcond[0]=((((-1.0)*x3895*x3899))+((r12*x3893))+((r11*x3902)));
evalcond[1]=((((-1.0)*r22*x3899))+((x3893*x3896))+(((-1.0)*x3898*x3900)));
evalcond[2]=(((r01*x3901))+(((-1.0)*x3894*x3900))+(((-1.0)*r02*x3899)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3899))+((r11*x3901))+(((-1.0)*x3895*x3900)));
evalcond[4]=((((-1.0)*x3898*x3899))+((sj1*sj2))+((x3892*x3896))+((r22*x3893))+(((-1.0)*cj1*x3897)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3902))+(((-1.0)*sj1*x3897))+(((-1.0)*x3894*x3899))+((r02*x3893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3903=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3903);
rxp0_2=(py*r00);
rxp1_0=(r21*x3903);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3904=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3904);
rxp0_2=(py*r00);
rxp1_0=(r21*x3904);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3905=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3905);
rxp0_2=(py*r00);
rxp1_0=(r21*x3905);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3908=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3908.valid){
continue;
}
IkReal x3906=x3908.value;
IkReal x3907=((1.0)*cj0*x3906);
cj4array[0]=((((-1.0)*cj2*sj1*x3907))+(((-1.0)*cj1*sj2*x3907)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3909=IKsin(j4);
IkReal x3910=IKcos(j4);
IkReal x3911=(r21*sj5);
IkReal x3912=((1.0)*x3910);
IkReal x3913=((1.0)*cj5*x3909);
evalcond[0]=(r12*x3909);
evalcond[1]=((((-1.0)*r12*x3912))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x3913))+((x3909*x3911)));
evalcond[3]=(((r01*sj5*x3909))+(((-1.0)*r00*x3913)));
evalcond[4]=(((x3910*x3911))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x3912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3915=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3915.valid){
continue;
}
IkReal x3914=x3915.value;
cj4array[0]=(((cj1*cj2*x3914))+(((-1.0)*sj1*sj2*x3914)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3916=IKsin(j4);
IkReal x3917=IKcos(j4);
IkReal x3918=(r01*sj5);
IkReal x3919=((1.0)*cj5*r00);
evalcond[0]=(r12*x3916);
evalcond[1]=((((-1.0)*r12*x3917))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x3916))+((r21*sj5*x3916)));
evalcond[3]=((((-1.0)*x3916*x3919))+((x3916*x3918)));
evalcond[4]=((((-1.0)*x3917*x3919))+((cj0*cj2*sj1))+((x3917*x3918))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3920=IKPowWithIntegerCheck(r12,-1);
if(!x3920.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3920.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3921=IKsin(j4);
IkReal x3922=IKcos(j4);
IkReal x3923=(sj5*x3922);
IkReal x3924=(sj5*x3921);
IkReal x3925=((1.0)*cj5*x3921);
IkReal x3926=((1.0)*cj5*x3922);
evalcond[0]=(r12*x3921);
evalcond[1]=(((r21*x3924))+(((-1.0)*r20*x3925)));
evalcond[2]=((((-1.0)*r00*x3925))+((r01*x3924)));
evalcond[3]=(((r21*x3923))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x3926)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r00*x3926))+((r01*x3923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3927=((1.0)*cj5);
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3927))+(((-1.0)*r20*sj5)))),-1);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x3927))+(((-1.0)*cj0*r00*x3927))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3928.value)))+(x3929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3930=IKsin(j4);
IkReal x3931=IKcos(j4);
IkReal x3932=(cj5*r00);
IkReal x3933=(cj5*r10);
IkReal x3934=(cj2*sj1);
IkReal x3935=(r21*sj5);
IkReal x3936=(cj5*r20);
IkReal x3937=(cj1*sj2);
IkReal x3938=((1.0)*x3931);
IkReal x3939=((1.0)*x3930);
IkReal x3940=(sj5*x3930);
IkReal x3941=(sj5*x3931);
evalcond[0]=((((-1.0)*x3936*x3939))+(((-1.0)*r22*x3938))+((x3930*x3935)));
evalcond[1]=(((r01*x3940))+sj0+(((-1.0)*x3932*x3939))+(((-1.0)*r02*x3938)));
evalcond[2]=((((-1.0)*x3933*x3939))+(((-1.0)*r12*x3938))+(((-1.0)*cj0))+((r11*x3940)));
evalcond[3]=((((-1.0)*x3936*x3938))+((r22*x3930))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3931*x3935)));
evalcond[4]=(((r01*x3941))+((cj0*x3937))+((cj0*x3934))+(((-1.0)*x3932*x3938))+((r02*x3930)));
evalcond[5]=((((-1.0)*x3933*x3938))+((sj0*x3937))+((sj0*x3934))+((r12*x3930))+((r11*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3942.valid){
continue;
}
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3942.value)))+(x3943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3944=IKsin(j4);
IkReal x3945=IKcos(j4);
IkReal x3946=(cj5*r00);
IkReal x3947=(cj5*r10);
IkReal x3948=(cj2*sj1);
IkReal x3949=(r21*sj5);
IkReal x3950=(cj5*r20);
IkReal x3951=(cj1*sj2);
IkReal x3952=((1.0)*x3945);
IkReal x3953=((1.0)*x3944);
IkReal x3954=(sj5*x3944);
IkReal x3955=(sj5*x3945);
evalcond[0]=((((-1.0)*r22*x3952))+(((-1.0)*x3950*x3953))+((x3944*x3949)));
evalcond[1]=(sj0+(((-1.0)*x3946*x3953))+((r01*x3954))+(((-1.0)*r02*x3952)));
evalcond[2]=((((-1.0)*r12*x3952))+((r11*x3954))+(((-1.0)*cj0))+(((-1.0)*x3947*x3953)));
evalcond[3]=(((r22*x3944))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3950*x3952))+((x3945*x3949)));
evalcond[4]=(((cj0*x3948))+(((-1.0)*x3946*x3952))+((r01*x3955))+((cj0*x3951))+((r02*x3944)));
evalcond[5]=(((sj0*x3948))+((sj0*x3951))+((r11*x3955))+((r12*x3944))+(((-1.0)*x3947*x3952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3956=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3956.valid){
continue;
}
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3956.value)))+(x3957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3958=IKsin(j4);
IkReal x3959=IKcos(j4);
IkReal x3960=(cj5*r00);
IkReal x3961=(cj5*r10);
IkReal x3962=(cj2*sj1);
IkReal x3963=(r21*sj5);
IkReal x3964=(cj5*r20);
IkReal x3965=(cj1*sj2);
IkReal x3966=((1.0)*x3959);
IkReal x3967=((1.0)*x3958);
IkReal x3968=(sj5*x3958);
IkReal x3969=(sj5*x3959);
evalcond[0]=((((-1.0)*r22*x3966))+((x3958*x3963))+(((-1.0)*x3964*x3967)));
evalcond[1]=(sj0+(((-1.0)*r02*x3966))+(((-1.0)*x3960*x3967))+((r01*x3968)));
evalcond[2]=(((r11*x3968))+(((-1.0)*x3961*x3967))+(((-1.0)*cj0))+(((-1.0)*r12*x3966)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3959*x3963))+((r22*x3958))+(((-1.0)*x3964*x3966)));
evalcond[4]=((((-1.0)*x3960*x3966))+((r02*x3958))+((r01*x3969))+((cj0*x3962))+((cj0*x3965)));
evalcond[5]=(((r11*x3969))+(((-1.0)*x3961*x3966))+((r12*x3958))+((sj0*x3962))+((sj0*x3965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3970=r21*r21;
IkReal x3971=cj5*cj5;
IkReal x3972=(sj1*sj2);
IkReal x3973=(r21*sj5);
IkReal x3974=(cj1*cj2);
IkReal x3975=(cj5*r20);
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3974))+((r22*x3972)))),IkReal(((((-1.0)*x3972*x3975))+((x3974*x3975))+(((-1.0)*x3973*x3974))+((x3972*x3973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(IKsign(((((2.0)*x3973*x3975))+((x3970*x3971))+(((-1.0)*(r22*r22)))+(((-1.0)*x3971*(r20*r20)))+(((-1.0)*x3970)))),-1);
if(!x3977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3976.value)+(((1.5707963267949)*(x3977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3978=IKsin(j4);
IkReal x3979=IKcos(j4);
IkReal x3980=(r21*sj5);
IkReal x3981=(cj5*r20);
IkReal x3982=((1.0)*x3979);
evalcond[0]=((((-1.0)*r22*x3982))+(((-1.0)*x3978*x3981))+((x3978*x3980)));
evalcond[1]=((((-1.0)*x3981*x3982))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3978))+((x3979*x3980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3983=(cj5*sj4);
IkReal x3984=(sj4*sj5);
if( IKabs((((r00*x3983))+(((-1.0)*r01*x3984))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3984))+(((-1.0)*r10*x3983))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3983))+(((-1.0)*r01*x3984))+((cj4*r02))))+IKsqr((((r11*x3984))+(((-1.0)*r10*x3983))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x3983))+(((-1.0)*r01*x3984))+((cj4*r02))), (((r11*x3984))+(((-1.0)*r10*x3983))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3985=IKcos(j0);
IkReal x3986=IKsin(j0);
IkReal x3987=((1.0)*sj1);
IkReal x3988=(r11*sj5);
IkReal x3989=((1.0)*cj5);
IkReal x3990=((0.21325)*sj1);
IkReal x3991=((1.0)*sj5);
IkReal x3992=((0.24365)*cj1);
IkReal x3993=((0.08535)*cj5);
IkReal x3994=((1.0)*cj4);
IkReal x3995=(r01*sj5);
IkReal x3996=((0.08535)*sj5);
IkReal x3997=(sj2*x3986);
IkReal x3998=(cj2*x3985);
IkReal x3999=(sj2*x3985);
IkReal x4000=(cj1*cj2*x3986);
evalcond[0]=((((-1.0)*r02*x3994))+(((-1.0)*r00*sj4*x3989))+x3986+((sj4*x3995)));
evalcond[1]=((((-1.0)*r10*sj4*x3989))+((sj4*x3988))+(((-1.0)*r12*x3994))+(((-1.0)*x3985)));
evalcond[2]=(((cj1*x3998))+(((-1.0)*r00*x3991))+(((-1.0)*x3987*x3999))+(((-1.0)*r01*x3989)));
evalcond[3]=((((-1.0)*r11*x3989))+(((-1.0)*r10*x3991))+x4000+(((-1.0)*x3987*x3997)));
evalcond[4]=(((cj4*x3995))+((r02*sj4))+((cj1*x3999))+((sj1*x3998))+(((-1.0)*cj4*r00*x3989)));
evalcond[5]=(((cj2*sj1*x3986))+((cj1*x3997))+(((-1.0)*cj4*r10*x3989))+((r12*sj4))+((cj4*x3988)));
evalcond[6]=((((0.11)*x3986))+((x3990*x3999))+(((-0.21325)*cj1*x3998))+(((-1.0)*x3985*x3992))+(((-1.0)*px))+(((-1.0)*r00*x3996))+(((-1.0)*r01*x3993)));
evalcond[7]=(((x3990*x3997))+(((-1.0)*r10*x3996))+(((-1.0)*py))+(((-1.0)*r11*x3993))+(((-1.0)*x3986*x3992))+(((-0.21325)*x4000))+(((-0.11)*x3985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4001=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4001.valid){
continue;
}
CheckValue<IkReal> x4002 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4002.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4001.value)))+(x4002.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4003=IKcos(j0);
IkReal x4004=IKsin(j0);
IkReal x4005=(sj1*sj2);
IkReal x4006=(cj5*r11);
IkReal x4007=((1.0)*sj5);
IkReal x4008=(cj5*r01);
IkReal x4009=((0.24365)*cj1);
IkReal x4010=((0.08535)*sj5);
IkReal x4011=(cj1*cj2*x4004);
IkReal x4012=(cj1*cj2*x4003);
evalcond[0]=((((-1.0)*r00*x4007))+(((-1.0)*x4008))+(((-1.0)*x4003*x4005))+x4012);
evalcond[1]=((((-1.0)*r10*x4007))+(((-1.0)*x4006))+(((-1.0)*x4004*x4005))+x4011);
evalcond[2]=((((0.11)*x4004))+(((-0.08535)*x4008))+(((-0.21325)*x4012))+(((-1.0)*px))+(((0.21325)*x4003*x4005))+(((-1.0)*r00*x4010))+(((-1.0)*x4003*x4009)));
evalcond[3]=((((-0.11)*x4003))+(((-0.08535)*x4006))+(((-0.21325)*x4011))+(((-1.0)*py))+(((0.21325)*x4004*x4005))+(((-1.0)*r10*x4010))+(((-1.0)*x4004*x4009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4013=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4013;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4013);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4014=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4014;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4015=((1.0)*cj5);
IkReal x4016=((((-1.0)*r21*x4015))+(((-1.0)*r20*sj5)));
j4eval[0]=x4016;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4015))+(((-1.0)*cj0*r00*x4015))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x4016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4017=((-1.0)*r20);
IkReal x4019 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4019)==0){
continue;
}
IkReal x4018=pow(x4019,-0.5);
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4017),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4020.value));
IkReal gconst97=(r21*x4018);
IkReal gconst98=(x4017*x4018);
CheckValue<IkReal> x4021 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4021.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4021.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4022=((-1.0)*r20);
IkReal x4023=x4018;
CheckValue<IkReal> x4025 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4022),IKFAST_ATAN2_MAGTHRESH);
if(!x4025.valid){
continue;
}
IkReal x4024=((-1.0)*(x4025.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4024;
IkReal gconst96=x4024;
IkReal gconst97=(r21*x4023);
IkReal gconst98=(x4022*x4023);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4026=((-1.0)*r20);
IkReal x4027=x4018;
CheckValue<IkReal> x4029 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4026),IKFAST_ATAN2_MAGTHRESH);
if(!x4029.valid){
continue;
}
IkReal x4028=((-1.0)*(x4029.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4028;
IkReal gconst96=x4028;
IkReal gconst97=(r21*x4027);
IkReal gconst98=(x4026*x4027);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4030=((-1.0)*r20);
IkReal x4031=x4018;
CheckValue<IkReal> x4033 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4030),IKFAST_ATAN2_MAGTHRESH);
if(!x4033.valid){
continue;
}
IkReal x4032=((-1.0)*(x4033.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4032;
IkReal gconst96=x4032;
IkReal gconst97=(r21*x4031);
IkReal gconst98=(x4030*x4031);
IkReal x4034=((1.0)*(r22*r22));
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4034))),-1);
if(!x4038.valid){
continue;
}
IkReal x4035=x4038.value;
IkReal x4036=((1.0)*x4035);
IkReal x4037=((((-2.0)*x4035*(r20*r20)*(r21*r21)))+(((-1.0)*x4036*(r21*r21*r21*r21)))+(((-1.0)*x4034))+(((-1.0)*x4036*(r20*r20*r20*r20))));
j4eval[0]=x4037;
j4eval[1]=IKsign(x4037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4039=(cj1*cj2);
IkReal x4040=(gconst98*r20);
IkReal x4041=(sj1*sj2);
IkReal x4042=(gconst97*r21);
CheckValue<IkReal> x4043 = IKatan2WithCheck(IkReal((((r22*x4041))+(((-1.0)*r22*x4039)))),IkReal((((x4041*x4042))+((x4039*x4040))+(((-1.0)*x4040*x4041))+(((-1.0)*x4039*x4042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x4040*x4042))+(((-1.0)*(x4042*x4042)))+(((-1.0)*(x4040*x4040))))),-1);
if(!x4044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4043.value)+(((1.5707963267949)*(x4044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4045=IKsin(j4);
IkReal x4046=IKcos(j4);
IkReal x4047=(gconst98*r10);
IkReal x4048=(gconst97*r21);
IkReal x4049=(cj2*sj1);
IkReal x4050=(gconst98*r20);
IkReal x4051=(gconst98*r00);
IkReal x4052=(cj1*sj2);
IkReal x4053=((1.0)*x4046);
IkReal x4054=((1.0)*x4045);
IkReal x4055=(gconst97*x4045);
IkReal x4056=(gconst97*x4046);
evalcond[0]=(((x4045*x4048))+(((-1.0)*x4050*x4054))+(((-1.0)*r22*x4053)));
evalcond[1]=(sj0+(((-1.0)*x4051*x4054))+(((-1.0)*r02*x4053))+((r01*x4055)));
evalcond[2]=((((-1.0)*r12*x4053))+((r11*x4055))+(((-1.0)*x4047*x4054))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4045))+(((-1.0)*x4050*x4053))+((x4046*x4048))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4051*x4053))+((r02*x4045))+((cj0*x4049))+((cj0*x4052))+((r01*x4056)));
evalcond[5]=(((sj0*x4052))+((r11*x4056))+((r12*x4045))+(((-1.0)*x4047*x4053))+((sj0*x4049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4057.value)+(((1.5707963267949)*(x4058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4059=IKsin(j4);
IkReal x4060=IKcos(j4);
IkReal x4061=(gconst98*r10);
IkReal x4062=(gconst97*r21);
IkReal x4063=(cj2*sj1);
IkReal x4064=(gconst98*r20);
IkReal x4065=(gconst98*r00);
IkReal x4066=(cj1*sj2);
IkReal x4067=((1.0)*x4060);
IkReal x4068=((1.0)*x4059);
IkReal x4069=(gconst97*x4059);
IkReal x4070=(gconst97*x4060);
evalcond[0]=(((x4059*x4062))+(((-1.0)*x4064*x4068))+(((-1.0)*r22*x4067)));
evalcond[1]=(sj0+(((-1.0)*x4065*x4068))+(((-1.0)*r02*x4067))+((r01*x4069)));
evalcond[2]=((((-1.0)*x4061*x4068))+(((-1.0)*r12*x4067))+((r11*x4069))+(((-1.0)*cj0)));
evalcond[3]=(((x4060*x4062))+(((-1.0)*x4064*x4067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4059)));
evalcond[4]=((((-1.0)*x4065*x4067))+((r02*x4059))+((r01*x4070))+((cj0*x4066))+((cj0*x4063)));
evalcond[5]=(((sj0*x4066))+((sj0*x4063))+(((-1.0)*x4061*x4067))+((r12*x4059))+((r11*x4070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x4072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4071.value)+(((1.5707963267949)*(x4072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4073=IKsin(j4);
IkReal x4074=IKcos(j4);
IkReal x4075=(gconst98*r10);
IkReal x4076=(gconst97*r21);
IkReal x4077=(cj2*sj1);
IkReal x4078=(gconst98*r20);
IkReal x4079=(gconst98*r00);
IkReal x4080=(cj1*sj2);
IkReal x4081=((1.0)*x4074);
IkReal x4082=((1.0)*x4073);
IkReal x4083=(gconst97*x4073);
IkReal x4084=(gconst97*x4074);
evalcond[0]=((((-1.0)*r22*x4081))+((x4073*x4076))+(((-1.0)*x4078*x4082)));
evalcond[1]=(((r01*x4083))+sj0+(((-1.0)*r02*x4081))+(((-1.0)*x4079*x4082)));
evalcond[2]=((((-1.0)*r12*x4081))+(((-1.0)*x4075*x4082))+((r11*x4083))+(((-1.0)*cj0)));
evalcond[3]=(((x4074*x4076))+((r22*x4073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4078*x4081)));
evalcond[4]=(((r01*x4084))+((cj0*x4077))+((cj0*x4080))+((r02*x4073))+(((-1.0)*x4079*x4081)));
evalcond[5]=(((r12*x4073))+(((-1.0)*x4075*x4081))+((sj0*x4077))+((r11*x4084))+((sj0*x4080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4085=((-1.0)*r21);
IkReal x4087 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4087)==0){
continue;
}
IkReal x4086=pow(x4087,-0.5);
CheckValue<IkReal> x4088 = IKatan2WithCheck(IkReal(x4085),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4088.value))));
IkReal gconst100=(x4085*x4086);
IkReal gconst101=((1.0)*r20*x4086);
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4089.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4090=((-1.0)*r21);
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(x4090),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
IkReal x4091=((1.0)*(x4093.value));
IkReal x4092=x4086;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4091)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4091)));
IkReal gconst100=(x4090*x4092);
IkReal gconst101=((1.0)*r20*x4092);
IkReal x4094=r22*r22;
IkReal x4095=((1.0)*x4094);
CheckValue<IkReal> x4099=IKPowWithIntegerCheck(((-1.0)+x4094),-1);
if(!x4099.valid){
continue;
}
IkReal x4096=x4099.value;
if((((1.0)+(((-1.0)*x4095)))) < -0.00001)
continue;
IkReal x4097=IKsqrt(((1.0)+(((-1.0)*x4095))));
IkReal x4098=(sj0*x4096*x4097);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4098+(((-1.0)*x4095*x4098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4100=((-1.0)*r21);
CheckValue<IkReal> x4103 = IKatan2WithCheck(IkReal(x4100),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4103.valid){
continue;
}
IkReal x4101=((1.0)*(x4103.value));
IkReal x4102=x4086;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4101)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4101)));
IkReal gconst100=(x4100*x4102);
IkReal gconst101=((1.0)*r20*x4102);
IkReal x4104=r22*r22;
IkReal x4105=((1.0)*x4104);
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(((-1.0)+x4104),-1);
if(!x4109.valid){
continue;
}
IkReal x4106=x4109.value;
if((((1.0)+(((-1.0)*x4105)))) < -0.00001)
continue;
IkReal x4107=IKsqrt(((1.0)+(((-1.0)*x4105))));
IkReal x4108=(cj0*x4106*x4107);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4105*x4108))+x4108))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4110=((-1.0)*r21);
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(x4110),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
IkReal x4111=((1.0)*(x4113.value));
IkReal x4112=x4086;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4111)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4111)));
IkReal gconst100=(x4110*x4112);
IkReal gconst101=((1.0)*r20*x4112);
IkReal x4114=r22*r22;
IkReal x4115=(cj0*r02);
IkReal x4116=(r12*sj0);
CheckValue<IkReal> x4120=IKPowWithIntegerCheck(((-1.0)+x4114),-1);
if(!x4120.valid){
continue;
}
IkReal x4117=x4120.value;
if((((1.0)+(((-1.0)*x4114)))) < -0.00001)
continue;
IkReal x4118=IKsqrt(((1.0)+(((-1.0)*x4114))));
IkReal x4119=((1.0)*r22*x4117*x4118);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4116*x4119))+(((-1.0)*x4115*x4119)))))+(IKabs((x4116+x4115))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4121=((1.0)*gconst101);
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4121))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*r10*sj0*x4121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x4121)))),-1);
if(!x4123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4122.value)+(((1.5707963267949)*(x4123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4124=IKsin(j4);
IkReal x4125=IKcos(j4);
IkReal x4126=(cj2*sj1);
IkReal x4127=(gconst101*r20);
IkReal x4128=(gconst101*r10);
IkReal x4129=(gconst101*r00);
IkReal x4130=(cj1*sj2);
IkReal x4131=((1.0)*x4125);
IkReal x4132=((1.0)*x4124);
IkReal x4133=(gconst100*x4124);
IkReal x4134=(gconst100*x4125);
evalcond[0]=((((-1.0)*x4127*x4132))+((r21*x4133))+(((-1.0)*r22*x4131)));
evalcond[1]=(sj0+((r01*x4133))+(((-1.0)*r02*x4131))+(((-1.0)*x4129*x4132)));
evalcond[2]=(((r11*x4133))+(((-1.0)*x4128*x4132))+(((-1.0)*r12*x4131))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4127*x4131))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4134))+((r22*x4124)));
evalcond[4]=(((cj0*x4126))+((r02*x4124))+((r01*x4134))+(((-1.0)*x4129*x4131))+((cj0*x4130)));
evalcond[5]=(((r12*x4124))+((sj0*x4126))+((r11*x4134))+(((-1.0)*x4128*x4131))+((sj0*x4130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4135.value)+(((1.5707963267949)*(x4136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4137=IKsin(j4);
IkReal x4138=IKcos(j4);
IkReal x4139=(cj2*sj1);
IkReal x4140=(gconst101*r20);
IkReal x4141=(gconst101*r10);
IkReal x4142=(gconst101*r00);
IkReal x4143=(cj1*sj2);
IkReal x4144=((1.0)*x4138);
IkReal x4145=((1.0)*x4137);
IkReal x4146=(gconst100*x4137);
IkReal x4147=(gconst100*x4138);
evalcond[0]=(((r21*x4146))+(((-1.0)*x4140*x4145))+(((-1.0)*r22*x4144)));
evalcond[1]=(sj0+((r01*x4146))+(((-1.0)*r02*x4144))+(((-1.0)*x4142*x4145)));
evalcond[2]=((((-1.0)*x4141*x4145))+((r11*x4146))+(((-1.0)*r12*x4144))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4137))+((r21*x4147))+(((-1.0)*x4140*x4144))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x4147))+(((-1.0)*x4142*x4144))+((cj0*x4143))+((cj0*x4139))+((r02*x4137)));
evalcond[5]=((((-1.0)*x4141*x4144))+((sj0*x4143))+((r11*x4147))+((r12*x4137))+((sj0*x4139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4148.value)))+(x4149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4150=IKsin(j4);
IkReal x4151=IKcos(j4);
IkReal x4152=(cj2*sj1);
IkReal x4153=(gconst101*r20);
IkReal x4154=(gconst101*r10);
IkReal x4155=(gconst101*r00);
IkReal x4156=(cj1*sj2);
IkReal x4157=((1.0)*x4151);
IkReal x4158=((1.0)*x4150);
IkReal x4159=(gconst100*x4150);
IkReal x4160=(gconst100*x4151);
evalcond[0]=(((r21*x4159))+(((-1.0)*x4153*x4158))+(((-1.0)*r22*x4157)));
evalcond[1]=(sj0+(((-1.0)*x4155*x4158))+((r01*x4159))+(((-1.0)*r02*x4157)));
evalcond[2]=(((r11*x4159))+(((-1.0)*x4154*x4158))+(((-1.0)*r12*x4157))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4153*x4157))+((r22*x4150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4160)));
evalcond[4]=(((r01*x4160))+((r02*x4150))+(((-1.0)*x4155*x4157))+((cj0*x4156))+((cj0*x4152)));
evalcond[5]=(((r12*x4150))+((sj0*x4156))+((sj0*x4152))+(((-1.0)*x4154*x4157))+((r11*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4162 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4162)==0){
continue;
}
IkReal x4161=pow(x4162,-0.5);
CheckValue<IkReal> x4163 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4163.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4163.value));
IkReal gconst103=((-1.0)*r01*x4161);
IkReal gconst104=(r00*x4161);
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4164.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4167 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4167.valid){
continue;
}
IkReal x4165=((-1.0)*(x4167.value));
IkReal x4166=x4161;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4165;
IkReal gconst102=x4165;
IkReal gconst103=((-1.0)*r01*x4166);
IkReal gconst104=(r00*x4166);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4168=((1.0)*gconst104);
CheckValue<IkReal> x4169=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x4168)))),-1);
if(!x4169.valid){
continue;
}
CheckValue<IkReal> x4170 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4168))+((cj0*gconst103*r01))+((gconst103*r11*sj0))+(((-1.0)*r10*sj0*x4168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4169.value)))+(x4170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4171=IKsin(j4);
IkReal x4172=IKcos(j4);
IkReal x4173=(gconst103*r11);
IkReal x4174=(cj2*sj1);
IkReal x4175=(gconst104*r10);
IkReal x4176=(gconst104*r20);
IkReal x4177=(gconst104*r00);
IkReal x4178=(cj1*sj2);
IkReal x4179=((1.0)*x4172);
IkReal x4180=(gconst103*x4172);
IkReal x4181=(gconst103*x4171);
IkReal x4182=((1.0)*x4171);
evalcond[0]=(((r21*x4181))+(((-1.0)*x4176*x4182))+(((-1.0)*r22*x4179)));
evalcond[1]=(sj0+(((-1.0)*x4177*x4182))+((r01*x4181))+(((-1.0)*r02*x4179)));
evalcond[2]=((((-1.0)*x4175*x4182))+((x4171*x4173))+(((-1.0)*r12*x4179))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4180))+((r22*x4171))+(((-1.0)*x4176*x4179))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4177*x4179))+((cj0*x4174))+((cj0*x4178))+((r01*x4180))+((r02*x4171)));
evalcond[5]=(((r12*x4171))+((sj0*x4174))+((sj0*x4178))+(((-1.0)*x4175*x4179))+((x4172*x4173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x4184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4183.value)+(((1.5707963267949)*(x4184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4185=IKsin(j4);
IkReal x4186=IKcos(j4);
IkReal x4187=(gconst103*r11);
IkReal x4188=(cj2*sj1);
IkReal x4189=(gconst104*r10);
IkReal x4190=(gconst104*r20);
IkReal x4191=(gconst104*r00);
IkReal x4192=(cj1*sj2);
IkReal x4193=((1.0)*x4186);
IkReal x4194=(gconst103*x4186);
IkReal x4195=(gconst103*x4185);
IkReal x4196=((1.0)*x4185);
evalcond[0]=(((r21*x4195))+(((-1.0)*x4190*x4196))+(((-1.0)*r22*x4193)));
evalcond[1]=(sj0+(((-1.0)*r02*x4193))+((r01*x4195))+(((-1.0)*x4191*x4196)));
evalcond[2]=((((-1.0)*r12*x4193))+(((-1.0)*x4189*x4196))+((x4185*x4187))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4194))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4185))+(((-1.0)*x4190*x4193)));
evalcond[4]=(((cj0*x4192))+((r02*x4185))+((r01*x4194))+(((-1.0)*x4191*x4193))+((cj0*x4188)));
evalcond[5]=(((r12*x4185))+((sj0*x4188))+((sj0*x4192))+((x4186*x4187))+(((-1.0)*x4189*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4198 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4198)==0){
continue;
}
IkReal x4197=pow(x4198,-0.5);
CheckValue<IkReal> x4199 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4199.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4199.value))));
IkReal gconst106=((1.0)*r01*x4197);
IkReal gconst107=((-1.0)*r00*x4197);
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4200.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
IkReal x4201=((1.0)*(x4203.value));
IkReal x4202=x4197;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4201)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4201)));
IkReal gconst106=((1.0)*r01*x4202);
IkReal gconst107=((-1.0)*r00*x4202);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4206 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4206.valid){
continue;
}
IkReal x4204=((1.0)*(x4206.value));
IkReal x4205=x4197;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4204)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4204)));
IkReal gconst106=((1.0)*r01*x4205);
IkReal gconst107=((-1.0)*r00*x4205);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4209 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4209.valid){
continue;
}
IkReal x4207=((1.0)*(x4209.value));
IkReal x4208=x4197;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4207)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4207)));
IkReal gconst106=((1.0)*r01*x4208);
IkReal gconst107=((-1.0)*r00*x4208);
IkReal x4210=r02*r02;
IkReal x4211=(r12*sj0);
IkReal x4212=x4197;
IkReal x4213=(cj0*x4212);
j4eval[0]=((IKabs((x4211+((cj0*r02)))))+(IKabs((((r02*x4211*x4212))+((x4210*x4213))+(((-1.0)*x4213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4214=((1.0)*gconst107);
CheckValue<IkReal> x4215 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x4214))+((cj0*gconst106*r01))+((gconst106*r11*sj0))+(((-1.0)*cj0*r00*x4214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4215.valid){
continue;
}
CheckValue<IkReal> x4216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4214))+(((-1.0)*gconst106*r20)))),-1);
if(!x4216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4215.value)+(((1.5707963267949)*(x4216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4217=IKsin(j4);
IkReal x4218=IKcos(j4);
IkReal x4219=(gconst107*r10);
IkReal x4220=(gconst107*r00);
IkReal x4221=(gconst107*r20);
IkReal x4222=(cj2*sj1);
IkReal x4223=(cj1*sj2);
IkReal x4224=((1.0)*x4218);
IkReal x4225=(gconst106*x4218);
IkReal x4226=(gconst106*x4217);
IkReal x4227=((1.0)*x4217);
evalcond[0]=((((-1.0)*x4221*x4227))+(((-1.0)*r22*x4224))+((r21*x4226)));
evalcond[1]=(sj0+((r01*x4226))+(((-1.0)*r02*x4224))+(((-1.0)*x4220*x4227)));
evalcond[2]=((((-1.0)*r12*x4224))+(((-1.0)*x4219*x4227))+((r11*x4226))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4221*x4224))+((r21*x4225)));
evalcond[4]=(((r01*x4225))+((r02*x4217))+((cj0*x4223))+((cj0*x4222))+(((-1.0)*x4220*x4224)));
evalcond[5]=(((r12*x4217))+((sj0*x4223))+((sj0*x4222))+(((-1.0)*x4219*x4224))+((r11*x4225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4228 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4228.valid){
continue;
}
CheckValue<IkReal> x4229=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4228.value)+(((1.5707963267949)*(x4229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4230=IKsin(j4);
IkReal x4231=IKcos(j4);
IkReal x4232=(gconst107*r10);
IkReal x4233=(gconst107*r00);
IkReal x4234=(gconst107*r20);
IkReal x4235=(cj2*sj1);
IkReal x4236=(cj1*sj2);
IkReal x4237=((1.0)*x4231);
IkReal x4238=(gconst106*x4231);
IkReal x4239=(gconst106*x4230);
IkReal x4240=((1.0)*x4230);
evalcond[0]=((((-1.0)*r22*x4237))+((r21*x4239))+(((-1.0)*x4234*x4240)));
evalcond[1]=((((-1.0)*x4233*x4240))+sj0+((r01*x4239))+(((-1.0)*r02*x4237)));
evalcond[2]=((((-1.0)*r12*x4237))+(((-1.0)*x4232*x4240))+((r11*x4239))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4230))+((r21*x4238))+(((-1.0)*x4234*x4237)));
evalcond[4]=(((r01*x4238))+((r02*x4230))+(((-1.0)*x4233*x4237))+((cj0*x4236))+((cj0*x4235)));
evalcond[5]=(((r12*x4230))+(((-1.0)*x4232*x4237))+((sj0*x4235))+((sj0*x4236))+((r11*x4238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4241=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x4241.valid){
continue;
}
CheckValue<IkReal> x4242 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4241.value)))+(x4242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4243=IKsin(j4);
IkReal x4244=IKcos(j4);
IkReal x4245=(gconst107*r10);
IkReal x4246=(gconst107*r00);
IkReal x4247=(gconst107*r20);
IkReal x4248=(cj2*sj1);
IkReal x4249=(cj1*sj2);
IkReal x4250=((1.0)*x4244);
IkReal x4251=(gconst106*x4244);
IkReal x4252=(gconst106*x4243);
IkReal x4253=((1.0)*x4243);
evalcond[0]=((((-1.0)*x4247*x4253))+(((-1.0)*r22*x4250))+((r21*x4252)));
evalcond[1]=(sj0+(((-1.0)*x4246*x4253))+((r01*x4252))+(((-1.0)*r02*x4250)));
evalcond[2]=((((-1.0)*x4245*x4253))+((r11*x4252))+(((-1.0)*cj0))+(((-1.0)*r12*x4250)));
evalcond[3]=(((r22*x4243))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4247*x4250))+((r21*x4251)));
evalcond[4]=((((-1.0)*x4246*x4250))+((r01*x4251))+((r02*x4243))+((cj0*x4249))+((cj0*x4248)));
evalcond[5]=((((-1.0)*x4245*x4250))+((sj0*x4249))+((sj0*x4248))+((r11*x4251))+((r12*x4243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4254=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4254;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4255=((1.0)*cj5);
IkReal x4256=((((-1.0)*r21*x4255))+(((-1.0)*r20*sj5)));
j4eval[0]=x4256;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4255))))));
j4eval[2]=IKsign(x4256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4257=cj5*cj5;
IkReal x4258=r01*r01;
IkReal x4259=(r01*sj5);
IkReal x4260=(cj5*r00);
IkReal x4261=((((-1.0)*(r02*r02)))+(((-1.0)*x4258))+(((-1.0)*x4257*(r00*r00)))+(((2.0)*x4259*x4260))+((x4257*x4258)));
j4eval[0]=x4261;
j4eval[1]=IKsign(x4261);
j4eval[2]=((IKabs(r02))+(IKabs((x4259+(((-1.0)*x4260))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4262=cj5*cj5;
IkReal x4263=r01*r01;
IkReal x4264=(r01*sj5);
IkReal x4265=(cj5*r00);
CheckValue<IkReal> x4266 = IKatan2WithCheck(IkReal((x4264+(((-1.0)*x4265)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4266.valid){
continue;
}
CheckValue<IkReal> x4267=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x4264*x4265))+((x4262*x4263))+(((-1.0)*x4262*(r00*r00)))+(((-1.0)*x4263)))),-1);
if(!x4267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4266.value)+(((1.5707963267949)*(x4267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4268=IKcos(j4);
IkReal x4269=IKsin(j4);
IkReal x4270=(cj5*r00);
IkReal x4271=(cj5*r10);
IkReal x4272=(r21*sj5);
IkReal x4273=(cj5*r20);
IkReal x4274=((1.0)*x4268);
IkReal x4275=((1.0)*x4269);
IkReal x4276=(sj5*x4269);
IkReal x4277=(sj5*x4268);
evalcond[0]=(((r02*x4269))+(((-1.0)*x4270*x4274))+((r01*x4277)));
evalcond[1]=((((-1.0)*x4273*x4275))+(((-1.0)*r22*x4274))+((x4269*x4272)));
evalcond[2]=((((-1.0)*r12*x4274))+((r11*x4276))+(((-1.0)*x4271*x4275)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4274))+(((-1.0)*x4270*x4275))+((r01*x4276)));
evalcond[4]=(((cj2*sj1))+((r11*x4277))+((cj1*sj2))+((r12*x4269))+(((-1.0)*x4271*x4274)));
evalcond[5]=((((-1.0)*x4273*x4274))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4268*x4272))+((r22*x4269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4278=((1.0)*cj5);
CheckValue<IkReal> x4279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4278))+(((-1.0)*r20*sj5)))),-1);
if(!x4279.valid){
continue;
}
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4278))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4279.value)))+(x4280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4281=IKcos(j4);
IkReal x4282=IKsin(j4);
IkReal x4283=(cj5*r00);
IkReal x4284=(cj5*r10);
IkReal x4285=(r21*sj5);
IkReal x4286=(cj5*r20);
IkReal x4287=((1.0)*x4281);
IkReal x4288=((1.0)*x4282);
IkReal x4289=(sj5*x4282);
IkReal x4290=(sj5*x4281);
evalcond[0]=((((-1.0)*x4283*x4287))+((r01*x4290))+((r02*x4282)));
evalcond[1]=(((x4282*x4285))+(((-1.0)*x4286*x4288))+(((-1.0)*r22*x4287)));
evalcond[2]=(((r11*x4289))+(((-1.0)*r12*x4287))+(((-1.0)*x4284*x4288)));
evalcond[3]=((1.0)+(((-1.0)*x4283*x4288))+(((-1.0)*r02*x4287))+((r01*x4289)));
evalcond[4]=(((cj2*sj1))+((r12*x4282))+((cj1*sj2))+(((-1.0)*x4284*x4287))+((r11*x4290)));
evalcond[5]=((((-1.0)*x4286*x4287))+((r22*x4282))+((x4281*x4285))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4291 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4291.valid){
continue;
}
CheckValue<IkReal> x4292=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4291.value)+(((1.5707963267949)*(x4292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4293=IKcos(j4);
IkReal x4294=IKsin(j4);
IkReal x4295=(cj5*r00);
IkReal x4296=(cj5*r10);
IkReal x4297=(r21*sj5);
IkReal x4298=(cj5*r20);
IkReal x4299=((1.0)*x4293);
IkReal x4300=((1.0)*x4294);
IkReal x4301=(sj5*x4294);
IkReal x4302=(sj5*x4293);
evalcond[0]=((((-1.0)*x4295*x4299))+((r01*x4302))+((r02*x4294)));
evalcond[1]=((((-1.0)*r22*x4299))+(((-1.0)*x4298*x4300))+((x4294*x4297)));
evalcond[2]=((((-1.0)*x4296*x4300))+((r11*x4301))+(((-1.0)*r12*x4299)));
evalcond[3]=((1.0)+(((-1.0)*x4295*x4300))+((r01*x4301))+(((-1.0)*r02*x4299)));
evalcond[4]=(((cj2*sj1))+((r11*x4302))+(((-1.0)*x4296*x4299))+((cj1*sj2))+((r12*x4294)));
evalcond[5]=((((-1.0)*x4298*x4299))+((x4293*x4297))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4303=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4303;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4304=((1.0)*cj5);
IkReal x4305=((((-1.0)*r11*x4304))+(((-1.0)*r10*sj5)));
j4eval[0]=x4305;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4304))))));
j4eval[2]=IKsign(x4305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4306=cj5*cj5;
IkReal x4307=r01*r01;
IkReal x4308=(cj5*r00);
IkReal x4309=(r01*sj5);
IkReal x4310=((((-1.0)*x4306*x4307))+(((-2.0)*x4308*x4309))+x4307+(r02*r02)+((x4306*(r00*r00))));
j4eval[0]=x4310;
j4eval[1]=IKsign(x4310);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4308))+x4309))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4311=cj5*cj5;
IkReal x4312=r01*r01;
IkReal x4313=(r01*sj5);
IkReal x4314=(cj5*r00);
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal((x4313+(((-1.0)*x4314)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
CheckValue<IkReal> x4316=IKPowWithIntegerCheck(IKsign((((x4311*(r00*r00)))+(((-2.0)*x4313*x4314))+x4312+(r02*r02)+(((-1.0)*x4311*x4312)))),-1);
if(!x4316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4315.value)+(((1.5707963267949)*(x4316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4317=IKcos(j4);
IkReal x4318=IKsin(j4);
IkReal x4319=(cj5*r00);
IkReal x4320=(cj5*r10);
IkReal x4321=(r21*sj5);
IkReal x4322=((1.0)*cj2);
IkReal x4323=(cj5*r20);
IkReal x4324=((1.0)*x4317);
IkReal x4325=((1.0)*x4318);
IkReal x4326=(sj5*x4318);
IkReal x4327=(sj5*x4317);
evalcond[0]=(((r02*x4318))+(((-1.0)*x4319*x4324))+((r01*x4327)));
evalcond[1]=(((x4318*x4321))+(((-1.0)*r22*x4324))+(((-1.0)*x4323*x4325)));
evalcond[2]=((((-1.0)*r12*x4324))+(((-1.0)*x4320*x4325))+((r11*x4326)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4324))+(((-1.0)*x4319*x4325))+((r01*x4326)));
evalcond[4]=(((x4317*x4321))+((sj1*sj2))+(((-1.0)*x4323*x4324))+(((-1.0)*cj1*x4322))+((r22*x4318)));
evalcond[5]=((((-1.0)*sj1*x4322))+((r12*x4318))+(((-1.0)*cj1*sj2))+(((-1.0)*x4320*x4324))+((r11*x4327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4328=((1.0)*cj5);
CheckValue<IkReal> x4329 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4328))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4329.valid){
continue;
}
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4328)))),-1);
if(!x4330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4329.value)+(((1.5707963267949)*(x4330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4331=IKcos(j4);
IkReal x4332=IKsin(j4);
IkReal x4333=(cj5*r00);
IkReal x4334=(cj5*r10);
IkReal x4335=(r21*sj5);
IkReal x4336=((1.0)*cj2);
IkReal x4337=(cj5*r20);
IkReal x4338=((1.0)*x4331);
IkReal x4339=((1.0)*x4332);
IkReal x4340=(sj5*x4332);
IkReal x4341=(sj5*x4331);
evalcond[0]=((((-1.0)*x4333*x4338))+((r02*x4332))+((r01*x4341)));
evalcond[1]=((((-1.0)*r22*x4338))+((x4332*x4335))+(((-1.0)*x4337*x4339)));
evalcond[2]=((((-1.0)*x4334*x4339))+(((-1.0)*r12*x4338))+((r11*x4340)));
evalcond[3]=((-1.0)+(((-1.0)*x4333*x4339))+(((-1.0)*r02*x4338))+((r01*x4340)));
evalcond[4]=(((sj1*sj2))+((x4331*x4335))+(((-1.0)*cj1*x4336))+((r22*x4332))+(((-1.0)*x4337*x4338)));
evalcond[5]=((((-1.0)*x4334*x4338))+(((-1.0)*sj1*x4336))+(((-1.0)*cj1*sj2))+((r12*x4332))+((r11*x4341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4342=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4342.valid){
continue;
}
CheckValue<IkReal> x4343 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4342.value)))+(x4343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4344=IKcos(j4);
IkReal x4345=IKsin(j4);
IkReal x4346=(cj5*r00);
IkReal x4347=(cj5*r10);
IkReal x4348=(r21*sj5);
IkReal x4349=((1.0)*cj2);
IkReal x4350=(cj5*r20);
IkReal x4351=((1.0)*x4344);
IkReal x4352=((1.0)*x4345);
IkReal x4353=(sj5*x4345);
IkReal x4354=(sj5*x4344);
evalcond[0]=(((r02*x4345))+(((-1.0)*x4346*x4351))+((r01*x4354)));
evalcond[1]=(((x4345*x4348))+(((-1.0)*x4350*x4352))+(((-1.0)*r22*x4351)));
evalcond[2]=((((-1.0)*r12*x4351))+((r11*x4353))+(((-1.0)*x4347*x4352)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4351))+(((-1.0)*x4346*x4352))+((r01*x4353)));
evalcond[4]=(((x4344*x4348))+((sj1*sj2))+((r22*x4345))+(((-1.0)*x4350*x4351))+(((-1.0)*cj1*x4349)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x4345))+((r11*x4354))+(((-1.0)*sj1*x4349))+(((-1.0)*x4347*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4356 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4356)==0){
continue;
}
IkReal x4355=pow(x4356,-0.5);
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4357.value));
IkReal gconst109=((-1.0)*r11*x4355);
IkReal gconst110=(r10*x4355);
CheckValue<IkReal> x4358 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4358.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4358.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4361 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4361.valid){
continue;
}
IkReal x4359=((-1.0)*(x4361.value));
IkReal x4360=x4355;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4359;
IkReal gconst108=x4359;
IkReal gconst109=((-1.0)*r11*x4360);
IkReal gconst110=(r10*x4360);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4362=((1.0)*gconst110);
CheckValue<IkReal> x4363=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4362)))),-1);
if(!x4363.valid){
continue;
}
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x4362))+((gconst109*r11*sj0))+(((-1.0)*r10*sj0*x4362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4363.value)))+(x4364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4365=IKsin(j4);
IkReal x4366=IKcos(j4);
IkReal x4367=(gconst109*r21);
IkReal x4368=(cj2*sj1);
IkReal x4369=(cj1*sj2);
IkReal x4370=((1.0)*x4366);
IkReal x4371=(gconst109*x4365);
IkReal x4372=(gconst109*x4366);
IkReal x4373=((1.0)*gconst110*x4365);
evalcond[0]=((((-1.0)*r22*x4370))+(((-1.0)*r20*x4373))+((x4365*x4367)));
evalcond[1]=(sj0+((r01*x4371))+(((-1.0)*r02*x4370))+(((-1.0)*r00*x4373)));
evalcond[2]=(((r11*x4371))+(((-1.0)*r10*x4373))+(((-1.0)*r12*x4370))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4370))+((x4366*x4367))+((r22*x4365)));
evalcond[4]=(((r01*x4372))+((cj0*x4368))+((cj0*x4369))+(((-1.0)*gconst110*r00*x4370))+((r02*x4365)));
evalcond[5]=(((sj0*x4368))+((sj0*x4369))+((r11*x4372))+((r12*x4365))+(((-1.0)*gconst110*r10*x4370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4374=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x4374.valid){
continue;
}
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4374.value)))+(x4375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4376=IKsin(j4);
IkReal x4377=IKcos(j4);
IkReal x4378=(gconst109*r21);
IkReal x4379=(cj2*sj1);
IkReal x4380=(cj1*sj2);
IkReal x4381=((1.0)*x4377);
IkReal x4382=(gconst109*x4376);
IkReal x4383=(gconst109*x4377);
IkReal x4384=((1.0)*gconst110*x4376);
evalcond[0]=(((x4376*x4378))+(((-1.0)*r22*x4381))+(((-1.0)*r20*x4384)));
evalcond[1]=((((-1.0)*r02*x4381))+sj0+(((-1.0)*r00*x4384))+((r01*x4382)));
evalcond[2]=((((-1.0)*r12*x4381))+(((-1.0)*r10*x4384))+((r11*x4382))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst110*r20*x4381))+((r22*x4376))+((x4377*x4378))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x4376))+(((-1.0)*gconst110*r00*x4381))+((cj0*x4379))+((r01*x4383))+((cj0*x4380)));
evalcond[5]=((((-1.0)*gconst110*r10*x4381))+((sj0*x4379))+((r12*x4376))+((sj0*x4380))+((r11*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4386 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4386)==0){
continue;
}
IkReal x4385=pow(x4386,-0.5);
CheckValue<IkReal> x4387 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4387.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4387.value))));
IkReal gconst112=((1.0)*r11*x4385);
IkReal gconst113=((-1.0)*r10*x4385);
CheckValue<IkReal> x4388 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4388.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4388.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4391 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4391.valid){
continue;
}
IkReal x4389=((1.0)*(x4391.value));
IkReal x4390=x4385;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4389)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4389)));
IkReal gconst112=((1.0)*r11*x4390);
IkReal gconst113=((-1.0)*r10*x4390);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4394 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4394.valid){
continue;
}
IkReal x4392=((1.0)*(x4394.value));
IkReal x4393=x4385;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4392)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4392)));
IkReal gconst112=((1.0)*r11*x4393);
IkReal gconst113=((-1.0)*r10*x4393);
IkReal x4395=r12*r12;
IkReal x4396=(cj0*r02);
IkReal x4397=x4385;
IkReal x4398=(sj0*x4397);
j4eval[0]=((IKabs((((r12*sj0))+x4396)))+(IKabs(((((-1.0)*x4398))+((r12*x4396*x4397))+((x4395*x4398))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
IkReal x4399=((1.0)*(x4401.value));
IkReal x4400=x4385;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4399)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4399)));
IkReal gconst112=((1.0)*r11*x4400);
IkReal gconst113=((-1.0)*r10*x4400);
IkReal x4402=r12*r12;
IkReal x4403=(sj1*sj2);
IkReal x4404=((1.0)+(((-1.0)*x4402)));
IkReal x4405=((1.0)*cj1*cj2);
CheckValue<IkReal> x4412=IKPowWithIntegerCheck(x4404,-1);
if(!x4412.valid){
continue;
}
IkReal x4406=x4412.value;
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(((-1.0)+x4402),-1);
if(!x4413.valid){
continue;
}
IkReal x4407=x4413.value;
IkReal x4408=((1.0)*x4406);
if((x4404) < -0.00001)
continue;
IkReal x4409=IKsqrt(x4404);
IkReal x4410=(r12*r22*x4407*x4409);
IkReal x4411=((((-1.0)*x4408*(r10*r10)*(r20*r20)))+(((-1.0)*x4408*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4406))+(((-1.0)*(r22*r22))));
j4eval[0]=x4411;
j4eval[1]=((IKabs((((x4403*x4410))+(((-1.0)*x4405*x4410)))))+(IKabs((((r22*x4403))+(((-1.0)*r22*x4405))))));
j4eval[2]=IKsign(x4411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4414=(sj1*sj2);
IkReal x4415=(gconst112*r21);
IkReal x4416=(gconst113*r20);
IkReal x4417=(cj1*cj2);
CheckValue<IkReal> x4418 = IKatan2WithCheck(IkReal((((r22*x4414))+(((-1.0)*r22*x4417)))),IkReal((((x4414*x4415))+((x4416*x4417))+(((-1.0)*x4414*x4416))+(((-1.0)*x4415*x4417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4418.valid){
continue;
}
CheckValue<IkReal> x4419=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4416*x4416)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4415*x4415)))+(((2.0)*x4415*x4416)))),-1);
if(!x4419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4418.value)+(((1.5707963267949)*(x4419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4420=IKsin(j4);
IkReal x4421=IKcos(j4);
IkReal x4422=(cj2*sj1);
IkReal x4423=(gconst113*r20);
IkReal x4424=(gconst112*r21);
IkReal x4425=(gconst113*r00);
IkReal x4426=(gconst113*r10);
IkReal x4427=(cj1*sj2);
IkReal x4428=((1.0)*x4421);
IkReal x4429=((1.0)*x4420);
IkReal x4430=(gconst112*x4421);
IkReal x4431=(gconst112*x4420);
evalcond[0]=((((-1.0)*x4423*x4429))+((x4420*x4424))+(((-1.0)*r22*x4428)));
evalcond[1]=((((-1.0)*x4425*x4429))+sj0+(((-1.0)*r02*x4428))+((r01*x4431)));
evalcond[2]=((((-1.0)*x4426*x4429))+((r11*x4431))+(((-1.0)*r12*x4428))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4423*x4428))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4420))+((x4421*x4424)));
evalcond[4]=((((-1.0)*x4425*x4428))+((r02*x4420))+((cj0*x4422))+((cj0*x4427))+((r01*x4430)));
evalcond[5]=((((-1.0)*x4426*x4428))+((sj0*x4427))+((sj0*x4422))+((r11*x4430))+((r12*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4432=((1.0)*gconst113);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x4432))+(((-1.0)*cj0*r00*x4432))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
CheckValue<IkReal> x4434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4432))+(((-1.0)*gconst112*r20)))),-1);
if(!x4434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4433.value)+(((1.5707963267949)*(x4434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4435=IKsin(j4);
IkReal x4436=IKcos(j4);
IkReal x4437=(cj2*sj1);
IkReal x4438=(gconst113*r20);
IkReal x4439=(gconst112*r21);
IkReal x4440=(gconst113*r00);
IkReal x4441=(gconst113*r10);
IkReal x4442=(cj1*sj2);
IkReal x4443=((1.0)*x4436);
IkReal x4444=((1.0)*x4435);
IkReal x4445=(gconst112*x4436);
IkReal x4446=(gconst112*x4435);
evalcond[0]=(((x4435*x4439))+(((-1.0)*r22*x4443))+(((-1.0)*x4438*x4444)));
evalcond[1]=(sj0+((r01*x4446))+(((-1.0)*r02*x4443))+(((-1.0)*x4440*x4444)));
evalcond[2]=((((-1.0)*r12*x4443))+((r11*x4446))+(((-1.0)*x4441*x4444))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4435))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4436*x4439))+(((-1.0)*x4438*x4443)));
evalcond[4]=(((r01*x4445))+((cj0*x4437))+((cj0*x4442))+(((-1.0)*x4440*x4443))+((r02*x4435)));
evalcond[5]=(((sj0*x4442))+((r12*x4435))+((r11*x4445))+(((-1.0)*x4441*x4443))+((sj0*x4437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4447=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4447.valid){
continue;
}
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4447.value)))+(x4448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4449=IKsin(j4);
IkReal x4450=IKcos(j4);
IkReal x4451=(cj2*sj1);
IkReal x4452=(gconst113*r20);
IkReal x4453=(gconst112*r21);
IkReal x4454=(gconst113*r00);
IkReal x4455=(gconst113*r10);
IkReal x4456=(cj1*sj2);
IkReal x4457=((1.0)*x4450);
IkReal x4458=((1.0)*x4449);
IkReal x4459=(gconst112*x4450);
IkReal x4460=(gconst112*x4449);
evalcond[0]=((((-1.0)*r22*x4457))+((x4449*x4453))+(((-1.0)*x4452*x4458)));
evalcond[1]=(sj0+(((-1.0)*r02*x4457))+(((-1.0)*x4454*x4458))+((r01*x4460)));
evalcond[2]=((((-1.0)*x4455*x4458))+(((-1.0)*r12*x4457))+((r11*x4460))+(((-1.0)*cj0)));
evalcond[3]=(((x4450*x4453))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4449))+(((-1.0)*x4452*x4457)));
evalcond[4]=(((r01*x4459))+(((-1.0)*x4454*x4457))+((cj0*x4451))+((cj0*x4456))+((r02*x4449)));
evalcond[5]=((((-1.0)*x4455*x4457))+((r11*x4459))+((r12*x4449))+((sj0*x4451))+((sj0*x4456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4461=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4461;
j4eval[1]=IKsign(x4461);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4462=((1.0)*cj5);
IkReal x4463=((((-1.0)*r21*x4462))+(((-1.0)*r20*sj5)));
j4eval[0]=x4463;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x4462)))))+(IKabs(r02)));
j4eval[2]=IKsign(x4463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4464=cj5*cj5;
IkReal x4465=r11*r11;
IkReal x4466=(r11*sj5);
IkReal x4467=(cj5*r10);
IkReal x4468=((r12*r12)+x4465+((x4464*(r10*r10)))+(((-1.0)*x4464*x4465))+(((-2.0)*x4466*x4467)));
j4eval[0]=x4468;
j4eval[1]=IKsign(x4468);
j4eval[2]=((IKabs(r12))+(IKabs((x4466+(((-1.0)*x4467))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4469=cj5*cj5;
IkReal x4470=r11*r11;
IkReal x4471=(cj5*r10);
IkReal x4472=(r11*sj5);
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4470+(((-2.0)*x4471*x4472))+((x4469*(r10*r10)))+(((-1.0)*x4469*x4470)))),-1);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal((x4472+(((-1.0)*x4471)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4473.value)))+(x4474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4475=IKcos(j4);
IkReal x4476=IKsin(j4);
IkReal x4477=(cj5*r00);
IkReal x4478=(cj5*r10);
IkReal x4479=(r21*sj5);
IkReal x4480=(cj5*r20);
IkReal x4481=((1.0)*x4475);
IkReal x4482=((1.0)*x4476);
IkReal x4483=(sj5*x4476);
IkReal x4484=(sj5*x4475);
evalcond[0]=(((r11*x4484))+(((-1.0)*x4478*x4481))+((r12*x4476)));
evalcond[1]=(((x4476*x4479))+(((-1.0)*x4480*x4482))+(((-1.0)*r22*x4481)));
evalcond[2]=(((r01*x4483))+(((-1.0)*x4477*x4482))+(((-1.0)*r02*x4481)));
evalcond[3]=((-1.0)+((r11*x4483))+(((-1.0)*r12*x4481))+(((-1.0)*x4478*x4482)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4476))+((r01*x4484))+(((-1.0)*x4477*x4481)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4480*x4481))+((r22*x4476))+((x4475*x4479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4485=((1.0)*cj5);
CheckValue<IkReal> x4486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4485))+(((-1.0)*r20*sj5)))),-1);
if(!x4486.valid){
continue;
}
CheckValue<IkReal> x4487 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4486.value)))+(x4487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4488=IKcos(j4);
IkReal x4489=IKsin(j4);
IkReal x4490=(cj5*r00);
IkReal x4491=(cj5*r10);
IkReal x4492=(r21*sj5);
IkReal x4493=(cj5*r20);
IkReal x4494=((1.0)*x4488);
IkReal x4495=((1.0)*x4489);
IkReal x4496=(sj5*x4489);
IkReal x4497=(sj5*x4488);
evalcond[0]=(((r11*x4497))+(((-1.0)*x4491*x4494))+((r12*x4489)));
evalcond[1]=((((-1.0)*r22*x4494))+(((-1.0)*x4493*x4495))+((x4489*x4492)));
evalcond[2]=((((-1.0)*r02*x4494))+(((-1.0)*x4490*x4495))+((r01*x4496)));
evalcond[3]=((-1.0)+((r11*x4496))+(((-1.0)*x4491*x4495))+(((-1.0)*r12*x4494)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4489))+(((-1.0)*x4490*x4494))+((r01*x4497)));
evalcond[5]=(((x4488*x4492))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4489))+(((-1.0)*x4493*x4494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4498 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4498.valid){
continue;
}
CheckValue<IkReal> x4499=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4498.value)+(((1.5707963267949)*(x4499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4500=IKcos(j4);
IkReal x4501=IKsin(j4);
IkReal x4502=(cj5*r00);
IkReal x4503=(cj5*r10);
IkReal x4504=(r21*sj5);
IkReal x4505=(cj5*r20);
IkReal x4506=((1.0)*x4500);
IkReal x4507=((1.0)*x4501);
IkReal x4508=(sj5*x4501);
IkReal x4509=(sj5*x4500);
evalcond[0]=(((r12*x4501))+((r11*x4509))+(((-1.0)*x4503*x4506)));
evalcond[1]=(((x4501*x4504))+(((-1.0)*r22*x4506))+(((-1.0)*x4505*x4507)));
evalcond[2]=((((-1.0)*r02*x4506))+((r01*x4508))+(((-1.0)*x4502*x4507)));
evalcond[3]=((-1.0)+((r11*x4508))+(((-1.0)*x4503*x4507))+(((-1.0)*r12*x4506)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4501))+((r01*x4509))+(((-1.0)*x4502*x4506)));
evalcond[5]=(((r22*x4501))+(((-1.0)*cj1*cj2))+((x4500*x4504))+((sj1*sj2))+(((-1.0)*x4505*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4510=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4510;
j4eval[1]=IKsign(x4510);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4511=((1.0)*cj5);
IkReal x4512=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4511)));
j4eval[0]=x4512;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4511))))));
j4eval[2]=IKsign(x4512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4513=(sj1*sj2);
IkReal x4514=(cj5*r10);
IkReal x4515=(r11*sj5);
IkReal x4516=(cj1*cj2);
IkReal x4517=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4517;
j4eval[1]=((IKabs((((r12*x4516))+(((-1.0)*r12*x4513)))))+(IKabs(((((-1.0)*x4513*x4514))+((x4513*x4515))+((x4514*x4516))+(((-1.0)*x4515*x4516))))));
j4eval[2]=IKsign(x4517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4518=(sj1*sj2);
IkReal x4519=(cj5*r10);
IkReal x4520=(r11*sj5);
IkReal x4521=(cj1*cj2);
CheckValue<IkReal> x4522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4522.valid){
continue;
}
CheckValue<IkReal> x4523 = IKatan2WithCheck(IkReal(((((-1.0)*x4520*x4521))+(((-1.0)*x4518*x4519))+((x4518*x4520))+((x4519*x4521)))),IkReal((((r12*x4521))+(((-1.0)*r12*x4518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4522.value)))+(x4523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4524=IKcos(j4);
IkReal x4525=IKsin(j4);
IkReal x4526=(cj5*r00);
IkReal x4527=(cj5*r10);
IkReal x4528=(r21*sj5);
IkReal x4529=((1.0)*cj2);
IkReal x4530=(cj5*r20);
IkReal x4531=((1.0)*x4524);
IkReal x4532=((1.0)*x4525);
IkReal x4533=(sj5*x4525);
IkReal x4534=(sj5*x4524);
evalcond[0]=(((r12*x4525))+(((-1.0)*x4527*x4531))+((r11*x4534)));
evalcond[1]=((((-1.0)*x4530*x4532))+((x4525*x4528))+(((-1.0)*r22*x4531)));
evalcond[2]=(((r01*x4533))+(((-1.0)*x4526*x4532))+(((-1.0)*r02*x4531)));
evalcond[3]=((1.0)+(((-1.0)*x4527*x4532))+(((-1.0)*r12*x4531))+((r11*x4533)));
evalcond[4]=((((-1.0)*x4530*x4531))+((sj1*sj2))+(((-1.0)*cj1*x4529))+((x4524*x4528))+((r22*x4525)));
evalcond[5]=(((r01*x4534))+(((-1.0)*sj1*x4529))+(((-1.0)*cj1*sj2))+((r02*x4525))+(((-1.0)*x4526*x4531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4535=((1.0)*cj5);
CheckValue<IkReal> x4536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4535))+(((-1.0)*r00*sj5)))),-1);
if(!x4536.valid){
continue;
}
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4536.value)))+(x4537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4538=IKcos(j4);
IkReal x4539=IKsin(j4);
IkReal x4540=(cj5*r00);
IkReal x4541=(cj5*r10);
IkReal x4542=(r21*sj5);
IkReal x4543=((1.0)*cj2);
IkReal x4544=(cj5*r20);
IkReal x4545=((1.0)*x4538);
IkReal x4546=((1.0)*x4539);
IkReal x4547=(sj5*x4539);
IkReal x4548=(sj5*x4538);
evalcond[0]=(((r12*x4539))+(((-1.0)*x4541*x4545))+((r11*x4548)));
evalcond[1]=((((-1.0)*r22*x4545))+(((-1.0)*x4544*x4546))+((x4539*x4542)));
evalcond[2]=((((-1.0)*r02*x4545))+((r01*x4547))+(((-1.0)*x4540*x4546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4545))+(((-1.0)*x4541*x4546))+((r11*x4547)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4544*x4545))+((r22*x4539))+(((-1.0)*cj1*x4543))+((x4538*x4542)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x4548))+(((-1.0)*x4540*x4545))+((r02*x4539))+(((-1.0)*sj1*x4543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4549=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4549.valid){
continue;
}
CheckValue<IkReal> x4550 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4549.value)))+(x4550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4551=IKcos(j4);
IkReal x4552=IKsin(j4);
IkReal x4553=(cj5*r00);
IkReal x4554=(cj5*r10);
IkReal x4555=(r21*sj5);
IkReal x4556=((1.0)*cj2);
IkReal x4557=(cj5*r20);
IkReal x4558=((1.0)*x4551);
IkReal x4559=((1.0)*x4552);
IkReal x4560=(sj5*x4552);
IkReal x4561=(sj5*x4551);
evalcond[0]=(((r11*x4561))+((r12*x4552))+(((-1.0)*x4554*x4558)));
evalcond[1]=(((x4552*x4555))+(((-1.0)*r22*x4558))+(((-1.0)*x4557*x4559)));
evalcond[2]=((((-1.0)*x4553*x4559))+(((-1.0)*r02*x4558))+((r01*x4560)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4558))+((r11*x4560))+(((-1.0)*x4554*x4559)));
evalcond[4]=((((-1.0)*cj1*x4556))+((x4551*x4555))+((sj1*sj2))+((r22*x4552))+(((-1.0)*x4557*x4558)));
evalcond[5]=((((-1.0)*x4553*x4558))+(((-1.0)*cj1*sj2))+((r02*x4552))+((r01*x4561))+(((-1.0)*sj1*x4556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4562=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4562);
rxp0_2=(py*r00);
rxp1_0=(r21*x4562);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4563=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4563);
rxp0_2=(py*r00);
rxp1_0=(r21*x4563);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4564=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4564);
rxp0_2=(py*r00);
rxp1_0=(r21*x4564);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4567=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x4567.valid){
continue;
}
IkReal x4565=x4567.value;
IkReal x4566=((1.0)*cj0*x4565);
cj4array[0]=((((-1.0)*cj2*sj1*x4566))+(((-1.0)*cj1*sj2*x4566)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4568=IKsin(j4);
IkReal x4569=IKcos(j4);
IkReal x4570=(r21*sj5);
IkReal x4571=((1.0)*x4569);
IkReal x4572=((1.0)*cj5*x4568);
evalcond[0]=(r12*x4568);
evalcond[1]=((((-1.0)*r12*x4571))+(((-1.0)*cj0)));
evalcond[2]=(((x4568*x4570))+(((-1.0)*r20*x4572)));
evalcond[3]=((((-1.0)*r00*x4572))+((r01*sj5*x4568)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4569*x4570))+(((-1.0)*cj5*r20*x4571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4574=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4574.valid){
continue;
}
IkReal x4573=x4574.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4573))+((cj1*cj2*x4573)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4575=IKsin(j4);
IkReal x4576=IKcos(j4);
IkReal x4577=(r01*sj5);
IkReal x4578=((1.0)*cj5*r00);
evalcond[0]=(r12*x4575);
evalcond[1]=((((-1.0)*r12*x4576))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x4575))+(((-1.0)*cj5*r20*x4575)));
evalcond[3]=((((-1.0)*x4575*x4578))+((x4575*x4577)));
evalcond[4]=((((-1.0)*x4576*x4578))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x4576*x4577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(r12,-1);
if(!x4579.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4579.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4580=IKsin(j4);
IkReal x4581=IKcos(j4);
IkReal x4582=(sj5*x4581);
IkReal x4583=(sj5*x4580);
IkReal x4584=((1.0)*cj5*x4580);
IkReal x4585=((1.0)*cj5*x4581);
evalcond[0]=(r12*x4580);
evalcond[1]=(((r21*x4583))+(((-1.0)*r20*x4584)));
evalcond[2]=((((-1.0)*r00*x4584))+((r01*x4583)));
evalcond[3]=(((r21*x4582))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x4585)));
evalcond[4]=((((-1.0)*r00*x4585))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x4582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4586=((1.0)*cj5);
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4586))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x4586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
CheckValue<IkReal> x4588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4586))+(((-1.0)*r20*sj5)))),-1);
if(!x4588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4587.value)+(((1.5707963267949)*(x4588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4589=IKsin(j4);
IkReal x4590=IKcos(j4);
IkReal x4591=(cj5*r00);
IkReal x4592=(cj5*r10);
IkReal x4593=(cj2*sj1);
IkReal x4594=(r21*sj5);
IkReal x4595=(cj5*r20);
IkReal x4596=(cj1*sj2);
IkReal x4597=((1.0)*x4590);
IkReal x4598=((1.0)*x4589);
IkReal x4599=(sj5*x4589);
IkReal x4600=(sj5*x4590);
evalcond[0]=((((-1.0)*r22*x4597))+(((-1.0)*x4595*x4598))+((x4589*x4594)));
evalcond[1]=(sj0+(((-1.0)*x4591*x4598))+(((-1.0)*r02*x4597))+((r01*x4599)));
evalcond[2]=((((-1.0)*x4592*x4598))+((r11*x4599))+(((-1.0)*r12*x4597))+(((-1.0)*cj0)));
evalcond[3]=(((x4590*x4594))+(((-1.0)*x4595*x4597))+((r22*x4589))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x4589))+((r01*x4600))+(((-1.0)*x4591*x4597))+((cj0*x4593))+((cj0*x4596)));
evalcond[5]=(((r11*x4600))+((sj0*x4593))+((sj0*x4596))+(((-1.0)*x4592*x4597))+((r12*x4589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4601=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4601.valid){
continue;
}
CheckValue<IkReal> x4602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4601.value)))+(x4602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4603=IKsin(j4);
IkReal x4604=IKcos(j4);
IkReal x4605=(cj5*r00);
IkReal x4606=(cj5*r10);
IkReal x4607=(cj2*sj1);
IkReal x4608=(r21*sj5);
IkReal x4609=(cj5*r20);
IkReal x4610=(cj1*sj2);
IkReal x4611=((1.0)*x4604);
IkReal x4612=((1.0)*x4603);
IkReal x4613=(sj5*x4603);
IkReal x4614=(sj5*x4604);
evalcond[0]=(((x4603*x4608))+(((-1.0)*x4609*x4612))+(((-1.0)*r22*x4611)));
evalcond[1]=((((-1.0)*r02*x4611))+sj0+((r01*x4613))+(((-1.0)*x4605*x4612)));
evalcond[2]=((((-1.0)*x4606*x4612))+((r11*x4613))+(((-1.0)*r12*x4611))+(((-1.0)*cj0)));
evalcond[3]=(((x4604*x4608))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4609*x4611))+((r22*x4603)));
evalcond[4]=(((cj0*x4607))+((r01*x4614))+((r02*x4603))+(((-1.0)*x4605*x4611))+((cj0*x4610)));
evalcond[5]=(((r12*x4603))+((sj0*x4610))+(((-1.0)*x4606*x4611))+((r11*x4614))+((sj0*x4607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4615=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4615.valid){
continue;
}
CheckValue<IkReal> x4616 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4615.value)))+(x4616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4617=IKsin(j4);
IkReal x4618=IKcos(j4);
IkReal x4619=(cj5*r00);
IkReal x4620=(cj5*r10);
IkReal x4621=(cj2*sj1);
IkReal x4622=(r21*sj5);
IkReal x4623=(cj5*r20);
IkReal x4624=(cj1*sj2);
IkReal x4625=((1.0)*x4618);
IkReal x4626=((1.0)*x4617);
IkReal x4627=(sj5*x4617);
IkReal x4628=(sj5*x4618);
evalcond[0]=((((-1.0)*r22*x4625))+(((-1.0)*x4623*x4626))+((x4617*x4622)));
evalcond[1]=(sj0+(((-1.0)*r02*x4625))+(((-1.0)*x4619*x4626))+((r01*x4627)));
evalcond[2]=(((r11*x4627))+(((-1.0)*x4620*x4626))+(((-1.0)*r12*x4625))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4617))+((x4618*x4622))+(((-1.0)*x4623*x4625)));
evalcond[4]=(((cj0*x4621))+((cj0*x4624))+((r02*x4617))+(((-1.0)*x4619*x4625))+((r01*x4628)));
evalcond[5]=(((r11*x4628))+((r12*x4617))+(((-1.0)*x4620*x4625))+((sj0*x4621))+((sj0*x4624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4629=((1.0)*cj5);
IkReal x4630=((1.0)*sj5);
IkReal x4631=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4631;
j0eval[1]=((IKabs(((((-1.0)*r01*x4629))+(((-1.0)*r00*x4630)))))+(IKabs(((((-1.0)*r10*x4630))+(((-1.0)*r11*x4629))))));
j0eval[2]=IKsign(x4631);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4632=r21*r21;
IkReal x4633=cj5*cj5;
IkReal x4634=(cj2*sj1);
IkReal x4635=(cj1*sj2);
IkReal x4636=(r21*sj5);
IkReal x4637=((1.0)*cj5*r20);
IkReal x4638=((((-1.0)*x4633*(r20*r20)))+(((-1.0)*x4632))+((x4632*x4633))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x4636)));
j4eval[0]=x4638;
j4eval[1]=((IKabs(((((-1.0)*x4634*x4637))+(((-1.0)*x4635*x4637))+((x4635*x4636))+((x4634*x4636)))))+(IKabs((((r22*x4635))+((r22*x4634))))));
j4eval[2]=IKsign(x4638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4639=cj1*cj1;
IkReal x4640=(cj2*sj2);
IkReal x4641=(cj1*sj1);
j0eval[0]=(x4640+x4641+(((-1.14255568581477)*cj2*x4641))+(((-2.0)*x4639*x4640))+(((-1.14255568581477)*sj2*x4639))+(((-2.0)*x4641*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.06875370968653)*py))+(((0.498058454947511)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.498058454947511)*py))+(((-2.06875370968653)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.06875370968653)*py))+(((0.498058454947511)*px))))+IKsqr(((((-0.498058454947511)*py))+(((-2.06875370968653)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.06875370968653)*py))+(((0.498058454947511)*px))), ((((-0.498058454947511)*py))+(((-2.06875370968653)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4642=IKsin(j0);
IkReal x4643=IKcos(j0);
evalcond[0]=((((-0.4569)*x4643))+(((-1.0)*px))+(((0.11)*x4642)));
evalcond[1]=((((-0.11)*x4643))+(((-0.4569)*x4642))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4644=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4644;
j4eval[1]=IKsign(x4644);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4645=((1.0)*cj5);
IkReal x4646=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4645)));
j4eval[0]=x4646;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4645)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4647=cj5*cj5;
IkReal x4648=((1.0)*r20);
IkReal x4649=(r01*r21);
IkReal x4650=(r21*sj5);
IkReal x4651=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4649))+((x4647*x4649))+((cj5*r00*x4650))+(((-1.0)*r00*x4647*x4648)));
j4eval[0]=x4651;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4650))+(((-1.0)*cj0*cj5*x4648))))));
j4eval[2]=IKsign(x4651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4652=cj5*cj5;
IkReal x4653=((1.0)*r20);
IkReal x4654=(r01*r21);
IkReal x4655=(r21*sj5);
CheckValue<IkReal> x4656=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4654))+((x4652*x4654))+((cj5*r00*x4655))+(((-1.0)*r00*x4652*x4653)))),-1);
if(!x4656.valid){
continue;
}
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4653))+((cj0*x4655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4656.value)))+(x4657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4658=IKcos(j4);
IkReal x4659=IKsin(j4);
IkReal x4660=(cj5*r00);
IkReal x4661=(cj5*r10);
IkReal x4662=(cj5*r20);
IkReal x4663=((1.0)*x4658);
IkReal x4664=((1.0)*x4659);
IkReal x4665=(sj5*x4658);
IkReal x4666=(sj5*x4659);
evalcond[0]=(((r21*x4665))+(((-1.0)*x4662*x4663))+((r22*x4659)));
evalcond[1]=(((r21*x4666))+(((-1.0)*x4662*x4664))+(((-1.0)*r22*x4663)));
evalcond[2]=(cj0+(((-1.0)*x4660*x4663))+((r01*x4665))+((r02*x4659)));
evalcond[3]=((((-1.0)*x4661*x4663))+((r12*x4659))+sj0+((r11*x4665)));
evalcond[4]=(sj0+(((-1.0)*x4660*x4664))+((r01*x4666))+(((-1.0)*r02*x4663)));
evalcond[5]=((((-1.0)*x4661*x4664))+((r11*x4666))+(((-1.0)*r12*x4663))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4667=((1.0)*cj5);
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4667)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
CheckValue<IkReal> x4669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4667)))),-1);
if(!x4669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4668.value)+(((1.5707963267949)*(x4669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4670=IKcos(j4);
IkReal x4671=IKsin(j4);
IkReal x4672=(cj5*r00);
IkReal x4673=(cj5*r10);
IkReal x4674=(cj5*r20);
IkReal x4675=((1.0)*x4670);
IkReal x4676=((1.0)*x4671);
IkReal x4677=(sj5*x4670);
IkReal x4678=(sj5*x4671);
evalcond[0]=(((r21*x4677))+(((-1.0)*x4674*x4675))+((r22*x4671)));
evalcond[1]=(((r21*x4678))+(((-1.0)*x4674*x4676))+(((-1.0)*r22*x4675)));
evalcond[2]=(((r02*x4671))+cj0+(((-1.0)*x4672*x4675))+((r01*x4677)));
evalcond[3]=(sj0+((r11*x4677))+((r12*x4671))+(((-1.0)*x4673*x4675)));
evalcond[4]=((((-1.0)*r02*x4675))+sj0+(((-1.0)*x4672*x4676))+((r01*x4678)));
evalcond[5]=(((r11*x4678))+(((-1.0)*r12*x4675))+(((-1.0)*x4673*x4676))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
CheckValue<IkReal> x4680=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4679.value)+(((1.5707963267949)*(x4680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4681=IKcos(j4);
IkReal x4682=IKsin(j4);
IkReal x4683=(cj5*r00);
IkReal x4684=(cj5*r10);
IkReal x4685=(cj5*r20);
IkReal x4686=((1.0)*x4681);
IkReal x4687=((1.0)*x4682);
IkReal x4688=(sj5*x4681);
IkReal x4689=(sj5*x4682);
evalcond[0]=(((r22*x4682))+(((-1.0)*x4685*x4686))+((r21*x4688)));
evalcond[1]=((((-1.0)*x4685*x4687))+((r21*x4689))+(((-1.0)*r22*x4686)));
evalcond[2]=(cj0+((r02*x4682))+(((-1.0)*x4683*x4686))+((r01*x4688)));
evalcond[3]=(sj0+(((-1.0)*x4684*x4686))+((r12*x4682))+((r11*x4688)));
evalcond[4]=(sj0+(((-1.0)*x4683*x4687))+(((-1.0)*r02*x4686))+((r01*x4689)));
evalcond[5]=((((-1.0)*x4684*x4687))+((r11*x4689))+(((-1.0)*cj0))+(((-1.0)*r12*x4686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4458421886709)*px))+(((-2.3341236594145)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.4458421886709)*py))+(((-2.3341236594145)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4458421886709)*px))+(((-2.3341236594145)*py))))+IKsqr(((((-8.4458421886709)*py))+(((-2.3341236594145)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4458421886709)*px))+(((-2.3341236594145)*py))), ((((-8.4458421886709)*py))+(((-2.3341236594145)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4690=IKsin(j0);
IkReal x4691=IKcos(j0);
evalcond[0]=((((-0.0304)*x4691))+(((-1.0)*px))+(((0.11)*x4690)));
evalcond[1]=((((-0.11)*x4691))+(((-0.0304)*x4690))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4692=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4692;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4693=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4693;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4694=((1.0)*cj5);
IkReal x4695=((((-1.0)*r01*x4694))+(((-1.0)*r00*sj5)));
j4eval[0]=x4695;
j4eval[1]=IKsign(x4695);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4694))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4696=((1.0)*cj5);
CheckValue<IkReal> x4697 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4696))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4697.valid){
continue;
}
CheckValue<IkReal> x4698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4696))+(((-1.0)*r00*sj5)))),-1);
if(!x4698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4697.value)+(((1.5707963267949)*(x4698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4699=IKcos(j4);
IkReal x4700=IKsin(j4);
IkReal x4701=((1.0)*cj0);
IkReal x4702=(cj5*r00);
IkReal x4703=(cj5*r10);
IkReal x4704=(cj5*r20);
IkReal x4705=((1.0)*x4699);
IkReal x4706=((1.0)*x4700);
IkReal x4707=(sj5*x4699);
IkReal x4708=(sj5*x4700);
evalcond[0]=(((r21*x4707))+(((-1.0)*x4704*x4705))+((r22*x4700)));
evalcond[1]=((((-1.0)*r22*x4705))+((r21*x4708))+(((-1.0)*x4704*x4706)));
evalcond[2]=(sj0+(((-1.0)*x4702*x4706))+(((-1.0)*r02*x4705))+((r01*x4708)));
evalcond[3]=((((-1.0)*x4702*x4705))+((r01*x4707))+((r02*x4700))+(((-1.0)*x4701)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4703*x4705))+((r11*x4707))+((r12*x4700)));
evalcond[5]=((((-1.0)*x4703*x4706))+(((-1.0)*r12*x4705))+((r11*x4708))+(((-1.0)*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4709 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4709.valid){
continue;
}
CheckValue<IkReal> x4710=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4709.value)+(((1.5707963267949)*(x4710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4711=IKcos(j4);
IkReal x4712=IKsin(j4);
IkReal x4713=((1.0)*cj0);
IkReal x4714=(cj5*r00);
IkReal x4715=(cj5*r10);
IkReal x4716=(cj5*r20);
IkReal x4717=((1.0)*x4711);
IkReal x4718=((1.0)*x4712);
IkReal x4719=(sj5*x4711);
IkReal x4720=(sj5*x4712);
evalcond[0]=(((r22*x4712))+((r21*x4719))+(((-1.0)*x4716*x4717)));
evalcond[1]=((((-1.0)*r22*x4717))+((r21*x4720))+(((-1.0)*x4716*x4718)));
evalcond[2]=((((-1.0)*r02*x4717))+sj0+(((-1.0)*x4714*x4718))+((r01*x4720)));
evalcond[3]=((((-1.0)*x4714*x4717))+((r01*x4719))+((r02*x4712))+(((-1.0)*x4713)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4715*x4717))+((r12*x4712))+((r11*x4719)));
evalcond[5]=(((r11*x4720))+(((-1.0)*r12*x4717))+(((-1.0)*x4715*x4718))+(((-1.0)*x4713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKcos(j4);
IkReal x4724=IKsin(j4);
IkReal x4725=((1.0)*cj0);
IkReal x4726=(cj5*r00);
IkReal x4727=(cj5*r10);
IkReal x4728=(cj5*r20);
IkReal x4729=((1.0)*x4723);
IkReal x4730=((1.0)*x4724);
IkReal x4731=(sj5*x4723);
IkReal x4732=(sj5*x4724);
evalcond[0]=((((-1.0)*x4728*x4729))+((r21*x4731))+((r22*x4724)));
evalcond[1]=((((-1.0)*x4728*x4730))+((r21*x4732))+(((-1.0)*r22*x4729)));
evalcond[2]=(sj0+(((-1.0)*x4726*x4730))+(((-1.0)*r02*x4729))+((r01*x4732)));
evalcond[3]=((((-1.0)*x4725))+((r02*x4724))+(((-1.0)*x4726*x4729))+((r01*x4731)));
evalcond[4]=(((r11*x4731))+(((-1.0)*sj0))+(((-1.0)*x4727*x4729))+((r12*x4724)));
evalcond[5]=(((r11*x4732))+(((-1.0)*x4725))+(((-1.0)*r12*x4729))+(((-1.0)*x4727*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4733=((1.0)*sj5);
IkReal x4734=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x4733))+(((-1.0)*r11*x4734)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4734))+(((-1.0)*r00*x4733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4733))+(((-1.0)*r11*x4734))))+IKsqr(((((-1.0)*r01*x4734))+(((-1.0)*r00*x4733))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x4733))+(((-1.0)*r11*x4734))), ((((-1.0)*r01*x4734))+(((-1.0)*r00*x4733))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4735=IKsin(j0);
IkReal x4736=IKcos(j0);
IkReal x4737=(r00*sj5);
IkReal x4738=(r10*sj5);
IkReal x4739=(cj5*r11);
IkReal x4740=(cj5*r01);
evalcond[0]=(x4740+x4736+x4737);
evalcond[1]=(x4735+x4738+x4739);
evalcond[2]=((((-0.08535)*x4740))+(((0.11)*x4735))+(((-1.0)*px))+(((-0.08535)*x4737)));
evalcond[3]=((((-1.0)*py))+(((-0.11)*x4736))+(((-0.08535)*x4738))+(((-0.08535)*x4739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4741=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4741;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4742=((1.0)*cj5);
IkReal x4743=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4742)));
j4eval[0]=x4743;
j4eval[1]=((IKabs(((((-1.0)*r10*x4742))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4744=cj5*cj5;
IkReal x4745=r01*r01;
IkReal x4746=(cj5*r00);
IkReal x4747=(r01*sj5);
IkReal x4748=((((2.0)*x4746*x4747))+(((-1.0)*(r02*r02)))+(((-1.0)*x4744*(r00*r00)))+(((-1.0)*x4745))+((x4744*x4745)));
j4eval[0]=x4748;
j4eval[1]=IKsign(x4748);
j4eval[2]=((IKabs(((((-1.0)*sj0*x4746))+((sj0*x4747)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4749=cj5*cj5;
IkReal x4750=r01*r01;
IkReal x4751=(cj5*r00);
IkReal x4752=(r01*sj5);
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign(((((2.0)*x4751*x4752))+(((-1.0)*(r02*r02)))+(((-1.0)*x4749*(r00*r00)))+((x4749*x4750))+(((-1.0)*x4750)))),-1);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal((((sj0*x4752))+(((-1.0)*sj0*x4751)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4753.value)))+(x4754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4755=IKcos(j4);
IkReal x4756=IKsin(j4);
IkReal x4757=(cj5*r00);
IkReal x4758=(r01*sj5);
IkReal x4759=(cj5*r10);
IkReal x4760=(cj5*r20);
IkReal x4761=((1.0)*x4755);
IkReal x4762=((1.0)*x4756);
IkReal x4763=(sj5*x4756);
IkReal x4764=(sj5*x4755);
evalcond[0]=(((x4755*x4758))+(((-1.0)*x4757*x4761))+((r02*x4756)));
evalcond[1]=(((r12*x4756))+(((-1.0)*x4759*x4761))+((r11*x4764)));
evalcond[2]=((((-1.0)*x4760*x4762))+(((-1.0)*r22*x4761))+((r21*x4763)));
evalcond[3]=((1.0)+(((-1.0)*x4760*x4761))+((r21*x4764))+((r22*x4756)));
evalcond[4]=(sj0+(((-1.0)*r02*x4761))+((x4756*x4758))+(((-1.0)*x4757*x4762)));
evalcond[5]=((((-1.0)*r12*x4761))+(((-1.0)*x4759*x4762))+((r11*x4763))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4765=((1.0)*cj5);
CheckValue<IkReal> x4766=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4765)))),-1);
if(!x4766.valid){
continue;
}
CheckValue<IkReal> x4767 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4765)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4766.value)))+(x4767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4768=IKcos(j4);
IkReal x4769=IKsin(j4);
IkReal x4770=(cj5*r00);
IkReal x4771=(r01*sj5);
IkReal x4772=(cj5*r10);
IkReal x4773=(cj5*r20);
IkReal x4774=((1.0)*x4768);
IkReal x4775=((1.0)*x4769);
IkReal x4776=(sj5*x4769);
IkReal x4777=(sj5*x4768);
evalcond[0]=(((r02*x4769))+((x4768*x4771))+(((-1.0)*x4770*x4774)));
evalcond[1]=(((r11*x4777))+(((-1.0)*x4772*x4774))+((r12*x4769)));
evalcond[2]=((((-1.0)*x4773*x4775))+(((-1.0)*r22*x4774))+((r21*x4776)));
evalcond[3]=((1.0)+((r22*x4769))+(((-1.0)*x4773*x4774))+((r21*x4777)));
evalcond[4]=(sj0+((x4769*x4771))+(((-1.0)*x4770*x4775))+(((-1.0)*r02*x4774)));
evalcond[5]=(((r11*x4776))+(((-1.0)*r12*x4774))+(((-1.0)*x4772*x4775))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4778 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4778.valid){
continue;
}
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4778.value)+(((1.5707963267949)*(x4779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4780=IKcos(j4);
IkReal x4781=IKsin(j4);
IkReal x4782=(cj5*r00);
IkReal x4783=(r01*sj5);
IkReal x4784=(cj5*r10);
IkReal x4785=(cj5*r20);
IkReal x4786=((1.0)*x4780);
IkReal x4787=((1.0)*x4781);
IkReal x4788=(sj5*x4781);
IkReal x4789=(sj5*x4780);
evalcond[0]=(((x4780*x4783))+((r02*x4781))+(((-1.0)*x4782*x4786)));
evalcond[1]=(((r12*x4781))+((r11*x4789))+(((-1.0)*x4784*x4786)));
evalcond[2]=((((-1.0)*r22*x4786))+(((-1.0)*x4785*x4787))+((r21*x4788)));
evalcond[3]=((1.0)+((r22*x4781))+(((-1.0)*x4785*x4786))+((r21*x4789)));
evalcond[4]=(sj0+(((-1.0)*x4782*x4787))+(((-1.0)*r02*x4786))+((x4781*x4783)));
evalcond[5]=(((r11*x4788))+(((-1.0)*x4784*x4787))+(((-1.0)*cj0))+(((-1.0)*r12*x4786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.70382833862891)*py))+(((1.91053278897623)*px))), ((((3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4790=IKsin(j0);
IkReal x4791=IKcos(j0);
evalcond[0]=((((0.21325)*x4791))+(((0.11)*x4790))+(((-1.0)*px)));
evalcond[1]=((((-0.11)*x4791))+(((0.21325)*x4790))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4792=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4792;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4793=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4793;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4794=((1.0)*cj5);
IkReal x4795=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4794)));
j4eval[0]=x4795;
j4eval[1]=IKsign(x4795);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4794))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4796=((1.0)*cj5);
CheckValue<IkReal> x4797 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4796)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4797.valid){
continue;
}
CheckValue<IkReal> x4798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4796)))),-1);
if(!x4798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4797.value)+(((1.5707963267949)*(x4798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4799=IKcos(j4);
IkReal x4800=IKsin(j4);
IkReal x4801=((1.0)*cj0);
IkReal x4802=(cj5*r00);
IkReal x4803=(cj5*r10);
IkReal x4804=(cj5*r20);
IkReal x4805=((1.0)*x4799);
IkReal x4806=((1.0)*x4800);
IkReal x4807=(sj5*x4799);
IkReal x4808=(sj5*x4800);
evalcond[0]=((((-1.0)*x4804*x4805))+((r21*x4807))+((r22*x4800)));
evalcond[1]=((((-1.0)*r22*x4805))+(((-1.0)*x4804*x4806))+((r21*x4808)));
evalcond[2]=(sj0+((r01*x4808))+(((-1.0)*x4802*x4806))+(((-1.0)*r02*x4805)));
evalcond[3]=(((r02*x4800))+((r01*x4807))+(((-1.0)*x4802*x4805))+(((-1.0)*x4801)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4803*x4805))+((r12*x4800))+((r11*x4807)));
evalcond[5]=((((-1.0)*x4803*x4806))+(((-1.0)*r12*x4805))+(((-1.0)*x4801))+((r11*x4808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4809 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4809.valid){
continue;
}
CheckValue<IkReal> x4810=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4809.value)+(((1.5707963267949)*(x4810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4811=IKcos(j4);
IkReal x4812=IKsin(j4);
IkReal x4813=((1.0)*cj0);
IkReal x4814=(cj5*r00);
IkReal x4815=(cj5*r10);
IkReal x4816=(cj5*r20);
IkReal x4817=((1.0)*x4811);
IkReal x4818=((1.0)*x4812);
IkReal x4819=(sj5*x4811);
IkReal x4820=(sj5*x4812);
evalcond[0]=(((r21*x4819))+(((-1.0)*x4816*x4817))+((r22*x4812)));
evalcond[1]=(((r21*x4820))+(((-1.0)*x4816*x4818))+(((-1.0)*r22*x4817)));
evalcond[2]=(sj0+(((-1.0)*x4814*x4818))+(((-1.0)*r02*x4817))+((r01*x4820)));
evalcond[3]=((((-1.0)*x4814*x4817))+(((-1.0)*x4813))+((r02*x4812))+((r01*x4819)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4815*x4817))+((r11*x4819))+((r12*x4812)));
evalcond[5]=((((-1.0)*x4815*x4818))+(((-1.0)*x4813))+((r11*x4820))+(((-1.0)*r12*x4817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4821=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4821.valid){
continue;
}
CheckValue<IkReal> x4822 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4821.value)))+(x4822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4823=IKcos(j4);
IkReal x4824=IKsin(j4);
IkReal x4825=((1.0)*cj0);
IkReal x4826=(cj5*r00);
IkReal x4827=(cj5*r10);
IkReal x4828=(cj5*r20);
IkReal x4829=((1.0)*x4823);
IkReal x4830=((1.0)*x4824);
IkReal x4831=(sj5*x4823);
IkReal x4832=(sj5*x4824);
evalcond[0]=(((r22*x4824))+(((-1.0)*x4828*x4829))+((r21*x4831)));
evalcond[1]=((((-1.0)*r22*x4829))+(((-1.0)*x4828*x4830))+((r21*x4832)));
evalcond[2]=(((r01*x4832))+sj0+(((-1.0)*r02*x4829))+(((-1.0)*x4826*x4830)));
evalcond[3]=(((r01*x4831))+(((-1.0)*x4826*x4829))+(((-1.0)*x4825))+((r02*x4824)));
evalcond[4]=((((-1.0)*x4827*x4829))+(((-1.0)*sj0))+((r11*x4831))+((r12*x4824)));
evalcond[5]=(((r11*x4832))+(((-1.0)*x4825))+(((-1.0)*x4827*x4830))+(((-1.0)*r12*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4833=IKsin(j0);
IkReal x4834=IKcos(j0);
IkReal x4835=(r00*sj5);
IkReal x4836=(r10*sj5);
IkReal x4837=(cj5*r11);
IkReal x4838=(cj5*r01);
evalcond[0]=((((-1.0)*x4834))+x4838+x4835);
evalcond[1]=((((-1.0)*x4833))+x4837+x4836);
evalcond[2]=((((-1.0)*px))+(((0.11)*x4833))+(((-0.08535)*x4838))+(((-0.08535)*x4835)));
evalcond[3]=((((-0.11)*x4834))+(((-1.0)*py))+(((-0.08535)*x4837))+(((-0.08535)*x4836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4839=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4839;
j4eval[1]=IKsign(x4839);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4840=((1.0)*cj5);
IkReal x4841=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4840)));
j4eval[0]=x4841;
j4eval[1]=IKsign(x4841);
j4eval[2]=((IKabs((((r01*sj5))+(((-1.0)*r00*x4840)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4842=cj5*cj5;
IkReal x4843=r01*r01;
IkReal x4844=(cj5*r00);
IkReal x4845=(r01*sj5);
IkReal x4846=(((x4842*x4843))+(((-1.0)*(r02*r02)))+(((-1.0)*x4842*(r00*r00)))+(((2.0)*x4844*x4845))+(((-1.0)*x4843)));
j4eval[0]=x4846;
j4eval[1]=IKsign(x4846);
j4eval[2]=((IKabs(((((-1.0)*sj0*x4844))+((sj0*x4845)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4847=cj5*cj5;
IkReal x4848=r01*r01;
IkReal x4849=(cj5*r00);
IkReal x4850=(r01*sj5);
CheckValue<IkReal> x4851 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x4849))+((sj0*x4850)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4851.valid){
continue;
}
CheckValue<IkReal> x4852=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x4847*x4848))+(((-1.0)*x4847*(r00*r00)))+(((-1.0)*x4848))+(((2.0)*x4849*x4850)))),-1);
if(!x4852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4851.value)+(((1.5707963267949)*(x4852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4853=IKcos(j4);
IkReal x4854=IKsin(j4);
IkReal x4855=(cj5*r00);
IkReal x4856=(r01*sj5);
IkReal x4857=(cj5*r10);
IkReal x4858=(cj5*r20);
IkReal x4859=((1.0)*x4853);
IkReal x4860=((1.0)*x4854);
IkReal x4861=(sj5*x4854);
IkReal x4862=(sj5*x4853);
evalcond[0]=(((x4853*x4856))+((r02*x4854))+(((-1.0)*x4855*x4859)));
evalcond[1]=(((r11*x4862))+((r12*x4854))+(((-1.0)*x4857*x4859)));
evalcond[2]=((((-1.0)*x4858*x4860))+(((-1.0)*r22*x4859))+((r21*x4861)));
evalcond[3]=((-1.0)+(((-1.0)*x4858*x4859))+((r22*x4854))+((r21*x4862)));
evalcond[4]=((((-1.0)*x4855*x4860))+sj0+(((-1.0)*r02*x4859))+((x4854*x4856)));
evalcond[5]=(((r11*x4861))+(((-1.0)*r12*x4859))+(((-1.0)*x4857*x4860))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4863=((1.0)*cj5);
CheckValue<IkReal> x4864 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4863))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4864.valid){
continue;
}
CheckValue<IkReal> x4865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4863)))),-1);
if(!x4865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4864.value)+(((1.5707963267949)*(x4865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4866=IKcos(j4);
IkReal x4867=IKsin(j4);
IkReal x4868=(cj5*r00);
IkReal x4869=(r01*sj5);
IkReal x4870=(cj5*r10);
IkReal x4871=(cj5*r20);
IkReal x4872=((1.0)*x4866);
IkReal x4873=((1.0)*x4867);
IkReal x4874=(sj5*x4867);
IkReal x4875=(sj5*x4866);
evalcond[0]=((((-1.0)*x4868*x4872))+((r02*x4867))+((x4866*x4869)));
evalcond[1]=(((r12*x4867))+(((-1.0)*x4870*x4872))+((r11*x4875)));
evalcond[2]=((((-1.0)*r22*x4872))+(((-1.0)*x4871*x4873))+((r21*x4874)));
evalcond[3]=((-1.0)+((r22*x4867))+(((-1.0)*x4871*x4872))+((r21*x4875)));
evalcond[4]=((((-1.0)*x4868*x4873))+sj0+((x4867*x4869))+(((-1.0)*r02*x4872)));
evalcond[5]=((((-1.0)*x4870*x4873))+(((-1.0)*r12*x4872))+((r11*x4874))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4876=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4876.value)))+(x4877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4878=IKcos(j4);
IkReal x4879=IKsin(j4);
IkReal x4880=(cj5*r00);
IkReal x4881=(r01*sj5);
IkReal x4882=(cj5*r10);
IkReal x4883=(cj5*r20);
IkReal x4884=((1.0)*x4878);
IkReal x4885=((1.0)*x4879);
IkReal x4886=(sj5*x4879);
IkReal x4887=(sj5*x4878);
evalcond[0]=(((r02*x4879))+(((-1.0)*x4880*x4884))+((x4878*x4881)));
evalcond[1]=(((r11*x4887))+(((-1.0)*x4882*x4884))+((r12*x4879)));
evalcond[2]=((((-1.0)*x4883*x4885))+(((-1.0)*r22*x4884))+((r21*x4886)));
evalcond[3]=((-1.0)+(((-1.0)*x4883*x4884))+((r22*x4879))+((r21*x4887)));
evalcond[4]=(sj0+(((-1.0)*x4880*x4885))+(((-1.0)*r02*x4884))+((x4879*x4881)));
evalcond[5]=(((r11*x4886))+(((-1.0)*r12*x4884))+(((-1.0)*x4882*x4885))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((-3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.70382833862891)*py))+(((1.91053278897623)*px))), ((((-3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4888=IKsin(j0);
IkReal x4889=IKcos(j0);
evalcond[0]=((((0.11)*x4888))+(((-1.0)*px))+(((-0.21325)*x4889)));
evalcond[1]=((((-1.0)*py))+(((-0.21325)*x4888))+(((-0.11)*x4889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4890=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4890;
j4eval[1]=IKsign(x4890);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4891=((1.0)*cj5);
IkReal x4892=((((-1.0)*r11*x4891))+(((-1.0)*r10*sj5)));
j4eval[0]=x4892;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4891)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4893=cj5*cj5;
IkReal x4894=((1.0)*r20);
IkReal x4895=(r01*r21);
IkReal x4896=(r21*sj5);
IkReal x4897=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4893*x4894))+(((-1.0)*x4895))+((cj5*r00*x4896))+((x4893*x4895)));
j4eval[0]=x4897;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4896))+(((-1.0)*cj0*cj5*x4894))))));
j4eval[2]=IKsign(x4897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4898=cj5*cj5;
IkReal x4899=((1.0)*r20);
IkReal x4900=(r01*r21);
IkReal x4901=(r21*sj5);
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4900))+(((-1.0)*r00*x4898*x4899))+((x4898*x4900))+((cj5*r00*x4901)))),-1);
if(!x4902.valid){
continue;
}
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4899))+((cj0*x4901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4902.value)))+(x4903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4904=IKcos(j4);
IkReal x4905=IKsin(j4);
IkReal x4906=(cj5*r00);
IkReal x4907=(cj5*r10);
IkReal x4908=(cj5*r20);
IkReal x4909=((1.0)*x4904);
IkReal x4910=((1.0)*x4905);
IkReal x4911=(sj5*x4904);
IkReal x4912=(sj5*x4905);
evalcond[0]=(((r21*x4911))+(((-1.0)*x4908*x4909))+((r22*x4905)));
evalcond[1]=(((r21*x4912))+(((-1.0)*x4908*x4910))+(((-1.0)*r22*x4909)));
evalcond[2]=(((r02*x4905))+cj0+(((-1.0)*x4906*x4909))+((r01*x4911)));
evalcond[3]=(sj0+(((-1.0)*x4907*x4909))+((r11*x4911))+((r12*x4905)));
evalcond[4]=(sj0+(((-1.0)*x4906*x4910))+(((-1.0)*r02*x4909))+((r01*x4912)));
evalcond[5]=((((-1.0)*r12*x4909))+(((-1.0)*x4907*x4910))+((r11*x4912))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4913=((1.0)*cj5);
CheckValue<IkReal> x4914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4913))+(((-1.0)*r10*sj5)))),-1);
if(!x4914.valid){
continue;
}
CheckValue<IkReal> x4915 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x4913))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4914.value)))+(x4915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4916=IKcos(j4);
IkReal x4917=IKsin(j4);
IkReal x4918=(cj5*r00);
IkReal x4919=(cj5*r10);
IkReal x4920=(cj5*r20);
IkReal x4921=((1.0)*x4916);
IkReal x4922=((1.0)*x4917);
IkReal x4923=(sj5*x4916);
IkReal x4924=(sj5*x4917);
evalcond[0]=(((r21*x4923))+(((-1.0)*x4920*x4921))+((r22*x4917)));
evalcond[1]=(((r21*x4924))+(((-1.0)*r22*x4921))+(((-1.0)*x4920*x4922)));
evalcond[2]=(cj0+((r02*x4917))+(((-1.0)*x4918*x4921))+((r01*x4923)));
evalcond[3]=(sj0+(((-1.0)*x4919*x4921))+((r12*x4917))+((r11*x4923)));
evalcond[4]=((((-1.0)*r02*x4921))+sj0+(((-1.0)*x4918*x4922))+((r01*x4924)));
evalcond[5]=((((-1.0)*x4919*x4922))+(((-1.0)*r12*x4921))+((r11*x4924))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4925 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4925.valid){
continue;
}
CheckValue<IkReal> x4926=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4925.value)+(((1.5707963267949)*(x4926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4927=IKcos(j4);
IkReal x4928=IKsin(j4);
IkReal x4929=(cj5*r00);
IkReal x4930=(cj5*r10);
IkReal x4931=(cj5*r20);
IkReal x4932=((1.0)*x4927);
IkReal x4933=((1.0)*x4928);
IkReal x4934=(sj5*x4927);
IkReal x4935=(sj5*x4928);
evalcond[0]=((((-1.0)*x4931*x4932))+((r22*x4928))+((r21*x4934)));
evalcond[1]=((((-1.0)*x4931*x4933))+((r21*x4935))+(((-1.0)*r22*x4932)));
evalcond[2]=(cj0+((r01*x4934))+((r02*x4928))+(((-1.0)*x4929*x4932)));
evalcond[3]=(sj0+(((-1.0)*x4930*x4932))+((r11*x4934))+((r12*x4928)));
evalcond[4]=(sj0+(((-1.0)*r02*x4932))+((r01*x4935))+(((-1.0)*x4929*x4933)));
evalcond[5]=((((-1.0)*x4930*x4933))+(((-1.0)*r12*x4932))+((r11*x4935))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06875370968653)*py))+(((0.498058454947511)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.498058454947511)*py))+(((2.06875370968653)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06875370968653)*py))+(((0.498058454947511)*px))))+IKsqr(((((-0.498058454947511)*py))+(((2.06875370968653)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06875370968653)*py))+(((0.498058454947511)*px))), ((((-0.498058454947511)*py))+(((2.06875370968653)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4936=IKsin(j0);
IkReal x4937=IKcos(j0);
evalcond[0]=((((0.11)*x4936))+(((-1.0)*px))+(((0.4569)*x4937)));
evalcond[1]=((((-0.11)*x4937))+(((-1.0)*py))+(((0.4569)*x4936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4938=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4938;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4939=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4939;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4940=((1.0)*cj5);
IkReal x4941=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4940)));
j4eval[0]=x4941;
j4eval[1]=IKsign(x4941);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4940))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4942=((1.0)*cj5);
CheckValue<IkReal> x4943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4942)))),-1);
if(!x4943.valid){
continue;
}
CheckValue<IkReal> x4944 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4942))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4943.value)))+(x4944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4945=IKcos(j4);
IkReal x4946=IKsin(j4);
IkReal x4947=((1.0)*cj0);
IkReal x4948=(cj5*r00);
IkReal x4949=(cj5*r10);
IkReal x4950=(cj5*r20);
IkReal x4951=((1.0)*x4945);
IkReal x4952=((1.0)*x4946);
IkReal x4953=(sj5*x4945);
IkReal x4954=(sj5*x4946);
evalcond[0]=((((-1.0)*x4950*x4951))+((r21*x4953))+((r22*x4946)));
evalcond[1]=((((-1.0)*r22*x4951))+(((-1.0)*x4950*x4952))+((r21*x4954)));
evalcond[2]=(sj0+(((-1.0)*r02*x4951))+(((-1.0)*x4948*x4952))+((r01*x4954)));
evalcond[3]=((((-1.0)*x4947))+((r02*x4946))+(((-1.0)*x4948*x4951))+((r01*x4953)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4946))+((r11*x4953))+(((-1.0)*x4949*x4951)));
evalcond[5]=((((-1.0)*x4947))+((r11*x4954))+(((-1.0)*r12*x4951))+(((-1.0)*x4949*x4952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4955 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4955.valid){
continue;
}
CheckValue<IkReal> x4956=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4955.value)+(((1.5707963267949)*(x4956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4957=IKcos(j4);
IkReal x4958=IKsin(j4);
IkReal x4959=((1.0)*cj0);
IkReal x4960=(cj5*r00);
IkReal x4961=(cj5*r10);
IkReal x4962=(cj5*r20);
IkReal x4963=((1.0)*x4957);
IkReal x4964=((1.0)*x4958);
IkReal x4965=(sj5*x4957);
IkReal x4966=(sj5*x4958);
evalcond[0]=(((r22*x4958))+(((-1.0)*x4962*x4963))+((r21*x4965)));
evalcond[1]=((((-1.0)*r22*x4963))+(((-1.0)*x4962*x4964))+((r21*x4966)));
evalcond[2]=((((-1.0)*x4960*x4964))+sj0+(((-1.0)*r02*x4963))+((r01*x4966)));
evalcond[3]=((((-1.0)*x4960*x4963))+(((-1.0)*x4959))+((r02*x4958))+((r01*x4965)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4958))+(((-1.0)*x4961*x4963))+((r11*x4965)));
evalcond[5]=((((-1.0)*x4959))+(((-1.0)*x4961*x4964))+((r11*x4966))+(((-1.0)*r12*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4967.value)))+(x4968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4969=IKcos(j4);
IkReal x4970=IKsin(j4);
IkReal x4971=((1.0)*cj0);
IkReal x4972=(cj5*r00);
IkReal x4973=(cj5*r10);
IkReal x4974=(cj5*r20);
IkReal x4975=((1.0)*x4969);
IkReal x4976=((1.0)*x4970);
IkReal x4977=(sj5*x4969);
IkReal x4978=(sj5*x4970);
evalcond[0]=(((r22*x4970))+((r21*x4977))+(((-1.0)*x4974*x4975)));
evalcond[1]=((((-1.0)*r22*x4975))+((r21*x4978))+(((-1.0)*x4974*x4976)));
evalcond[2]=(sj0+(((-1.0)*r02*x4975))+(((-1.0)*x4972*x4976))+((r01*x4978)));
evalcond[3]=((((-1.0)*x4971))+((r02*x4970))+(((-1.0)*x4972*x4975))+((r01*x4977)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4970))+((r11*x4977))+(((-1.0)*x4973*x4975)));
evalcond[5]=(((r11*x4978))+(((-1.0)*r12*x4975))+(((-1.0)*x4971))+(((-1.0)*x4973*x4976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4458421886709)*px))+(((2.3341236594145)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.4458421886709)*py))+(((2.3341236594145)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4458421886709)*px))+(((2.3341236594145)*py))))+IKsqr(((((-8.4458421886709)*py))+(((2.3341236594145)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4458421886709)*px))+(((2.3341236594145)*py))), ((((-8.4458421886709)*py))+(((2.3341236594145)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4979=IKsin(j0);
IkReal x4980=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.11)*x4979))+(((0.0304)*x4980)));
evalcond[1]=((((0.0304)*x4979))+(((-1.0)*py))+(((-0.11)*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4981=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4981;
j4eval[1]=IKsign(x4981);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4982=((1.0)*cj5);
IkReal x4983=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4982)));
j4eval[0]=x4983;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4982))))));
j4eval[2]=IKsign(x4983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4984=cj5*cj5;
IkReal x4985=((1.0)*r20);
IkReal x4986=(r01*r21);
IkReal x4987=(r21*sj5);
IkReal x4988=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4984*x4986))+((cj5*r00*x4987))+(((-1.0)*x4986))+(((-1.0)*r00*x4984*x4985)));
j4eval[0]=x4988;
j4eval[1]=((IKabs((((cj0*x4987))+(((-1.0)*cj0*cj5*x4985)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4989=cj5*cj5;
IkReal x4990=((1.0)*r20);
IkReal x4991=(r01*r21);
IkReal x4992=(r21*sj5);
CheckValue<IkReal> x4993=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4989*x4990))+((x4989*x4991))+(((-1.0)*x4991))+((cj5*r00*x4992)))),-1);
if(!x4993.valid){
continue;
}
CheckValue<IkReal> x4994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4990))+((cj0*x4992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4993.value)))+(x4994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4995=IKcos(j4);
IkReal x4996=IKsin(j4);
IkReal x4997=(cj5*r00);
IkReal x4998=(cj5*r10);
IkReal x4999=(cj5*r20);
IkReal x5000=((1.0)*x4995);
IkReal x5001=((1.0)*x4996);
IkReal x5002=(sj5*x4995);
IkReal x5003=(sj5*x4996);
evalcond[0]=(((r22*x4996))+(((-1.0)*x4999*x5000))+((r21*x5002)));
evalcond[1]=((((-1.0)*x4999*x5001))+((r21*x5003))+(((-1.0)*r22*x5000)));
evalcond[2]=(cj0+((r02*x4996))+((r01*x5002))+(((-1.0)*x4997*x5000)));
evalcond[3]=(sj0+((r11*x5002))+(((-1.0)*x4998*x5000))+((r12*x4996)));
evalcond[4]=(sj0+((r01*x5003))+(((-1.0)*x4997*x5001))+(((-1.0)*r02*x5000)));
evalcond[5]=(((r11*x5003))+(((-1.0)*x4998*x5001))+(((-1.0)*r12*x5000))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5004=((1.0)*cj5);
CheckValue<IkReal> x5005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5004)))),-1);
if(!x5005.valid){
continue;
}
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5004)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5005.value)))+(x5006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5007=IKcos(j4);
IkReal x5008=IKsin(j4);
IkReal x5009=(cj5*r00);
IkReal x5010=(cj5*r10);
IkReal x5011=(cj5*r20);
IkReal x5012=((1.0)*x5007);
IkReal x5013=((1.0)*x5008);
IkReal x5014=(sj5*x5007);
IkReal x5015=(sj5*x5008);
evalcond[0]=(((r21*x5014))+(((-1.0)*x5011*x5012))+((r22*x5008)));
evalcond[1]=((((-1.0)*r22*x5012))+((r21*x5015))+(((-1.0)*x5011*x5013)));
evalcond[2]=((((-1.0)*x5009*x5012))+cj0+((r02*x5008))+((r01*x5014)));
evalcond[3]=(((r12*x5008))+sj0+(((-1.0)*x5010*x5012))+((r11*x5014)));
evalcond[4]=(sj0+(((-1.0)*x5009*x5013))+(((-1.0)*r02*x5012))+((r01*x5015)));
evalcond[5]=((((-1.0)*x5010*x5013))+(((-1.0)*r12*x5012))+((r11*x5015))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5016 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5016.valid){
continue;
}
CheckValue<IkReal> x5017=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5016.value)+(((1.5707963267949)*(x5017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5018=IKcos(j4);
IkReal x5019=IKsin(j4);
IkReal x5020=(cj5*r00);
IkReal x5021=(cj5*r10);
IkReal x5022=(cj5*r20);
IkReal x5023=((1.0)*x5018);
IkReal x5024=((1.0)*x5019);
IkReal x5025=(sj5*x5018);
IkReal x5026=(sj5*x5019);
evalcond[0]=((((-1.0)*x5022*x5023))+((r22*x5019))+((r21*x5025)));
evalcond[1]=((((-1.0)*x5022*x5024))+(((-1.0)*r22*x5023))+((r21*x5026)));
evalcond[2]=(cj0+((r02*x5019))+(((-1.0)*x5020*x5023))+((r01*x5025)));
evalcond[3]=(((r11*x5025))+sj0+(((-1.0)*x5021*x5023))+((r12*x5019)));
evalcond[4]=((((-1.0)*r02*x5023))+sj0+(((-1.0)*x5020*x5024))+((r01*x5026)));
evalcond[5]=(((r11*x5026))+(((-1.0)*r12*x5023))+(((-1.0)*x5021*x5024))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5027=IKsin(j0);
IkReal x5028=IKcos(j0);
IkReal x5029=(r00*sj5);
IkReal x5030=(r10*sj5);
IkReal x5031=(cj5*r11);
IkReal x5032=(cj5*r01);
evalcond[0]=((((-1.0)*x5028))+x5032+x5029);
evalcond[1]=((((-1.0)*x5027))+x5030+x5031);
evalcond[2]=((((-0.08535)*x5032))+(((-1.0)*px))+(((-0.08535)*x5029))+(((0.11)*x5027)));
evalcond[3]=((((-0.08535)*x5030))+(((-0.08535)*x5031))+(((-1.0)*py))+(((-0.11)*x5028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5033=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5033;
j4eval[1]=IKsign(x5033);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5034=((1.0)*cj5);
IkReal x5035=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5034)));
j4eval[0]=x5035;
j4eval[1]=IKsign(x5035);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5034))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5036=cj5*cj5;
IkReal x5037=r01*r01;
IkReal x5038=(cj5*r00);
IkReal x5039=(r01*sj5);
IkReal x5040=(((x5036*x5037))+(((-1.0)*(r02*r02)))+(((-1.0)*x5037))+(((-1.0)*x5036*(r00*r00)))+(((2.0)*x5038*x5039)));
j4eval[0]=x5040;
j4eval[1]=IKsign(x5040);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5038))+((sj0*x5039)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5041=cj5*cj5;
IkReal x5042=r01*r01;
IkReal x5043=(cj5*r00);
IkReal x5044=(r01*sj5);
CheckValue<IkReal> x5045=IKPowWithIntegerCheck(IKsign(((((2.0)*x5043*x5044))+(((-1.0)*(r02*r02)))+((x5041*x5042))+(((-1.0)*x5042))+(((-1.0)*x5041*(r00*r00))))),-1);
if(!x5045.valid){
continue;
}
CheckValue<IkReal> x5046 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5043))+((sj0*x5044)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5045.value)))+(x5046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5047=IKcos(j4);
IkReal x5048=IKsin(j4);
IkReal x5049=(cj5*r00);
IkReal x5050=(r01*sj5);
IkReal x5051=(cj5*r10);
IkReal x5052=(cj5*r20);
IkReal x5053=((1.0)*x5047);
IkReal x5054=((1.0)*x5048);
IkReal x5055=(sj5*x5048);
IkReal x5056=(sj5*x5047);
evalcond[0]=(((x5047*x5050))+((r02*x5048))+(((-1.0)*x5049*x5053)));
evalcond[1]=(((r11*x5056))+((r12*x5048))+(((-1.0)*x5051*x5053)));
evalcond[2]=(((r21*x5055))+(((-1.0)*r22*x5053))+(((-1.0)*x5052*x5054)));
evalcond[3]=((-1.0)+((r21*x5056))+(((-1.0)*x5052*x5053))+((r22*x5048)));
evalcond[4]=(sj0+((x5048*x5050))+(((-1.0)*r02*x5053))+(((-1.0)*x5049*x5054)));
evalcond[5]=((((-1.0)*r12*x5053))+((r11*x5055))+(((-1.0)*cj0))+(((-1.0)*x5051*x5054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5057=((1.0)*cj5);
CheckValue<IkReal> x5058 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5057)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5058.valid){
continue;
}
CheckValue<IkReal> x5059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5057)))),-1);
if(!x5059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5058.value)+(((1.5707963267949)*(x5059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5060=IKcos(j4);
IkReal x5061=IKsin(j4);
IkReal x5062=(cj5*r00);
IkReal x5063=(r01*sj5);
IkReal x5064=(cj5*r10);
IkReal x5065=(cj5*r20);
IkReal x5066=((1.0)*x5060);
IkReal x5067=((1.0)*x5061);
IkReal x5068=(sj5*x5061);
IkReal x5069=(sj5*x5060);
evalcond[0]=(((x5060*x5063))+((r02*x5061))+(((-1.0)*x5062*x5066)));
evalcond[1]=(((r11*x5069))+((r12*x5061))+(((-1.0)*x5064*x5066)));
evalcond[2]=((((-1.0)*r22*x5066))+((r21*x5068))+(((-1.0)*x5065*x5067)));
evalcond[3]=((-1.0)+((r21*x5069))+(((-1.0)*x5065*x5066))+((r22*x5061)));
evalcond[4]=(sj0+(((-1.0)*r02*x5066))+((x5061*x5063))+(((-1.0)*x5062*x5067)));
evalcond[5]=((((-1.0)*r12*x5066))+((r11*x5068))+(((-1.0)*cj0))+(((-1.0)*x5064*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5070=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5070.valid){
continue;
}
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5070.value)))+(x5071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5072=IKcos(j4);
IkReal x5073=IKsin(j4);
IkReal x5074=(cj5*r00);
IkReal x5075=(r01*sj5);
IkReal x5076=(cj5*r10);
IkReal x5077=(cj5*r20);
IkReal x5078=((1.0)*x5072);
IkReal x5079=((1.0)*x5073);
IkReal x5080=(sj5*x5073);
IkReal x5081=(sj5*x5072);
evalcond[0]=(((r02*x5073))+(((-1.0)*x5074*x5078))+((x5072*x5075)));
evalcond[1]=(((r11*x5081))+(((-1.0)*x5076*x5078))+((r12*x5073)));
evalcond[2]=(((r21*x5080))+(((-1.0)*x5077*x5079))+(((-1.0)*r22*x5078)));
evalcond[3]=((-1.0)+((r21*x5081))+(((-1.0)*x5077*x5078))+((r22*x5073)));
evalcond[4]=((((-1.0)*r02*x5078))+sj0+((x5073*x5075))+(((-1.0)*x5074*x5079)));
evalcond[5]=(((r11*x5080))+(((-1.0)*x5076*x5079))+(((-1.0)*r12*x5078))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((-3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.70382833862891)*py))+(((1.91053278897623)*px))), ((((-3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5082=IKsin(j0);
IkReal x5083=IKcos(j0);
evalcond[0]=((((0.11)*x5082))+(((-1.0)*px))+(((-0.21325)*x5083)));
evalcond[1]=((((-0.11)*x5083))+(((-1.0)*py))+(((-0.21325)*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5084=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5084;
j4eval[1]=IKsign(x5084);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5085=((1.0)*cj5);
IkReal x5086=((((-1.0)*r11*x5085))+(((-1.0)*r10*sj5)));
j4eval[0]=x5086;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5085)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5087=cj5*cj5;
IkReal x5088=((1.0)*r20);
IkReal x5089=(r01*r21);
IkReal x5090=(r21*sj5);
IkReal x5091=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5087*x5088))+(((-1.0)*r02*r22))+(((-1.0)*x5089))+((x5087*x5089))+((cj5*r00*x5090)));
j4eval[0]=x5091;
j4eval[1]=((IKabs((((cj0*x5090))+(((-1.0)*cj0*cj5*x5088)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5092=cj5*cj5;
IkReal x5093=((1.0)*r20);
IkReal x5094=(r01*r21);
IkReal x5095=(r21*sj5);
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5095))+(((-1.0)*cj0*cj5*x5093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
CheckValue<IkReal> x5097=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5094))+(((-1.0)*r00*x5092*x5093))+((cj5*r00*x5095))+((x5092*x5094)))),-1);
if(!x5097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5096.value)+(((1.5707963267949)*(x5097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5098=IKcos(j4);
IkReal x5099=IKsin(j4);
IkReal x5100=(cj5*r00);
IkReal x5101=(cj5*r10);
IkReal x5102=(cj5*r20);
IkReal x5103=((1.0)*x5098);
IkReal x5104=((1.0)*x5099);
IkReal x5105=(sj5*x5098);
IkReal x5106=(sj5*x5099);
evalcond[0]=(((r22*x5099))+((r21*x5105))+(((-1.0)*x5102*x5103)));
evalcond[1]=((((-1.0)*r22*x5103))+((r21*x5106))+(((-1.0)*x5102*x5104)));
evalcond[2]=(((r01*x5105))+cj0+(((-1.0)*x5100*x5103))+((r02*x5099)));
evalcond[3]=(sj0+(((-1.0)*x5101*x5103))+((r12*x5099))+((r11*x5105)));
evalcond[4]=(((r01*x5106))+sj0+(((-1.0)*r02*x5103))+(((-1.0)*x5100*x5104)));
evalcond[5]=((((-1.0)*x5101*x5104))+((r11*x5106))+(((-1.0)*r12*x5103))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5107=((1.0)*cj5);
CheckValue<IkReal> x5108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5107)))),-1);
if(!x5108.valid){
continue;
}
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5107)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5108.value)))+(x5109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5110=IKcos(j4);
IkReal x5111=IKsin(j4);
IkReal x5112=(cj5*r00);
IkReal x5113=(cj5*r10);
IkReal x5114=(cj5*r20);
IkReal x5115=((1.0)*x5110);
IkReal x5116=((1.0)*x5111);
IkReal x5117=(sj5*x5110);
IkReal x5118=(sj5*x5111);
evalcond[0]=((((-1.0)*x5114*x5115))+((r21*x5117))+((r22*x5111)));
evalcond[1]=((((-1.0)*r22*x5115))+(((-1.0)*x5114*x5116))+((r21*x5118)));
evalcond[2]=((((-1.0)*x5112*x5115))+((r01*x5117))+cj0+((r02*x5111)));
evalcond[3]=(sj0+(((-1.0)*x5113*x5115))+((r11*x5117))+((r12*x5111)));
evalcond[4]=((((-1.0)*x5112*x5116))+((r01*x5118))+sj0+(((-1.0)*r02*x5115)));
evalcond[5]=((((-1.0)*x5113*x5116))+((r11*x5118))+(((-1.0)*r12*x5115))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5119 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5119.valid){
continue;
}
CheckValue<IkReal> x5120=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5119.value)+(((1.5707963267949)*(x5120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5121=IKcos(j4);
IkReal x5122=IKsin(j4);
IkReal x5123=(cj5*r00);
IkReal x5124=(cj5*r10);
IkReal x5125=(cj5*r20);
IkReal x5126=((1.0)*x5121);
IkReal x5127=((1.0)*x5122);
IkReal x5128=(sj5*x5121);
IkReal x5129=(sj5*x5122);
evalcond[0]=(((r22*x5122))+(((-1.0)*x5125*x5126))+((r21*x5128)));
evalcond[1]=((((-1.0)*x5125*x5127))+((r21*x5129))+(((-1.0)*r22*x5126)));
evalcond[2]=(cj0+((r01*x5128))+(((-1.0)*x5123*x5126))+((r02*x5122)));
evalcond[3]=((((-1.0)*x5124*x5126))+sj0+((r12*x5122))+((r11*x5128)));
evalcond[4]=(sj0+((r01*x5129))+(((-1.0)*x5123*x5127))+(((-1.0)*r02*x5126)));
evalcond[5]=((((-1.0)*x5124*x5127))+((r11*x5129))+(((-1.0)*r12*x5126))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5130=((1.0)*sj5);
IkReal x5131=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5130))+(((-1.0)*r11*x5131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5131))+(((-1.0)*r00*x5130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5130))+(((-1.0)*r11*x5131))))+IKsqr(((((-1.0)*r01*x5131))+(((-1.0)*r00*x5130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5130))+(((-1.0)*r11*x5131))), ((((-1.0)*r01*x5131))+(((-1.0)*r00*x5130))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5132=IKsin(j0);
IkReal x5133=IKcos(j0);
IkReal x5134=(r00*sj5);
IkReal x5135=(r10*sj5);
IkReal x5136=(cj5*r11);
IkReal x5137=(cj5*r01);
evalcond[0]=(x5137+x5134+x5133);
evalcond[1]=(x5136+x5135+x5132);
evalcond[2]=((((-1.0)*px))+(((0.11)*x5132))+(((-0.08535)*x5137))+(((-0.08535)*x5134)));
evalcond[3]=((((-1.0)*py))+(((-0.11)*x5133))+(((-0.08535)*x5136))+(((-0.08535)*x5135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5138=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5138;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5139=((1.0)*cj5);
IkReal x5140=((((-1.0)*r01*x5139))+(((-1.0)*r00*sj5)));
j4eval[0]=x5140;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5139))+((r11*sj5))))));
j4eval[2]=IKsign(x5140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5141=cj5*cj5;
IkReal x5142=r01*r01;
IkReal x5143=(cj5*r00);
IkReal x5144=(r01*sj5);
IkReal x5145=((((-1.0)*(r02*r02)))+(((-1.0)*x5142))+((x5141*x5142))+(((-1.0)*x5141*(r00*r00)))+(((2.0)*x5143*x5144)));
j4eval[0]=x5145;
j4eval[1]=IKsign(x5145);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5143))+((sj0*x5144)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5146=cj5*cj5;
IkReal x5147=r01*r01;
IkReal x5148=(cj5*r00);
IkReal x5149=(r01*sj5);
CheckValue<IkReal> x5150 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5148))+((sj0*x5149)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5150.valid){
continue;
}
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign(((((2.0)*x5148*x5149))+(((-1.0)*(r02*r02)))+(((-1.0)*x5146*(r00*r00)))+(((-1.0)*x5147))+((x5146*x5147)))),-1);
if(!x5151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5150.value)+(((1.5707963267949)*(x5151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5152=IKcos(j4);
IkReal x5153=IKsin(j4);
IkReal x5154=(cj5*r00);
IkReal x5155=(r01*sj5);
IkReal x5156=(cj5*r10);
IkReal x5157=(cj5*r20);
IkReal x5158=((1.0)*x5152);
IkReal x5159=((1.0)*x5153);
IkReal x5160=(sj5*x5153);
IkReal x5161=(sj5*x5152);
evalcond[0]=((((-1.0)*x5154*x5158))+((r02*x5153))+((x5152*x5155)));
evalcond[1]=(((r12*x5153))+((r11*x5161))+(((-1.0)*x5156*x5158)));
evalcond[2]=(((r21*x5160))+(((-1.0)*r22*x5158))+(((-1.0)*x5157*x5159)));
evalcond[3]=((1.0)+((r21*x5161))+((r22*x5153))+(((-1.0)*x5157*x5158)));
evalcond[4]=(((x5153*x5155))+(((-1.0)*x5154*x5159))+sj0+(((-1.0)*r02*x5158)));
evalcond[5]=((((-1.0)*r12*x5158))+((r11*x5160))+(((-1.0)*x5156*x5159))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5162=((1.0)*cj5);
CheckValue<IkReal> x5163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5162)))),-1);
if(!x5163.valid){
continue;
}
CheckValue<IkReal> x5164 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5162)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5163.value)))+(x5164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5165=IKcos(j4);
IkReal x5166=IKsin(j4);
IkReal x5167=(cj5*r00);
IkReal x5168=(r01*sj5);
IkReal x5169=(cj5*r10);
IkReal x5170=(cj5*r20);
IkReal x5171=((1.0)*x5165);
IkReal x5172=((1.0)*x5166);
IkReal x5173=(sj5*x5166);
IkReal x5174=(sj5*x5165);
evalcond[0]=(((x5165*x5168))+((r02*x5166))+(((-1.0)*x5167*x5171)));
evalcond[1]=((((-1.0)*x5169*x5171))+((r12*x5166))+((r11*x5174)));
evalcond[2]=((((-1.0)*x5170*x5172))+(((-1.0)*r22*x5171))+((r21*x5173)));
evalcond[3]=((1.0)+(((-1.0)*x5170*x5171))+((r22*x5166))+((r21*x5174)));
evalcond[4]=(sj0+(((-1.0)*r02*x5171))+((x5166*x5168))+(((-1.0)*x5167*x5172)));
evalcond[5]=((((-1.0)*x5169*x5172))+(((-1.0)*r12*x5171))+((r11*x5173))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
CheckValue<IkReal> x5176=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5175.value)+(((1.5707963267949)*(x5176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5177=IKcos(j4);
IkReal x5178=IKsin(j4);
IkReal x5179=(cj5*r00);
IkReal x5180=(r01*sj5);
IkReal x5181=(cj5*r10);
IkReal x5182=(cj5*r20);
IkReal x5183=((1.0)*x5177);
IkReal x5184=((1.0)*x5178);
IkReal x5185=(sj5*x5178);
IkReal x5186=(sj5*x5177);
evalcond[0]=(((x5177*x5180))+((r02*x5178))+(((-1.0)*x5179*x5183)));
evalcond[1]=(((r12*x5178))+((r11*x5186))+(((-1.0)*x5181*x5183)));
evalcond[2]=((((-1.0)*r22*x5183))+(((-1.0)*x5182*x5184))+((r21*x5185)));
evalcond[3]=((1.0)+(((-1.0)*x5182*x5183))+((r21*x5186))+((r22*x5178)));
evalcond[4]=(sj0+(((-1.0)*r02*x5183))+((x5178*x5180))+(((-1.0)*x5179*x5184)));
evalcond[5]=((((-1.0)*r12*x5183))+((r11*x5185))+(((-1.0)*x5181*x5184))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.70382833862891)*py))+(((1.91053278897623)*px))), ((((3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5187=IKsin(j0);
IkReal x5188=IKcos(j0);
evalcond[0]=((((0.21325)*x5188))+(((-1.0)*px))+(((0.11)*x5187)));
evalcond[1]=((((0.21325)*x5187))+(((-1.0)*py))+(((-0.11)*x5188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5189=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5189;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5190=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5190;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5191=((1.0)*cj5);
IkReal x5192=((((-1.0)*r01*x5191))+(((-1.0)*r00*sj5)));
j4eval[0]=x5192;
j4eval[1]=IKsign(x5192);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5191))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5193=((1.0)*cj5);
CheckValue<IkReal> x5194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5193))+(((-1.0)*r00*sj5)))),-1);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5193)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5194.value)))+(x5195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5196=IKcos(j4);
IkReal x5197=IKsin(j4);
IkReal x5198=((1.0)*cj0);
IkReal x5199=(cj5*r00);
IkReal x5200=(cj5*r10);
IkReal x5201=(cj5*r20);
IkReal x5202=((1.0)*x5196);
IkReal x5203=((1.0)*x5197);
IkReal x5204=(sj5*x5196);
IkReal x5205=(sj5*x5197);
evalcond[0]=((((-1.0)*x5201*x5202))+((r22*x5197))+((r21*x5204)));
evalcond[1]=((((-1.0)*x5201*x5203))+(((-1.0)*r22*x5202))+((r21*x5205)));
evalcond[2]=((((-1.0)*x5199*x5203))+(((-1.0)*r02*x5202))+sj0+((r01*x5205)));
evalcond[3]=((((-1.0)*x5199*x5202))+((r01*x5204))+((r02*x5197))+(((-1.0)*x5198)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5200*x5202))+((r11*x5204))+((r12*x5197)));
evalcond[5]=((((-1.0)*x5200*x5203))+(((-1.0)*x5198))+((r11*x5205))+(((-1.0)*r12*x5202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5206 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5206.valid){
continue;
}
CheckValue<IkReal> x5207=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5206.value)+(((1.5707963267949)*(x5207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5208=IKcos(j4);
IkReal x5209=IKsin(j4);
IkReal x5210=((1.0)*cj0);
IkReal x5211=(cj5*r00);
IkReal x5212=(cj5*r10);
IkReal x5213=(cj5*r20);
IkReal x5214=((1.0)*x5208);
IkReal x5215=((1.0)*x5209);
IkReal x5216=(sj5*x5208);
IkReal x5217=(sj5*x5209);
evalcond[0]=((((-1.0)*x5213*x5214))+((r22*x5209))+((r21*x5216)));
evalcond[1]=((((-1.0)*x5213*x5215))+(((-1.0)*r22*x5214))+((r21*x5217)));
evalcond[2]=(((r01*x5217))+sj0+(((-1.0)*x5211*x5215))+(((-1.0)*r02*x5214)));
evalcond[3]=(((r01*x5216))+(((-1.0)*x5210))+(((-1.0)*x5211*x5214))+((r02*x5209)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5212*x5214))+((r11*x5216))+((r12*x5209)));
evalcond[5]=((((-1.0)*x5212*x5215))+(((-1.0)*x5210))+((r11*x5217))+(((-1.0)*r12*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5218=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5218.valid){
continue;
}
CheckValue<IkReal> x5219 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5218.value)))+(x5219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5220=IKcos(j4);
IkReal x5221=IKsin(j4);
IkReal x5222=((1.0)*cj0);
IkReal x5223=(cj5*r00);
IkReal x5224=(cj5*r10);
IkReal x5225=(cj5*r20);
IkReal x5226=((1.0)*x5220);
IkReal x5227=((1.0)*x5221);
IkReal x5228=(sj5*x5220);
IkReal x5229=(sj5*x5221);
evalcond[0]=(((r21*x5228))+((r22*x5221))+(((-1.0)*x5225*x5226)));
evalcond[1]=(((r21*x5229))+(((-1.0)*x5225*x5227))+(((-1.0)*r22*x5226)));
evalcond[2]=((((-1.0)*x5223*x5227))+sj0+(((-1.0)*r02*x5226))+((r01*x5229)));
evalcond[3]=((((-1.0)*x5223*x5226))+((r02*x5221))+(((-1.0)*x5222))+((r01*x5228)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5224*x5226))+((r11*x5228))+((r12*x5221)));
evalcond[5]=((((-1.0)*x5224*x5227))+(((-1.0)*r12*x5226))+(((-1.0)*x5222))+((r11*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5230=cj1*cj1;
IkReal x5231=(cj1*sj2);
IkReal x5232=(cj1*sj1);
IkReal x5233=(cj5*r01);
IkReal x5234=((100.0)*py);
IkReal x5235=(cj2*sj1);
IkReal x5236=(r00*sj5);
IkReal x5237=((8.535)*cj5*r11);
IkReal x5238=(sj2*x5230);
IkReal x5239=((8.535)*r10*sj5);
CheckValue<IkReal> x5240=IKPowWithIntegerCheck(((((-24.365)*x5238))+(((-42.65)*cj2*x5238))+(((-42.65)*x5232*(cj2*cj2)))+(((-24.365)*cj2*x5232))+(((21.325)*x5232))+(((21.325)*cj2*sj2))),-1);
if(!x5240.valid){
continue;
}
CheckValue<IkReal> x5241=IKPowWithIntegerCheck((x5231+x5235),-1);
if(!x5241.valid){
continue;
}
if( IKabs(((x5240.value)*(((((-11.0)*x5233))+(((-11.0)*x5236))+((x5235*x5237))+((x5235*x5239))+((x5231*x5239))+((x5231*x5234))+((x5231*x5237))+((x5234*x5235)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5241.value)*(((((-1.0)*x5236))+(((-1.0)*x5233)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5240.value)*(((((-11.0)*x5233))+(((-11.0)*x5236))+((x5235*x5237))+((x5235*x5239))+((x5231*x5239))+((x5231*x5234))+((x5231*x5237))+((x5234*x5235))))))+IKsqr(((x5241.value)*(((((-1.0)*x5236))+(((-1.0)*x5233))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5240.value)*(((((-11.0)*x5233))+(((-11.0)*x5236))+((x5235*x5237))+((x5235*x5239))+((x5231*x5239))+((x5231*x5234))+((x5231*x5237))+((x5234*x5235))))), ((x5241.value)*(((((-1.0)*x5236))+(((-1.0)*x5233))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5242=IKcos(j0);
IkReal x5243=IKsin(j0);
IkReal x5244=(cj5*r01);
IkReal x5245=((0.21325)*sj2);
IkReal x5246=(cj5*r11);
IkReal x5247=(r00*sj5);
IkReal x5248=((0.24365)*cj1);
IkReal x5249=(r10*sj5);
IkReal x5250=(cj1*sj2);
IkReal x5251=((0.21325)*cj1*cj2);
IkReal x5252=(sj1*x5242);
IkReal x5253=(sj1*x5243);
evalcond[0]=(((cj2*x5252))+x5244+x5247+((x5242*x5250)));
evalcond[1]=(((cj2*x5253))+x5249+x5246+((x5243*x5250)));
evalcond[2]=(((x5245*x5252))+(((0.11)*x5243))+(((-1.0)*x5242*x5248))+(((-1.0)*x5242*x5251))+(((-1.0)*px))+(((-0.08535)*x5244))+(((-0.08535)*x5247)));
evalcond[3]=(((x5245*x5253))+(((-1.0)*x5243*x5248))+(((-1.0)*x5243*x5251))+(((-0.11)*x5242))+(((-1.0)*py))+(((-0.08535)*x5249))+(((-0.08535)*x5246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5254=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5254;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5255=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5255;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5256=((1.0)*cj5);
IkReal x5257=((((-1.0)*r21*x5256))+(((-1.0)*r20*sj5)));
j4eval[0]=x5257;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5256))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5256))))));
j4eval[2]=IKsign(x5257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5258=((-1.0)*r20);
IkReal x5260 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5260)==0){
continue;
}
IkReal x5259=pow(x5260,-0.5);
CheckValue<IkReal> x5261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5258),IKFAST_ATAN2_MAGTHRESH);
if(!x5261.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5261.value));
IkReal gconst115=(r21*x5259);
IkReal gconst116=(x5258*x5259);
CheckValue<IkReal> x5262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5262.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5262.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5263=((-1.0)*r20);
IkReal x5264=x5259;
CheckValue<IkReal> x5266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5263),IKFAST_ATAN2_MAGTHRESH);
if(!x5266.valid){
continue;
}
IkReal x5265=((-1.0)*(x5266.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5265;
IkReal gconst114=x5265;
IkReal gconst115=(r21*x5264);
IkReal gconst116=(x5263*x5264);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5267=((-1.0)*r20);
IkReal x5268=x5259;
CheckValue<IkReal> x5270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5267),IKFAST_ATAN2_MAGTHRESH);
if(!x5270.valid){
continue;
}
IkReal x5269=((-1.0)*(x5270.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5269;
IkReal gconst114=x5269;
IkReal gconst115=(r21*x5268);
IkReal gconst116=(x5267*x5268);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5271=((-1.0)*r20);
IkReal x5272=x5259;
CheckValue<IkReal> x5274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5271),IKFAST_ATAN2_MAGTHRESH);
if(!x5274.valid){
continue;
}
IkReal x5273=((-1.0)*(x5274.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5273;
IkReal gconst114=x5273;
IkReal gconst115=(r21*x5272);
IkReal gconst116=(x5271*x5272);
IkReal x5275=((1.0)*(r22*r22));
CheckValue<IkReal> x5279=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5275))),-1);
if(!x5279.valid){
continue;
}
IkReal x5276=x5279.value;
IkReal x5277=((1.0)*x5276);
IkReal x5278=((((-1.0)*x5277*(r21*r21*r21*r21)))+(((-1.0)*x5275))+(((-1.0)*x5277*(r20*r20*r20*r20)))+(((-2.0)*x5276*(r20*r20)*(r21*r21))));
j4eval[0]=x5278;
j4eval[1]=IKsign(x5278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5280=(cj2*sj1);
IkReal x5281=(gconst115*r21);
IkReal x5282=(cj1*sj2);
IkReal x5283=((1.0)*gconst116*r20);
CheckValue<IkReal> x5284 = IKatan2WithCheck(IkReal((((r22*x5280))+((r22*x5282)))),IkReal((((x5280*x5281))+((x5281*x5282))+(((-1.0)*x5282*x5283))+(((-1.0)*x5280*x5283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5284.valid){
continue;
}
CheckValue<IkReal> x5285=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5281))+(((-1.0)*gconst116*r20*x5283))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5281*x5281))))),-1);
if(!x5285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5284.value)+(((1.5707963267949)*(x5285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5286=IKsin(j4);
IkReal x5287=IKcos(j4);
IkReal x5288=(cj1*cj2);
IkReal x5289=((1.0)*x5287);
IkReal x5290=(gconst115*x5286);
IkReal x5291=(gconst115*x5287);
IkReal x5292=((1.0)*sj1*sj2);
IkReal x5293=((1.0)*gconst116*x5286);
evalcond[0]=((((-1.0)*r22*x5289))+((r21*x5290))+(((-1.0)*r20*x5293)));
evalcond[1]=(sj0+(((-1.0)*r00*x5293))+(((-1.0)*r02*x5289))+((r01*x5290)));
evalcond[2]=((((-1.0)*r12*x5289))+(((-1.0)*r10*x5293))+((r11*x5290))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x5286))+(((-1.0)*gconst116*r20*x5289))+((cj1*sj2))+((r21*x5291)));
evalcond[4]=((((-1.0)*gconst116*r00*x5289))+((r02*x5286))+((cj0*x5288))+((r01*x5291))+(((-1.0)*cj0*x5292)));
evalcond[5]=(((r12*x5286))+((sj0*x5288))+(((-1.0)*sj0*x5292))+(((-1.0)*gconst116*r10*x5289))+((r11*x5291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5294.value)+(((1.5707963267949)*(x5295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5296=IKsin(j4);
IkReal x5297=IKcos(j4);
IkReal x5298=(cj1*cj2);
IkReal x5299=((1.0)*x5297);
IkReal x5300=(gconst115*x5296);
IkReal x5301=(gconst115*x5297);
IkReal x5302=((1.0)*sj1*sj2);
IkReal x5303=((1.0)*gconst116*x5296);
evalcond[0]=(((r21*x5300))+(((-1.0)*r22*x5299))+(((-1.0)*r20*x5303)));
evalcond[1]=(sj0+(((-1.0)*r00*x5303))+(((-1.0)*r02*x5299))+((r01*x5300)));
evalcond[2]=((((-1.0)*r12*x5299))+(((-1.0)*r10*x5303))+((r11*x5300))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5301))+((cj2*sj1))+((r22*x5296))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5299)));
evalcond[4]=((((-1.0)*gconst116*r00*x5299))+(((-1.0)*cj0*x5302))+((r02*x5296))+((cj0*x5298))+((r01*x5301)));
evalcond[5]=(((r12*x5296))+((sj0*x5298))+(((-1.0)*gconst116*r10*x5299))+((r11*x5301))+(((-1.0)*sj0*x5302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5304=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5304.valid){
continue;
}
CheckValue<IkReal> x5305 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5304.value)))+(x5305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5306=IKsin(j4);
IkReal x5307=IKcos(j4);
IkReal x5308=(cj1*cj2);
IkReal x5309=((1.0)*x5307);
IkReal x5310=(gconst115*x5306);
IkReal x5311=(gconst115*x5307);
IkReal x5312=((1.0)*sj1*sj2);
IkReal x5313=((1.0)*gconst116*x5306);
evalcond[0]=((((-1.0)*r22*x5309))+((r21*x5310))+(((-1.0)*r20*x5313)));
evalcond[1]=(((r01*x5310))+sj0+(((-1.0)*r00*x5313))+(((-1.0)*r02*x5309)));
evalcond[2]=((((-1.0)*r12*x5309))+((r11*x5310))+(((-1.0)*cj0))+(((-1.0)*r10*x5313)));
evalcond[3]=(((cj2*sj1))+((r21*x5311))+((cj1*sj2))+((r22*x5306))+(((-1.0)*gconst116*r20*x5309)));
evalcond[4]=(((r01*x5311))+(((-1.0)*cj0*x5312))+((r02*x5306))+(((-1.0)*gconst116*r00*x5309))+((cj0*x5308)));
evalcond[5]=((((-1.0)*sj0*x5312))+((sj0*x5308))+((r12*x5306))+(((-1.0)*gconst116*r10*x5309))+((r11*x5311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5314=((-1.0)*r21);
IkReal x5316 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5316)==0){
continue;
}
IkReal x5315=pow(x5316,-0.5);
CheckValue<IkReal> x5317 = IKatan2WithCheck(IkReal(x5314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5317.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5317.value))));
IkReal gconst118=(x5314*x5315);
IkReal gconst119=((1.0)*r20*x5315);
CheckValue<IkReal> x5318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5318.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5318.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5319=((-1.0)*r21);
CheckValue<IkReal> x5322 = IKatan2WithCheck(IkReal(x5319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5322.valid){
continue;
}
IkReal x5320=((1.0)*(x5322.value));
IkReal x5321=x5315;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5320)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5320)));
IkReal gconst118=(x5319*x5321);
IkReal gconst119=((1.0)*r20*x5321);
IkReal x5323=r22*r22;
IkReal x5324=((1.0)*x5323);
CheckValue<IkReal> x5328=IKPowWithIntegerCheck(((-1.0)+x5323),-1);
if(!x5328.valid){
continue;
}
IkReal x5325=x5328.value;
if((((1.0)+(((-1.0)*x5324)))) < -0.00001)
continue;
IkReal x5326=IKsqrt(((1.0)+(((-1.0)*x5324))));
IkReal x5327=(sj0*x5325*x5326);
j4eval[0]=((IKabs((x5327+(((-1.0)*x5324*x5327)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5329=((-1.0)*r21);
CheckValue<IkReal> x5332 = IKatan2WithCheck(IkReal(x5329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5332.valid){
continue;
}
IkReal x5330=((1.0)*(x5332.value));
IkReal x5331=x5315;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5330)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5330)));
IkReal gconst118=(x5329*x5331);
IkReal gconst119=((1.0)*r20*x5331);
IkReal x5333=r22*r22;
IkReal x5334=((1.0)*x5333);
CheckValue<IkReal> x5338=IKPowWithIntegerCheck(((-1.0)+x5333),-1);
if(!x5338.valid){
continue;
}
IkReal x5335=x5338.value;
if((((1.0)+(((-1.0)*x5334)))) < -0.00001)
continue;
IkReal x5336=IKsqrt(((1.0)+(((-1.0)*x5334))));
IkReal x5337=(cj0*x5335*x5336);
j4eval[0]=((IKabs((x5337+(((-1.0)*x5334*x5337)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5339=((-1.0)*r21);
CheckValue<IkReal> x5342 = IKatan2WithCheck(IkReal(x5339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5342.valid){
continue;
}
IkReal x5340=((1.0)*(x5342.value));
IkReal x5341=x5315;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5340)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5340)));
IkReal gconst118=(x5339*x5341);
IkReal gconst119=((1.0)*r20*x5341);
IkReal x5343=r22*r22;
IkReal x5344=(cj0*r02);
IkReal x5345=(r12*sj0);
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(((-1.0)+x5343),-1);
if(!x5349.valid){
continue;
}
IkReal x5346=x5349.value;
if((((1.0)+(((-1.0)*x5343)))) < -0.00001)
continue;
IkReal x5347=IKsqrt(((1.0)+(((-1.0)*x5343))));
IkReal x5348=((1.0)*r22*x5346*x5347);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5344*x5348))+(((-1.0)*x5345*x5348)))))+(IKabs((x5344+x5345))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5350=((1.0)*gconst119);
CheckValue<IkReal> x5351 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*r10*sj0*x5350))+(((-1.0)*cj0*r00*x5350))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5351.valid){
continue;
}
CheckValue<IkReal> x5352=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5350))+(((-1.0)*gconst118*r20)))),-1);
if(!x5352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5351.value)+(((1.5707963267949)*(x5352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5353=IKsin(j4);
IkReal x5354=IKcos(j4);
IkReal x5355=(cj1*cj2);
IkReal x5356=(gconst118*r01);
IkReal x5357=(gconst119*r20);
IkReal x5358=(gconst119*r10);
IkReal x5359=(gconst119*r00);
IkReal x5360=(gconst118*r21);
IkReal x5361=(gconst118*r11);
IkReal x5362=((1.0)*cj0);
IkReal x5363=(sj1*sj2);
IkReal x5364=((1.0)*x5354);
IkReal x5365=((1.0)*x5353);
evalcond[0]=(((x5353*x5360))+(((-1.0)*r22*x5364))+(((-1.0)*x5357*x5365)));
evalcond[1]=(sj0+((x5353*x5356))+(((-1.0)*r02*x5364))+(((-1.0)*x5359*x5365)));
evalcond[2]=(((x5353*x5361))+(((-1.0)*x5358*x5365))+(((-1.0)*r12*x5364))+(((-1.0)*x5362)));
evalcond[3]=(((cj2*sj1))+((x5354*x5360))+((cj1*sj2))+((r22*x5353))+(((-1.0)*x5357*x5364)));
evalcond[4]=(((cj0*x5355))+((x5354*x5356))+(((-1.0)*x5362*x5363))+(((-1.0)*x5359*x5364))+((r02*x5353)));
evalcond[5]=(((x5354*x5361))+((sj0*x5355))+((r12*x5353))+(((-1.0)*x5358*x5364))+(((-1.0)*sj0*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5366=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5366.valid){
continue;
}
CheckValue<IkReal> x5367 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5366.value)))+(x5367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5368=IKsin(j4);
IkReal x5369=IKcos(j4);
IkReal x5370=(cj1*cj2);
IkReal x5371=(gconst118*r01);
IkReal x5372=(gconst119*r20);
IkReal x5373=(gconst119*r10);
IkReal x5374=(gconst119*r00);
IkReal x5375=(gconst118*r21);
IkReal x5376=(gconst118*r11);
IkReal x5377=((1.0)*cj0);
IkReal x5378=(sj1*sj2);
IkReal x5379=((1.0)*x5369);
IkReal x5380=((1.0)*x5368);
evalcond[0]=((((-1.0)*r22*x5379))+((x5368*x5375))+(((-1.0)*x5372*x5380)));
evalcond[1]=(sj0+((x5368*x5371))+(((-1.0)*x5374*x5380))+(((-1.0)*r02*x5379)));
evalcond[2]=(((x5368*x5376))+(((-1.0)*r12*x5379))+(((-1.0)*x5377))+(((-1.0)*x5373*x5380)));
evalcond[3]=(((r22*x5368))+((cj2*sj1))+(((-1.0)*x5372*x5379))+((x5369*x5375))+((cj1*sj2)));
evalcond[4]=(((cj0*x5370))+((r02*x5368))+((x5369*x5371))+(((-1.0)*x5374*x5379))+(((-1.0)*x5377*x5378)));
evalcond[5]=(((r12*x5368))+(((-1.0)*sj0*x5378))+((x5369*x5376))+((sj0*x5370))+(((-1.0)*x5373*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5381=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5381.valid){
continue;
}
CheckValue<IkReal> x5382 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5381.value)))+(x5382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5383=IKsin(j4);
IkReal x5384=IKcos(j4);
IkReal x5385=(cj1*cj2);
IkReal x5386=(gconst118*r01);
IkReal x5387=(gconst119*r20);
IkReal x5388=(gconst119*r10);
IkReal x5389=(gconst119*r00);
IkReal x5390=(gconst118*r21);
IkReal x5391=(gconst118*r11);
IkReal x5392=((1.0)*cj0);
IkReal x5393=(sj1*sj2);
IkReal x5394=((1.0)*x5384);
IkReal x5395=((1.0)*x5383);
evalcond[0]=(((x5383*x5390))+(((-1.0)*x5387*x5395))+(((-1.0)*r22*x5394)));
evalcond[1]=(((x5383*x5386))+sj0+(((-1.0)*r02*x5394))+(((-1.0)*x5389*x5395)));
evalcond[2]=((((-1.0)*x5388*x5395))+((x5383*x5391))+(((-1.0)*x5392))+(((-1.0)*r12*x5394)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5384*x5390))+(((-1.0)*x5387*x5394))+((r22*x5383)));
evalcond[4]=(((r02*x5383))+(((-1.0)*x5392*x5393))+(((-1.0)*x5389*x5394))+((cj0*x5385))+((x5384*x5386)));
evalcond[5]=(((sj0*x5385))+(((-1.0)*x5388*x5394))+(((-1.0)*sj0*x5393))+((x5384*x5391))+((r12*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5397 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5397)==0){
continue;
}
IkReal x5396=pow(x5397,-0.5);
CheckValue<IkReal> x5398 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5398.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5398.value));
IkReal gconst121=((-1.0)*r01*x5396);
IkReal gconst122=(r00*x5396);
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5399.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
IkReal x5400=((-1.0)*(x5402.value));
IkReal x5401=x5396;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5400;
IkReal gconst120=x5400;
IkReal gconst121=((-1.0)*r01*x5401);
IkReal gconst122=(r00*x5401);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5403=((1.0)*gconst122);
CheckValue<IkReal> x5404 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5403))+(((-1.0)*r10*sj0*x5403))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5404.valid){
continue;
}
CheckValue<IkReal> x5405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5403)))),-1);
if(!x5405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5404.value)+(((1.5707963267949)*(x5405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5406=IKsin(j4);
IkReal x5407=IKcos(j4);
IkReal x5408=(cj1*cj2);
IkReal x5409=(gconst121*r11);
IkReal x5410=(gconst122*r00);
IkReal x5411=(gconst122*r10);
IkReal x5412=(gconst122*r20);
IkReal x5413=((1.0)*cj0);
IkReal x5414=(sj1*sj2);
IkReal x5415=((1.0)*x5407);
IkReal x5416=((1.0)*x5406);
IkReal x5417=(gconst121*x5406);
IkReal x5418=(gconst121*x5407);
evalcond[0]=((((-1.0)*x5412*x5416))+(((-1.0)*r22*x5415))+((r21*x5417)));
evalcond[1]=((((-1.0)*r02*x5415))+sj0+(((-1.0)*x5410*x5416))+((r01*x5417)));
evalcond[2]=((((-1.0)*x5413))+(((-1.0)*r12*x5415))+(((-1.0)*x5411*x5416))+((x5406*x5409)));
evalcond[3]=((((-1.0)*x5412*x5415))+((cj2*sj1))+((r22*x5406))+((cj1*sj2))+((r21*x5418)));
evalcond[4]=(((r02*x5406))+(((-1.0)*x5410*x5415))+((r01*x5418))+((cj0*x5408))+(((-1.0)*x5413*x5414)));
evalcond[5]=(((r12*x5406))+(((-1.0)*sj0*x5414))+((sj0*x5408))+((x5407*x5409))+(((-1.0)*x5411*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5419 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5419.valid){
continue;
}
CheckValue<IkReal> x5420=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x5420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5419.value)+(((1.5707963267949)*(x5420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5421=IKsin(j4);
IkReal x5422=IKcos(j4);
IkReal x5423=(cj1*cj2);
IkReal x5424=(gconst121*r11);
IkReal x5425=(gconst122*r00);
IkReal x5426=(gconst122*r10);
IkReal x5427=(gconst122*r20);
IkReal x5428=((1.0)*cj0);
IkReal x5429=(sj1*sj2);
IkReal x5430=((1.0)*x5422);
IkReal x5431=((1.0)*x5421);
IkReal x5432=(gconst121*x5421);
IkReal x5433=(gconst121*x5422);
evalcond[0]=((((-1.0)*x5427*x5431))+(((-1.0)*r22*x5430))+((r21*x5432)));
evalcond[1]=(sj0+(((-1.0)*r02*x5430))+(((-1.0)*x5425*x5431))+((r01*x5432)));
evalcond[2]=((((-1.0)*x5428))+(((-1.0)*x5426*x5431))+((x5421*x5424))+(((-1.0)*r12*x5430)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5427*x5430))+((cj1*sj2))+((r22*x5421))+((r21*x5433)));
evalcond[4]=((((-1.0)*x5425*x5430))+(((-1.0)*x5428*x5429))+((r02*x5421))+((cj0*x5423))+((r01*x5433)));
evalcond[5]=((((-1.0)*x5426*x5430))+((r12*x5421))+(((-1.0)*sj0*x5429))+((x5422*x5424))+((sj0*x5423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5435 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5435)==0){
continue;
}
IkReal x5434=pow(x5435,-0.5);
CheckValue<IkReal> x5436 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5436.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5436.value))));
IkReal gconst124=((1.0)*r01*x5434);
IkReal gconst125=((-1.0)*r00*x5434);
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5437.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5440 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5440.valid){
continue;
}
IkReal x5438=((1.0)*(x5440.value));
IkReal x5439=x5434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5438)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5438)));
IkReal gconst124=((1.0)*r01*x5439);
IkReal gconst125=((-1.0)*r00*x5439);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
IkReal x5441=((1.0)*(x5443.value));
IkReal x5442=x5434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5441)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5441)));
IkReal gconst124=((1.0)*r01*x5442);
IkReal gconst125=((-1.0)*r00*x5442);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
IkReal x5444=((1.0)*(x5446.value));
IkReal x5445=x5434;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5444)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5444)));
IkReal gconst124=((1.0)*r01*x5445);
IkReal gconst125=((-1.0)*r00*x5445);
IkReal x5447=r02*r02;
IkReal x5448=(r12*sj0);
IkReal x5449=x5434;
IkReal x5450=(cj0*x5449);
j4eval[0]=((IKabs((((x5447*x5450))+((r02*x5448*x5449))+(((-1.0)*x5450)))))+(IKabs((x5448+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5451=((1.0)*gconst125);
CheckValue<IkReal> x5452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5451)))),-1);
if(!x5452.valid){
continue;
}
CheckValue<IkReal> x5453 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5451))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5451))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5452.value)))+(x5453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5454=IKsin(j4);
IkReal x5455=IKcos(j4);
IkReal x5456=(cj1*cj2);
IkReal x5457=(gconst125*r20);
IkReal x5458=(gconst124*r01);
IkReal x5459=(gconst125*r00);
IkReal x5460=(gconst125*r10);
IkReal x5461=((1.0)*cj0);
IkReal x5462=(sj1*sj2);
IkReal x5463=((1.0)*x5455);
IkReal x5464=((1.0)*x5454);
IkReal x5465=(gconst124*x5454);
IkReal x5466=(gconst124*x5455);
evalcond[0]=((((-1.0)*x5457*x5464))+((r21*x5465))+(((-1.0)*r22*x5463)));
evalcond[1]=((((-1.0)*x5459*x5464))+sj0+((x5454*x5458))+(((-1.0)*r02*x5463)));
evalcond[2]=(((r11*x5465))+(((-1.0)*r12*x5463))+(((-1.0)*x5461))+(((-1.0)*x5460*x5464)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5454))+(((-1.0)*x5457*x5463))+((r21*x5466)));
evalcond[4]=((((-1.0)*x5459*x5463))+((x5455*x5458))+(((-1.0)*x5461*x5462))+((r02*x5454))+((cj0*x5456)));
evalcond[5]=(((r12*x5454))+((r11*x5466))+(((-1.0)*sj0*x5462))+((sj0*x5456))+(((-1.0)*x5460*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5467=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5467.valid){
continue;
}
CheckValue<IkReal> x5468 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5467.value)))+(x5468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5469=IKsin(j4);
IkReal x5470=IKcos(j4);
IkReal x5471=(cj1*cj2);
IkReal x5472=(gconst125*r20);
IkReal x5473=(gconst124*r01);
IkReal x5474=(gconst125*r00);
IkReal x5475=(gconst125*r10);
IkReal x5476=((1.0)*cj0);
IkReal x5477=(sj1*sj2);
IkReal x5478=((1.0)*x5470);
IkReal x5479=((1.0)*x5469);
IkReal x5480=(gconst124*x5469);
IkReal x5481=(gconst124*x5470);
evalcond[0]=(((r21*x5480))+(((-1.0)*x5472*x5479))+(((-1.0)*r22*x5478)));
evalcond[1]=(sj0+(((-1.0)*x5474*x5479))+((x5469*x5473))+(((-1.0)*r02*x5478)));
evalcond[2]=(((r11*x5480))+(((-1.0)*x5475*x5479))+(((-1.0)*x5476))+(((-1.0)*r12*x5478)));
evalcond[3]=(((cj2*sj1))+((r22*x5469))+((cj1*sj2))+((r21*x5481))+(((-1.0)*x5472*x5478)));
evalcond[4]=((((-1.0)*x5476*x5477))+((r02*x5469))+(((-1.0)*x5474*x5478))+((x5470*x5473))+((cj0*x5471)));
evalcond[5]=(((r11*x5481))+((sj0*x5471))+(((-1.0)*x5475*x5478))+((r12*x5469))+(((-1.0)*sj0*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5482 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5482.valid){
continue;
}
CheckValue<IkReal> x5483=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5482.value)+(((1.5707963267949)*(x5483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5484=IKsin(j4);
IkReal x5485=IKcos(j4);
IkReal x5486=(cj1*cj2);
IkReal x5487=(gconst125*r20);
IkReal x5488=(gconst124*r01);
IkReal x5489=(gconst125*r00);
IkReal x5490=(gconst125*r10);
IkReal x5491=((1.0)*cj0);
IkReal x5492=(sj1*sj2);
IkReal x5493=((1.0)*x5485);
IkReal x5494=((1.0)*x5484);
IkReal x5495=(gconst124*x5484);
IkReal x5496=(gconst124*x5485);
evalcond[0]=(((r21*x5495))+(((-1.0)*r22*x5493))+(((-1.0)*x5487*x5494)));
evalcond[1]=(sj0+(((-1.0)*x5489*x5494))+((x5484*x5488))+(((-1.0)*r02*x5493)));
evalcond[2]=((((-1.0)*x5491))+(((-1.0)*r12*x5493))+((r11*x5495))+(((-1.0)*x5490*x5494)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5496))+(((-1.0)*x5487*x5493))+((r22*x5484)));
evalcond[4]=(((x5485*x5488))+(((-1.0)*x5489*x5493))+((cj0*x5486))+(((-1.0)*x5491*x5492))+((r02*x5484)));
evalcond[5]=(((r12*x5484))+((r11*x5496))+(((-1.0)*sj0*x5492))+(((-1.0)*x5490*x5493))+((sj0*x5486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5497=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5497;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5498=((1.0)*cj5);
IkReal x5499=((((-1.0)*r21*x5498))+(((-1.0)*r20*sj5)));
j4eval[0]=x5499;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5498))))));
j4eval[2]=IKsign(x5499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5500=(r01*sj5);
IkReal x5501=(cj1*sj2);
IkReal x5502=(cj2*sj1);
IkReal x5503=((1.0)*r02);
IkReal x5504=((1.0)*cj5*r00);
IkReal x5505=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5505;
j4eval[1]=((IKabs(((((-1.0)*x5502*x5504))+(((-1.0)*x5501*x5504))+((x5500*x5501))+((x5500*x5502)))))+(IKabs(((((-1.0)*x5502*x5503))+(((-1.0)*x5501*x5503))))));
j4eval[2]=IKsign(x5505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5506=(r01*sj5);
IkReal x5507=(cj1*sj2);
IkReal x5508=(cj2*sj1);
IkReal x5509=((1.0)*r02);
IkReal x5510=((1.0)*cj5*r00);
CheckValue<IkReal> x5511 = IKatan2WithCheck(IkReal(((((-1.0)*x5507*x5510))+(((-1.0)*x5508*x5510))+((x5506*x5507))+((x5506*x5508)))),IkReal(((((-1.0)*x5507*x5509))+(((-1.0)*x5508*x5509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5511.valid){
continue;
}
CheckValue<IkReal> x5512=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5511.value)+(((1.5707963267949)*(x5512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5513=IKcos(j4);
IkReal x5514=IKsin(j4);
IkReal x5515=(cj5*r00);
IkReal x5516=(cj5*r10);
IkReal x5517=(r21*sj5);
IkReal x5518=(cj5*r20);
IkReal x5519=((1.0)*x5513);
IkReal x5520=((1.0)*x5514);
IkReal x5521=(sj5*x5514);
IkReal x5522=(sj5*x5513);
evalcond[0]=(((r02*x5514))+(((-1.0)*x5515*x5519))+((r01*x5522)));
evalcond[1]=((((-1.0)*r22*x5519))+((x5514*x5517))+(((-1.0)*x5518*x5520)));
evalcond[2]=((((-1.0)*x5516*x5520))+(((-1.0)*r12*x5519))+((r11*x5521)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5519))+(((-1.0)*x5515*x5520))+((r01*x5521)));
evalcond[4]=(((cj2*sj1))+((x5513*x5517))+((cj1*sj2))+((r22*x5514))+(((-1.0)*x5518*x5519)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x5514))+((r11*x5522))+((cj1*cj2))+(((-1.0)*x5516*x5519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5523=((1.0)*cj5);
CheckValue<IkReal> x5524=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5523))+(((-1.0)*r20*sj5)))),-1);
if(!x5524.valid){
continue;
}
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5523))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5524.value)))+(x5525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5526=IKcos(j4);
IkReal x5527=IKsin(j4);
IkReal x5528=(cj5*r00);
IkReal x5529=(cj5*r10);
IkReal x5530=(r21*sj5);
IkReal x5531=(cj5*r20);
IkReal x5532=((1.0)*x5526);
IkReal x5533=((1.0)*x5527);
IkReal x5534=(sj5*x5527);
IkReal x5535=(sj5*x5526);
evalcond[0]=(((r02*x5527))+(((-1.0)*x5528*x5532))+((r01*x5535)));
evalcond[1]=((((-1.0)*r22*x5532))+((x5527*x5530))+(((-1.0)*x5531*x5533)));
evalcond[2]=(((r11*x5534))+(((-1.0)*r12*x5532))+(((-1.0)*x5529*x5533)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5532))+(((-1.0)*x5528*x5533))+((r01*x5534)));
evalcond[4]=(((cj2*sj1))+((x5526*x5530))+((r22*x5527))+((cj1*sj2))+(((-1.0)*x5531*x5532)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x5535))+((r12*x5527))+(((-1.0)*x5529*x5532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5536 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5536.valid){
continue;
}
CheckValue<IkReal> x5537=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5536.value)+(((1.5707963267949)*(x5537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5538=IKcos(j4);
IkReal x5539=IKsin(j4);
IkReal x5540=(cj5*r00);
IkReal x5541=(cj5*r10);
IkReal x5542=(r21*sj5);
IkReal x5543=(cj5*r20);
IkReal x5544=((1.0)*x5538);
IkReal x5545=((1.0)*x5539);
IkReal x5546=(sj5*x5539);
IkReal x5547=(sj5*x5538);
evalcond[0]=((((-1.0)*x5540*x5544))+((r02*x5539))+((r01*x5547)));
evalcond[1]=(((x5539*x5542))+(((-1.0)*x5543*x5545))+(((-1.0)*r22*x5544)));
evalcond[2]=((((-1.0)*x5541*x5545))+((r11*x5546))+(((-1.0)*r12*x5544)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5544))+(((-1.0)*x5540*x5545))+((r01*x5546)));
evalcond[4]=(((cj2*sj1))+((x5538*x5542))+(((-1.0)*x5543*x5544))+((cj1*sj2))+((r22*x5539)));
evalcond[5]=((((-1.0)*x5541*x5544))+(((-1.0)*sj1*sj2))+((r11*x5547))+((cj1*cj2))+((r12*x5539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5548=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5548;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5549=((1.0)*cj5);
IkReal x5550=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5549)));
j4eval[0]=x5550;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5549)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5551=cj5*cj5;
IkReal x5552=r01*r01;
IkReal x5553=(cj5*r00);
IkReal x5554=(r01*sj5);
IkReal x5555=(x5552+((x5551*(r00*r00)))+(((-1.0)*x5551*x5552))+(((-2.0)*x5553*x5554))+(r02*r02));
j4eval[0]=x5555;
j4eval[1]=IKsign(x5555);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5553))+x5554))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5556=cj5*cj5;
IkReal x5557=r01*r01;
IkReal x5558=(r01*sj5);
IkReal x5559=(cj5*r00);
CheckValue<IkReal> x5560 = IKatan2WithCheck(IkReal(((((-1.0)*x5559))+x5558)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5560.valid){
continue;
}
CheckValue<IkReal> x5561=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5558*x5559))+x5557+((x5556*(r00*r00)))+(r02*r02)+(((-1.0)*x5556*x5557)))),-1);
if(!x5561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5560.value)+(((1.5707963267949)*(x5561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5562=IKcos(j4);
IkReal x5563=IKsin(j4);
IkReal x5564=(cj5*r00);
IkReal x5565=(cj5*r10);
IkReal x5566=(r21*sj5);
IkReal x5567=(cj5*r20);
IkReal x5568=((1.0)*x5562);
IkReal x5569=((1.0)*x5563);
IkReal x5570=(sj5*x5563);
IkReal x5571=(sj5*x5562);
evalcond[0]=((((-1.0)*x5564*x5568))+((r02*x5563))+((r01*x5571)));
evalcond[1]=((((-1.0)*r22*x5568))+((x5563*x5566))+(((-1.0)*x5567*x5569)));
evalcond[2]=((((-1.0)*r12*x5568))+((r11*x5570))+(((-1.0)*x5565*x5569)));
evalcond[3]=((-1.0)+(((-1.0)*x5564*x5569))+(((-1.0)*r02*x5568))+((r01*x5570)));
evalcond[4]=(((cj2*sj1))+((x5562*x5566))+((cj1*sj2))+((r22*x5563))+(((-1.0)*x5567*x5568)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5571))+((r12*x5563))+(((-1.0)*x5565*x5568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5572=((1.0)*cj5);
CheckValue<IkReal> x5573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5572))+(((-1.0)*r10*sj5)))),-1);
if(!x5573.valid){
continue;
}
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5573.value)))+(x5574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5575=IKcos(j4);
IkReal x5576=IKsin(j4);
IkReal x5577=(cj5*r00);
IkReal x5578=(cj5*r10);
IkReal x5579=(r21*sj5);
IkReal x5580=(cj5*r20);
IkReal x5581=((1.0)*x5575);
IkReal x5582=((1.0)*x5576);
IkReal x5583=(sj5*x5576);
IkReal x5584=(sj5*x5575);
evalcond[0]=(((r02*x5576))+(((-1.0)*x5577*x5581))+((r01*x5584)));
evalcond[1]=((((-1.0)*x5580*x5582))+((x5576*x5579))+(((-1.0)*r22*x5581)));
evalcond[2]=((((-1.0)*r12*x5581))+((r11*x5583))+(((-1.0)*x5578*x5582)));
evalcond[3]=((-1.0)+(((-1.0)*x5577*x5582))+(((-1.0)*r02*x5581))+((r01*x5583)));
evalcond[4]=(((cj2*sj1))+((x5575*x5579))+((cj1*sj2))+((r22*x5576))+(((-1.0)*x5580*x5581)));
evalcond[5]=(((r11*x5584))+(((-1.0)*x5578*x5581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5585=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5585.valid){
continue;
}
CheckValue<IkReal> x5586 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5585.value)))+(x5586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5587=IKcos(j4);
IkReal x5588=IKsin(j4);
IkReal x5589=(cj5*r00);
IkReal x5590=(cj5*r10);
IkReal x5591=(r21*sj5);
IkReal x5592=(cj5*r20);
IkReal x5593=((1.0)*x5587);
IkReal x5594=((1.0)*x5588);
IkReal x5595=(sj5*x5588);
IkReal x5596=(sj5*x5587);
evalcond[0]=(((r02*x5588))+((r01*x5596))+(((-1.0)*x5589*x5593)));
evalcond[1]=((((-1.0)*x5592*x5594))+((x5588*x5591))+(((-1.0)*r22*x5593)));
evalcond[2]=((((-1.0)*r12*x5593))+(((-1.0)*x5590*x5594))+((r11*x5595)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5593))+((r01*x5595))+(((-1.0)*x5589*x5594)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5592*x5593))+((cj1*sj2))+((x5587*x5591))+((r22*x5588)));
evalcond[5]=((((-1.0)*x5590*x5593))+((r11*x5596))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5598 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5598)==0){
continue;
}
IkReal x5597=pow(x5598,-0.5);
CheckValue<IkReal> x5599 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5599.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5599.value));
IkReal gconst127=((-1.0)*r11*x5597);
IkReal gconst128=(r10*x5597);
CheckValue<IkReal> x5600 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5603 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5603.valid){
continue;
}
IkReal x5601=((-1.0)*(x5603.value));
IkReal x5602=x5597;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5601;
IkReal gconst126=x5601;
IkReal gconst127=((-1.0)*r11*x5602);
IkReal gconst128=(r10*x5602);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5604=((1.0)*gconst128);
CheckValue<IkReal> x5605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5604)))),-1);
if(!x5605.valid){
continue;
}
CheckValue<IkReal> x5606 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5604))+((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*r10*sj0*x5604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5605.value)))+(x5606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5607=IKsin(j4);
IkReal x5608=IKcos(j4);
IkReal x5609=(cj1*cj2);
IkReal x5610=(gconst127*r01);
IkReal x5611=(gconst128*r10);
IkReal x5612=(gconst128*r00);
IkReal x5613=(gconst128*r20);
IkReal x5614=((1.0)*cj0);
IkReal x5615=(sj1*sj2);
IkReal x5616=((1.0)*x5608);
IkReal x5617=((1.0)*x5607);
IkReal x5618=(gconst127*x5608);
IkReal x5619=(gconst127*x5607);
evalcond[0]=((((-1.0)*x5613*x5617))+(((-1.0)*r22*x5616))+((r21*x5619)));
evalcond[1]=((((-1.0)*x5612*x5617))+sj0+((x5607*x5610))+(((-1.0)*r02*x5616)));
evalcond[2]=((((-1.0)*r12*x5616))+((r11*x5619))+(((-1.0)*x5614))+(((-1.0)*x5611*x5617)));
evalcond[3]=((((-1.0)*x5613*x5616))+((cj2*sj1))+((cj1*sj2))+((r21*x5618))+((r22*x5607)));
evalcond[4]=(((x5608*x5610))+(((-1.0)*x5612*x5616))+((r02*x5607))+(((-1.0)*x5614*x5615))+((cj0*x5609)));
evalcond[5]=(((sj0*x5609))+((r12*x5607))+((r11*x5618))+(((-1.0)*sj0*x5615))+(((-1.0)*x5611*x5616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
CheckValue<IkReal> x5621=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5620.value)+(((1.5707963267949)*(x5621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5622=IKsin(j4);
IkReal x5623=IKcos(j4);
IkReal x5624=(cj1*cj2);
IkReal x5625=(gconst127*r01);
IkReal x5626=(gconst128*r10);
IkReal x5627=(gconst128*r00);
IkReal x5628=(gconst128*r20);
IkReal x5629=((1.0)*cj0);
IkReal x5630=(sj1*sj2);
IkReal x5631=((1.0)*x5623);
IkReal x5632=((1.0)*x5622);
IkReal x5633=(gconst127*x5623);
IkReal x5634=(gconst127*x5622);
evalcond[0]=((((-1.0)*x5628*x5632))+(((-1.0)*r22*x5631))+((r21*x5634)));
evalcond[1]=(sj0+(((-1.0)*r02*x5631))+((x5622*x5625))+(((-1.0)*x5627*x5632)));
evalcond[2]=((((-1.0)*r12*x5631))+((r11*x5634))+(((-1.0)*x5626*x5632))+(((-1.0)*x5629)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5628*x5631))+((cj1*sj2))+((r22*x5622))+((r21*x5633)));
evalcond[4]=(((cj0*x5624))+(((-1.0)*x5629*x5630))+((r02*x5622))+((x5623*x5625))+(((-1.0)*x5627*x5631)));
evalcond[5]=(((r11*x5633))+((sj0*x5624))+(((-1.0)*sj0*x5630))+((r12*x5622))+(((-1.0)*x5626*x5631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5636 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5636)==0){
continue;
}
IkReal x5635=pow(x5636,-0.5);
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5637.value))));
IkReal gconst130=((1.0)*r11*x5635);
IkReal gconst131=((-1.0)*r10*x5635);
CheckValue<IkReal> x5638 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5638.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5638.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
IkReal x5639=((1.0)*(x5641.value));
IkReal x5640=x5635;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5639)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5639)));
IkReal gconst130=((1.0)*r11*x5640);
IkReal gconst131=((-1.0)*r10*x5640);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
IkReal x5642=((1.0)*(x5644.value));
IkReal x5643=x5635;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5642)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5642)));
IkReal gconst130=((1.0)*r11*x5643);
IkReal gconst131=((-1.0)*r10*x5643);
IkReal x5645=r12*r12;
IkReal x5646=(cj0*r02);
IkReal x5647=x5635;
IkReal x5648=(sj0*x5647);
j4eval[0]=((IKabs((((r12*x5646*x5647))+((x5645*x5648))+(((-1.0)*x5648)))))+(IKabs((x5646+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5651 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5651.valid){
continue;
}
IkReal x5649=((1.0)*(x5651.value));
IkReal x5650=x5635;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5649)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5649)));
IkReal gconst130=((1.0)*r11*x5650);
IkReal gconst131=((-1.0)*r10*x5650);
IkReal x5652=(cj1*sj2);
IkReal x5653=(cj2*sj1);
IkReal x5654=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5660=IKPowWithIntegerCheck(x5654,-1);
if(!x5660.valid){
continue;
}
IkReal x5655=x5660.value;
IkReal x5656=((1.0)*x5655);
IkReal x5657=x5635;
IkReal x5658=(r12*r22*x5657);
IkReal x5659=((((-2.0)*r10*r11*r20*r21*x5655))+(((-1.0)*x5656*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5656*(r11*r11)*(r21*r21))));
j4eval[0]=x5659;
j4eval[1]=((IKabs((((r22*x5652))+((r22*x5653)))))+(IKabs((((x5652*x5658))+((x5653*x5658))))));
j4eval[2]=IKsign(x5659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5661=(cj2*sj1);
IkReal x5662=(cj1*sj2);
IkReal x5663=(gconst130*r21);
IkReal x5664=((1.0)*gconst131*r20);
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal((((r22*x5662))+((r22*x5661)))),IkReal(((((-1.0)*x5662*x5664))+((x5661*x5663))+((x5662*x5663))+(((-1.0)*x5661*x5664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst131*r20*x5663))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst131*r20*x5664))+(((-1.0)*(x5663*x5663))))),-1);
if(!x5666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5665.value)+(((1.5707963267949)*(x5666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5667=IKsin(j4);
IkReal x5668=IKcos(j4);
IkReal x5669=(cj1*cj2);
IkReal x5670=(gconst131*r10);
IkReal x5671=(gconst130*r11);
IkReal x5672=(gconst131*r20);
IkReal x5673=(gconst131*r00);
IkReal x5674=((1.0)*cj0);
IkReal x5675=(sj1*sj2);
IkReal x5676=((1.0)*x5668);
IkReal x5677=((1.0)*x5667);
IkReal x5678=(gconst130*x5668);
IkReal x5679=(gconst130*x5667);
evalcond[0]=((((-1.0)*x5672*x5677))+(((-1.0)*r22*x5676))+((r21*x5679)));
evalcond[1]=(sj0+((r01*x5679))+(((-1.0)*x5673*x5677))+(((-1.0)*r02*x5676)));
evalcond[2]=((((-1.0)*x5670*x5677))+(((-1.0)*r12*x5676))+((x5667*x5671))+(((-1.0)*x5674)));
evalcond[3]=((((-1.0)*x5672*x5676))+((cj2*sj1))+((r22*x5667))+((cj1*sj2))+((r21*x5678)));
evalcond[4]=(((r02*x5667))+((r01*x5678))+(((-1.0)*x5673*x5676))+(((-1.0)*x5674*x5675))+((cj0*x5669)));
evalcond[5]=(((x5668*x5671))+(((-1.0)*x5670*x5676))+((sj0*x5669))+((r12*x5667))+(((-1.0)*sj0*x5675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5680=((1.0)*gconst131);
CheckValue<IkReal> x5681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x5680)))),-1);
if(!x5681.valid){
continue;
}
CheckValue<IkReal> x5682 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*cj0*r00*x5680))+((gconst130*r11*sj0))+(((-1.0)*r10*sj0*x5680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5681.value)))+(x5682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5683=IKsin(j4);
IkReal x5684=IKcos(j4);
IkReal x5685=(cj1*cj2);
IkReal x5686=(gconst131*r10);
IkReal x5687=(gconst130*r11);
IkReal x5688=(gconst131*r20);
IkReal x5689=(gconst131*r00);
IkReal x5690=((1.0)*cj0);
IkReal x5691=(sj1*sj2);
IkReal x5692=((1.0)*x5684);
IkReal x5693=((1.0)*x5683);
IkReal x5694=(gconst130*x5684);
IkReal x5695=(gconst130*x5683);
evalcond[0]=((((-1.0)*r22*x5692))+(((-1.0)*x5688*x5693))+((r21*x5695)));
evalcond[1]=(sj0+(((-1.0)*r02*x5692))+(((-1.0)*x5689*x5693))+((r01*x5695)));
evalcond[2]=((((-1.0)*x5686*x5693))+(((-1.0)*x5690))+((x5683*x5687))+(((-1.0)*r12*x5692)));
evalcond[3]=(((cj2*sj1))+((r22*x5683))+((cj1*sj2))+(((-1.0)*x5688*x5692))+((r21*x5694)));
evalcond[4]=((((-1.0)*x5690*x5691))+((r02*x5683))+(((-1.0)*x5689*x5692))+((cj0*x5685))+((r01*x5694)));
evalcond[5]=((((-1.0)*x5686*x5692))+((x5684*x5687))+((sj0*x5685))+((r12*x5683))+(((-1.0)*sj0*x5691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5696=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5696.valid){
continue;
}
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5696.value)))+(x5697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5698=IKsin(j4);
IkReal x5699=IKcos(j4);
IkReal x5700=(cj1*cj2);
IkReal x5701=(gconst131*r10);
IkReal x5702=(gconst130*r11);
IkReal x5703=(gconst131*r20);
IkReal x5704=(gconst131*r00);
IkReal x5705=((1.0)*cj0);
IkReal x5706=(sj1*sj2);
IkReal x5707=((1.0)*x5699);
IkReal x5708=((1.0)*x5698);
IkReal x5709=(gconst130*x5699);
IkReal x5710=(gconst130*x5698);
evalcond[0]=((((-1.0)*r22*x5707))+(((-1.0)*x5703*x5708))+((r21*x5710)));
evalcond[1]=(sj0+(((-1.0)*x5704*x5708))+(((-1.0)*r02*x5707))+((r01*x5710)));
evalcond[2]=((((-1.0)*r12*x5707))+(((-1.0)*x5701*x5708))+((x5698*x5702))+(((-1.0)*x5705)));
evalcond[3]=(((cj2*sj1))+((r22*x5698))+((cj1*sj2))+(((-1.0)*x5703*x5707))+((r21*x5709)));
evalcond[4]=(((r02*x5698))+(((-1.0)*x5704*x5707))+((r01*x5709))+(((-1.0)*x5705*x5706))+((cj0*x5700)));
evalcond[5]=(((sj0*x5700))+(((-1.0)*x5701*x5707))+(((-1.0)*sj0*x5706))+((r12*x5698))+((x5699*x5702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5711=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5711;
j4eval[1]=IKsign(x5711);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5712=((1.0)*cj5);
IkReal x5713=((((-1.0)*r21*x5712))+(((-1.0)*r20*sj5)));
j4eval[0]=x5713;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5712))+((r01*sj5))))));
j4eval[2]=IKsign(x5713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5714=cj5*cj5;
IkReal x5715=r11*r11;
IkReal x5716=(r11*sj5);
IkReal x5717=(cj5*r10);
IkReal x5718=((r12*r12)+(((-2.0)*x5716*x5717))+((x5714*(r10*r10)))+(((-1.0)*x5714*x5715))+x5715);
j4eval[0]=x5718;
j4eval[1]=IKsign(x5718);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5717))+x5716))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5719=cj5*cj5;
IkReal x5720=r11*r11;
IkReal x5721=(cj5*r10);
IkReal x5722=(r11*sj5);
CheckValue<IkReal> x5723=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5719*x5720))+((x5719*(r10*r10)))+x5720+(((-2.0)*x5721*x5722)))),-1);
if(!x5723.valid){
continue;
}
CheckValue<IkReal> x5724 = IKatan2WithCheck(IkReal(((((-1.0)*x5721))+x5722)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5723.value)))+(x5724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5725=IKcos(j4);
IkReal x5726=IKsin(j4);
IkReal x5727=(cj5*r00);
IkReal x5728=(cj5*r10);
IkReal x5729=(r21*sj5);
IkReal x5730=(cj5*r20);
IkReal x5731=((1.0)*x5725);
IkReal x5732=((1.0)*x5726);
IkReal x5733=(sj5*x5726);
IkReal x5734=(sj5*x5725);
evalcond[0]=(((r11*x5734))+(((-1.0)*x5728*x5731))+((r12*x5726)));
evalcond[1]=(((x5726*x5729))+(((-1.0)*x5730*x5732))+(((-1.0)*r22*x5731)));
evalcond[2]=(((r01*x5733))+(((-1.0)*r02*x5731))+(((-1.0)*x5727*x5732)));
evalcond[3]=((-1.0)+((r11*x5733))+(((-1.0)*x5728*x5732))+(((-1.0)*r12*x5731)));
evalcond[4]=(((cj2*sj1))+((x5725*x5729))+((cj1*sj2))+(((-1.0)*x5730*x5731))+((r22*x5726)));
evalcond[5]=(((r01*x5734))+(((-1.0)*sj1*sj2))+(((-1.0)*x5727*x5731))+((r02*x5726))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5735=((1.0)*cj5);
CheckValue<IkReal> x5736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5735))+(((-1.0)*r20*sj5)))),-1);
if(!x5736.valid){
continue;
}
CheckValue<IkReal> x5737 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5736.value)))+(x5737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5738=IKcos(j4);
IkReal x5739=IKsin(j4);
IkReal x5740=(cj5*r00);
IkReal x5741=(cj5*r10);
IkReal x5742=(r21*sj5);
IkReal x5743=(cj5*r20);
IkReal x5744=((1.0)*x5738);
IkReal x5745=((1.0)*x5739);
IkReal x5746=(sj5*x5739);
IkReal x5747=(sj5*x5738);
evalcond[0]=(((r11*x5747))+((r12*x5739))+(((-1.0)*x5741*x5744)));
evalcond[1]=((((-1.0)*r22*x5744))+(((-1.0)*x5743*x5745))+((x5739*x5742)));
evalcond[2]=(((r01*x5746))+(((-1.0)*r02*x5744))+(((-1.0)*x5740*x5745)));
evalcond[3]=((-1.0)+((r11*x5746))+(((-1.0)*x5741*x5745))+(((-1.0)*r12*x5744)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5738*x5742))+(((-1.0)*x5743*x5744))+((r22*x5739)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x5747))+(((-1.0)*x5740*x5744))+((r02*x5739))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
CheckValue<IkReal> x5749=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5748.value)+(((1.5707963267949)*(x5749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5750=IKcos(j4);
IkReal x5751=IKsin(j4);
IkReal x5752=(cj5*r00);
IkReal x5753=(cj5*r10);
IkReal x5754=(r21*sj5);
IkReal x5755=(cj5*r20);
IkReal x5756=((1.0)*x5750);
IkReal x5757=((1.0)*x5751);
IkReal x5758=(sj5*x5751);
IkReal x5759=(sj5*x5750);
evalcond[0]=((((-1.0)*x5753*x5756))+((r11*x5759))+((r12*x5751)));
evalcond[1]=((((-1.0)*r22*x5756))+((x5751*x5754))+(((-1.0)*x5755*x5757)));
evalcond[2]=((((-1.0)*x5752*x5757))+((r01*x5758))+(((-1.0)*r02*x5756)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5756))+(((-1.0)*x5753*x5757))+((r11*x5758)));
evalcond[4]=(((x5750*x5754))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5755*x5756))+((r22*x5751)));
evalcond[5]=((((-1.0)*x5752*x5756))+(((-1.0)*sj1*sj2))+((r01*x5759))+((cj1*cj2))+((r02*x5751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5760=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5760;
j4eval[1]=IKsign(x5760);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5761=((1.0)*cj5);
IkReal x5762=((((-1.0)*r01*x5761))+(((-1.0)*r00*sj5)));
j4eval[0]=x5762;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5761))+((r21*sj5))))));
j4eval[2]=IKsign(x5762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5763=cj5*cj5;
IkReal x5764=r11*r11;
IkReal x5765=(cj5*r10);
IkReal x5766=(r11*sj5);
IkReal x5767=((((2.0)*x5765*x5766))+(((-1.0)*(r12*r12)))+(((-1.0)*x5764))+((x5763*x5764))+(((-1.0)*x5763*(r10*r10))));
j4eval[0]=x5767;
j4eval[1]=IKsign(x5767);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5765))+x5766))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5768=cj5*cj5;
IkReal x5769=r11*r11;
IkReal x5770=(cj5*r10);
IkReal x5771=(r11*sj5);
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal(((((-1.0)*x5770))+x5771)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
CheckValue<IkReal> x5773=IKPowWithIntegerCheck(IKsign(((((2.0)*x5770*x5771))+(((-1.0)*x5768*(r10*r10)))+(((-1.0)*(r12*r12)))+((x5768*x5769))+(((-1.0)*x5769)))),-1);
if(!x5773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5772.value)+(((1.5707963267949)*(x5773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5774=IKcos(j4);
IkReal x5775=IKsin(j4);
IkReal x5776=(cj5*r00);
IkReal x5777=(cj5*r10);
IkReal x5778=(r21*sj5);
IkReal x5779=(cj5*r20);
IkReal x5780=((1.0)*x5774);
IkReal x5781=((1.0)*x5775);
IkReal x5782=(sj5*x5775);
IkReal x5783=(sj5*x5774);
evalcond[0]=(((r11*x5783))+(((-1.0)*x5777*x5780))+((r12*x5775)));
evalcond[1]=((((-1.0)*x5779*x5781))+((x5775*x5778))+(((-1.0)*r22*x5780)));
evalcond[2]=(((r01*x5782))+(((-1.0)*x5776*x5781))+(((-1.0)*r02*x5780)));
evalcond[3]=((1.0)+((r11*x5782))+(((-1.0)*x5777*x5781))+(((-1.0)*r12*x5780)));
evalcond[4]=(((cj2*sj1))+((x5774*x5778))+((cj1*sj2))+((r22*x5775))+(((-1.0)*x5779*x5780)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5783))+(((-1.0)*x5776*x5780))+((r02*x5775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5784=((1.0)*cj5);
CheckValue<IkReal> x5785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5784)))),-1);
if(!x5785.valid){
continue;
}
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5784))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5785.value)))+(x5786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5787=IKcos(j4);
IkReal x5788=IKsin(j4);
IkReal x5789=(cj5*r00);
IkReal x5790=(cj5*r10);
IkReal x5791=(r21*sj5);
IkReal x5792=(cj5*r20);
IkReal x5793=((1.0)*x5787);
IkReal x5794=((1.0)*x5788);
IkReal x5795=(sj5*x5788);
IkReal x5796=(sj5*x5787);
evalcond[0]=(((r12*x5788))+((r11*x5796))+(((-1.0)*x5790*x5793)));
evalcond[1]=(((x5788*x5791))+(((-1.0)*x5792*x5794))+(((-1.0)*r22*x5793)));
evalcond[2]=(((r01*x5795))+(((-1.0)*x5789*x5794))+(((-1.0)*r02*x5793)));
evalcond[3]=((1.0)+((r11*x5795))+(((-1.0)*x5790*x5794))+(((-1.0)*r12*x5793)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5792*x5793))+((cj1*sj2))+((r22*x5788))+((x5787*x5791)));
evalcond[5]=(((r01*x5796))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5789*x5793))+((r02*x5788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5797.value)))+(x5798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKcos(j4);
IkReal x5800=IKsin(j4);
IkReal x5801=(cj5*r00);
IkReal x5802=(cj5*r10);
IkReal x5803=(r21*sj5);
IkReal x5804=(cj5*r20);
IkReal x5805=((1.0)*x5799);
IkReal x5806=((1.0)*x5800);
IkReal x5807=(sj5*x5800);
IkReal x5808=(sj5*x5799);
evalcond[0]=((((-1.0)*x5802*x5805))+((r11*x5808))+((r12*x5800)));
evalcond[1]=(((x5800*x5803))+(((-1.0)*x5804*x5806))+(((-1.0)*r22*x5805)));
evalcond[2]=(((r01*x5807))+(((-1.0)*r02*x5805))+(((-1.0)*x5801*x5806)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5805))+(((-1.0)*x5802*x5806))+((r11*x5807)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5804*x5805))+((cj1*sj2))+((x5799*x5803))+((r22*x5800)));
evalcond[5]=(((r01*x5808))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5800))+(((-1.0)*x5801*x5805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5809=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5809);
rxp0_2=(py*r00);
rxp1_0=(r21*x5809);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5810=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5810);
rxp0_2=(py*r00);
rxp1_0=(r21*x5810);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5811=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5811);
rxp0_2=(py*r00);
rxp1_0=(r21*x5811);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5814=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5814.valid){
continue;
}
IkReal x5812=x5814.value;
IkReal x5813=(cj0*x5812);
cj4array[0]=(((sj1*sj2*x5813))+(((-1.0)*cj1*cj2*x5813)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5815=IKsin(j4);
IkReal x5816=IKcos(j4);
IkReal x5817=(r21*sj5);
IkReal x5818=((1.0)*x5816);
IkReal x5819=((1.0)*cj5*x5815);
evalcond[0]=(r12*x5815);
evalcond[1]=((((-1.0)*r12*x5818))+(((-1.0)*cj0)));
evalcond[2]=(((x5815*x5817))+(((-1.0)*r20*x5819)));
evalcond[3]=(((r01*sj5*x5815))+(((-1.0)*r00*x5819)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5816*x5817))+(((-1.0)*cj5*r20*x5818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5822=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5822.valid){
continue;
}
IkReal x5820=x5822.value;
IkReal x5821=((1.0)*x5820);
cj4array[0]=((((-1.0)*cj1*sj2*x5821))+(((-1.0)*cj2*sj1*x5821)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5823=IKsin(j4);
IkReal x5824=IKcos(j4);
IkReal x5825=((1.0)*cj0);
IkReal x5826=(r01*sj5);
IkReal x5827=((1.0)*cj5*r00);
evalcond[0]=(r12*x5823);
evalcond[1]=((((-1.0)*x5825))+(((-1.0)*r12*x5824)));
evalcond[2]=(((r21*sj5*x5823))+(((-1.0)*cj5*r20*x5823)));
evalcond[3]=((((-1.0)*x5823*x5827))+((x5823*x5826)));
evalcond[4]=((((-1.0)*sj1*sj2*x5825))+((cj0*cj1*cj2))+(((-1.0)*x5824*x5827))+((x5824*x5826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5828=IKPowWithIntegerCheck(r12,-1);
if(!x5828.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5828.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5829=IKsin(j4);
IkReal x5830=IKcos(j4);
IkReal x5831=((1.0)*cj5*r00);
IkReal x5832=(sj5*x5830);
IkReal x5833=(sj5*x5829);
IkReal x5834=((1.0)*cj5*r20);
evalcond[0]=(r12*x5829);
evalcond[1]=(((r21*x5833))+(((-1.0)*x5829*x5834)));
evalcond[2]=(((r01*x5833))+(((-1.0)*x5829*x5831)));
evalcond[3]=(((r21*x5832))+((cj2*sj1))+(((-1.0)*x5830*x5834))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5830*x5831))+(((-1.0)*cj0*sj1*sj2))+((r01*x5832))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5835=((1.0)*cj5);
CheckValue<IkReal> x5836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5835))+(((-1.0)*r20*sj5)))),-1);
if(!x5836.valid){
continue;
}
CheckValue<IkReal> x5837 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x5835))+(((-1.0)*r10*sj0*x5835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5836.value)))+(x5837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5838=IKsin(j4);
IkReal x5839=IKcos(j4);
IkReal x5840=(cj5*r00);
IkReal x5841=(cj1*cj2);
IkReal x5842=(cj5*r10);
IkReal x5843=(r21*sj5);
IkReal x5844=(cj5*r20);
IkReal x5845=((1.0)*x5839);
IkReal x5846=((1.0)*x5838);
IkReal x5847=(sj5*x5838);
IkReal x5848=(sj5*x5839);
IkReal x5849=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5844*x5846))+(((-1.0)*r22*x5845))+((x5838*x5843)));
evalcond[1]=(sj0+(((-1.0)*r02*x5845))+(((-1.0)*x5840*x5846))+((r01*x5847)));
evalcond[2]=(((r11*x5847))+(((-1.0)*x5842*x5846))+(((-1.0)*r12*x5845))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5844*x5845))+((x5839*x5843))+((r22*x5838)));
evalcond[4]=(((r02*x5838))+(((-1.0)*x5840*x5845))+((r01*x5848))+((cj0*x5841))+(((-1.0)*cj0*x5849)));
evalcond[5]=(((r11*x5848))+((r12*x5838))+((sj0*x5841))+(((-1.0)*x5842*x5845))+(((-1.0)*sj0*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5850=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5850.valid){
continue;
}
CheckValue<IkReal> x5851 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5850.value)))+(x5851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5852=IKsin(j4);
IkReal x5853=IKcos(j4);
IkReal x5854=(cj5*r00);
IkReal x5855=(cj1*cj2);
IkReal x5856=(cj5*r10);
IkReal x5857=(r21*sj5);
IkReal x5858=(cj5*r20);
IkReal x5859=((1.0)*x5853);
IkReal x5860=((1.0)*x5852);
IkReal x5861=(sj5*x5852);
IkReal x5862=(sj5*x5853);
IkReal x5863=((1.0)*sj1*sj2);
evalcond[0]=(((x5852*x5857))+(((-1.0)*x5858*x5860))+(((-1.0)*r22*x5859)));
evalcond[1]=(sj0+(((-1.0)*x5854*x5860))+(((-1.0)*r02*x5859))+((r01*x5861)));
evalcond[2]=((((-1.0)*r12*x5859))+((r11*x5861))+(((-1.0)*x5856*x5860))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5858*x5859))+((cj1*sj2))+((r22*x5852))+((x5853*x5857)));
evalcond[4]=((((-1.0)*cj0*x5863))+(((-1.0)*x5854*x5859))+((r02*x5852))+((cj0*x5855))+((r01*x5862)));
evalcond[5]=((((-1.0)*sj0*x5863))+((r12*x5852))+((r11*x5862))+(((-1.0)*x5856*x5859))+((sj0*x5855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5864=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5864.valid){
continue;
}
CheckValue<IkReal> x5865 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5864.value)))+(x5865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5866=IKsin(j4);
IkReal x5867=IKcos(j4);
IkReal x5868=(cj5*r00);
IkReal x5869=(cj1*cj2);
IkReal x5870=(cj5*r10);
IkReal x5871=(r21*sj5);
IkReal x5872=(cj5*r20);
IkReal x5873=((1.0)*x5867);
IkReal x5874=((1.0)*x5866);
IkReal x5875=(sj5*x5866);
IkReal x5876=(sj5*x5867);
IkReal x5877=((1.0)*sj1*sj2);
evalcond[0]=(((x5866*x5871))+(((-1.0)*r22*x5873))+(((-1.0)*x5872*x5874)));
evalcond[1]=(sj0+(((-1.0)*r02*x5873))+(((-1.0)*x5868*x5874))+((r01*x5875)));
evalcond[2]=((((-1.0)*r12*x5873))+((r11*x5875))+(((-1.0)*x5870*x5874))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x5867*x5871))+((r22*x5866))+((cj1*sj2))+(((-1.0)*x5872*x5873)));
evalcond[4]=((((-1.0)*cj0*x5877))+((r02*x5866))+((cj0*x5869))+(((-1.0)*x5868*x5873))+((r01*x5876)));
evalcond[5]=((((-1.0)*sj0*x5877))+((sj0*x5869))+((r11*x5876))+(((-1.0)*x5870*x5873))+((r12*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5878=r21*r21;
IkReal x5879=cj5*cj5;
IkReal x5880=(cj2*sj1);
IkReal x5881=(cj1*sj2);
IkReal x5882=(r21*sj5);
IkReal x5883=((1.0)*cj5*r20);
CheckValue<IkReal> x5884=IKPowWithIntegerCheck(IKsign((((x5878*x5879))+(((2.0)*cj5*r20*x5882))+(((-1.0)*x5879*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5878)))),-1);
if(!x5884.valid){
continue;
}
CheckValue<IkReal> x5885 = IKatan2WithCheck(IkReal((((r22*x5880))+((r22*x5881)))),IkReal((((x5880*x5882))+(((-1.0)*x5880*x5883))+((x5881*x5882))+(((-1.0)*x5881*x5883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5884.value)))+(x5885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5886=IKsin(j4);
IkReal x5887=IKcos(j4);
IkReal x5888=(r21*sj5);
IkReal x5889=(cj5*r20);
IkReal x5890=((1.0)*x5887);
evalcond[0]=((((-1.0)*r22*x5890))+(((-1.0)*x5886*x5889))+((x5886*x5888)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x5889*x5890))+((cj1*sj2))+((x5887*x5888))+((r22*x5886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5891=(cj5*sj4);
IkReal x5892=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x5892))+((r00*x5891))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x5891))+((r11*x5892))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x5892))+((r00*x5891))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x5891))+((r11*x5892))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x5892))+((r00*x5891))+((cj4*r02))), ((((-1.0)*r10*x5891))+((r11*x5892))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5893=IKcos(j0);
IkReal x5894=IKsin(j0);
IkReal x5895=(cj5*r01);
IkReal x5896=((1.0)*sj1);
IkReal x5897=(r11*sj5);
IkReal x5898=((0.21325)*sj1);
IkReal x5899=((0.24365)*cj1);
IkReal x5900=(r00*sj5);
IkReal x5901=(cj5*r11);
IkReal x5902=((1.0)*cj4);
IkReal x5903=(r01*sj5);
IkReal x5904=(r10*sj5);
IkReal x5905=(sj2*x5894);
IkReal x5906=(cj2*x5893);
IkReal x5907=(cj5*x5902);
IkReal x5908=(sj2*x5893);
IkReal x5909=((1.0)*cj5*sj4);
IkReal x5910=(cj1*cj2*x5894);
evalcond[0]=((((-1.0)*r00*x5909))+((sj4*x5903))+(((-1.0)*r02*x5902))+x5894);
evalcond[1]=((((-1.0)*r12*x5902))+(((-1.0)*x5893))+((sj4*x5897))+(((-1.0)*r10*x5909)));
evalcond[2]=(((sj1*x5906))+((cj1*x5908))+x5900+x5895);
evalcond[3]=(((cj2*sj1*x5894))+((cj1*x5905))+x5901+x5904);
evalcond[4]=((((-1.0)*r00*x5907))+(((-1.0)*x5896*x5908))+((r02*sj4))+((cj1*x5906))+((cj4*x5903)));
evalcond[5]=((((-1.0)*x5896*x5905))+((cj4*x5897))+((r12*sj4))+x5910+(((-1.0)*r10*x5907)));
evalcond[6]=((((-1.0)*x5893*x5899))+((x5898*x5908))+(((-1.0)*px))+(((-0.08535)*x5900))+(((-0.08535)*x5895))+(((-0.21325)*cj1*x5906))+(((0.11)*x5894)));
evalcond[7]=((((-0.11)*x5893))+((x5898*x5905))+(((-1.0)*py))+(((-1.0)*x5894*x5899))+(((-0.08535)*x5904))+(((-0.08535)*x5901))+(((-0.21325)*x5910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5911=((1.0)*cj5);
IkReal x5912=((1.0)*sj5);
CheckValue<IkReal> x5913 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5911))+(((-1.0)*r10*x5912)))),IkReal(((((-1.0)*r00*x5912))+(((-1.0)*r01*x5911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5913.valid){
continue;
}
CheckValue<IkReal> x5914=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5914.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5913.value)+(((1.5707963267949)*(x5914.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5915=IKcos(j0);
IkReal x5916=IKsin(j0);
IkReal x5917=(cj5*r01);
IkReal x5918=((0.21325)*sj2);
IkReal x5919=(cj5*r11);
IkReal x5920=(r00*sj5);
IkReal x5921=((0.24365)*cj1);
IkReal x5922=(r10*sj5);
IkReal x5923=(cj1*sj2);
IkReal x5924=((0.21325)*cj1*cj2);
IkReal x5925=(sj1*x5915);
IkReal x5926=(sj1*x5916);
evalcond[0]=(((cj2*x5925))+x5917+x5920+((x5915*x5923)));
evalcond[1]=(((x5916*x5923))+((cj2*x5926))+x5919+x5922);
evalcond[2]=((((-0.08535)*x5920))+((x5918*x5925))+(((-1.0)*px))+(((-0.08535)*x5917))+(((-1.0)*x5915*x5921))+(((-1.0)*x5915*x5924))+(((0.11)*x5916)));
evalcond[3]=((((-0.11)*x5915))+(((-0.08535)*x5922))+(((-1.0)*x5916*x5921))+(((-1.0)*x5916*x5924))+((x5918*x5926))+(((-1.0)*py))+(((-0.08535)*x5919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5927=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5927;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5928=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5928;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5929=((1.0)*cj5);
IkReal x5930=((((-1.0)*r21*x5929))+(((-1.0)*r20*sj5)));
j4eval[0]=x5930;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5929))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5929))))));
j4eval[2]=IKsign(x5930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5931=((-1.0)*r20);
IkReal x5933 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5933)==0){
continue;
}
IkReal x5932=pow(x5933,-0.5);
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5931),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5934.value));
IkReal gconst115=(r21*x5932);
IkReal gconst116=(x5931*x5932);
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5935.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5936=((-1.0)*r20);
IkReal x5937=x5932;
CheckValue<IkReal> x5939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5936),IKFAST_ATAN2_MAGTHRESH);
if(!x5939.valid){
continue;
}
IkReal x5938=((-1.0)*(x5939.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5938;
IkReal gconst114=x5938;
IkReal gconst115=(r21*x5937);
IkReal gconst116=(x5936*x5937);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5940=((-1.0)*r20);
IkReal x5941=x5932;
CheckValue<IkReal> x5943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5940),IKFAST_ATAN2_MAGTHRESH);
if(!x5943.valid){
continue;
}
IkReal x5942=((-1.0)*(x5943.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5942;
IkReal gconst114=x5942;
IkReal gconst115=(r21*x5941);
IkReal gconst116=(x5940*x5941);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5944=((-1.0)*r20);
IkReal x5945=x5932;
CheckValue<IkReal> x5947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5944),IKFAST_ATAN2_MAGTHRESH);
if(!x5947.valid){
continue;
}
IkReal x5946=((-1.0)*(x5947.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5946;
IkReal gconst114=x5946;
IkReal gconst115=(r21*x5945);
IkReal gconst116=(x5944*x5945);
IkReal x5948=((1.0)*(r22*r22));
CheckValue<IkReal> x5952=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5948))),-1);
if(!x5952.valid){
continue;
}
IkReal x5949=x5952.value;
IkReal x5950=((1.0)*x5949);
IkReal x5951=((((-1.0)*x5948))+(((-1.0)*x5950*(r21*r21*r21*r21)))+(((-1.0)*x5950*(r20*r20*r20*r20)))+(((-2.0)*x5949*(r20*r20)*(r21*r21))));
j4eval[0]=x5951;
j4eval[1]=IKsign(x5951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5953=(cj2*sj1);
IkReal x5954=(gconst115*r21);
IkReal x5955=(cj1*sj2);
IkReal x5956=((1.0)*gconst116*r20);
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal((((r22*x5953))+((r22*x5955)))),IkReal((((x5953*x5954))+((x5954*x5955))+(((-1.0)*x5953*x5956))+(((-1.0)*x5955*x5956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5954))+(((-1.0)*(x5954*x5954)))+(((-1.0)*gconst116*r20*x5956))+(((-1.0)*(r22*r22))))),-1);
if(!x5958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5957.value)+(((1.5707963267949)*(x5958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5959=IKsin(j4);
IkReal x5960=IKcos(j4);
IkReal x5961=(cj1*cj2);
IkReal x5962=((1.0)*x5960);
IkReal x5963=(gconst115*x5959);
IkReal x5964=(gconst115*x5960);
IkReal x5965=((1.0)*sj1*sj2);
IkReal x5966=((1.0)*gconst116*x5959);
evalcond[0]=((((-1.0)*r22*x5962))+(((-1.0)*r20*x5966))+((r21*x5963)));
evalcond[1]=(sj0+((r01*x5963))+(((-1.0)*r00*x5966))+(((-1.0)*r02*x5962)));
evalcond[2]=((((-1.0)*r12*x5962))+(((-1.0)*r10*x5966))+((r11*x5963))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5964))+((r22*x5959))+(((-1.0)*gconst116*r20*x5962)));
evalcond[4]=(((cj0*x5961))+(((-1.0)*gconst116*r00*x5962))+((r01*x5964))+((r02*x5959))+(((-1.0)*cj0*x5965)));
evalcond[5]=((((-1.0)*gconst116*r10*x5962))+(((-1.0)*sj0*x5965))+((r12*x5959))+((r11*x5964))+((sj0*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
CheckValue<IkReal> x5968=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5967.value)+(((1.5707963267949)*(x5968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5969=IKsin(j4);
IkReal x5970=IKcos(j4);
IkReal x5971=(cj1*cj2);
IkReal x5972=((1.0)*x5970);
IkReal x5973=(gconst115*x5969);
IkReal x5974=(gconst115*x5970);
IkReal x5975=((1.0)*sj1*sj2);
IkReal x5976=((1.0)*gconst116*x5969);
evalcond[0]=((((-1.0)*r22*x5972))+(((-1.0)*r20*x5976))+((r21*x5973)));
evalcond[1]=((((-1.0)*r02*x5972))+sj0+((r01*x5973))+(((-1.0)*r00*x5976)));
evalcond[2]=((((-1.0)*r12*x5972))+((r11*x5973))+(((-1.0)*r10*x5976))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5972))+((cj1*sj2))+((r22*x5969))+((r21*x5974)));
evalcond[4]=(((r02*x5969))+((cj0*x5971))+(((-1.0)*gconst116*r00*x5972))+((r01*x5974))+(((-1.0)*cj0*x5975)));
evalcond[5]=((((-1.0)*gconst116*r10*x5972))+(((-1.0)*sj0*x5975))+((r11*x5974))+((r12*x5969))+((sj0*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5977=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5977.value)))+(x5978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5979=IKsin(j4);
IkReal x5980=IKcos(j4);
IkReal x5981=(cj1*cj2);
IkReal x5982=((1.0)*x5980);
IkReal x5983=(gconst115*x5979);
IkReal x5984=(gconst115*x5980);
IkReal x5985=((1.0)*sj1*sj2);
IkReal x5986=((1.0)*gconst116*x5979);
evalcond[0]=(((r21*x5983))+(((-1.0)*r22*x5982))+(((-1.0)*r20*x5986)));
evalcond[1]=(sj0+(((-1.0)*r02*x5982))+(((-1.0)*r00*x5986))+((r01*x5983)));
evalcond[2]=((((-1.0)*r12*x5982))+((r11*x5983))+(((-1.0)*r10*x5986))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x5984))+((cj1*sj2))+((r22*x5979))+(((-1.0)*gconst116*r20*x5982)));
evalcond[4]=((((-1.0)*gconst116*r00*x5982))+((cj0*x5981))+(((-1.0)*cj0*x5985))+((r02*x5979))+((r01*x5984)));
evalcond[5]=(((r11*x5984))+((sj0*x5981))+(((-1.0)*gconst116*r10*x5982))+(((-1.0)*sj0*x5985))+((r12*x5979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5987=((-1.0)*r21);
IkReal x5989 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5989)==0){
continue;
}
IkReal x5988=pow(x5989,-0.5);
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal(x5987),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5990.value))));
IkReal gconst118=(x5987*x5988);
IkReal gconst119=((1.0)*r20*x5988);
CheckValue<IkReal> x5991 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5991.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5991.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5992=((-1.0)*r21);
CheckValue<IkReal> x5995 = IKatan2WithCheck(IkReal(x5992),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5995.valid){
continue;
}
IkReal x5993=((1.0)*(x5995.value));
IkReal x5994=x5988;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5993)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5993)));
IkReal gconst118=(x5992*x5994);
IkReal gconst119=((1.0)*r20*x5994);
IkReal x5996=r22*r22;
IkReal x5997=((1.0)*x5996);
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(((-1.0)+x5996),-1);
if(!x6001.valid){
continue;
}
IkReal x5998=x6001.value;
if((((1.0)+(((-1.0)*x5997)))) < -0.00001)
continue;
IkReal x5999=IKsqrt(((1.0)+(((-1.0)*x5997))));
IkReal x6000=(sj0*x5998*x5999);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6000+(((-1.0)*x5997*x6000))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6002=((-1.0)*r21);
CheckValue<IkReal> x6005 = IKatan2WithCheck(IkReal(x6002),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6005.valid){
continue;
}
IkReal x6003=((1.0)*(x6005.value));
IkReal x6004=x5988;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6003)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6003)));
IkReal gconst118=(x6002*x6004);
IkReal gconst119=((1.0)*r20*x6004);
IkReal x6006=r22*r22;
IkReal x6007=((1.0)*x6006);
CheckValue<IkReal> x6011=IKPowWithIntegerCheck(((-1.0)+x6006),-1);
if(!x6011.valid){
continue;
}
IkReal x6008=x6011.value;
if((((1.0)+(((-1.0)*x6007)))) < -0.00001)
continue;
IkReal x6009=IKsqrt(((1.0)+(((-1.0)*x6007))));
IkReal x6010=(cj0*x6008*x6009);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6010+(((-1.0)*x6007*x6010))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6012=((-1.0)*r21);
CheckValue<IkReal> x6015 = IKatan2WithCheck(IkReal(x6012),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6015.valid){
continue;
}
IkReal x6013=((1.0)*(x6015.value));
IkReal x6014=x5988;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6013)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6013)));
IkReal gconst118=(x6012*x6014);
IkReal gconst119=((1.0)*r20*x6014);
IkReal x6016=r22*r22;
IkReal x6017=(cj0*r02);
IkReal x6018=(r12*sj0);
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(((-1.0)+x6016),-1);
if(!x6022.valid){
continue;
}
IkReal x6019=x6022.value;
if((((1.0)+(((-1.0)*x6016)))) < -0.00001)
continue;
IkReal x6020=IKsqrt(((1.0)+(((-1.0)*x6016))));
IkReal x6021=((1.0)*r22*x6019*x6020);
j4eval[0]=0;
j4eval[1]=((IKabs((x6017+x6018)))+(IKabs(((((-1.0)*x6017*x6021))+(((-1.0)*x6018*x6021))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6023=((1.0)*gconst119);
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*r10*sj0*x6023))+(((-1.0)*cj0*r00*x6023))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
CheckValue<IkReal> x6025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x6023)))),-1);
if(!x6025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6024.value)+(((1.5707963267949)*(x6025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6026=IKsin(j4);
IkReal x6027=IKcos(j4);
IkReal x6028=(cj1*cj2);
IkReal x6029=(gconst118*r01);
IkReal x6030=(gconst119*r20);
IkReal x6031=(gconst119*r10);
IkReal x6032=(gconst119*r00);
IkReal x6033=(gconst118*r21);
IkReal x6034=(gconst118*r11);
IkReal x6035=((1.0)*cj0);
IkReal x6036=(sj1*sj2);
IkReal x6037=((1.0)*x6027);
IkReal x6038=((1.0)*x6026);
evalcond[0]=(((x6026*x6033))+(((-1.0)*x6030*x6038))+(((-1.0)*r22*x6037)));
evalcond[1]=((((-1.0)*x6032*x6038))+sj0+((x6026*x6029))+(((-1.0)*r02*x6037)));
evalcond[2]=((((-1.0)*x6035))+(((-1.0)*x6031*x6038))+(((-1.0)*r12*x6037))+((x6026*x6034)));
evalcond[3]=(((cj2*sj1))+((x6027*x6033))+((cj1*sj2))+((r22*x6026))+(((-1.0)*x6030*x6037)));
evalcond[4]=((((-1.0)*x6032*x6037))+((r02*x6026))+(((-1.0)*x6035*x6036))+((cj0*x6028))+((x6027*x6029)));
evalcond[5]=(((sj0*x6028))+((x6027*x6034))+(((-1.0)*x6031*x6037))+((r12*x6026))+(((-1.0)*sj0*x6036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6039=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6039.valid){
continue;
}
CheckValue<IkReal> x6040 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6039.value)))+(x6040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6041=IKsin(j4);
IkReal x6042=IKcos(j4);
IkReal x6043=(cj1*cj2);
IkReal x6044=(gconst118*r01);
IkReal x6045=(gconst119*r20);
IkReal x6046=(gconst119*r10);
IkReal x6047=(gconst119*r00);
IkReal x6048=(gconst118*r21);
IkReal x6049=(gconst118*r11);
IkReal x6050=((1.0)*cj0);
IkReal x6051=(sj1*sj2);
IkReal x6052=((1.0)*x6042);
IkReal x6053=((1.0)*x6041);
evalcond[0]=(((x6041*x6048))+(((-1.0)*r22*x6052))+(((-1.0)*x6045*x6053)));
evalcond[1]=(sj0+((x6041*x6044))+(((-1.0)*r02*x6052))+(((-1.0)*x6047*x6053)));
evalcond[2]=(((x6041*x6049))+(((-1.0)*x6050))+(((-1.0)*x6046*x6053))+(((-1.0)*r12*x6052)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6041))+((x6042*x6048))+(((-1.0)*x6045*x6052)));
evalcond[4]=(((cj0*x6043))+(((-1.0)*x6050*x6051))+((x6042*x6044))+(((-1.0)*x6047*x6052))+((r02*x6041)));
evalcond[5]=((((-1.0)*x6046*x6052))+((sj0*x6043))+((x6042*x6049))+(((-1.0)*sj0*x6051))+((r12*x6041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6054=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x6054.valid){
continue;
}
CheckValue<IkReal> x6055 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6054.value)))+(x6055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6056=IKsin(j4);
IkReal x6057=IKcos(j4);
IkReal x6058=(cj1*cj2);
IkReal x6059=(gconst118*r01);
IkReal x6060=(gconst119*r20);
IkReal x6061=(gconst119*r10);
IkReal x6062=(gconst119*r00);
IkReal x6063=(gconst118*r21);
IkReal x6064=(gconst118*r11);
IkReal x6065=((1.0)*cj0);
IkReal x6066=(sj1*sj2);
IkReal x6067=((1.0)*x6057);
IkReal x6068=((1.0)*x6056);
evalcond[0]=(((x6056*x6063))+(((-1.0)*r22*x6067))+(((-1.0)*x6060*x6068)));
evalcond[1]=(sj0+((x6056*x6059))+(((-1.0)*r02*x6067))+(((-1.0)*x6062*x6068)));
evalcond[2]=(((x6056*x6064))+(((-1.0)*x6061*x6068))+(((-1.0)*x6065))+(((-1.0)*r12*x6067)));
evalcond[3]=(((cj2*sj1))+((r22*x6056))+((x6057*x6063))+((cj1*sj2))+(((-1.0)*x6060*x6067)));
evalcond[4]=(((cj0*x6058))+((r02*x6056))+(((-1.0)*x6065*x6066))+(((-1.0)*x6062*x6067))+((x6057*x6059)));
evalcond[5]=(((r12*x6056))+((x6057*x6064))+(((-1.0)*x6061*x6067))+((sj0*x6058))+(((-1.0)*sj0*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6070 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6070)==0){
continue;
}
IkReal x6069=pow(x6070,-0.5);
CheckValue<IkReal> x6071 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6071.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6071.value));
IkReal gconst121=((-1.0)*r01*x6069);
IkReal gconst122=(r00*x6069);
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6072.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6075 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6075.valid){
continue;
}
IkReal x6073=((-1.0)*(x6075.value));
IkReal x6074=x6069;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6073;
IkReal gconst120=x6073;
IkReal gconst121=((-1.0)*r01*x6074);
IkReal gconst122=(r00*x6074);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6076=((1.0)*gconst122);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6076))+(((-1.0)*r10*sj0*x6076))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6076))+(((-1.0)*gconst121*r20)))),-1);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6077.value)+(((1.5707963267949)*(x6078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKsin(j4);
IkReal x6080=IKcos(j4);
IkReal x6081=(cj1*cj2);
IkReal x6082=(gconst121*r11);
IkReal x6083=(gconst122*r00);
IkReal x6084=(gconst122*r10);
IkReal x6085=(gconst122*r20);
IkReal x6086=((1.0)*cj0);
IkReal x6087=(sj1*sj2);
IkReal x6088=((1.0)*x6080);
IkReal x6089=((1.0)*x6079);
IkReal x6090=(gconst121*x6079);
IkReal x6091=(gconst121*x6080);
evalcond[0]=((((-1.0)*x6085*x6089))+(((-1.0)*r22*x6088))+((r21*x6090)));
evalcond[1]=(sj0+((r01*x6090))+(((-1.0)*x6083*x6089))+(((-1.0)*r02*x6088)));
evalcond[2]=((((-1.0)*r12*x6088))+((x6079*x6082))+(((-1.0)*x6086))+(((-1.0)*x6084*x6089)));
evalcond[3]=((((-1.0)*x6085*x6088))+((cj2*sj1))+((cj1*sj2))+((r22*x6079))+((r21*x6091)));
evalcond[4]=(((r01*x6091))+((cj0*x6081))+(((-1.0)*x6083*x6088))+(((-1.0)*x6086*x6087))+((r02*x6079)));
evalcond[5]=(((sj0*x6081))+(((-1.0)*sj0*x6087))+(((-1.0)*x6084*x6088))+((x6080*x6082))+((r12*x6079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x6093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6092.value)+(((1.5707963267949)*(x6093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6094=IKsin(j4);
IkReal x6095=IKcos(j4);
IkReal x6096=(cj1*cj2);
IkReal x6097=(gconst121*r11);
IkReal x6098=(gconst122*r00);
IkReal x6099=(gconst122*r10);
IkReal x6100=(gconst122*r20);
IkReal x6101=((1.0)*cj0);
IkReal x6102=(sj1*sj2);
IkReal x6103=((1.0)*x6095);
IkReal x6104=((1.0)*x6094);
IkReal x6105=(gconst121*x6094);
IkReal x6106=(gconst121*x6095);
evalcond[0]=(((r21*x6105))+(((-1.0)*r22*x6103))+(((-1.0)*x6100*x6104)));
evalcond[1]=((((-1.0)*r02*x6103))+sj0+(((-1.0)*x6098*x6104))+((r01*x6105)));
evalcond[2]=((((-1.0)*x6099*x6104))+((x6094*x6097))+(((-1.0)*r12*x6103))+(((-1.0)*x6101)));
evalcond[3]=(((cj2*sj1))+((r21*x6106))+((cj1*sj2))+((r22*x6094))+(((-1.0)*x6100*x6103)));
evalcond[4]=((((-1.0)*x6098*x6103))+(((-1.0)*x6101*x6102))+((cj0*x6096))+((r01*x6106))+((r02*x6094)));
evalcond[5]=(((x6095*x6097))+((sj0*x6096))+(((-1.0)*sj0*x6102))+(((-1.0)*x6099*x6103))+((r12*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6108 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6108)==0){
continue;
}
IkReal x6107=pow(x6108,-0.5);
CheckValue<IkReal> x6109 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6109.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6109.value))));
IkReal gconst124=((1.0)*r01*x6107);
IkReal gconst125=((-1.0)*r00*x6107);
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6110.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6113 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6113.valid){
continue;
}
IkReal x6111=((1.0)*(x6113.value));
IkReal x6112=x6107;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6111)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6111)));
IkReal gconst124=((1.0)*r01*x6112);
IkReal gconst125=((-1.0)*r00*x6112);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
IkReal x6114=((1.0)*(x6116.value));
IkReal x6115=x6107;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6114)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6114)));
IkReal gconst124=((1.0)*r01*x6115);
IkReal gconst125=((-1.0)*r00*x6115);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
IkReal x6117=((1.0)*(x6119.value));
IkReal x6118=x6107;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6117)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6117)));
IkReal gconst124=((1.0)*r01*x6118);
IkReal gconst125=((-1.0)*r00*x6118);
IkReal x6120=r02*r02;
IkReal x6121=(r12*sj0);
IkReal x6122=x6107;
IkReal x6123=(cj0*x6122);
j4eval[0]=((IKabs((x6121+((cj0*r02)))))+(IKabs((((x6120*x6123))+((r02*x6121*x6122))+(((-1.0)*x6123))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6124=((1.0)*gconst125);
CheckValue<IkReal> x6125 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6124))+((cj0*gconst124*r01))+(((-1.0)*r10*sj0*x6124))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6125.valid){
continue;
}
CheckValue<IkReal> x6126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x6124)))),-1);
if(!x6126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6125.value)+(((1.5707963267949)*(x6126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6127=IKsin(j4);
IkReal x6128=IKcos(j4);
IkReal x6129=(cj1*cj2);
IkReal x6130=(gconst125*r20);
IkReal x6131=(gconst124*r01);
IkReal x6132=(gconst125*r00);
IkReal x6133=(gconst125*r10);
IkReal x6134=((1.0)*cj0);
IkReal x6135=(sj1*sj2);
IkReal x6136=((1.0)*x6128);
IkReal x6137=((1.0)*x6127);
IkReal x6138=(gconst124*x6127);
IkReal x6139=(gconst124*x6128);
evalcond[0]=(((r21*x6138))+(((-1.0)*x6130*x6137))+(((-1.0)*r22*x6136)));
evalcond[1]=(sj0+((x6127*x6131))+(((-1.0)*x6132*x6137))+(((-1.0)*r02*x6136)));
evalcond[2]=(((r11*x6138))+(((-1.0)*x6134))+(((-1.0)*r12*x6136))+(((-1.0)*x6133*x6137)));
evalcond[3]=(((r21*x6139))+((cj2*sj1))+(((-1.0)*x6130*x6136))+((cj1*sj2))+((r22*x6127)));
evalcond[4]=(((x6128*x6131))+((cj0*x6129))+(((-1.0)*x6134*x6135))+((r02*x6127))+(((-1.0)*x6132*x6136)));
evalcond[5]=(((r11*x6139))+((r12*x6127))+((sj0*x6129))+(((-1.0)*sj0*x6135))+(((-1.0)*x6133*x6136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6140=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6140.valid){
continue;
}
CheckValue<IkReal> x6141 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6140.value)))+(x6141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6142=IKsin(j4);
IkReal x6143=IKcos(j4);
IkReal x6144=(cj1*cj2);
IkReal x6145=(gconst125*r20);
IkReal x6146=(gconst124*r01);
IkReal x6147=(gconst125*r00);
IkReal x6148=(gconst125*r10);
IkReal x6149=((1.0)*cj0);
IkReal x6150=(sj1*sj2);
IkReal x6151=((1.0)*x6143);
IkReal x6152=((1.0)*x6142);
IkReal x6153=(gconst124*x6142);
IkReal x6154=(gconst124*x6143);
evalcond[0]=(((r21*x6153))+(((-1.0)*r22*x6151))+(((-1.0)*x6145*x6152)));
evalcond[1]=((((-1.0)*r02*x6151))+sj0+(((-1.0)*x6147*x6152))+((x6142*x6146)));
evalcond[2]=((((-1.0)*x6149))+(((-1.0)*r12*x6151))+(((-1.0)*x6148*x6152))+((r11*x6153)));
evalcond[3]=(((cj2*sj1))+((r21*x6154))+((cj1*sj2))+((r22*x6142))+(((-1.0)*x6145*x6151)));
evalcond[4]=((((-1.0)*x6147*x6151))+((x6143*x6146))+(((-1.0)*x6149*x6150))+((cj0*x6144))+((r02*x6142)));
evalcond[5]=((((-1.0)*sj0*x6150))+((sj0*x6144))+((r12*x6142))+(((-1.0)*x6148*x6151))+((r11*x6154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6155 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6155.valid){
continue;
}
CheckValue<IkReal> x6156=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x6156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6155.value)+(((1.5707963267949)*(x6156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6157=IKsin(j4);
IkReal x6158=IKcos(j4);
IkReal x6159=(cj1*cj2);
IkReal x6160=(gconst125*r20);
IkReal x6161=(gconst124*r01);
IkReal x6162=(gconst125*r00);
IkReal x6163=(gconst125*r10);
IkReal x6164=((1.0)*cj0);
IkReal x6165=(sj1*sj2);
IkReal x6166=((1.0)*x6158);
IkReal x6167=((1.0)*x6157);
IkReal x6168=(gconst124*x6157);
IkReal x6169=(gconst124*x6158);
evalcond[0]=((((-1.0)*x6160*x6167))+((r21*x6168))+(((-1.0)*r22*x6166)));
evalcond[1]=(((x6157*x6161))+sj0+(((-1.0)*r02*x6166))+(((-1.0)*x6162*x6167)));
evalcond[2]=((((-1.0)*x6164))+(((-1.0)*r12*x6166))+((r11*x6168))+(((-1.0)*x6163*x6167)));
evalcond[3]=((((-1.0)*x6160*x6166))+((r22*x6157))+((cj2*sj1))+((cj1*sj2))+((r21*x6169)));
evalcond[4]=(((cj0*x6159))+((x6158*x6161))+((r02*x6157))+(((-1.0)*x6162*x6166))+(((-1.0)*x6164*x6165)));
evalcond[5]=(((r12*x6157))+((sj0*x6159))+((r11*x6169))+(((-1.0)*sj0*x6165))+(((-1.0)*x6163*x6166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6170=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6170;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6171=((1.0)*cj5);
IkReal x6172=((((-1.0)*r21*x6171))+(((-1.0)*r20*sj5)));
j4eval[0]=x6172;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6171))))));
j4eval[2]=IKsign(x6172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6173=(r01*sj5);
IkReal x6174=(cj1*sj2);
IkReal x6175=(cj2*sj1);
IkReal x6176=((1.0)*r02);
IkReal x6177=((1.0)*cj5*r00);
IkReal x6178=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6178;
j4eval[1]=((IKabs(((((-1.0)*x6174*x6176))+(((-1.0)*x6175*x6176)))))+(IKabs((((x6173*x6175))+((x6173*x6174))+(((-1.0)*x6174*x6177))+(((-1.0)*x6175*x6177))))));
j4eval[2]=IKsign(x6178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6179=(r01*sj5);
IkReal x6180=(cj1*sj2);
IkReal x6181=(cj2*sj1);
IkReal x6182=((1.0)*r02);
IkReal x6183=((1.0)*cj5*r00);
CheckValue<IkReal> x6184=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6184.valid){
continue;
}
CheckValue<IkReal> x6185 = IKatan2WithCheck(IkReal((((x6179*x6180))+((x6179*x6181))+(((-1.0)*x6181*x6183))+(((-1.0)*x6180*x6183)))),IkReal(((((-1.0)*x6181*x6182))+(((-1.0)*x6180*x6182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6184.value)))+(x6185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6186=IKcos(j4);
IkReal x6187=IKsin(j4);
IkReal x6188=(cj5*r00);
IkReal x6189=(cj5*r10);
IkReal x6190=(r21*sj5);
IkReal x6191=(cj5*r20);
IkReal x6192=((1.0)*x6186);
IkReal x6193=((1.0)*x6187);
IkReal x6194=(sj5*x6187);
IkReal x6195=(sj5*x6186);
evalcond[0]=(((r02*x6187))+((r01*x6195))+(((-1.0)*x6188*x6192)));
evalcond[1]=((((-1.0)*x6191*x6193))+(((-1.0)*r22*x6192))+((x6187*x6190)));
evalcond[2]=(((r11*x6194))+(((-1.0)*r12*x6192))+(((-1.0)*x6189*x6193)));
evalcond[3]=((1.0)+((r01*x6194))+(((-1.0)*x6188*x6193))+(((-1.0)*r02*x6192)));
evalcond[4]=(((cj2*sj1))+((r22*x6187))+((cj1*sj2))+(((-1.0)*x6191*x6192))+((x6186*x6190)));
evalcond[5]=(((r11*x6195))+(((-1.0)*sj1*sj2))+(((-1.0)*x6189*x6192))+((cj1*cj2))+((r12*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6196=((1.0)*cj5);
CheckValue<IkReal> x6197 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6196))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6197.valid){
continue;
}
CheckValue<IkReal> x6198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6196))+(((-1.0)*r20*sj5)))),-1);
if(!x6198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6197.value)+(((1.5707963267949)*(x6198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6199=IKcos(j4);
IkReal x6200=IKsin(j4);
IkReal x6201=(cj5*r00);
IkReal x6202=(cj5*r10);
IkReal x6203=(r21*sj5);
IkReal x6204=(cj5*r20);
IkReal x6205=((1.0)*x6199);
IkReal x6206=((1.0)*x6200);
IkReal x6207=(sj5*x6200);
IkReal x6208=(sj5*x6199);
evalcond[0]=(((r01*x6208))+((r02*x6200))+(((-1.0)*x6201*x6205)));
evalcond[1]=((((-1.0)*r22*x6205))+(((-1.0)*x6204*x6206))+((x6200*x6203)));
evalcond[2]=((((-1.0)*x6202*x6206))+(((-1.0)*r12*x6205))+((r11*x6207)));
evalcond[3]=((1.0)+((r01*x6207))+(((-1.0)*r02*x6205))+(((-1.0)*x6201*x6206)));
evalcond[4]=(((x6199*x6203))+((cj2*sj1))+((r22*x6200))+((cj1*sj2))+(((-1.0)*x6204*x6205)));
evalcond[5]=((((-1.0)*x6202*x6205))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x6208))+((r12*x6200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6209 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6209.valid){
continue;
}
CheckValue<IkReal> x6210=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6209.value)+(((1.5707963267949)*(x6210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6211=IKcos(j4);
IkReal x6212=IKsin(j4);
IkReal x6213=(cj5*r00);
IkReal x6214=(cj5*r10);
IkReal x6215=(r21*sj5);
IkReal x6216=(cj5*r20);
IkReal x6217=((1.0)*x6211);
IkReal x6218=((1.0)*x6212);
IkReal x6219=(sj5*x6212);
IkReal x6220=(sj5*x6211);
evalcond[0]=(((r02*x6212))+((r01*x6220))+(((-1.0)*x6213*x6217)));
evalcond[1]=(((x6212*x6215))+(((-1.0)*x6216*x6218))+(((-1.0)*r22*x6217)));
evalcond[2]=(((r11*x6219))+(((-1.0)*r12*x6217))+(((-1.0)*x6214*x6218)));
evalcond[3]=((1.0)+((r01*x6219))+(((-1.0)*x6213*x6218))+(((-1.0)*r02*x6217)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6216*x6217))+((x6211*x6215))+((r22*x6212)));
evalcond[5]=(((r12*x6212))+((r11*x6220))+(((-1.0)*sj1*sj2))+(((-1.0)*x6214*x6217))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6221=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6221;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6222=((1.0)*cj5);
IkReal x6223=((((-1.0)*r11*x6222))+(((-1.0)*r10*sj5)));
j4eval[0]=x6223;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6222)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6224=cj5*cj5;
IkReal x6225=r01*r01;
IkReal x6226=(cj5*r00);
IkReal x6227=(r01*sj5);
IkReal x6228=(x6225+(((-1.0)*x6224*x6225))+(((-2.0)*x6226*x6227))+(r02*r02)+((x6224*(r00*r00))));
j4eval[0]=x6228;
j4eval[1]=IKsign(x6228);
j4eval[2]=((IKabs((x6227+(((-1.0)*x6226)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6229=cj5*cj5;
IkReal x6230=r01*r01;
IkReal x6231=(r01*sj5);
IkReal x6232=(cj5*r00);
CheckValue<IkReal> x6233 = IKatan2WithCheck(IkReal((x6231+(((-1.0)*x6232)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6233.valid){
continue;
}
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(IKsign((x6230+(((-1.0)*x6229*x6230))+(((-2.0)*x6231*x6232))+(r02*r02)+((x6229*(r00*r00))))),-1);
if(!x6234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6233.value)+(((1.5707963267949)*(x6234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6235=IKcos(j4);
IkReal x6236=IKsin(j4);
IkReal x6237=(cj5*r00);
IkReal x6238=(cj5*r10);
IkReal x6239=(r21*sj5);
IkReal x6240=(cj5*r20);
IkReal x6241=((1.0)*x6235);
IkReal x6242=((1.0)*x6236);
IkReal x6243=(sj5*x6236);
IkReal x6244=(sj5*x6235);
evalcond[0]=(((r02*x6236))+(((-1.0)*x6237*x6241))+((r01*x6244)));
evalcond[1]=(((x6236*x6239))+(((-1.0)*x6240*x6242))+(((-1.0)*r22*x6241)));
evalcond[2]=((((-1.0)*x6238*x6242))+((r11*x6243))+(((-1.0)*r12*x6241)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6241))+(((-1.0)*x6237*x6242))+((r01*x6243)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6235*x6239))+(((-1.0)*x6240*x6241))+((r22*x6236)));
evalcond[5]=((((-1.0)*x6238*x6241))+((r12*x6236))+((r11*x6244))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6245=((1.0)*cj5);
CheckValue<IkReal> x6246 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6246.valid){
continue;
}
CheckValue<IkReal> x6247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6245)))),-1);
if(!x6247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6246.value)+(((1.5707963267949)*(x6247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6248=IKcos(j4);
IkReal x6249=IKsin(j4);
IkReal x6250=(cj5*r00);
IkReal x6251=(cj5*r10);
IkReal x6252=(r21*sj5);
IkReal x6253=(cj5*r20);
IkReal x6254=((1.0)*x6248);
IkReal x6255=((1.0)*x6249);
IkReal x6256=(sj5*x6249);
IkReal x6257=(sj5*x6248);
evalcond[0]=((((-1.0)*x6250*x6254))+((r01*x6257))+((r02*x6249)));
evalcond[1]=(((x6249*x6252))+(((-1.0)*r22*x6254))+(((-1.0)*x6253*x6255)));
evalcond[2]=((((-1.0)*x6251*x6255))+(((-1.0)*r12*x6254))+((r11*x6256)));
evalcond[3]=((-1.0)+(((-1.0)*x6250*x6255))+((r01*x6256))+(((-1.0)*r02*x6254)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6248*x6252))+(((-1.0)*x6253*x6254))+((r22*x6249)));
evalcond[5]=((((-1.0)*x6251*x6254))+((r12*x6249))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6258=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6258.valid){
continue;
}
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6258.value)))+(x6259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6260=IKcos(j4);
IkReal x6261=IKsin(j4);
IkReal x6262=(cj5*r00);
IkReal x6263=(cj5*r10);
IkReal x6264=(r21*sj5);
IkReal x6265=(cj5*r20);
IkReal x6266=((1.0)*x6260);
IkReal x6267=((1.0)*x6261);
IkReal x6268=(sj5*x6261);
IkReal x6269=(sj5*x6260);
evalcond[0]=(((r01*x6269))+(((-1.0)*x6262*x6266))+((r02*x6261)));
evalcond[1]=(((x6261*x6264))+(((-1.0)*x6265*x6267))+(((-1.0)*r22*x6266)));
evalcond[2]=((((-1.0)*x6263*x6267))+(((-1.0)*r12*x6266))+((r11*x6268)));
evalcond[3]=((-1.0)+((r01*x6268))+(((-1.0)*r02*x6266))+(((-1.0)*x6262*x6267)));
evalcond[4]=(((cj2*sj1))+((r22*x6261))+((cj1*sj2))+(((-1.0)*x6265*x6266))+((x6260*x6264)));
evalcond[5]=((((-1.0)*x6263*x6266))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6261))+((r11*x6269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6271 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6271)==0){
continue;
}
IkReal x6270=pow(x6271,-0.5);
CheckValue<IkReal> x6272 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6272.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6272.value));
IkReal gconst127=((-1.0)*r11*x6270);
IkReal gconst128=(r10*x6270);
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6276 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6276.valid){
continue;
}
IkReal x6274=((-1.0)*(x6276.value));
IkReal x6275=x6270;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6274;
IkReal gconst126=x6274;
IkReal gconst127=((-1.0)*r11*x6275);
IkReal gconst128=(r10*x6275);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6277=((1.0)*gconst128);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6277))+(((-1.0)*r10*sj0*x6277))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6277))+(((-1.0)*gconst127*r20)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKsin(j4);
IkReal x6281=IKcos(j4);
IkReal x6282=(cj1*cj2);
IkReal x6283=(gconst127*r01);
IkReal x6284=(gconst128*r10);
IkReal x6285=(gconst128*r00);
IkReal x6286=(gconst128*r20);
IkReal x6287=((1.0)*cj0);
IkReal x6288=(sj1*sj2);
IkReal x6289=((1.0)*x6281);
IkReal x6290=((1.0)*x6280);
IkReal x6291=(gconst127*x6281);
IkReal x6292=(gconst127*x6280);
evalcond[0]=((((-1.0)*r22*x6289))+(((-1.0)*x6286*x6290))+((r21*x6292)));
evalcond[1]=(sj0+(((-1.0)*r02*x6289))+((x6280*x6283))+(((-1.0)*x6285*x6290)));
evalcond[2]=((((-1.0)*x6284*x6290))+((r11*x6292))+(((-1.0)*x6287))+(((-1.0)*r12*x6289)));
evalcond[3]=(((cj2*sj1))+((r22*x6280))+((cj1*sj2))+(((-1.0)*x6286*x6289))+((r21*x6291)));
evalcond[4]=((((-1.0)*x6285*x6289))+((cj0*x6282))+((r02*x6280))+(((-1.0)*x6287*x6288))+((x6281*x6283)));
evalcond[5]=((((-1.0)*x6284*x6289))+(((-1.0)*sj0*x6288))+((r11*x6291))+((r12*x6280))+((sj0*x6282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
CheckValue<IkReal> x6294=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x6294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6293.value)+(((1.5707963267949)*(x6294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6295=IKsin(j4);
IkReal x6296=IKcos(j4);
IkReal x6297=(cj1*cj2);
IkReal x6298=(gconst127*r01);
IkReal x6299=(gconst128*r10);
IkReal x6300=(gconst128*r00);
IkReal x6301=(gconst128*r20);
IkReal x6302=((1.0)*cj0);
IkReal x6303=(sj1*sj2);
IkReal x6304=((1.0)*x6296);
IkReal x6305=((1.0)*x6295);
IkReal x6306=(gconst127*x6296);
IkReal x6307=(gconst127*x6295);
evalcond[0]=(((r21*x6307))+(((-1.0)*r22*x6304))+(((-1.0)*x6301*x6305)));
evalcond[1]=(sj0+(((-1.0)*r02*x6304))+((x6295*x6298))+(((-1.0)*x6300*x6305)));
evalcond[2]=((((-1.0)*x6302))+(((-1.0)*r12*x6304))+(((-1.0)*x6299*x6305))+((r11*x6307)));
evalcond[3]=(((cj2*sj1))+((r22*x6295))+((cj1*sj2))+((r21*x6306))+(((-1.0)*x6301*x6304)));
evalcond[4]=((((-1.0)*x6302*x6303))+(((-1.0)*x6300*x6304))+((cj0*x6297))+((r02*x6295))+((x6296*x6298)));
evalcond[5]=((((-1.0)*sj0*x6303))+(((-1.0)*x6299*x6304))+((r11*x6306))+((r12*x6295))+((sj0*x6297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6309 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6309)==0){
continue;
}
IkReal x6308=pow(x6309,-0.5);
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6310.value))));
IkReal gconst130=((1.0)*r11*x6308);
IkReal gconst131=((-1.0)*r10*x6308);
CheckValue<IkReal> x6311 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6311.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6311.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
IkReal x6312=((1.0)*(x6314.value));
IkReal x6313=x6308;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6312)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6312)));
IkReal gconst130=((1.0)*r11*x6313);
IkReal gconst131=((-1.0)*r10*x6313);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
IkReal x6315=((1.0)*(x6317.value));
IkReal x6316=x6308;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6315)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6315)));
IkReal gconst130=((1.0)*r11*x6316);
IkReal gconst131=((-1.0)*r10*x6316);
IkReal x6318=r12*r12;
IkReal x6319=(cj0*r02);
IkReal x6320=x6308;
IkReal x6321=(sj0*x6320);
j4eval[0]=((IKabs(((((-1.0)*x6321))+((x6318*x6321))+((r12*x6319*x6320)))))+(IKabs((x6319+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
IkReal x6322=((1.0)*(x6324.value));
IkReal x6323=x6308;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6322)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6322)));
IkReal gconst130=((1.0)*r11*x6323);
IkReal gconst131=((-1.0)*r10*x6323);
IkReal x6325=(cj1*sj2);
IkReal x6326=(cj2*sj1);
IkReal x6327=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(x6327,-1);
if(!x6333.valid){
continue;
}
IkReal x6328=x6333.value;
IkReal x6329=((1.0)*x6328);
IkReal x6330=x6308;
IkReal x6331=(r12*r22*x6330);
IkReal x6332=((((-1.0)*x6329*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x6328))+(((-1.0)*(r22*r22)))+(((-1.0)*x6329*(r10*r10)*(r20*r20))));
j4eval[0]=x6332;
j4eval[1]=((IKabs((((r22*x6326))+((r22*x6325)))))+(IKabs((((x6325*x6331))+((x6326*x6331))))));
j4eval[2]=IKsign(x6332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6334=(cj2*sj1);
IkReal x6335=(cj1*sj2);
IkReal x6336=(gconst130*r21);
IkReal x6337=((1.0)*gconst131*r20);
CheckValue<IkReal> x6338 = IKatan2WithCheck(IkReal((((r22*x6334))+((r22*x6335)))),IkReal((((x6334*x6336))+(((-1.0)*x6335*x6337))+(((-1.0)*x6334*x6337))+((x6335*x6336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6338.valid){
continue;
}
CheckValue<IkReal> x6339=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r20*x6337))+(((-1.0)*(r22*r22)))+(((2.0)*gconst131*r20*x6336))+(((-1.0)*(x6336*x6336))))),-1);
if(!x6339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6338.value)+(((1.5707963267949)*(x6339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6340=IKsin(j4);
IkReal x6341=IKcos(j4);
IkReal x6342=(cj1*cj2);
IkReal x6343=(gconst131*r10);
IkReal x6344=(gconst130*r11);
IkReal x6345=(gconst131*r20);
IkReal x6346=(gconst131*r00);
IkReal x6347=((1.0)*cj0);
IkReal x6348=(sj1*sj2);
IkReal x6349=((1.0)*x6341);
IkReal x6350=((1.0)*x6340);
IkReal x6351=(gconst130*x6341);
IkReal x6352=(gconst130*x6340);
evalcond[0]=((((-1.0)*r22*x6349))+((r21*x6352))+(((-1.0)*x6345*x6350)));
evalcond[1]=(sj0+((r01*x6352))+(((-1.0)*r02*x6349))+(((-1.0)*x6346*x6350)));
evalcond[2]=((((-1.0)*x6343*x6350))+(((-1.0)*r12*x6349))+(((-1.0)*x6347))+((x6340*x6344)));
evalcond[3]=(((cj2*sj1))+((r21*x6351))+(((-1.0)*x6345*x6349))+((r22*x6340))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x6346*x6349))+((cj0*x6342))+(((-1.0)*x6347*x6348))+((r02*x6340))+((r01*x6351)));
evalcond[5]=(((x6341*x6344))+((sj0*x6342))+((r12*x6340))+(((-1.0)*x6343*x6349))+(((-1.0)*sj0*x6348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6353=((1.0)*gconst131);
CheckValue<IkReal> x6354 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x6353))+(((-1.0)*cj0*r00*x6353))+((gconst130*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6354.valid){
continue;
}
CheckValue<IkReal> x6355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6353))+(((-1.0)*gconst130*r20)))),-1);
if(!x6355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6354.value)+(((1.5707963267949)*(x6355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6356=IKsin(j4);
IkReal x6357=IKcos(j4);
IkReal x6358=(cj1*cj2);
IkReal x6359=(gconst131*r10);
IkReal x6360=(gconst130*r11);
IkReal x6361=(gconst131*r20);
IkReal x6362=(gconst131*r00);
IkReal x6363=((1.0)*cj0);
IkReal x6364=(sj1*sj2);
IkReal x6365=((1.0)*x6357);
IkReal x6366=((1.0)*x6356);
IkReal x6367=(gconst130*x6357);
IkReal x6368=(gconst130*x6356);
evalcond[0]=((((-1.0)*x6361*x6366))+(((-1.0)*r22*x6365))+((r21*x6368)));
evalcond[1]=((((-1.0)*x6362*x6366))+sj0+(((-1.0)*r02*x6365))+((r01*x6368)));
evalcond[2]=(((x6356*x6360))+(((-1.0)*x6363))+(((-1.0)*x6359*x6366))+(((-1.0)*r12*x6365)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6361*x6365))+((cj1*sj2))+((r22*x6356))+((r21*x6367)));
evalcond[4]=((((-1.0)*x6362*x6365))+((r01*x6367))+((r02*x6356))+(((-1.0)*x6363*x6364))+((cj0*x6358)));
evalcond[5]=(((r12*x6356))+((sj0*x6358))+(((-1.0)*x6359*x6365))+(((-1.0)*sj0*x6364))+((x6357*x6360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6369=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6369.valid){
continue;
}
CheckValue<IkReal> x6370 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6369.value)))+(x6370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6371=IKsin(j4);
IkReal x6372=IKcos(j4);
IkReal x6373=(cj1*cj2);
IkReal x6374=(gconst131*r10);
IkReal x6375=(gconst130*r11);
IkReal x6376=(gconst131*r20);
IkReal x6377=(gconst131*r00);
IkReal x6378=((1.0)*cj0);
IkReal x6379=(sj1*sj2);
IkReal x6380=((1.0)*x6372);
IkReal x6381=((1.0)*x6371);
IkReal x6382=(gconst130*x6372);
IkReal x6383=(gconst130*x6371);
evalcond[0]=((((-1.0)*x6376*x6381))+(((-1.0)*r22*x6380))+((r21*x6383)));
evalcond[1]=(sj0+(((-1.0)*x6377*x6381))+((r01*x6383))+(((-1.0)*r02*x6380)));
evalcond[2]=((((-1.0)*x6374*x6381))+(((-1.0)*r12*x6380))+((x6371*x6375))+(((-1.0)*x6378)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6376*x6380))+((cj1*sj2))+((r21*x6382))+((r22*x6371)));
evalcond[4]=((((-1.0)*x6377*x6380))+(((-1.0)*x6378*x6379))+((cj0*x6373))+((r01*x6382))+((r02*x6371)));
evalcond[5]=((((-1.0)*x6374*x6380))+((x6372*x6375))+((r12*x6371))+((sj0*x6373))+(((-1.0)*sj0*x6379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6384=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6384;
j4eval[1]=IKsign(x6384);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6385=((1.0)*cj5);
IkReal x6386=((((-1.0)*r21*x6385))+(((-1.0)*r20*sj5)));
j4eval[0]=x6386;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6385))))));
j4eval[2]=IKsign(x6386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6387=cj5*cj5;
IkReal x6388=r11*r11;
IkReal x6389=(r11*sj5);
IkReal x6390=(cj5*r10);
IkReal x6391=((r12*r12)+x6388+(((-1.0)*x6387*x6388))+(((-2.0)*x6389*x6390))+((x6387*(r10*r10))));
j4eval[0]=x6391;
j4eval[1]=IKsign(x6391);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6390))+x6389))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6392=cj5*cj5;
IkReal x6393=r11*r11;
IkReal x6394=(cj5*r10);
IkReal x6395=(r11*sj5);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal(((((-1.0)*x6394))+x6395)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
CheckValue<IkReal> x6397=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6393+((x6392*(r10*r10)))+(((-2.0)*x6394*x6395))+(((-1.0)*x6392*x6393)))),-1);
if(!x6397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6396.value)+(((1.5707963267949)*(x6397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6398=IKcos(j4);
IkReal x6399=IKsin(j4);
IkReal x6400=(cj5*r00);
IkReal x6401=(cj5*r10);
IkReal x6402=(r21*sj5);
IkReal x6403=(cj5*r20);
IkReal x6404=((1.0)*x6398);
IkReal x6405=((1.0)*x6399);
IkReal x6406=(sj5*x6399);
IkReal x6407=(sj5*x6398);
evalcond[0]=((((-1.0)*x6401*x6404))+((r12*x6399))+((r11*x6407)));
evalcond[1]=((((-1.0)*x6403*x6405))+((x6399*x6402))+(((-1.0)*r22*x6404)));
evalcond[2]=((((-1.0)*x6400*x6405))+((r01*x6406))+(((-1.0)*r02*x6404)));
evalcond[3]=((-1.0)+(((-1.0)*x6401*x6405))+(((-1.0)*r12*x6404))+((r11*x6406)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6403*x6404))+((cj1*sj2))+((x6398*x6402))+((r22*x6399)));
evalcond[5]=((((-1.0)*x6400*x6404))+(((-1.0)*sj1*sj2))+((r01*x6407))+((cj1*cj2))+((r02*x6399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6408=((1.0)*cj5);
CheckValue<IkReal> x6409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6408))+(((-1.0)*r20*sj5)))),-1);
if(!x6409.valid){
continue;
}
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6409.value)))+(x6410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6411=IKcos(j4);
IkReal x6412=IKsin(j4);
IkReal x6413=(cj5*r00);
IkReal x6414=(cj5*r10);
IkReal x6415=(r21*sj5);
IkReal x6416=(cj5*r20);
IkReal x6417=((1.0)*x6411);
IkReal x6418=((1.0)*x6412);
IkReal x6419=(sj5*x6412);
IkReal x6420=(sj5*x6411);
evalcond[0]=((((-1.0)*x6414*x6417))+((r11*x6420))+((r12*x6412)));
evalcond[1]=((((-1.0)*x6416*x6418))+(((-1.0)*r22*x6417))+((x6412*x6415)));
evalcond[2]=(((r01*x6419))+(((-1.0)*r02*x6417))+(((-1.0)*x6413*x6418)));
evalcond[3]=((-1.0)+(((-1.0)*x6414*x6418))+(((-1.0)*r12*x6417))+((r11*x6419)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6411*x6415))+(((-1.0)*x6416*x6417))+((r22*x6412)));
evalcond[5]=(((r02*x6412))+(((-1.0)*sj1*sj2))+((r01*x6420))+((cj1*cj2))+(((-1.0)*x6413*x6417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
CheckValue<IkReal> x6422=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6421.value)+(((1.5707963267949)*(x6422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6423=IKcos(j4);
IkReal x6424=IKsin(j4);
IkReal x6425=(cj5*r00);
IkReal x6426=(cj5*r10);
IkReal x6427=(r21*sj5);
IkReal x6428=(cj5*r20);
IkReal x6429=((1.0)*x6423);
IkReal x6430=((1.0)*x6424);
IkReal x6431=(sj5*x6424);
IkReal x6432=(sj5*x6423);
evalcond[0]=(((r11*x6432))+((r12*x6424))+(((-1.0)*x6426*x6429)));
evalcond[1]=((((-1.0)*r22*x6429))+((x6424*x6427))+(((-1.0)*x6428*x6430)));
evalcond[2]=(((r01*x6431))+(((-1.0)*x6425*x6430))+(((-1.0)*r02*x6429)));
evalcond[3]=((-1.0)+(((-1.0)*x6426*x6430))+((r11*x6431))+(((-1.0)*r12*x6429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6428*x6429))+((x6423*x6427))+((r22*x6424)));
evalcond[5]=(((r01*x6432))+((r02*x6424))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6425*x6429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6433=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6433;
j4eval[1]=IKsign(x6433);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6434=((1.0)*cj5);
IkReal x6435=((((-1.0)*r01*x6434))+(((-1.0)*r00*sj5)));
j4eval[0]=x6435;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6434)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6436=cj5*cj5;
IkReal x6437=r11*r11;
IkReal x6438=(cj5*r10);
IkReal x6439=(r11*sj5);
IkReal x6440=((((2.0)*x6438*x6439))+((x6436*x6437))+(((-1.0)*(r12*r12)))+(((-1.0)*x6436*(r10*r10)))+(((-1.0)*x6437)));
j4eval[0]=x6440;
j4eval[1]=IKsign(x6440);
j4eval[2]=((IKabs(r12))+(IKabs((x6439+(((-1.0)*x6438))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6441=cj5*cj5;
IkReal x6442=r11*r11;
IkReal x6443=(cj5*r10);
IkReal x6444=(r11*sj5);
CheckValue<IkReal> x6445 = IKatan2WithCheck(IkReal(((((-1.0)*x6443))+x6444)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6445.valid){
continue;
}
CheckValue<IkReal> x6446=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6441*(r10*r10)))+(((-1.0)*x6442))+(((-1.0)*(r12*r12)))+(((2.0)*x6443*x6444))+((x6441*x6442)))),-1);
if(!x6446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6445.value)+(((1.5707963267949)*(x6446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6447=IKcos(j4);
IkReal x6448=IKsin(j4);
IkReal x6449=(cj5*r00);
IkReal x6450=(cj5*r10);
IkReal x6451=(r21*sj5);
IkReal x6452=(cj5*r20);
IkReal x6453=((1.0)*x6447);
IkReal x6454=((1.0)*x6448);
IkReal x6455=(sj5*x6448);
IkReal x6456=(sj5*x6447);
evalcond[0]=(((r12*x6448))+((r11*x6456))+(((-1.0)*x6450*x6453)));
evalcond[1]=((((-1.0)*x6452*x6454))+((x6448*x6451))+(((-1.0)*r22*x6453)));
evalcond[2]=(((r01*x6455))+(((-1.0)*r02*x6453))+(((-1.0)*x6449*x6454)));
evalcond[3]=((1.0)+((r11*x6455))+(((-1.0)*r12*x6453))+(((-1.0)*x6450*x6454)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6452*x6453))+((cj1*sj2))+((x6447*x6451))+((r22*x6448)));
evalcond[5]=(((r01*x6456))+(((-1.0)*x6449*x6453))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6457=((1.0)*cj5);
CheckValue<IkReal> x6458 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6457))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6458.valid){
continue;
}
CheckValue<IkReal> x6459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6457)))),-1);
if(!x6459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6458.value)+(((1.5707963267949)*(x6459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6460=IKcos(j4);
IkReal x6461=IKsin(j4);
IkReal x6462=(cj5*r00);
IkReal x6463=(cj5*r10);
IkReal x6464=(r21*sj5);
IkReal x6465=(cj5*r20);
IkReal x6466=((1.0)*x6460);
IkReal x6467=((1.0)*x6461);
IkReal x6468=(sj5*x6461);
IkReal x6469=(sj5*x6460);
evalcond[0]=((((-1.0)*x6463*x6466))+((r11*x6469))+((r12*x6461)));
evalcond[1]=((((-1.0)*x6465*x6467))+((x6461*x6464))+(((-1.0)*r22*x6466)));
evalcond[2]=(((r01*x6468))+(((-1.0)*r02*x6466))+(((-1.0)*x6462*x6467)));
evalcond[3]=((1.0)+(((-1.0)*x6463*x6467))+(((-1.0)*r12*x6466))+((r11*x6468)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6465*x6466))+((cj1*sj2))+((x6460*x6464))+((r22*x6461)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6469))+(((-1.0)*x6462*x6466))+((r02*x6461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6470=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6470.valid){
continue;
}
CheckValue<IkReal> x6471 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6470.value)))+(x6471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6472=IKcos(j4);
IkReal x6473=IKsin(j4);
IkReal x6474=(cj5*r00);
IkReal x6475=(cj5*r10);
IkReal x6476=(r21*sj5);
IkReal x6477=(cj5*r20);
IkReal x6478=((1.0)*x6472);
IkReal x6479=((1.0)*x6473);
IkReal x6480=(sj5*x6473);
IkReal x6481=(sj5*x6472);
evalcond[0]=(((r11*x6481))+((r12*x6473))+(((-1.0)*x6475*x6478)));
evalcond[1]=(((x6473*x6476))+(((-1.0)*r22*x6478))+(((-1.0)*x6477*x6479)));
evalcond[2]=(((r01*x6480))+(((-1.0)*r02*x6478))+(((-1.0)*x6474*x6479)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6478))+((r11*x6480))+(((-1.0)*x6475*x6479)));
evalcond[4]=(((r22*x6473))+((cj2*sj1))+((cj1*sj2))+((x6472*x6476))+(((-1.0)*x6477*x6478)));
evalcond[5]=(((r01*x6481))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6473))+(((-1.0)*x6474*x6478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6482=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6482);
rxp0_2=(py*r00);
rxp1_0=(r21*x6482);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6483=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6483);
rxp0_2=(py*r00);
rxp1_0=(r21*x6483);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6484=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6484);
rxp0_2=(py*r00);
rxp1_0=(r21*x6484);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6487=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6487.valid){
continue;
}
IkReal x6485=x6487.value;
IkReal x6486=(cj0*x6485);
cj4array[0]=(((sj1*sj2*x6486))+(((-1.0)*cj1*cj2*x6486)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6488=IKsin(j4);
IkReal x6489=IKcos(j4);
IkReal x6490=(r21*sj5);
IkReal x6491=((1.0)*x6489);
IkReal x6492=((1.0)*cj5*x6488);
evalcond[0]=(r12*x6488);
evalcond[1]=((((-1.0)*r12*x6491))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x6492))+((x6488*x6490)));
evalcond[3]=((((-1.0)*r00*x6492))+((r01*sj5*x6488)));
evalcond[4]=((((-1.0)*cj5*r20*x6491))+((cj2*sj1))+((cj1*sj2))+((x6489*x6490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6495=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6495.valid){
continue;
}
IkReal x6493=x6495.value;
IkReal x6494=((1.0)*x6493);
cj4array[0]=((((-1.0)*cj1*sj2*x6494))+(((-1.0)*cj2*sj1*x6494)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6496=IKsin(j4);
IkReal x6497=IKcos(j4);
IkReal x6498=((1.0)*cj0);
IkReal x6499=(r01*sj5);
IkReal x6500=((1.0)*cj5*r00);
evalcond[0]=(r12*x6496);
evalcond[1]=((((-1.0)*x6498))+(((-1.0)*r12*x6497)));
evalcond[2]=((((-1.0)*cj5*r20*x6496))+((r21*sj5*x6496)));
evalcond[3]=(((x6496*x6499))+(((-1.0)*x6496*x6500)));
evalcond[4]=(((x6497*x6499))+(((-1.0)*sj1*sj2*x6498))+(((-1.0)*x6497*x6500))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6501=IKPowWithIntegerCheck(r12,-1);
if(!x6501.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6501.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6502=IKsin(j4);
IkReal x6503=IKcos(j4);
IkReal x6504=((1.0)*cj5*r00);
IkReal x6505=(sj5*x6503);
IkReal x6506=(sj5*x6502);
IkReal x6507=((1.0)*cj5*r20);
evalcond[0]=(r12*x6502);
evalcond[1]=(((r21*x6506))+(((-1.0)*x6502*x6507)));
evalcond[2]=((((-1.0)*x6502*x6504))+((r01*x6506)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6503*x6507))+((r21*x6505))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x6503*x6504))+((cj0*cj1*cj2))+((r01*x6505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6508=((1.0)*cj5);
CheckValue<IkReal> x6509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6508))+(((-1.0)*r20*sj5)))),-1);
if(!x6509.valid){
continue;
}
CheckValue<IkReal> x6510 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x6508))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x6508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6509.value)))+(x6510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6511=IKsin(j4);
IkReal x6512=IKcos(j4);
IkReal x6513=(cj5*r00);
IkReal x6514=(cj1*cj2);
IkReal x6515=(cj5*r10);
IkReal x6516=(r21*sj5);
IkReal x6517=(cj5*r20);
IkReal x6518=((1.0)*x6512);
IkReal x6519=((1.0)*x6511);
IkReal x6520=(sj5*x6511);
IkReal x6521=(sj5*x6512);
IkReal x6522=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6518))+(((-1.0)*x6517*x6519))+((x6511*x6516)));
evalcond[1]=((((-1.0)*r02*x6518))+sj0+((r01*x6520))+(((-1.0)*x6513*x6519)));
evalcond[2]=((((-1.0)*x6515*x6519))+(((-1.0)*r12*x6518))+((r11*x6520))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6517*x6518))+((cj1*sj2))+((x6512*x6516))+((r22*x6511)));
evalcond[4]=(((cj0*x6514))+(((-1.0)*cj0*x6522))+((r02*x6511))+((r01*x6521))+(((-1.0)*x6513*x6518)));
evalcond[5]=((((-1.0)*x6515*x6518))+((r12*x6511))+((sj0*x6514))+((r11*x6521))+(((-1.0)*sj0*x6522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6523=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6523.valid){
continue;
}
CheckValue<IkReal> x6524 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6523.value)))+(x6524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6525=IKsin(j4);
IkReal x6526=IKcos(j4);
IkReal x6527=(cj5*r00);
IkReal x6528=(cj1*cj2);
IkReal x6529=(cj5*r10);
IkReal x6530=(r21*sj5);
IkReal x6531=(cj5*r20);
IkReal x6532=((1.0)*x6526);
IkReal x6533=((1.0)*x6525);
IkReal x6534=(sj5*x6525);
IkReal x6535=(sj5*x6526);
IkReal x6536=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6532))+((x6525*x6530))+(((-1.0)*x6531*x6533)));
evalcond[1]=(sj0+(((-1.0)*r02*x6532))+((r01*x6534))+(((-1.0)*x6527*x6533)));
evalcond[2]=((((-1.0)*r12*x6532))+(((-1.0)*x6529*x6533))+((r11*x6534))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6525))+((x6526*x6530))+(((-1.0)*x6531*x6532)));
evalcond[4]=((((-1.0)*cj0*x6536))+((r02*x6525))+((r01*x6535))+((cj0*x6528))+(((-1.0)*x6527*x6532)));
evalcond[5]=((((-1.0)*x6529*x6532))+(((-1.0)*sj0*x6536))+((r12*x6525))+((sj0*x6528))+((r11*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6537=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6537.valid){
continue;
}
CheckValue<IkReal> x6538 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6537.value)))+(x6538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6539=IKsin(j4);
IkReal x6540=IKcos(j4);
IkReal x6541=(cj5*r00);
IkReal x6542=(cj1*cj2);
IkReal x6543=(cj5*r10);
IkReal x6544=(r21*sj5);
IkReal x6545=(cj5*r20);
IkReal x6546=((1.0)*x6540);
IkReal x6547=((1.0)*x6539);
IkReal x6548=(sj5*x6539);
IkReal x6549=(sj5*x6540);
IkReal x6550=((1.0)*sj1*sj2);
evalcond[0]=(((x6539*x6544))+(((-1.0)*x6545*x6547))+(((-1.0)*r22*x6546)));
evalcond[1]=(sj0+(((-1.0)*x6541*x6547))+(((-1.0)*r02*x6546))+((r01*x6548)));
evalcond[2]=((((-1.0)*r12*x6546))+((r11*x6548))+(((-1.0)*x6543*x6547))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6545*x6546))+((cj2*sj1))+((cj1*sj2))+((r22*x6539))+((x6540*x6544)));
evalcond[4]=(((r02*x6539))+(((-1.0)*x6541*x6546))+(((-1.0)*cj0*x6550))+((cj0*x6542))+((r01*x6549)));
evalcond[5]=((((-1.0)*sj0*x6550))+((r11*x6549))+((sj0*x6542))+(((-1.0)*x6543*x6546))+((r12*x6539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6551=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6551;
j0eval[1]=IKsign(x6551);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6552=cj5*cj5;
IkReal x6553=r21*r21;
IkReal x6554=(cj2*sj1);
IkReal x6555=(cj1*sj2);
IkReal x6556=(r21*sj5);
IkReal x6557=((1.0)*cj5*r20);
IkReal x6558=(((x6552*(r20*r20)))+(r22*r22)+(((-1.0)*x6552*x6553))+x6553+(((-2.0)*cj5*r20*x6556)));
j4eval[0]=x6558;
j4eval[1]=IKsign(x6558);
j4eval[2]=((IKabs(((((-1.0)*x6555*x6557))+(((-1.0)*x6554*x6557))+((x6554*x6556))+((x6555*x6556)))))+(IKabs((((r22*x6555))+((r22*x6554))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6559=cj1*cj1;
IkReal x6560=(cj2*sj2);
IkReal x6561=(cj1*sj1);
j0eval[0]=((((-1.14255568581477)*cj2*x6561))+(((-2.0)*x6559*x6560))+x6561+x6560+(((-1.14255568581477)*sj2*x6559))+(((-2.0)*x6561*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.06875370968653)*py))+(((0.498058454947511)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.498058454947511)*py))+(((-2.06875370968653)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.06875370968653)*py))+(((0.498058454947511)*px))))+IKsqr(((((-0.498058454947511)*py))+(((-2.06875370968653)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.06875370968653)*py))+(((0.498058454947511)*px))), ((((-0.498058454947511)*py))+(((-2.06875370968653)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6562=IKsin(j0);
IkReal x6563=IKcos(j0);
evalcond[0]=((((-0.4569)*x6563))+(((-1.0)*px))+(((0.11)*x6562)));
evalcond[1]=((((-0.11)*x6563))+(((-0.4569)*x6562))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6564=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6564;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6565=cj5*cj5;
IkReal x6566=((1.0)*r21);
IkReal x6567=(cj5*sj5);
IkReal x6568=((1.0)*r20);
IkReal x6569=(((r01*r21))+((r00*r20*x6565))+(((-1.0)*r01*x6565*x6566))+(((-1.0)*r00*x6566*x6567))+(((-1.0)*r01*x6567*x6568))+((r02*r22)));
j4eval[0]=x6569;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6568))))));
j4eval[2]=IKsign(x6569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6570=cj5*cj5;
IkReal x6571=(r21*sj5);
IkReal x6572=(r11*r21);
IkReal x6573=((1.0)*cj5*r20);
IkReal x6574=((((-1.0)*r11*sj5*x6573))+((r10*r20*x6570))+((r12*r22))+x6572+(((-1.0)*x6570*x6572))+(((-1.0)*cj5*r10*x6571)));
j4eval[0]=x6574;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6571))+(((-1.0)*sj0*x6573))))));
j4eval[2]=IKsign(x6574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6575=cj5*cj5;
IkReal x6576=(r21*sj5);
IkReal x6577=(r11*r21);
IkReal x6578=((1.0)*cj5*r20);
CheckValue<IkReal> x6579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6578))+((r10*r20*x6575))+((r12*r22))+x6577+(((-1.0)*cj5*r10*x6576))+(((-1.0)*x6575*x6577)))),-1);
if(!x6579.valid){
continue;
}
CheckValue<IkReal> x6580 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6576))+(((-1.0)*sj0*x6578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6579.value)))+(x6580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6581=IKsin(j4);
IkReal x6582=IKcos(j4);
IkReal x6583=(r11*sj5);
IkReal x6584=(cj5*r00);
IkReal x6585=(cj5*r10);
IkReal x6586=(r21*sj5);
IkReal x6587=(cj5*r20);
IkReal x6588=(r01*sj5);
IkReal x6589=((1.0)*x6582);
IkReal x6590=((1.0)*x6581);
evalcond[0]=(((x6581*x6586))+(((-1.0)*r22*x6589))+(((-1.0)*x6587*x6590)));
evalcond[1]=(((x6582*x6587))+(((-1.0)*x6586*x6589))+(((-1.0)*r22*x6590)));
evalcond[2]=(sj0+(((-1.0)*r02*x6589))+((x6581*x6588))+(((-1.0)*x6584*x6590)));
evalcond[3]=(cj0+(((-1.0)*r02*x6590))+(((-1.0)*x6588*x6589))+((x6582*x6584)));
evalcond[4]=(sj0+(((-1.0)*r12*x6590))+((x6582*x6585))+(((-1.0)*x6583*x6589)));
evalcond[5]=((((-1.0)*r12*x6589))+((x6581*x6583))+(((-1.0)*x6585*x6590))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6591=cj5*cj5;
IkReal x6592=((1.0)*r21);
IkReal x6593=(cj5*sj5);
IkReal x6594=((1.0)*r20);
CheckValue<IkReal> x6595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6592*x6593))+((r01*r21))+(((-1.0)*r01*x6593*x6594))+((r00*r20*x6591))+((r02*r22))+(((-1.0)*r01*x6591*x6592)))),-1);
if(!x6595.valid){
continue;
}
CheckValue<IkReal> x6596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6594))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6595.value)))+(x6596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6597=IKsin(j4);
IkReal x6598=IKcos(j4);
IkReal x6599=(r11*sj5);
IkReal x6600=(cj5*r00);
IkReal x6601=(cj5*r10);
IkReal x6602=(r21*sj5);
IkReal x6603=(cj5*r20);
IkReal x6604=(r01*sj5);
IkReal x6605=((1.0)*x6598);
IkReal x6606=((1.0)*x6597);
evalcond[0]=(((x6597*x6602))+(((-1.0)*r22*x6605))+(((-1.0)*x6603*x6606)));
evalcond[1]=(((x6598*x6603))+(((-1.0)*r22*x6606))+(((-1.0)*x6602*x6605)));
evalcond[2]=(sj0+((x6597*x6604))+(((-1.0)*r02*x6605))+(((-1.0)*x6600*x6606)));
evalcond[3]=(cj0+((x6598*x6600))+(((-1.0)*r02*x6606))+(((-1.0)*x6604*x6605)));
evalcond[4]=((((-1.0)*x6599*x6605))+sj0+((x6598*x6601))+(((-1.0)*r12*x6606)));
evalcond[5]=((((-1.0)*x6601*x6606))+((x6597*x6599))+(((-1.0)*r12*x6605))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6607=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6607.valid){
continue;
}
CheckValue<IkReal> x6608 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6607.value)))+(x6608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6609=IKsin(j4);
IkReal x6610=IKcos(j4);
IkReal x6611=(r11*sj5);
IkReal x6612=(cj5*r00);
IkReal x6613=(cj5*r10);
IkReal x6614=(r21*sj5);
IkReal x6615=(cj5*r20);
IkReal x6616=(r01*sj5);
IkReal x6617=((1.0)*x6610);
IkReal x6618=((1.0)*x6609);
evalcond[0]=(((x6609*x6614))+(((-1.0)*r22*x6617))+(((-1.0)*x6615*x6618)));
evalcond[1]=((((-1.0)*r22*x6618))+(((-1.0)*x6614*x6617))+((x6610*x6615)));
evalcond[2]=(((x6609*x6616))+(((-1.0)*x6612*x6618))+sj0+(((-1.0)*r02*x6617)));
evalcond[3]=(cj0+(((-1.0)*r02*x6618))+(((-1.0)*x6616*x6617))+((x6610*x6612)));
evalcond[4]=((((-1.0)*r12*x6618))+sj0+(((-1.0)*x6611*x6617))+((x6610*x6613)));
evalcond[5]=((((-1.0)*x6613*x6618))+(((-1.0)*r12*x6617))+((x6609*x6611))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4458421886709)*px))+(((-2.3341236594145)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.4458421886709)*py))+(((-2.3341236594145)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4458421886709)*px))+(((-2.3341236594145)*py))))+IKsqr(((((-8.4458421886709)*py))+(((-2.3341236594145)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4458421886709)*px))+(((-2.3341236594145)*py))), ((((-8.4458421886709)*py))+(((-2.3341236594145)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6619=IKsin(j0);
IkReal x6620=IKcos(j0);
evalcond[0]=((((-0.0304)*x6620))+(((-1.0)*px))+(((0.11)*x6619)));
evalcond[1]=((((-0.0304)*x6619))+(((-0.11)*x6620))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6621=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6621;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6622=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6622;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6623=cj5*cj5;
IkReal x6624=((1.0)*r21);
IkReal x6625=(cj5*r20);
IkReal x6626=(((r00*r20*x6623))+(((-1.0)*r01*x6623*x6624))+(((-1.0)*cj5*r00*sj5*x6624))+((r01*r21))+((r02*r22))+(((-1.0)*r01*sj5*x6625)));
j4eval[0]=x6626;
j4eval[1]=IKsign(x6626);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6624))+((sj0*x6625))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6627=cj5*cj5;
IkReal x6628=((1.0)*r21);
IkReal x6629=(cj5*r20);
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6628))+((sj0*x6629)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
CheckValue<IkReal> x6631=IKPowWithIntegerCheck(IKsign((((r00*r20*x6627))+(((-1.0)*cj5*r00*sj5*x6628))+(((-1.0)*r01*x6627*x6628))+((r01*r21))+((r02*r22))+(((-1.0)*r01*sj5*x6629)))),-1);
if(!x6631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6630.value)+(((1.5707963267949)*(x6631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6632=IKsin(j4);
IkReal x6633=IKcos(j4);
IkReal x6634=((1.0)*cj0);
IkReal x6635=(cj5*r00);
IkReal x6636=(r11*sj5);
IkReal x6637=(cj5*r10);
IkReal x6638=(r21*sj5);
IkReal x6639=(cj5*r20);
IkReal x6640=(r01*sj5);
IkReal x6641=((1.0)*x6633);
IkReal x6642=((1.0)*x6632);
evalcond[0]=((((-1.0)*x6639*x6642))+(((-1.0)*r22*x6641))+((x6632*x6638)));
evalcond[1]=((((-1.0)*x6638*x6641))+(((-1.0)*r22*x6642))+((x6633*x6639)));
evalcond[2]=(sj0+((x6632*x6640))+(((-1.0)*r02*x6641))+(((-1.0)*x6635*x6642)));
evalcond[3]=((((-1.0)*x6637*x6642))+((x6632*x6636))+(((-1.0)*x6634))+(((-1.0)*r12*x6641)));
evalcond[4]=((((-1.0)*x6640*x6641))+((x6633*x6635))+(((-1.0)*r02*x6642))+(((-1.0)*x6634)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6636*x6641))+((x6633*x6637))+(((-1.0)*r12*x6642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6643=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6643.valid){
continue;
}
CheckValue<IkReal> x6644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6643.value)))+(x6644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6645=IKsin(j4);
IkReal x6646=IKcos(j4);
IkReal x6647=((1.0)*cj0);
IkReal x6648=(cj5*r00);
IkReal x6649=(r11*sj5);
IkReal x6650=(cj5*r10);
IkReal x6651=(r21*sj5);
IkReal x6652=(cj5*r20);
IkReal x6653=(r01*sj5);
IkReal x6654=((1.0)*x6646);
IkReal x6655=((1.0)*x6645);
evalcond[0]=((((-1.0)*r22*x6654))+((x6645*x6651))+(((-1.0)*x6652*x6655)));
evalcond[1]=((((-1.0)*x6651*x6654))+(((-1.0)*r22*x6655))+((x6646*x6652)));
evalcond[2]=(((x6645*x6653))+(((-1.0)*x6648*x6655))+sj0+(((-1.0)*r02*x6654)));
evalcond[3]=((((-1.0)*x6647))+(((-1.0)*r12*x6654))+(((-1.0)*x6650*x6655))+((x6645*x6649)));
evalcond[4]=((((-1.0)*x6647))+(((-1.0)*x6653*x6654))+((x6646*x6648))+(((-1.0)*r02*x6655)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6649*x6654))+((x6646*x6650))+(((-1.0)*r12*x6655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6656=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6656.valid){
continue;
}
CheckValue<IkReal> x6657 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6656.value)))+(x6657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6658=IKsin(j4);
IkReal x6659=IKcos(j4);
IkReal x6660=((1.0)*cj0);
IkReal x6661=(cj5*r00);
IkReal x6662=(r11*sj5);
IkReal x6663=(cj5*r10);
IkReal x6664=(r21*sj5);
IkReal x6665=(cj5*r20);
IkReal x6666=(r01*sj5);
IkReal x6667=((1.0)*x6659);
IkReal x6668=((1.0)*x6658);
evalcond[0]=(((x6658*x6664))+(((-1.0)*x6665*x6668))+(((-1.0)*r22*x6667)));
evalcond[1]=((((-1.0)*x6664*x6667))+((x6659*x6665))+(((-1.0)*r22*x6668)));
evalcond[2]=(sj0+(((-1.0)*x6661*x6668))+((x6658*x6666))+(((-1.0)*r02*x6667)));
evalcond[3]=((((-1.0)*x6660))+(((-1.0)*r12*x6667))+((x6658*x6662))+(((-1.0)*x6663*x6668)));
evalcond[4]=(((x6659*x6661))+(((-1.0)*x6660))+(((-1.0)*r02*x6668))+(((-1.0)*x6666*x6667)));
evalcond[5]=(((x6659*x6663))+(((-1.0)*sj0))+(((-1.0)*r12*x6668))+(((-1.0)*x6662*x6667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6669=IKsin(j0);
IkReal x6670=IKcos(j0);
IkReal x6671=((1.0)*cj5);
IkReal x6672=(r10*sj5);
IkReal x6673=((0.08535)*cj5);
IkReal x6674=(r00*sj5);
evalcond[0]=(x6670+(((-1.0)*r01*x6671))+(((-1.0)*x6674)));
evalcond[1]=(x6669+(((-1.0)*r11*x6671))+(((-1.0)*x6672)));
evalcond[2]=((((-0.08535)*x6674))+(((-1.0)*r01*x6673))+(((-1.0)*px))+(((0.11)*x6669)));
evalcond[3]=((((-0.08535)*x6672))+(((-1.0)*r11*x6673))+(((-1.0)*py))+(((-0.11)*x6670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6675=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6675;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6676=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6676;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6677=cj5*cj5;
IkReal x6678=r21*r21;
IkReal x6679=(r21*sj5);
IkReal x6680=(cj5*r20);
IkReal x6681=((r22*r22)+x6678+((x6677*(r20*r20)))+(((-2.0)*x6679*x6680))+(((-1.0)*x6677*x6678)));
j4eval[0]=x6681;
j4eval[1]=IKsign(x6681);
j4eval[2]=((IKabs((x6679+(((-1.0)*x6680)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6682=cj5*cj5;
IkReal x6683=r21*r21;
IkReal x6684=(r21*sj5);
IkReal x6685=(cj5*r20);
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign((((x6682*(r20*r20)))+(r22*r22)+x6683+(((-2.0)*x6684*x6685))+(((-1.0)*x6682*x6683)))),-1);
if(!x6686.valid){
continue;
}
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal(r22),IkReal((x6684+(((-1.0)*x6685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6686.value)))+(x6687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6688=IKsin(j4);
IkReal x6689=IKcos(j4);
IkReal x6690=(r11*sj5);
IkReal x6691=(r21*sj5);
IkReal x6692=(cj5*r00);
IkReal x6693=(cj5*r10);
IkReal x6694=(cj5*r20);
IkReal x6695=(r01*sj5);
IkReal x6696=((1.0)*x6689);
IkReal x6697=((1.0)*x6688);
evalcond[0]=((((-1.0)*x6694*x6697))+((x6688*x6691))+(((-1.0)*r22*x6696)));
evalcond[1]=((((-1.0)*r02*x6697))+((x6689*x6692))+(((-1.0)*x6695*x6696)));
evalcond[2]=(((x6689*x6693))+(((-1.0)*x6690*x6696))+(((-1.0)*r12*x6697)));
evalcond[3]=(sj0+(((-1.0)*r02*x6696))+((x6688*x6695))+(((-1.0)*x6692*x6697)));
evalcond[4]=((1.0)+((x6689*x6694))+(((-1.0)*x6691*x6696))+(((-1.0)*r22*x6697)));
evalcond[5]=((((-1.0)*x6693*x6697))+((x6688*x6690))+(((-1.0)*r12*x6696))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6698=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6698.value)))+(x6699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKsin(j4);
IkReal x6701=IKcos(j4);
IkReal x6702=(r11*sj5);
IkReal x6703=(r21*sj5);
IkReal x6704=(cj5*r00);
IkReal x6705=(cj5*r10);
IkReal x6706=(cj5*r20);
IkReal x6707=(r01*sj5);
IkReal x6708=((1.0)*x6701);
IkReal x6709=((1.0)*x6700);
evalcond[0]=((((-1.0)*x6706*x6709))+(((-1.0)*r22*x6708))+((x6700*x6703)));
evalcond[1]=((((-1.0)*r02*x6709))+((x6701*x6704))+(((-1.0)*x6707*x6708)));
evalcond[2]=((((-1.0)*x6702*x6708))+(((-1.0)*r12*x6709))+((x6701*x6705)));
evalcond[3]=(sj0+(((-1.0)*r02*x6708))+((x6700*x6707))+(((-1.0)*x6704*x6709)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6709))+(((-1.0)*x6703*x6708))+((x6701*x6706)));
evalcond[5]=((((-1.0)*x6705*x6709))+((x6700*x6702))+(((-1.0)*r12*x6708))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6710 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6710.valid){
continue;
}
CheckValue<IkReal> x6711=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6710.value)+(((1.5707963267949)*(x6711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6712=IKsin(j4);
IkReal x6713=IKcos(j4);
IkReal x6714=(r11*sj5);
IkReal x6715=(r21*sj5);
IkReal x6716=(cj5*r00);
IkReal x6717=(cj5*r10);
IkReal x6718=(cj5*r20);
IkReal x6719=(r01*sj5);
IkReal x6720=((1.0)*x6713);
IkReal x6721=((1.0)*x6712);
evalcond[0]=((((-1.0)*r22*x6720))+(((-1.0)*x6718*x6721))+((x6712*x6715)));
evalcond[1]=((((-1.0)*x6719*x6720))+(((-1.0)*r02*x6721))+((x6713*x6716)));
evalcond[2]=((((-1.0)*x6714*x6720))+(((-1.0)*r12*x6721))+((x6713*x6717)));
evalcond[3]=(sj0+((x6712*x6719))+(((-1.0)*r02*x6720))+(((-1.0)*x6716*x6721)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6721))+(((-1.0)*x6715*x6720))+((x6713*x6718)));
evalcond[5]=(((x6712*x6714))+(((-1.0)*x6717*x6721))+(((-1.0)*r12*x6720))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.70382833862891)*py))+(((1.91053278897623)*px))), ((((3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6722=IKsin(j0);
IkReal x6723=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.21325)*x6723))+(((0.11)*x6722)));
evalcond[1]=((((-0.11)*x6723))+(((-1.0)*py))+(((0.21325)*x6722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6724=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6724;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6725=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6725;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6726=cj5*cj5;
IkReal x6727=((1.0)*r21);
IkReal x6728=(cj5*r20);
IkReal x6729=(((r00*r20*x6726))+((r01*r21))+(((-1.0)*r01*sj5*x6728))+(((-1.0)*cj5*r00*sj5*x6727))+((r02*r22))+(((-1.0)*r01*x6726*x6727)));
j4eval[0]=x6729;
j4eval[1]=IKsign(x6729);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x6727))+((sj0*x6728)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6730=cj5*cj5;
IkReal x6731=((1.0)*r21);
IkReal x6732=(cj5*r20);
CheckValue<IkReal> x6733 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6731))+((sj0*x6732)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6733.valid){
continue;
}
CheckValue<IkReal> x6734=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6730*x6731))+(((-1.0)*r01*sj5*x6732))+((r00*r20*x6730))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6731)))),-1);
if(!x6734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6733.value)+(((1.5707963267949)*(x6734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6735=IKsin(j4);
IkReal x6736=IKcos(j4);
IkReal x6737=((1.0)*cj0);
IkReal x6738=(cj5*r00);
IkReal x6739=(r11*sj5);
IkReal x6740=(cj5*r10);
IkReal x6741=(r21*sj5);
IkReal x6742=(cj5*r20);
IkReal x6743=(r01*sj5);
IkReal x6744=((1.0)*x6736);
IkReal x6745=((1.0)*x6735);
evalcond[0]=((((-1.0)*x6742*x6745))+(((-1.0)*r22*x6744))+((x6735*x6741)));
evalcond[1]=((((-1.0)*r22*x6745))+((x6736*x6742))+(((-1.0)*x6741*x6744)));
evalcond[2]=(sj0+(((-1.0)*r02*x6744))+(((-1.0)*x6738*x6745))+((x6735*x6743)));
evalcond[3]=((((-1.0)*r12*x6744))+((x6735*x6739))+(((-1.0)*x6737))+(((-1.0)*x6740*x6745)));
evalcond[4]=((((-1.0)*r02*x6745))+((x6736*x6738))+(((-1.0)*x6743*x6744))+(((-1.0)*x6737)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6745))+((x6736*x6740))+(((-1.0)*x6739*x6744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6746=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6746.valid){
continue;
}
CheckValue<IkReal> x6747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6746.value)))+(x6747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6748=IKsin(j4);
IkReal x6749=IKcos(j4);
IkReal x6750=((1.0)*cj0);
IkReal x6751=(cj5*r00);
IkReal x6752=(r11*sj5);
IkReal x6753=(cj5*r10);
IkReal x6754=(r21*sj5);
IkReal x6755=(cj5*r20);
IkReal x6756=(r01*sj5);
IkReal x6757=((1.0)*x6749);
IkReal x6758=((1.0)*x6748);
evalcond[0]=((((-1.0)*x6755*x6758))+(((-1.0)*r22*x6757))+((x6748*x6754)));
evalcond[1]=((((-1.0)*r22*x6758))+((x6749*x6755))+(((-1.0)*x6754*x6757)));
evalcond[2]=(sj0+(((-1.0)*x6751*x6758))+(((-1.0)*r02*x6757))+((x6748*x6756)));
evalcond[3]=((((-1.0)*x6750))+(((-1.0)*r12*x6757))+((x6748*x6752))+(((-1.0)*x6753*x6758)));
evalcond[4]=((((-1.0)*x6750))+(((-1.0)*x6756*x6757))+((x6749*x6751))+(((-1.0)*r02*x6758)));
evalcond[5]=((((-1.0)*sj0))+((x6749*x6753))+(((-1.0)*r12*x6758))+(((-1.0)*x6752*x6757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6759.valid){
continue;
}
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6759.value)))+(x6760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6761=IKsin(j4);
IkReal x6762=IKcos(j4);
IkReal x6763=((1.0)*cj0);
IkReal x6764=(cj5*r00);
IkReal x6765=(r11*sj5);
IkReal x6766=(cj5*r10);
IkReal x6767=(r21*sj5);
IkReal x6768=(cj5*r20);
IkReal x6769=(r01*sj5);
IkReal x6770=((1.0)*x6762);
IkReal x6771=((1.0)*x6761);
evalcond[0]=((((-1.0)*x6768*x6771))+(((-1.0)*r22*x6770))+((x6761*x6767)));
evalcond[1]=((((-1.0)*r22*x6771))+((x6762*x6768))+(((-1.0)*x6767*x6770)));
evalcond[2]=(sj0+(((-1.0)*x6764*x6771))+(((-1.0)*r02*x6770))+((x6761*x6769)));
evalcond[3]=((((-1.0)*r12*x6770))+(((-1.0)*x6763))+((x6761*x6765))+(((-1.0)*x6766*x6771)));
evalcond[4]=((((-1.0)*x6769*x6770))+(((-1.0)*x6763))+(((-1.0)*r02*x6771))+((x6762*x6764)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6771))+(((-1.0)*x6765*x6770))+((x6762*x6766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6772=((1.0)*sj5);
IkReal x6773=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6773))+(((-1.0)*r10*x6772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6773))+(((-1.0)*r00*x6772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6773))+(((-1.0)*r10*x6772))))+IKsqr(((((-1.0)*r01*x6773))+(((-1.0)*r00*x6772))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6773))+(((-1.0)*r10*x6772))), ((((-1.0)*r01*x6773))+(((-1.0)*r00*x6772))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6774=IKsin(j0);
IkReal x6775=IKcos(j0);
IkReal x6776=((1.0)*cj5);
IkReal x6777=(r10*sj5);
IkReal x6778=((0.08535)*cj5);
IkReal x6779=(r00*sj5);
evalcond[0]=((((-1.0)*r01*x6776))+(((-1.0)*x6775))+(((-1.0)*x6779)));
evalcond[1]=((((-1.0)*r11*x6776))+(((-1.0)*x6777))+(((-1.0)*x6774)));
evalcond[2]=((((-0.08535)*x6779))+(((-1.0)*r01*x6778))+(((-1.0)*px))+(((0.11)*x6774)));
evalcond[3]=((((-0.08535)*x6777))+(((-1.0)*r11*x6778))+(((-0.11)*x6775))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6780=((1.0)*sj5);
IkReal x6781=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6780)));
j4eval[0]=x6781;
j4eval[1]=IKsign(x6781);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6780))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6782=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6782;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6783=r21*r21;
IkReal x6784=cj5*cj5;
IkReal x6785=(r21*sj5);
IkReal x6786=(cj5*r20);
IkReal x6787=((((-1.0)*x6783))+(((-1.0)*x6784*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x6785*x6786))+((x6783*x6784)));
j4eval[0]=x6787;
j4eval[1]=((IKabs(((((-1.0)*x6786))+x6785)))+(IKabs(r22)));
j4eval[2]=IKsign(x6787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6788=r21*r21;
IkReal x6789=cj5*cj5;
IkReal x6790=(r21*sj5);
IkReal x6791=(cj5*r20);
CheckValue<IkReal> x6792 = IKatan2WithCheck(IkReal(r22),IkReal((x6790+(((-1.0)*x6791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6792.valid){
continue;
}
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(IKsign(((((2.0)*x6790*x6791))+((x6788*x6789))+(((-1.0)*x6788))+(((-1.0)*x6789*(r20*r20)))+(((-1.0)*(r22*r22))))),-1);
if(!x6793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6792.value)+(((1.5707963267949)*(x6793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6794=IKsin(j4);
IkReal x6795=IKcos(j4);
IkReal x6796=(r11*sj5);
IkReal x6797=(r21*sj5);
IkReal x6798=(cj5*r00);
IkReal x6799=(cj5*r10);
IkReal x6800=(cj5*r20);
IkReal x6801=(r01*sj5);
IkReal x6802=((1.0)*x6795);
IkReal x6803=((1.0)*x6794);
evalcond[0]=((((-1.0)*r22*x6802))+((x6794*x6797))+(((-1.0)*x6800*x6803)));
evalcond[1]=((((-1.0)*r02*x6803))+((x6795*x6798))+(((-1.0)*x6801*x6802)));
evalcond[2]=((((-1.0)*x6796*x6802))+(((-1.0)*r12*x6803))+((x6795*x6799)));
evalcond[3]=(sj0+(((-1.0)*r02*x6802))+((x6794*x6801))+(((-1.0)*x6798*x6803)));
evalcond[4]=((-1.0)+((x6795*x6800))+(((-1.0)*r22*x6803))+(((-1.0)*x6797*x6802)));
evalcond[5]=((((-1.0)*r12*x6802))+((x6794*x6796))+(((-1.0)*x6799*x6803))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6804=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6804.value)))+(x6805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6806=IKsin(j4);
IkReal x6807=IKcos(j4);
IkReal x6808=(r11*sj5);
IkReal x6809=(r21*sj5);
IkReal x6810=(cj5*r00);
IkReal x6811=(cj5*r10);
IkReal x6812=(cj5*r20);
IkReal x6813=(r01*sj5);
IkReal x6814=((1.0)*x6807);
IkReal x6815=((1.0)*x6806);
evalcond[0]=((((-1.0)*x6812*x6815))+(((-1.0)*r22*x6814))+((x6806*x6809)));
evalcond[1]=(((x6807*x6810))+(((-1.0)*x6813*x6814))+(((-1.0)*r02*x6815)));
evalcond[2]=(((x6807*x6811))+(((-1.0)*x6808*x6814))+(((-1.0)*r12*x6815)));
evalcond[3]=(sj0+(((-1.0)*x6810*x6815))+((x6806*x6813))+(((-1.0)*r02*x6814)));
evalcond[4]=((-1.0)+((x6807*x6812))+(((-1.0)*x6809*x6814))+(((-1.0)*r22*x6815)));
evalcond[5]=((((-1.0)*x6811*x6815))+(((-1.0)*r12*x6814))+(((-1.0)*cj0))+((x6806*x6808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6816=((1.0)*sj5);
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6816))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6816)))),-1);
if(!x6818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6817.value)+(((1.5707963267949)*(x6818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6819=IKsin(j4);
IkReal x6820=IKcos(j4);
IkReal x6821=(r11*sj5);
IkReal x6822=(r21*sj5);
IkReal x6823=(cj5*r00);
IkReal x6824=(cj5*r10);
IkReal x6825=(cj5*r20);
IkReal x6826=(r01*sj5);
IkReal x6827=((1.0)*x6820);
IkReal x6828=((1.0)*x6819);
evalcond[0]=(((x6819*x6822))+(((-1.0)*r22*x6827))+(((-1.0)*x6825*x6828)));
evalcond[1]=((((-1.0)*r02*x6828))+((x6820*x6823))+(((-1.0)*x6826*x6827)));
evalcond[2]=((((-1.0)*r12*x6828))+((x6820*x6824))+(((-1.0)*x6821*x6827)));
evalcond[3]=(sj0+(((-1.0)*r02*x6827))+(((-1.0)*x6823*x6828))+((x6819*x6826)));
evalcond[4]=((-1.0)+((x6820*x6825))+(((-1.0)*r22*x6828))+(((-1.0)*x6822*x6827)));
evalcond[5]=((((-1.0)*r12*x6827))+(((-1.0)*x6824*x6828))+((x6819*x6821))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((-3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.70382833862891)*py))+(((1.91053278897623)*px))), ((((-3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6829=IKsin(j0);
IkReal x6830=IKcos(j0);
evalcond[0]=((((-0.21325)*x6830))+(((-1.0)*px))+(((0.11)*x6829)));
evalcond[1]=((((-0.21325)*x6829))+(((-0.11)*x6830))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6831=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6831;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6832=cj5*cj5;
IkReal x6833=((1.0)*r21);
IkReal x6834=(cj5*sj5);
IkReal x6835=((1.0)*r20);
IkReal x6836=((((-1.0)*r01*x6832*x6833))+(((-1.0)*r00*x6833*x6834))+(((-1.0)*r01*x6834*x6835))+((r01*r21))+((r00*r20*x6832))+((r02*r22)));
j4eval[0]=x6836;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6835))))));
j4eval[2]=IKsign(x6836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6837=cj5*cj5;
IkReal x6838=(r21*sj5);
IkReal x6839=(r11*r21);
IkReal x6840=((1.0)*cj5*r20);
IkReal x6841=((((-1.0)*cj5*r10*x6838))+((r12*r22))+x6839+((r10*r20*x6837))+(((-1.0)*x6837*x6839))+(((-1.0)*r11*sj5*x6840)));
j4eval[0]=x6841;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6838))+(((-1.0)*sj0*x6840))))));
j4eval[2]=IKsign(x6841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6842=cj5*cj5;
IkReal x6843=(r21*sj5);
IkReal x6844=(r11*r21);
IkReal x6845=((1.0)*cj5*r20);
CheckValue<IkReal> x6846 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6845))+((sj0*x6843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6846.valid){
continue;
}
CheckValue<IkReal> x6847=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6843))+((r12*r22))+x6844+((r10*r20*x6842))+(((-1.0)*r11*sj5*x6845))+(((-1.0)*x6842*x6844)))),-1);
if(!x6847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6846.value)+(((1.5707963267949)*(x6847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6848=IKsin(j4);
IkReal x6849=IKcos(j4);
IkReal x6850=(r11*sj5);
IkReal x6851=(cj5*r00);
IkReal x6852=(cj5*r10);
IkReal x6853=(r21*sj5);
IkReal x6854=(cj5*r20);
IkReal x6855=(r01*sj5);
IkReal x6856=((1.0)*x6849);
IkReal x6857=((1.0)*x6848);
evalcond[0]=(((x6848*x6853))+(((-1.0)*x6854*x6857))+(((-1.0)*r22*x6856)));
evalcond[1]=(((x6849*x6854))+(((-1.0)*r22*x6857))+(((-1.0)*x6853*x6856)));
evalcond[2]=(sj0+(((-1.0)*r02*x6856))+((x6848*x6855))+(((-1.0)*x6851*x6857)));
evalcond[3]=(cj0+(((-1.0)*r02*x6857))+((x6849*x6851))+(((-1.0)*x6855*x6856)));
evalcond[4]=(sj0+(((-1.0)*r12*x6857))+((x6849*x6852))+(((-1.0)*x6850*x6856)));
evalcond[5]=((((-1.0)*r12*x6856))+((x6848*x6850))+(((-1.0)*x6852*x6857))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6858=cj5*cj5;
IkReal x6859=((1.0)*r21);
IkReal x6860=(cj5*sj5);
IkReal x6861=((1.0)*r20);
CheckValue<IkReal> x6862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6858*x6859))+((r01*r21))+(((-1.0)*r00*x6859*x6860))+((r02*r22))+((r00*r20*x6858))+(((-1.0)*r01*x6860*x6861)))),-1);
if(!x6862.valid){
continue;
}
CheckValue<IkReal> x6863 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6862.value)))+(x6863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6864=IKsin(j4);
IkReal x6865=IKcos(j4);
IkReal x6866=(r11*sj5);
IkReal x6867=(cj5*r00);
IkReal x6868=(cj5*r10);
IkReal x6869=(r21*sj5);
IkReal x6870=(cj5*r20);
IkReal x6871=(r01*sj5);
IkReal x6872=((1.0)*x6865);
IkReal x6873=((1.0)*x6864);
evalcond[0]=(((x6864*x6869))+(((-1.0)*r22*x6872))+(((-1.0)*x6870*x6873)));
evalcond[1]=((((-1.0)*x6869*x6872))+((x6865*x6870))+(((-1.0)*r22*x6873)));
evalcond[2]=(sj0+((x6864*x6871))+(((-1.0)*r02*x6872))+(((-1.0)*x6867*x6873)));
evalcond[3]=((((-1.0)*x6871*x6872))+cj0+((x6865*x6867))+(((-1.0)*r02*x6873)));
evalcond[4]=(sj0+((x6865*x6868))+(((-1.0)*r12*x6873))+(((-1.0)*x6866*x6872)));
evalcond[5]=((((-1.0)*x6868*x6873))+((x6864*x6866))+(((-1.0)*r12*x6872))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6874=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6874.valid){
continue;
}
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6874.value)))+(x6875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6876=IKsin(j4);
IkReal x6877=IKcos(j4);
IkReal x6878=(r11*sj5);
IkReal x6879=(cj5*r00);
IkReal x6880=(cj5*r10);
IkReal x6881=(r21*sj5);
IkReal x6882=(cj5*r20);
IkReal x6883=(r01*sj5);
IkReal x6884=((1.0)*x6877);
IkReal x6885=((1.0)*x6876);
evalcond[0]=(((x6876*x6881))+(((-1.0)*x6882*x6885))+(((-1.0)*r22*x6884)));
evalcond[1]=((((-1.0)*x6881*x6884))+((x6877*x6882))+(((-1.0)*r22*x6885)));
evalcond[2]=(sj0+((x6876*x6883))+(((-1.0)*r02*x6884))+(((-1.0)*x6879*x6885)));
evalcond[3]=(cj0+(((-1.0)*r02*x6885))+(((-1.0)*x6883*x6884))+((x6877*x6879)));
evalcond[4]=(sj0+((x6877*x6880))+(((-1.0)*x6878*x6884))+(((-1.0)*r12*x6885)));
evalcond[5]=(((x6876*x6878))+(((-1.0)*x6880*x6885))+(((-1.0)*r12*x6884))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06875370968653)*py))+(((0.498058454947511)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.498058454947511)*py))+(((2.06875370968653)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06875370968653)*py))+(((0.498058454947511)*px))))+IKsqr(((((-0.498058454947511)*py))+(((2.06875370968653)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06875370968653)*py))+(((0.498058454947511)*px))), ((((-0.498058454947511)*py))+(((2.06875370968653)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6886=IKsin(j0);
IkReal x6887=IKcos(j0);
evalcond[0]=((((0.11)*x6886))+(((0.4569)*x6887))+(((-1.0)*px)));
evalcond[1]=((((0.4569)*x6886))+(((-1.0)*py))+(((-0.11)*x6887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6888=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6888;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6889=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6889;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6890=cj5*cj5;
IkReal x6891=((1.0)*r21);
IkReal x6892=(cj5*r20);
IkReal x6893=(((r00*r20*x6890))+(((-1.0)*r01*x6890*x6891))+((r01*r21))+(((-1.0)*r01*sj5*x6892))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6891)));
j4eval[0]=x6893;
j4eval[1]=IKsign(x6893);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6891))+((sj0*x6892))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6894=cj5*cj5;
IkReal x6895=((1.0)*r21);
IkReal x6896=(cj5*r20);
CheckValue<IkReal> x6897 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6895))+((sj0*x6896)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6897.valid){
continue;
}
CheckValue<IkReal> x6898=IKPowWithIntegerCheck(IKsign((((r00*r20*x6894))+((r01*r21))+(((-1.0)*r01*x6894*x6895))+(((-1.0)*r01*sj5*x6896))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6895)))),-1);
if(!x6898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6897.value)+(((1.5707963267949)*(x6898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6899=IKsin(j4);
IkReal x6900=IKcos(j4);
IkReal x6901=((1.0)*cj0);
IkReal x6902=(cj5*r00);
IkReal x6903=(r11*sj5);
IkReal x6904=(cj5*r10);
IkReal x6905=(r21*sj5);
IkReal x6906=(cj5*r20);
IkReal x6907=(r01*sj5);
IkReal x6908=((1.0)*x6900);
IkReal x6909=((1.0)*x6899);
evalcond[0]=(((x6899*x6905))+(((-1.0)*r22*x6908))+(((-1.0)*x6906*x6909)));
evalcond[1]=((((-1.0)*r22*x6909))+((x6900*x6906))+(((-1.0)*x6905*x6908)));
evalcond[2]=((((-1.0)*r02*x6908))+sj0+((x6899*x6907))+(((-1.0)*x6902*x6909)));
evalcond[3]=(((x6899*x6903))+(((-1.0)*x6904*x6909))+(((-1.0)*r12*x6908))+(((-1.0)*x6901)));
evalcond[4]=((((-1.0)*r02*x6909))+((x6900*x6902))+(((-1.0)*x6901))+(((-1.0)*x6907*x6908)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6909))+((x6900*x6904))+(((-1.0)*x6903*x6908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6910=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6910.valid){
continue;
}
CheckValue<IkReal> x6911 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6910.value)))+(x6911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6912=IKsin(j4);
IkReal x6913=IKcos(j4);
IkReal x6914=((1.0)*cj0);
IkReal x6915=(cj5*r00);
IkReal x6916=(r11*sj5);
IkReal x6917=(cj5*r10);
IkReal x6918=(r21*sj5);
IkReal x6919=(cj5*r20);
IkReal x6920=(r01*sj5);
IkReal x6921=((1.0)*x6913);
IkReal x6922=((1.0)*x6912);
evalcond[0]=((((-1.0)*r22*x6921))+((x6912*x6918))+(((-1.0)*x6919*x6922)));
evalcond[1]=(((x6913*x6919))+(((-1.0)*r22*x6922))+(((-1.0)*x6918*x6921)));
evalcond[2]=(((x6912*x6920))+sj0+(((-1.0)*r02*x6921))+(((-1.0)*x6915*x6922)));
evalcond[3]=(((x6912*x6916))+(((-1.0)*x6914))+(((-1.0)*x6917*x6922))+(((-1.0)*r12*x6921)));
evalcond[4]=(((x6913*x6915))+(((-1.0)*r02*x6922))+(((-1.0)*x6914))+(((-1.0)*x6920*x6921)));
evalcond[5]=((((-1.0)*x6916*x6921))+(((-1.0)*sj0))+((x6913*x6917))+(((-1.0)*r12*x6922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6923.value)))+(x6924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKsin(j4);
IkReal x6926=IKcos(j4);
IkReal x6927=((1.0)*cj0);
IkReal x6928=(cj5*r00);
IkReal x6929=(r11*sj5);
IkReal x6930=(cj5*r10);
IkReal x6931=(r21*sj5);
IkReal x6932=(cj5*r20);
IkReal x6933=(r01*sj5);
IkReal x6934=((1.0)*x6926);
IkReal x6935=((1.0)*x6925);
evalcond[0]=((((-1.0)*x6932*x6935))+(((-1.0)*r22*x6934))+((x6925*x6931)));
evalcond[1]=(((x6926*x6932))+(((-1.0)*r22*x6935))+(((-1.0)*x6931*x6934)));
evalcond[2]=(sj0+(((-1.0)*r02*x6934))+(((-1.0)*x6928*x6935))+((x6925*x6933)));
evalcond[3]=((((-1.0)*x6930*x6935))+(((-1.0)*r12*x6934))+((x6925*x6929))+(((-1.0)*x6927)));
evalcond[4]=(((x6926*x6928))+(((-1.0)*r02*x6935))+(((-1.0)*x6927))+(((-1.0)*x6933*x6934)));
evalcond[5]=((((-1.0)*sj0))+((x6926*x6930))+(((-1.0)*r12*x6935))+(((-1.0)*x6929*x6934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4458421886709)*px))+(((2.3341236594145)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.4458421886709)*py))+(((2.3341236594145)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4458421886709)*px))+(((2.3341236594145)*py))))+IKsqr(((((-8.4458421886709)*py))+(((2.3341236594145)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4458421886709)*px))+(((2.3341236594145)*py))), ((((-8.4458421886709)*py))+(((2.3341236594145)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6936=IKsin(j0);
IkReal x6937=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.11)*x6936))+(((0.0304)*x6937)));
evalcond[1]=((((-0.11)*x6937))+(((-1.0)*py))+(((0.0304)*x6936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6938=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6938;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6939=cj5*cj5;
IkReal x6940=((1.0)*r21);
IkReal x6941=(cj5*sj5);
IkReal x6942=((1.0)*r20);
IkReal x6943=((((-1.0)*r01*x6939*x6940))+((r01*r21))+(((-1.0)*r00*x6940*x6941))+(((-1.0)*r01*x6941*x6942))+((r00*r20*x6939))+((r02*r22)));
j4eval[0]=x6943;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6942))))));
j4eval[2]=IKsign(x6943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6944=cj5*cj5;
IkReal x6945=(r21*sj5);
IkReal x6946=(r11*r21);
IkReal x6947=((1.0)*cj5*r20);
IkReal x6948=((((-1.0)*cj5*r10*x6945))+((r12*r22))+(((-1.0)*r11*sj5*x6947))+(((-1.0)*x6944*x6946))+x6946+((r10*r20*x6944)));
j4eval[0]=x6948;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6947))+((sj0*x6945)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6949=cj5*cj5;
IkReal x6950=(r21*sj5);
IkReal x6951=(r11*r21);
IkReal x6952=((1.0)*cj5*r20);
CheckValue<IkReal> x6953 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6952))+((sj0*x6950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6953.valid){
continue;
}
CheckValue<IkReal> x6954=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6949*x6951))+(((-1.0)*cj5*r10*x6950))+((r12*r22))+(((-1.0)*r11*sj5*x6952))+x6951+((r10*r20*x6949)))),-1);
if(!x6954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6953.value)+(((1.5707963267949)*(x6954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6955=IKsin(j4);
IkReal x6956=IKcos(j4);
IkReal x6957=(r11*sj5);
IkReal x6958=(cj5*r00);
IkReal x6959=(cj5*r10);
IkReal x6960=(r21*sj5);
IkReal x6961=(cj5*r20);
IkReal x6962=(r01*sj5);
IkReal x6963=((1.0)*x6956);
IkReal x6964=((1.0)*x6955);
evalcond[0]=(((x6955*x6960))+(((-1.0)*x6961*x6964))+(((-1.0)*r22*x6963)));
evalcond[1]=(((x6956*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6960*x6963)));
evalcond[2]=(((x6955*x6962))+(((-1.0)*r02*x6963))+sj0+(((-1.0)*x6958*x6964)));
evalcond[3]=(((x6956*x6958))+(((-1.0)*r02*x6964))+cj0+(((-1.0)*x6962*x6963)));
evalcond[4]=(((x6956*x6959))+sj0+(((-1.0)*r12*x6964))+(((-1.0)*x6957*x6963)));
evalcond[5]=((((-1.0)*x6959*x6964))+(((-1.0)*r12*x6963))+((x6955*x6957))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6965=cj5*cj5;
IkReal x6966=((1.0)*r21);
IkReal x6967=(cj5*sj5);
IkReal x6968=((1.0)*r20);
CheckValue<IkReal> x6969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6965*x6966))+((r01*r21))+((r00*r20*x6965))+(((-1.0)*r00*x6966*x6967))+(((-1.0)*r01*x6967*x6968))+((r02*r22)))),-1);
if(!x6969.valid){
continue;
}
CheckValue<IkReal> x6970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6969.value)))+(x6970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6971=IKsin(j4);
IkReal x6972=IKcos(j4);
IkReal x6973=(r11*sj5);
IkReal x6974=(cj5*r00);
IkReal x6975=(cj5*r10);
IkReal x6976=(r21*sj5);
IkReal x6977=(cj5*r20);
IkReal x6978=(r01*sj5);
IkReal x6979=((1.0)*x6972);
IkReal x6980=((1.0)*x6971);
evalcond[0]=((((-1.0)*r22*x6979))+(((-1.0)*x6977*x6980))+((x6971*x6976)));
evalcond[1]=(((x6972*x6977))+(((-1.0)*x6976*x6979))+(((-1.0)*r22*x6980)));
evalcond[2]=(sj0+(((-1.0)*r02*x6979))+(((-1.0)*x6974*x6980))+((x6971*x6978)));
evalcond[3]=(((x6972*x6974))+cj0+(((-1.0)*x6978*x6979))+(((-1.0)*r02*x6980)));
evalcond[4]=(((x6972*x6975))+sj0+(((-1.0)*r12*x6980))+(((-1.0)*x6973*x6979)));
evalcond[5]=((((-1.0)*x6975*x6980))+(((-1.0)*r12*x6979))+((x6971*x6973))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6981=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6981.valid){
continue;
}
CheckValue<IkReal> x6982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6981.value)))+(x6982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6983=IKsin(j4);
IkReal x6984=IKcos(j4);
IkReal x6985=(r11*sj5);
IkReal x6986=(cj5*r00);
IkReal x6987=(cj5*r10);
IkReal x6988=(r21*sj5);
IkReal x6989=(cj5*r20);
IkReal x6990=(r01*sj5);
IkReal x6991=((1.0)*x6984);
IkReal x6992=((1.0)*x6983);
evalcond[0]=(((x6983*x6988))+(((-1.0)*r22*x6991))+(((-1.0)*x6989*x6992)));
evalcond[1]=((((-1.0)*r22*x6992))+((x6984*x6989))+(((-1.0)*x6988*x6991)));
evalcond[2]=(sj0+((x6983*x6990))+(((-1.0)*x6986*x6992))+(((-1.0)*r02*x6991)));
evalcond[3]=(cj0+(((-1.0)*x6990*x6991))+(((-1.0)*r02*x6992))+((x6984*x6986)));
evalcond[4]=((((-1.0)*r12*x6992))+sj0+(((-1.0)*x6985*x6991))+((x6984*x6987)));
evalcond[5]=((((-1.0)*r12*x6991))+((x6983*x6985))+(((-1.0)*x6987*x6992))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6993=((1.0)*sj5);
IkReal x6994=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6994))+(((-1.0)*r10*x6993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6993))+(((-1.0)*r01*x6994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6994))+(((-1.0)*r10*x6993))))+IKsqr(((((-1.0)*r00*x6993))+(((-1.0)*r01*x6994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6994))+(((-1.0)*r10*x6993))), ((((-1.0)*r00*x6993))+(((-1.0)*r01*x6994))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6995=IKsin(j0);
IkReal x6996=IKcos(j0);
IkReal x6997=((1.0)*cj5);
IkReal x6998=(r10*sj5);
IkReal x6999=((0.08535)*cj5);
IkReal x7000=(r00*sj5);
evalcond[0]=((((-1.0)*x7000))+(((-1.0)*x6996))+(((-1.0)*r01*x6997)));
evalcond[1]=((((-1.0)*r11*x6997))+(((-1.0)*x6995))+(((-1.0)*x6998)));
evalcond[2]=((((-0.08535)*x7000))+(((0.11)*x6995))+(((-1.0)*px))+(((-1.0)*r01*x6999)));
evalcond[3]=((((-1.0)*r11*x6999))+(((-0.08535)*x6998))+(((-0.11)*x6996))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7001=((1.0)*sj5);
IkReal x7002=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7001)));
j4eval[0]=x7002;
j4eval[1]=IKsign(x7002);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7001))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7003=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7003;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7004=r21*r21;
IkReal x7005=cj5*cj5;
IkReal x7006=(r21*sj5);
IkReal x7007=(cj5*r20);
IkReal x7008=((((-1.0)*x7004))+(((-1.0)*x7005*(r20*r20)))+(((2.0)*x7006*x7007))+((x7004*x7005))+(((-1.0)*(r22*r22))));
j4eval[0]=x7008;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x7007))+x7006))));
j4eval[2]=IKsign(x7008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7009=r21*r21;
IkReal x7010=cj5*cj5;
IkReal x7011=(r21*sj5);
IkReal x7012=(cj5*r20);
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal(r22),IkReal((x7011+(((-1.0)*x7012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
CheckValue<IkReal> x7014=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7009))+(((-1.0)*x7010*(r20*r20)))+((x7009*x7010))+(((-1.0)*(r22*r22)))+(((2.0)*x7011*x7012)))),-1);
if(!x7014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7013.value)+(((1.5707963267949)*(x7014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7015=IKsin(j4);
IkReal x7016=IKcos(j4);
IkReal x7017=(r11*sj5);
IkReal x7018=(r21*sj5);
IkReal x7019=(cj5*r00);
IkReal x7020=(cj5*r10);
IkReal x7021=(cj5*r20);
IkReal x7022=(r01*sj5);
IkReal x7023=((1.0)*x7016);
IkReal x7024=((1.0)*x7015);
evalcond[0]=((((-1.0)*r22*x7023))+(((-1.0)*x7021*x7024))+((x7015*x7018)));
evalcond[1]=((((-1.0)*r02*x7024))+((x7016*x7019))+(((-1.0)*x7022*x7023)));
evalcond[2]=((((-1.0)*r12*x7024))+((x7016*x7020))+(((-1.0)*x7017*x7023)));
evalcond[3]=(sj0+(((-1.0)*x7019*x7024))+(((-1.0)*r02*x7023))+((x7015*x7022)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7024))+((x7016*x7021))+(((-1.0)*x7018*x7023)));
evalcond[5]=((((-1.0)*r12*x7023))+((x7015*x7017))+(((-1.0)*x7020*x7024))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7025=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7025.valid){
continue;
}
CheckValue<IkReal> x7026 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7025.value)))+(x7026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7027=IKsin(j4);
IkReal x7028=IKcos(j4);
IkReal x7029=(r11*sj5);
IkReal x7030=(r21*sj5);
IkReal x7031=(cj5*r00);
IkReal x7032=(cj5*r10);
IkReal x7033=(cj5*r20);
IkReal x7034=(r01*sj5);
IkReal x7035=((1.0)*x7028);
IkReal x7036=((1.0)*x7027);
evalcond[0]=(((x7027*x7030))+(((-1.0)*r22*x7035))+(((-1.0)*x7033*x7036)));
evalcond[1]=((((-1.0)*x7034*x7035))+(((-1.0)*r02*x7036))+((x7028*x7031)));
evalcond[2]=((((-1.0)*r12*x7036))+((x7028*x7032))+(((-1.0)*x7029*x7035)));
evalcond[3]=(((x7027*x7034))+sj0+(((-1.0)*x7031*x7036))+(((-1.0)*r02*x7035)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7036))+((x7028*x7033))+(((-1.0)*x7030*x7035)));
evalcond[5]=(((x7027*x7029))+(((-1.0)*r12*x7035))+(((-1.0)*x7032*x7036))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7037=((1.0)*sj5);
CheckValue<IkReal> x7038=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7037)))),-1);
if(!x7038.valid){
continue;
}
CheckValue<IkReal> x7039 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7037))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7038.value)))+(x7039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7040=IKsin(j4);
IkReal x7041=IKcos(j4);
IkReal x7042=(r11*sj5);
IkReal x7043=(r21*sj5);
IkReal x7044=(cj5*r00);
IkReal x7045=(cj5*r10);
IkReal x7046=(cj5*r20);
IkReal x7047=(r01*sj5);
IkReal x7048=((1.0)*x7041);
IkReal x7049=((1.0)*x7040);
evalcond[0]=((((-1.0)*r22*x7048))+(((-1.0)*x7046*x7049))+((x7040*x7043)));
evalcond[1]=(((x7041*x7044))+(((-1.0)*r02*x7049))+(((-1.0)*x7047*x7048)));
evalcond[2]=((((-1.0)*r12*x7049))+((x7041*x7045))+(((-1.0)*x7042*x7048)));
evalcond[3]=(sj0+(((-1.0)*r02*x7048))+(((-1.0)*x7044*x7049))+((x7040*x7047)));
evalcond[4]=((-1.0)+((x7041*x7046))+(((-1.0)*r22*x7049))+(((-1.0)*x7043*x7048)));
evalcond[5]=((((-1.0)*r12*x7048))+(((-1.0)*x7045*x7049))+((x7040*x7042))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((-3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.70382833862891)*py))+(((1.91053278897623)*px))), ((((-3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7050=IKsin(j0);
IkReal x7051=IKcos(j0);
evalcond[0]=((((-0.21325)*x7051))+(((-1.0)*px))+(((0.11)*x7050)));
evalcond[1]=((((-0.21325)*x7050))+(((-1.0)*py))+(((-0.11)*x7051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7052=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7052;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7053=cj5*cj5;
IkReal x7054=((1.0)*r21);
IkReal x7055=(cj5*sj5);
IkReal x7056=((1.0)*r20);
IkReal x7057=(((r00*r20*x7053))+(((-1.0)*r01*x7053*x7054))+((r01*r21))+(((-1.0)*r00*x7054*x7055))+(((-1.0)*r01*x7055*x7056))+((r02*r22)));
j4eval[0]=x7057;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7056))))));
j4eval[2]=IKsign(x7057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7058=cj5*cj5;
IkReal x7059=(r21*sj5);
IkReal x7060=(r11*r21);
IkReal x7061=((1.0)*cj5*r20);
IkReal x7062=(x7060+((r10*r20*x7058))+(((-1.0)*x7058*x7060))+((r12*r22))+(((-1.0)*cj5*r10*x7059))+(((-1.0)*r11*sj5*x7061)));
j4eval[0]=x7062;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7061))+((sj0*x7059))))));
j4eval[2]=IKsign(x7062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7063=cj5*cj5;
IkReal x7064=(r21*sj5);
IkReal x7065=(r11*r21);
IkReal x7066=((1.0)*cj5*r20);
CheckValue<IkReal> x7067 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7066))+((sj0*x7064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7067.valid){
continue;
}
CheckValue<IkReal> x7068=IKPowWithIntegerCheck(IKsign((x7065+(((-1.0)*x7063*x7065))+((r12*r22))+(((-1.0)*r11*sj5*x7066))+(((-1.0)*cj5*r10*x7064))+((r10*r20*x7063)))),-1);
if(!x7068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7067.value)+(((1.5707963267949)*(x7068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7069=IKsin(j4);
IkReal x7070=IKcos(j4);
IkReal x7071=(r11*sj5);
IkReal x7072=(cj5*r00);
IkReal x7073=(cj5*r10);
IkReal x7074=(r21*sj5);
IkReal x7075=(cj5*r20);
IkReal x7076=(r01*sj5);
IkReal x7077=((1.0)*x7070);
IkReal x7078=((1.0)*x7069);
evalcond[0]=(((x7069*x7074))+(((-1.0)*x7075*x7078))+(((-1.0)*r22*x7077)));
evalcond[1]=(((x7070*x7075))+(((-1.0)*x7074*x7077))+(((-1.0)*r22*x7078)));
evalcond[2]=(sj0+(((-1.0)*x7072*x7078))+(((-1.0)*r02*x7077))+((x7069*x7076)));
evalcond[3]=(cj0+(((-1.0)*x7076*x7077))+((x7070*x7072))+(((-1.0)*r02*x7078)));
evalcond[4]=(sj0+((x7070*x7073))+(((-1.0)*x7071*x7077))+(((-1.0)*r12*x7078)));
evalcond[5]=((((-1.0)*x7073*x7078))+(((-1.0)*r12*x7077))+((x7069*x7071))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7079=cj5*cj5;
IkReal x7080=((1.0)*r21);
IkReal x7081=(cj5*sj5);
IkReal x7082=((1.0)*r20);
CheckValue<IkReal> x7083=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7081*x7082))+((r02*r22))+(((-1.0)*r00*x7080*x7081))+(((-1.0)*r01*x7079*x7080))+((r00*r20*x7079)))),-1);
if(!x7083.valid){
continue;
}
CheckValue<IkReal> x7084 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7083.value)))+(x7084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7085=IKsin(j4);
IkReal x7086=IKcos(j4);
IkReal x7087=(r11*sj5);
IkReal x7088=(cj5*r00);
IkReal x7089=(cj5*r10);
IkReal x7090=(r21*sj5);
IkReal x7091=(cj5*r20);
IkReal x7092=(r01*sj5);
IkReal x7093=((1.0)*x7086);
IkReal x7094=((1.0)*x7085);
evalcond[0]=(((x7085*x7090))+(((-1.0)*r22*x7093))+(((-1.0)*x7091*x7094)));
evalcond[1]=(((x7086*x7091))+(((-1.0)*r22*x7094))+(((-1.0)*x7090*x7093)));
evalcond[2]=(sj0+(((-1.0)*x7088*x7094))+((x7085*x7092))+(((-1.0)*r02*x7093)));
evalcond[3]=(cj0+(((-1.0)*x7092*x7093))+((x7086*x7088))+(((-1.0)*r02*x7094)));
evalcond[4]=(sj0+(((-1.0)*x7087*x7093))+(((-1.0)*r12*x7094))+((x7086*x7089)));
evalcond[5]=((((-1.0)*x7089*x7094))+((x7085*x7087))+(((-1.0)*r12*x7093))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7095=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7095.valid){
continue;
}
CheckValue<IkReal> x7096 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7095.value)))+(x7096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7097=IKsin(j4);
IkReal x7098=IKcos(j4);
IkReal x7099=(r11*sj5);
IkReal x7100=(cj5*r00);
IkReal x7101=(cj5*r10);
IkReal x7102=(r21*sj5);
IkReal x7103=(cj5*r20);
IkReal x7104=(r01*sj5);
IkReal x7105=((1.0)*x7098);
IkReal x7106=((1.0)*x7097);
evalcond[0]=((((-1.0)*x7103*x7106))+((x7097*x7102))+(((-1.0)*r22*x7105)));
evalcond[1]=((((-1.0)*x7102*x7105))+(((-1.0)*r22*x7106))+((x7098*x7103)));
evalcond[2]=(sj0+((x7097*x7104))+(((-1.0)*x7100*x7106))+(((-1.0)*r02*x7105)));
evalcond[3]=(cj0+(((-1.0)*r02*x7106))+((x7098*x7100))+(((-1.0)*x7104*x7105)));
evalcond[4]=(sj0+(((-1.0)*r12*x7106))+(((-1.0)*x7099*x7105))+((x7098*x7101)));
evalcond[5]=(((x7097*x7099))+(((-1.0)*r12*x7105))+(((-1.0)*x7101*x7106))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7107=IKsin(j0);
IkReal x7108=IKcos(j0);
IkReal x7109=((1.0)*cj5);
IkReal x7110=(r10*sj5);
IkReal x7111=((0.08535)*cj5);
IkReal x7112=(r00*sj5);
evalcond[0]=(x7108+(((-1.0)*x7112))+(((-1.0)*r01*x7109)));
evalcond[1]=(x7107+(((-1.0)*x7110))+(((-1.0)*r11*x7109)));
evalcond[2]=((((-1.0)*px))+(((-0.08535)*x7112))+(((-1.0)*r01*x7111))+(((0.11)*x7107)));
evalcond[3]=((((-1.0)*r11*x7111))+(((-0.11)*x7108))+(((-1.0)*py))+(((-0.08535)*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7113=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7113;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7114=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7114;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7115=cj5*cj5;
IkReal x7116=r21*r21;
IkReal x7117=(r21*sj5);
IkReal x7118=(cj5*r20);
IkReal x7119=(x7116+(r22*r22)+(((-1.0)*x7115*x7116))+(((-2.0)*x7117*x7118))+((x7115*(r20*r20))));
j4eval[0]=x7119;
j4eval[1]=IKsign(x7119);
j4eval[2]=((IKabs((x7117+(((-1.0)*x7118)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7120=cj5*cj5;
IkReal x7121=r21*r21;
IkReal x7122=(r21*sj5);
IkReal x7123=(cj5*r20);
CheckValue<IkReal> x7124 = IKatan2WithCheck(IkReal(r22),IkReal((x7122+(((-1.0)*x7123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7124.valid){
continue;
}
CheckValue<IkReal> x7125=IKPowWithIntegerCheck(IKsign((x7121+((x7120*(r20*r20)))+(r22*r22)+(((-1.0)*x7120*x7121))+(((-2.0)*x7122*x7123)))),-1);
if(!x7125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7124.value)+(((1.5707963267949)*(x7125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7126=IKsin(j4);
IkReal x7127=IKcos(j4);
IkReal x7128=(r11*sj5);
IkReal x7129=(r21*sj5);
IkReal x7130=(cj5*r00);
IkReal x7131=(cj5*r10);
IkReal x7132=(cj5*r20);
IkReal x7133=(r01*sj5);
IkReal x7134=((1.0)*x7127);
IkReal x7135=((1.0)*x7126);
evalcond[0]=((((-1.0)*x7132*x7135))+(((-1.0)*r22*x7134))+((x7126*x7129)));
evalcond[1]=(((x7127*x7130))+(((-1.0)*x7133*x7134))+(((-1.0)*r02*x7135)));
evalcond[2]=((((-1.0)*r12*x7135))+((x7127*x7131))+(((-1.0)*x7128*x7134)));
evalcond[3]=((((-1.0)*x7130*x7135))+((x7126*x7133))+sj0+(((-1.0)*r02*x7134)));
evalcond[4]=((1.0)+((x7127*x7132))+(((-1.0)*r22*x7135))+(((-1.0)*x7129*x7134)));
evalcond[5]=((((-1.0)*r12*x7134))+((x7126*x7128))+(((-1.0)*x7131*x7135))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7136=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7136.valid){
continue;
}
CheckValue<IkReal> x7137 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7136.value)))+(x7137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7138=IKsin(j4);
IkReal x7139=IKcos(j4);
IkReal x7140=(r11*sj5);
IkReal x7141=(r21*sj5);
IkReal x7142=(cj5*r00);
IkReal x7143=(cj5*r10);
IkReal x7144=(cj5*r20);
IkReal x7145=(r01*sj5);
IkReal x7146=((1.0)*x7139);
IkReal x7147=((1.0)*x7138);
evalcond[0]=(((x7138*x7141))+(((-1.0)*r22*x7146))+(((-1.0)*x7144*x7147)));
evalcond[1]=(((x7139*x7142))+(((-1.0)*x7145*x7146))+(((-1.0)*r02*x7147)));
evalcond[2]=(((x7139*x7143))+(((-1.0)*x7140*x7146))+(((-1.0)*r12*x7147)));
evalcond[3]=((((-1.0)*x7142*x7147))+sj0+((x7138*x7145))+(((-1.0)*r02*x7146)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7147))+((x7139*x7144))+(((-1.0)*x7141*x7146)));
evalcond[5]=(((x7138*x7140))+(((-1.0)*r12*x7146))+(((-1.0)*cj0))+(((-1.0)*x7143*x7147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7148 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7148.valid){
continue;
}
CheckValue<IkReal> x7149=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7148.value)+(((1.5707963267949)*(x7149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7150=IKsin(j4);
IkReal x7151=IKcos(j4);
IkReal x7152=(r11*sj5);
IkReal x7153=(r21*sj5);
IkReal x7154=(cj5*r00);
IkReal x7155=(cj5*r10);
IkReal x7156=(cj5*r20);
IkReal x7157=(r01*sj5);
IkReal x7158=((1.0)*x7151);
IkReal x7159=((1.0)*x7150);
evalcond[0]=((((-1.0)*r22*x7158))+(((-1.0)*x7156*x7159))+((x7150*x7153)));
evalcond[1]=((((-1.0)*x7157*x7158))+((x7151*x7154))+(((-1.0)*r02*x7159)));
evalcond[2]=((((-1.0)*r12*x7159))+(((-1.0)*x7152*x7158))+((x7151*x7155)));
evalcond[3]=(sj0+((x7150*x7157))+(((-1.0)*x7154*x7159))+(((-1.0)*r02*x7158)));
evalcond[4]=((1.0)+(((-1.0)*x7153*x7158))+(((-1.0)*r22*x7159))+((x7151*x7156)));
evalcond[5]=((((-1.0)*r12*x7158))+(((-1.0)*x7155*x7159))+((x7150*x7152))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.70382833862891)*py))+(((1.91053278897623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.70382833862891)*px))+(((-1.91053278897623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.70382833862891)*py))+(((1.91053278897623)*px))))+IKsqr(((((3.70382833862891)*px))+(((-1.91053278897623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.70382833862891)*py))+(((1.91053278897623)*px))), ((((3.70382833862891)*px))+(((-1.91053278897623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7160=IKsin(j0);
IkReal x7161=IKcos(j0);
evalcond[0]=((((0.21325)*x7161))+(((0.11)*x7160))+(((-1.0)*px)));
evalcond[1]=((((0.21325)*x7160))+(((-1.0)*py))+(((-0.11)*x7161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7162=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7162;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7163=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7163;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7164=cj5*cj5;
IkReal x7165=((1.0)*r21);
IkReal x7166=(cj5*r20);
IkReal x7167=((((-1.0)*r01*sj5*x7166))+(((-1.0)*cj5*r00*sj5*x7165))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7164*x7165))+((r00*r20*x7164)));
j4eval[0]=x7167;
j4eval[1]=IKsign(x7167);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x7165))+((sj0*x7166))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7168=cj5*cj5;
IkReal x7169=((1.0)*r21);
IkReal x7170=(cj5*r20);
CheckValue<IkReal> x7171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7168*x7169))+(((-1.0)*cj5*r00*sj5*x7169))+((r01*r21))+((r02*r22))+(((-1.0)*r01*sj5*x7170))+((r00*r20*x7168)))),-1);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172 = IKatan2WithCheck(IkReal((((sj0*x7170))+(((-1.0)*sj0*sj5*x7169)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7171.value)))+(x7172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7173=IKsin(j4);
IkReal x7174=IKcos(j4);
IkReal x7175=((1.0)*cj0);
IkReal x7176=(cj5*r00);
IkReal x7177=(r11*sj5);
IkReal x7178=(cj5*r10);
IkReal x7179=(r21*sj5);
IkReal x7180=(cj5*r20);
IkReal x7181=(r01*sj5);
IkReal x7182=((1.0)*x7174);
IkReal x7183=((1.0)*x7173);
evalcond[0]=(((x7173*x7179))+(((-1.0)*x7180*x7183))+(((-1.0)*r22*x7182)));
evalcond[1]=((((-1.0)*x7179*x7182))+((x7174*x7180))+(((-1.0)*r22*x7183)));
evalcond[2]=(sj0+(((-1.0)*r02*x7182))+((x7173*x7181))+(((-1.0)*x7176*x7183)));
evalcond[3]=((((-1.0)*x7175))+(((-1.0)*x7178*x7183))+((x7173*x7177))+(((-1.0)*r12*x7182)));
evalcond[4]=((((-1.0)*x7175))+(((-1.0)*x7181*x7182))+(((-1.0)*r02*x7183))+((x7174*x7176)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7177*x7182))+(((-1.0)*r12*x7183))+((x7174*x7178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7184=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7184.valid){
continue;
}
CheckValue<IkReal> x7185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7184.value)))+(x7185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7186=IKsin(j4);
IkReal x7187=IKcos(j4);
IkReal x7188=((1.0)*cj0);
IkReal x7189=(cj5*r00);
IkReal x7190=(r11*sj5);
IkReal x7191=(cj5*r10);
IkReal x7192=(r21*sj5);
IkReal x7193=(cj5*r20);
IkReal x7194=(r01*sj5);
IkReal x7195=((1.0)*x7187);
IkReal x7196=((1.0)*x7186);
evalcond[0]=((((-1.0)*x7193*x7196))+(((-1.0)*r22*x7195))+((x7186*x7192)));
evalcond[1]=((((-1.0)*r22*x7196))+((x7187*x7193))+(((-1.0)*x7192*x7195)));
evalcond[2]=(sj0+(((-1.0)*x7189*x7196))+(((-1.0)*r02*x7195))+((x7186*x7194)));
evalcond[3]=((((-1.0)*x7188))+(((-1.0)*x7191*x7196))+(((-1.0)*r12*x7195))+((x7186*x7190)));
evalcond[4]=((((-1.0)*x7188))+(((-1.0)*x7194*x7195))+(((-1.0)*r02*x7196))+((x7187*x7189)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7190*x7195))+(((-1.0)*r12*x7196))+((x7187*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7197=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7197.value)))+(x7198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKsin(j4);
IkReal x7200=IKcos(j4);
IkReal x7201=((1.0)*cj0);
IkReal x7202=(cj5*r00);
IkReal x7203=(r11*sj5);
IkReal x7204=(cj5*r10);
IkReal x7205=(r21*sj5);
IkReal x7206=(cj5*r20);
IkReal x7207=(r01*sj5);
IkReal x7208=((1.0)*x7200);
IkReal x7209=((1.0)*x7199);
evalcond[0]=((((-1.0)*x7206*x7209))+((x7199*x7205))+(((-1.0)*r22*x7208)));
evalcond[1]=(((x7200*x7206))+(((-1.0)*x7205*x7208))+(((-1.0)*r22*x7209)));
evalcond[2]=(sj0+((x7199*x7207))+(((-1.0)*x7202*x7209))+(((-1.0)*r02*x7208)));
evalcond[3]=(((x7199*x7203))+(((-1.0)*x7204*x7209))+(((-1.0)*r12*x7208))+(((-1.0)*x7201)));
evalcond[4]=((((-1.0)*x7207*x7208))+((x7200*x7202))+(((-1.0)*x7201))+(((-1.0)*r02*x7209)));
evalcond[5]=((((-1.0)*sj0))+((x7200*x7204))+(((-1.0)*x7203*x7208))+(((-1.0)*r12*x7209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7210=cj1*cj1;
IkReal x7211=(cj1*sj2);
IkReal x7212=(r00*sj5);
IkReal x7213=(cj1*sj1);
IkReal x7214=((100.0)*py);
IkReal x7215=(cj2*sj1);
IkReal x7216=(cj5*r01);
IkReal x7217=((8.535)*cj5*r11);
IkReal x7218=(sj2*x7210);
IkReal x7219=((8.535)*r10*sj5);
CheckValue<IkReal> x7220=IKPowWithIntegerCheck(((((-42.65)*x7213*(cj2*cj2)))+(((-24.365)*cj2*x7213))+(((-24.365)*x7218))+(((21.325)*x7213))+(((-42.65)*cj2*x7218))+(((21.325)*cj2*sj2))),-1);
if(!x7220.valid){
continue;
}
CheckValue<IkReal> x7221=IKPowWithIntegerCheck((x7211+x7215),-1);
if(!x7221.valid){
continue;
}
if( IKabs(((x7220.value)*((((x7214*x7215))+((x7211*x7219))+((x7211*x7217))+((x7211*x7214))+(((11.0)*x7216))+(((11.0)*x7212))+((x7215*x7217))+((x7215*x7219)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7221.value)*((x7212+x7216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7220.value)*((((x7214*x7215))+((x7211*x7219))+((x7211*x7217))+((x7211*x7214))+(((11.0)*x7216))+(((11.0)*x7212))+((x7215*x7217))+((x7215*x7219))))))+IKsqr(((x7221.value)*((x7212+x7216))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7220.value)*((((x7214*x7215))+((x7211*x7219))+((x7211*x7217))+((x7211*x7214))+(((11.0)*x7216))+(((11.0)*x7212))+((x7215*x7217))+((x7215*x7219))))), ((x7221.value)*((x7212+x7216))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7222=IKcos(j0);
IkReal x7223=IKsin(j0);
IkReal x7224=(cj5*r11);
IkReal x7225=((0.21325)*sj2);
IkReal x7226=((1.0)*sj5);
IkReal x7227=(cj5*r01);
IkReal x7228=((0.24365)*cj1);
IkReal x7229=((0.08535)*sj5);
IkReal x7230=(cj1*sj2);
IkReal x7231=((0.21325)*cj1*cj2);
IkReal x7232=(sj1*x7222);
IkReal x7233=(sj1*x7223);
evalcond[0]=((((-1.0)*r00*x7226))+((x7222*x7230))+((cj2*x7232))+(((-1.0)*x7227)));
evalcond[1]=((((-1.0)*r10*x7226))+((cj2*x7233))+((x7223*x7230))+(((-1.0)*x7224)));
evalcond[2]=((((-1.0)*r00*x7229))+(((0.11)*x7223))+(((-1.0)*px))+(((-1.0)*x7222*x7228))+(((-0.08535)*x7227))+((x7225*x7232))+(((-1.0)*x7222*x7231)));
evalcond[3]=((((-1.0)*r10*x7229))+(((-1.0)*py))+(((-1.0)*x7223*x7231))+(((-0.08535)*x7224))+((x7225*x7233))+(((-1.0)*x7223*x7228))+(((-0.11)*x7222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7234=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7234;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7235=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7235;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7236=((1.0)*cj5);
IkReal x7237=((((-1.0)*r21*x7236))+(((-1.0)*r20*sj5)));
j4eval[0]=x7237;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*cj0*r00*x7236))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7236))))));
j4eval[2]=IKsign(x7237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7238=((-1.0)*r20);
IkReal x7240 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7240)==0){
continue;
}
IkReal x7239=pow(x7240,-0.5);
CheckValue<IkReal> x7241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7238),IKFAST_ATAN2_MAGTHRESH);
if(!x7241.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7241.value));
IkReal gconst133=(r21*x7239);
IkReal gconst134=(x7238*x7239);
CheckValue<IkReal> x7242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7243=((-1.0)*r20);
IkReal x7244=x7239;
CheckValue<IkReal> x7246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7243),IKFAST_ATAN2_MAGTHRESH);
if(!x7246.valid){
continue;
}
IkReal x7245=((-1.0)*(x7246.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7245;
IkReal gconst132=x7245;
IkReal gconst133=(r21*x7244);
IkReal gconst134=(x7243*x7244);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7247=((-1.0)*r20);
IkReal x7248=x7239;
CheckValue<IkReal> x7250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7247),IKFAST_ATAN2_MAGTHRESH);
if(!x7250.valid){
continue;
}
IkReal x7249=((-1.0)*(x7250.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7249;
IkReal gconst132=x7249;
IkReal gconst133=(r21*x7248);
IkReal gconst134=(x7247*x7248);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7251=((-1.0)*r20);
IkReal x7252=x7239;
CheckValue<IkReal> x7254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7251),IKFAST_ATAN2_MAGTHRESH);
if(!x7254.valid){
continue;
}
IkReal x7253=((-1.0)*(x7254.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7253;
IkReal gconst132=x7253;
IkReal gconst133=(r21*x7252);
IkReal gconst134=(x7251*x7252);
IkReal x7255=r22*r22;
CheckValue<IkReal> x7258=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7255))),-1);
if(!x7258.valid){
continue;
}
IkReal x7256=x7258.value;
IkReal x7257=(x7255+((x7256*(r20*r20*r20*r20)))+((x7256*(r21*r21*r21*r21)))+(((2.0)*x7256*(r20*r20)*(r21*r21))));
j4eval[0]=x7257;
j4eval[1]=IKsign(x7257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7259=(gconst133*r21);
IkReal x7260=(cj1*sj2);
IkReal x7261=(gconst134*r20);
IkReal x7262=(cj2*sj1);
CheckValue<IkReal> x7263 = IKatan2WithCheck(IkReal((((r22*x7260))+((r22*x7262)))),IkReal(((((-1.0)*x7261*x7262))+(((-1.0)*x7260*x7261))+((x7259*x7260))+((x7259*x7262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7263.valid){
continue;
}
CheckValue<IkReal> x7264=IKPowWithIntegerCheck(IKsign(((x7259*x7259)+(r22*r22)+(((-2.0)*x7259*x7261))+(x7261*x7261))),-1);
if(!x7264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7263.value)+(((1.5707963267949)*(x7264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7265=IKsin(j4);
IkReal x7266=IKcos(j4);
IkReal x7267=(cj1*cj2);
IkReal x7268=(gconst133*r11);
IkReal x7269=(gconst133*r21);
IkReal x7270=(gconst133*r01);
IkReal x7271=((1.0)*cj0);
IkReal x7272=(sj1*sj2);
IkReal x7273=((1.0)*x7266);
IkReal x7274=(gconst134*x7266);
IkReal x7275=((1.0)*x7265);
evalcond[0]=((((-1.0)*r22*x7273))+((x7265*x7269))+(((-1.0)*gconst134*r20*x7275)));
evalcond[1]=(((x7265*x7270))+sj0+(((-1.0)*gconst134*r00*x7275))+(((-1.0)*r02*x7273)));
evalcond[2]=((((-1.0)*r12*x7273))+((x7265*x7268))+(((-1.0)*gconst134*r10*x7275))+(((-1.0)*x7271)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7275))+((cj1*sj2))+((r20*x7274))+(((-1.0)*x7269*x7273)));
evalcond[4]=(((cj0*x7267))+(((-1.0)*r02*x7275))+((r00*x7274))+(((-1.0)*x7271*x7272))+(((-1.0)*x7270*x7273)));
evalcond[5]=((((-1.0)*r12*x7275))+((sj0*x7267))+(((-1.0)*sj0*x7272))+((r10*x7274))+(((-1.0)*x7268*x7273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7276.value)))+(x7277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKsin(j4);
IkReal x7279=IKcos(j4);
IkReal x7280=(cj1*cj2);
IkReal x7281=(gconst133*r11);
IkReal x7282=(gconst133*r21);
IkReal x7283=(gconst133*r01);
IkReal x7284=((1.0)*cj0);
IkReal x7285=(sj1*sj2);
IkReal x7286=((1.0)*x7279);
IkReal x7287=(gconst134*x7279);
IkReal x7288=((1.0)*x7278);
evalcond[0]=((((-1.0)*gconst134*r20*x7288))+((x7278*x7282))+(((-1.0)*r22*x7286)));
evalcond[1]=(sj0+((x7278*x7283))+(((-1.0)*gconst134*r00*x7288))+(((-1.0)*r02*x7286)));
evalcond[2]=((((-1.0)*gconst134*r10*x7288))+(((-1.0)*x7284))+((x7278*x7281))+(((-1.0)*r12*x7286)));
evalcond[3]=((((-1.0)*x7282*x7286))+((cj2*sj1))+((cj1*sj2))+((r20*x7287))+(((-1.0)*r22*x7288)));
evalcond[4]=((((-1.0)*x7284*x7285))+((cj0*x7280))+(((-1.0)*x7283*x7286))+((r00*x7287))+(((-1.0)*r02*x7288)));
evalcond[5]=((((-1.0)*sj0*x7285))+(((-1.0)*r12*x7288))+((sj0*x7280))+((r10*x7287))+(((-1.0)*x7281*x7286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7289 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7289.valid){
continue;
}
CheckValue<IkReal> x7290=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7289.value)+(((1.5707963267949)*(x7290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7291=IKsin(j4);
IkReal x7292=IKcos(j4);
IkReal x7293=(cj1*cj2);
IkReal x7294=(gconst133*r11);
IkReal x7295=(gconst133*r21);
IkReal x7296=(gconst133*r01);
IkReal x7297=((1.0)*cj0);
IkReal x7298=(sj1*sj2);
IkReal x7299=((1.0)*x7292);
IkReal x7300=(gconst134*x7292);
IkReal x7301=((1.0)*x7291);
evalcond[0]=((((-1.0)*r22*x7299))+(((-1.0)*gconst134*r20*x7301))+((x7291*x7295)));
evalcond[1]=(sj0+(((-1.0)*gconst134*r00*x7301))+(((-1.0)*r02*x7299))+((x7291*x7296)));
evalcond[2]=((((-1.0)*x7297))+((x7291*x7294))+(((-1.0)*gconst134*r10*x7301))+(((-1.0)*r12*x7299)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7295*x7299))+((r20*x7300))+(((-1.0)*r22*x7301)));
evalcond[4]=((((-1.0)*r02*x7301))+((cj0*x7293))+(((-1.0)*x7296*x7299))+(((-1.0)*x7297*x7298))+((r00*x7300)));
evalcond[5]=((((-1.0)*sj0*x7298))+((r10*x7300))+((sj0*x7293))+(((-1.0)*x7294*x7299))+(((-1.0)*r12*x7301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7302=((-1.0)*r21);
IkReal x7304 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7304)==0){
continue;
}
IkReal x7303=pow(x7304,-0.5);
CheckValue<IkReal> x7305 = IKatan2WithCheck(IkReal(x7302),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7305.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7305.value))));
IkReal gconst136=(x7302*x7303);
IkReal gconst137=((1.0)*r20*x7303);
CheckValue<IkReal> x7306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7306.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7306.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7307=((-1.0)*r21);
CheckValue<IkReal> x7310 = IKatan2WithCheck(IkReal(x7307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7310.valid){
continue;
}
IkReal x7308=((1.0)*(x7310.value));
IkReal x7309=x7303;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7308)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7308)));
IkReal gconst136=(x7307*x7309);
IkReal gconst137=((1.0)*r20*x7309);
IkReal x7311=r22*r22;
IkReal x7312=((1.0)*x7311);
CheckValue<IkReal> x7316=IKPowWithIntegerCheck(((-1.0)+x7311),-1);
if(!x7316.valid){
continue;
}
IkReal x7313=x7316.value;
if((((1.0)+(((-1.0)*x7312)))) < -0.00001)
continue;
IkReal x7314=IKsqrt(((1.0)+(((-1.0)*x7312))));
IkReal x7315=(sj0*x7313*x7314);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7315+(((-1.0)*x7312*x7315))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7317=((-1.0)*r21);
CheckValue<IkReal> x7320 = IKatan2WithCheck(IkReal(x7317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7320.valid){
continue;
}
IkReal x7318=((1.0)*(x7320.value));
IkReal x7319=x7303;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7318)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7318)));
IkReal gconst136=(x7317*x7319);
IkReal gconst137=((1.0)*r20*x7319);
IkReal x7321=r22*r22;
IkReal x7322=((1.0)*x7321);
CheckValue<IkReal> x7326=IKPowWithIntegerCheck(((-1.0)+x7321),-1);
if(!x7326.valid){
continue;
}
IkReal x7323=x7326.value;
if((((1.0)+(((-1.0)*x7322)))) < -0.00001)
continue;
IkReal x7324=IKsqrt(((1.0)+(((-1.0)*x7322))));
IkReal x7325=(cj0*x7323*x7324);
j4eval[0]=((IKabs((x7325+(((-1.0)*x7322*x7325)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7327=((-1.0)*r21);
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal(x7327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
IkReal x7328=((1.0)*(x7330.value));
IkReal x7329=x7303;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7328)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7328)));
IkReal gconst136=(x7327*x7329);
IkReal gconst137=((1.0)*r20*x7329);
IkReal x7331=r22*r22;
IkReal x7332=(cj0*r02);
IkReal x7333=(r12*sj0);
CheckValue<IkReal> x7337=IKPowWithIntegerCheck(((-1.0)+x7331),-1);
if(!x7337.valid){
continue;
}
IkReal x7334=x7337.value;
if((((1.0)+(((-1.0)*x7331)))) < -0.00001)
continue;
IkReal x7335=IKsqrt(((1.0)+(((-1.0)*x7331))));
IkReal x7336=((1.0)*r22*x7334*x7335);
j4eval[0]=0;
j4eval[1]=((IKabs((x7333+x7332)))+(IKabs(((((-1.0)*x7332*x7336))+(((-1.0)*x7333*x7336))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7338=((1.0)*gconst137);
CheckValue<IkReal> x7339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7338))+(((-1.0)*gconst136*r20)))),-1);
if(!x7339.valid){
continue;
}
CheckValue<IkReal> x7340 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7338))+(((-1.0)*r10*sj0*x7338))+((gconst136*r11*sj0))+((cj0*gconst136*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7339.value)))+(x7340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7341=IKsin(j4);
IkReal x7342=IKcos(j4);
IkReal x7343=(gconst136*r01);
IkReal x7344=(gconst137*r10);
IkReal x7345=(cj1*cj2);
IkReal x7346=(gconst137*r20);
IkReal x7347=(gconst136*r11);
IkReal x7348=(gconst136*r21);
IkReal x7349=(gconst137*r00);
IkReal x7350=((1.0)*cj0);
IkReal x7351=(sj1*sj2);
IkReal x7352=((1.0)*x7342);
IkReal x7353=((1.0)*x7341);
evalcond[0]=((((-1.0)*r22*x7352))+(((-1.0)*x7346*x7353))+((x7341*x7348)));
evalcond[1]=(sj0+(((-1.0)*x7349*x7353))+(((-1.0)*r02*x7352))+((x7341*x7343)));
evalcond[2]=((((-1.0)*r12*x7352))+(((-1.0)*x7344*x7353))+(((-1.0)*x7350))+((x7341*x7347)));
evalcond[3]=((((-1.0)*r22*x7353))+((cj2*sj1))+((x7342*x7346))+((cj1*sj2))+(((-1.0)*x7348*x7352)));
evalcond[4]=(((x7342*x7349))+(((-1.0)*x7343*x7352))+(((-1.0)*r02*x7353))+((cj0*x7345))+(((-1.0)*x7350*x7351)));
evalcond[5]=((((-1.0)*sj0*x7351))+((x7342*x7344))+(((-1.0)*r12*x7353))+((sj0*x7345))+(((-1.0)*x7347*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7354 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7354.valid){
continue;
}
CheckValue<IkReal> x7355=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7354.value)+(((1.5707963267949)*(x7355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7356=IKsin(j4);
IkReal x7357=IKcos(j4);
IkReal x7358=(gconst136*r01);
IkReal x7359=(gconst137*r10);
IkReal x7360=(cj1*cj2);
IkReal x7361=(gconst137*r20);
IkReal x7362=(gconst136*r11);
IkReal x7363=(gconst136*r21);
IkReal x7364=(gconst137*r00);
IkReal x7365=((1.0)*cj0);
IkReal x7366=(sj1*sj2);
IkReal x7367=((1.0)*x7357);
IkReal x7368=((1.0)*x7356);
evalcond[0]=((((-1.0)*r22*x7367))+((x7356*x7363))+(((-1.0)*x7361*x7368)));
evalcond[1]=(sj0+(((-1.0)*x7364*x7368))+((x7356*x7358))+(((-1.0)*r02*x7367)));
evalcond[2]=((((-1.0)*r12*x7367))+(((-1.0)*x7365))+((x7356*x7362))+(((-1.0)*x7359*x7368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7363*x7367))+(((-1.0)*r22*x7368))+((x7357*x7361)));
evalcond[4]=((((-1.0)*x7365*x7366))+((cj0*x7360))+((x7357*x7364))+(((-1.0)*r02*x7368))+(((-1.0)*x7358*x7367)));
evalcond[5]=(((sj0*x7360))+(((-1.0)*sj0*x7366))+(((-1.0)*r12*x7368))+((x7357*x7359))+(((-1.0)*x7362*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7369=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7369.valid){
continue;
}
CheckValue<IkReal> x7370 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7369.value)))+(x7370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7371=IKsin(j4);
IkReal x7372=IKcos(j4);
IkReal x7373=(gconst136*r01);
IkReal x7374=(gconst137*r10);
IkReal x7375=(cj1*cj2);
IkReal x7376=(gconst137*r20);
IkReal x7377=(gconst136*r11);
IkReal x7378=(gconst136*r21);
IkReal x7379=(gconst137*r00);
IkReal x7380=((1.0)*cj0);
IkReal x7381=(sj1*sj2);
IkReal x7382=((1.0)*x7372);
IkReal x7383=((1.0)*x7371);
evalcond[0]=((((-1.0)*r22*x7382))+(((-1.0)*x7376*x7383))+((x7371*x7378)));
evalcond[1]=((((-1.0)*r02*x7382))+sj0+(((-1.0)*x7379*x7383))+((x7371*x7373)));
evalcond[2]=((((-1.0)*x7380))+(((-1.0)*x7374*x7383))+(((-1.0)*r12*x7382))+((x7371*x7377)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7383))+(((-1.0)*x7378*x7382))+((cj1*sj2))+((x7372*x7376)));
evalcond[4]=((((-1.0)*r02*x7383))+(((-1.0)*x7380*x7381))+((cj0*x7375))+((x7372*x7379))+(((-1.0)*x7373*x7382)));
evalcond[5]=((((-1.0)*x7377*x7382))+(((-1.0)*sj0*x7381))+((sj0*x7375))+(((-1.0)*r12*x7383))+((x7372*x7374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7385 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7385)==0){
continue;
}
IkReal x7384=pow(x7385,-0.5);
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7386.value));
IkReal gconst139=((-1.0)*r01*x7384);
IkReal gconst140=(r00*x7384);
CheckValue<IkReal> x7387 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7387.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7387.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
IkReal x7388=((-1.0)*(x7390.value));
IkReal x7389=x7384;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7388;
IkReal gconst138=x7388;
IkReal gconst139=((-1.0)*r01*x7389);
IkReal gconst140=(r00*x7389);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7391=((1.0)*gconst140);
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7391))+(((-1.0)*gconst139*r20)))),-1);
if(!x7392.valid){
continue;
}
CheckValue<IkReal> x7393 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7391))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*r10*sj0*x7391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7392.value)))+(x7393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7394=IKsin(j4);
IkReal x7395=IKcos(j4);
IkReal x7396=(gconst140*r00);
IkReal x7397=(cj1*cj2);
IkReal x7398=(gconst139*r11);
IkReal x7399=(gconst139*r01);
IkReal x7400=((1.0)*cj0);
IkReal x7401=(gconst139*r21);
IkReal x7402=(sj1*sj2);
IkReal x7403=((1.0)*x7395);
IkReal x7404=((1.0)*x7394);
IkReal x7405=(gconst140*x7395);
evalcond[0]=((((-1.0)*gconst140*r20*x7404))+((x7394*x7401))+(((-1.0)*r22*x7403)));
evalcond[1]=(sj0+(((-1.0)*x7396*x7404))+(((-1.0)*r02*x7403))+((x7394*x7399)));
evalcond[2]=((((-1.0)*r12*x7403))+(((-1.0)*x7400))+(((-1.0)*gconst140*r10*x7404))+((x7394*x7398)));
evalcond[3]=(((cj2*sj1))+((r20*x7405))+((cj1*sj2))+(((-1.0)*r22*x7404))+(((-1.0)*x7401*x7403)));
evalcond[4]=(((x7395*x7396))+(((-1.0)*x7399*x7403))+(((-1.0)*x7400*x7402))+(((-1.0)*r02*x7404))+((cj0*x7397)));
evalcond[5]=((((-1.0)*r12*x7404))+(((-1.0)*sj0*x7402))+(((-1.0)*x7398*x7403))+((sj0*x7397))+((r10*x7405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7406 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7406.valid){
continue;
}
CheckValue<IkReal> x7407=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x7407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7406.value)+(((1.5707963267949)*(x7407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7408=IKsin(j4);
IkReal x7409=IKcos(j4);
IkReal x7410=(gconst140*r00);
IkReal x7411=(cj1*cj2);
IkReal x7412=(gconst139*r11);
IkReal x7413=(gconst139*r01);
IkReal x7414=((1.0)*cj0);
IkReal x7415=(gconst139*r21);
IkReal x7416=(sj1*sj2);
IkReal x7417=((1.0)*x7409);
IkReal x7418=((1.0)*x7408);
IkReal x7419=(gconst140*x7409);
evalcond[0]=(((x7408*x7415))+(((-1.0)*r22*x7417))+(((-1.0)*gconst140*r20*x7418)));
evalcond[1]=(sj0+((x7408*x7413))+(((-1.0)*x7410*x7418))+(((-1.0)*r02*x7417)));
evalcond[2]=((((-1.0)*r12*x7417))+(((-1.0)*x7414))+((x7408*x7412))+(((-1.0)*gconst140*r10*x7418)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7415*x7417))+((r20*x7419))+((cj1*sj2))+(((-1.0)*r22*x7418)));
evalcond[4]=(((cj0*x7411))+(((-1.0)*x7414*x7416))+((x7409*x7410))+(((-1.0)*x7413*x7417))+(((-1.0)*r02*x7418)));
evalcond[5]=(((sj0*x7411))+(((-1.0)*r12*x7418))+(((-1.0)*sj0*x7416))+(((-1.0)*x7412*x7417))+((r10*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7421 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7421)==0){
continue;
}
IkReal x7420=pow(x7421,-0.5);
CheckValue<IkReal> x7422 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7422.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7422.value))));
IkReal gconst142=((1.0)*r01*x7420);
IkReal gconst143=((-1.0)*r00*x7420);
CheckValue<IkReal> x7423 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7423.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7423.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7426 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7426.valid){
continue;
}
IkReal x7424=((1.0)*(x7426.value));
IkReal x7425=x7420;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7424)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7424)));
IkReal gconst142=((1.0)*r01*x7425);
IkReal gconst143=((-1.0)*r00*x7425);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7429 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7429.valid){
continue;
}
IkReal x7427=((1.0)*(x7429.value));
IkReal x7428=x7420;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7427)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7427)));
IkReal gconst142=((1.0)*r01*x7428);
IkReal gconst143=((-1.0)*r00*x7428);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7432 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
IkReal x7430=((1.0)*(x7432.value));
IkReal x7431=x7420;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7430)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7430)));
IkReal gconst142=((1.0)*r01*x7431);
IkReal gconst143=((-1.0)*r00*x7431);
IkReal x7433=r02*r02;
IkReal x7434=(r12*sj0);
IkReal x7435=x7420;
IkReal x7436=(cj0*x7435);
j4eval[0]=((IKabs((x7434+((cj0*r02)))))+(IKabs(((((-1.0)*x7436))+((x7433*x7436))+((r02*x7434*x7435))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7437=((1.0)*gconst143);
CheckValue<IkReal> x7438 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst142*r01))+(((-1.0)*r10*sj0*x7437))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x7437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7438.valid){
continue;
}
CheckValue<IkReal> x7439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7437))+(((-1.0)*gconst142*r20)))),-1);
if(!x7439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7438.value)+(((1.5707963267949)*(x7439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7440=IKsin(j4);
IkReal x7441=IKcos(j4);
IkReal x7442=(cj1*cj2);
IkReal x7443=(gconst143*r20);
IkReal x7444=((1.0)*cj0);
IkReal x7445=(sj1*sj2);
IkReal x7446=((1.0)*x7441);
IkReal x7447=((1.0)*x7440);
IkReal x7448=(gconst142*x7440);
IkReal x7449=(gconst143*x7441);
evalcond[0]=(((r21*x7448))+(((-1.0)*r22*x7446))+(((-1.0)*x7443*x7447)));
evalcond[1]=(sj0+(((-1.0)*gconst143*r00*x7447))+((r01*x7448))+(((-1.0)*r02*x7446)));
evalcond[2]=((((-1.0)*gconst143*r10*x7447))+(((-1.0)*x7444))+((r11*x7448))+(((-1.0)*r12*x7446)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7446))+(((-1.0)*r22*x7447))+((x7441*x7443)));
evalcond[4]=(((r00*x7449))+(((-1.0)*gconst142*r01*x7446))+(((-1.0)*r02*x7447))+(((-1.0)*x7444*x7445))+((cj0*x7442)));
evalcond[5]=((((-1.0)*gconst142*r11*x7446))+((sj0*x7442))+(((-1.0)*sj0*x7445))+((r10*x7449))+(((-1.0)*r12*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7450=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7450.valid){
continue;
}
CheckValue<IkReal> x7451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7450.value)))+(x7451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7452=IKsin(j4);
IkReal x7453=IKcos(j4);
IkReal x7454=(cj1*cj2);
IkReal x7455=(gconst143*r20);
IkReal x7456=((1.0)*cj0);
IkReal x7457=(sj1*sj2);
IkReal x7458=((1.0)*x7453);
IkReal x7459=((1.0)*x7452);
IkReal x7460=(gconst142*x7452);
IkReal x7461=(gconst143*x7453);
evalcond[0]=(((r21*x7460))+(((-1.0)*x7455*x7459))+(((-1.0)*r22*x7458)));
evalcond[1]=(sj0+(((-1.0)*gconst143*r00*x7459))+(((-1.0)*r02*x7458))+((r01*x7460)));
evalcond[2]=((((-1.0)*gconst143*r10*x7459))+(((-1.0)*x7456))+((r11*x7460))+(((-1.0)*r12*x7458)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x7458))+((cj1*sj2))+(((-1.0)*r22*x7459))+((x7453*x7455)));
evalcond[4]=((((-1.0)*x7456*x7457))+(((-1.0)*gconst142*r01*x7458))+(((-1.0)*r02*x7459))+((cj0*x7454))+((r00*x7461)));
evalcond[5]=(((r10*x7461))+(((-1.0)*gconst142*r11*x7458))+((sj0*x7454))+(((-1.0)*sj0*x7457))+(((-1.0)*r12*x7459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=(cj1*cj2);
IkReal x7467=(gconst143*r20);
IkReal x7468=((1.0)*cj0);
IkReal x7469=(sj1*sj2);
IkReal x7470=((1.0)*x7465);
IkReal x7471=((1.0)*x7464);
IkReal x7472=(gconst142*x7464);
IkReal x7473=(gconst143*x7465);
evalcond[0]=((((-1.0)*x7467*x7471))+(((-1.0)*r22*x7470))+((r21*x7472)));
evalcond[1]=(sj0+(((-1.0)*r02*x7470))+(((-1.0)*gconst143*r00*x7471))+((r01*x7472)));
evalcond[2]=((((-1.0)*gconst143*r10*x7471))+(((-1.0)*x7468))+((r11*x7472))+(((-1.0)*r12*x7470)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7470))+(((-1.0)*r22*x7471))+((x7465*x7467)));
evalcond[4]=((((-1.0)*r02*x7471))+((cj0*x7466))+(((-1.0)*gconst142*r01*x7470))+((r00*x7473))+(((-1.0)*x7468*x7469)));
evalcond[5]=(((r10*x7473))+(((-1.0)*gconst142*r11*x7470))+((sj0*x7466))+(((-1.0)*sj0*x7469))+(((-1.0)*r12*x7471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7474=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7474;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7475=((1.0)*cj5);
IkReal x7476=((((-1.0)*r21*x7475))+(((-1.0)*r20*sj5)));
j4eval[0]=x7476;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7475))))));
j4eval[2]=IKsign(x7476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7477=cj5*cj5;
IkReal x7478=r01*r01;
IkReal x7479=(cj5*r00);
IkReal x7480=(r01*sj5);
IkReal x7481=((((-1.0)*x7477*x7478))+(((-2.0)*x7479*x7480))+(r02*r02)+x7478+((x7477*(r00*r00))));
j4eval[0]=x7481;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7480))+x7479))));
j4eval[2]=IKsign(x7481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7482=cj5*cj5;
IkReal x7483=r01*r01;
IkReal x7484=(r01*sj5);
IkReal x7485=(cj5*r00);
CheckValue<IkReal> x7486=IKPowWithIntegerCheck(IKsign((((x7482*(r00*r00)))+(((-2.0)*x7484*x7485))+(r02*r02)+x7483+(((-1.0)*x7482*x7483)))),-1);
if(!x7486.valid){
continue;
}
CheckValue<IkReal> x7487 = IKatan2WithCheck(IkReal(((((-1.0)*x7484))+x7485)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7486.value)))+(x7487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7488=IKsin(j4);
IkReal x7489=IKcos(j4);
IkReal x7490=(cj5*r10);
IkReal x7491=(r01*sj5);
IkReal x7492=(cj5*r00);
IkReal x7493=(cj5*r20);
IkReal x7494=((1.0)*x7489);
IkReal x7495=((1.0)*x7488);
IkReal x7496=(sj5*x7488);
evalcond[0]=((((-1.0)*r22*x7494))+(((-1.0)*x7493*x7495))+((r21*x7496)));
evalcond[1]=(((r11*x7496))+(((-1.0)*x7490*x7495))+(((-1.0)*r12*x7494)));
evalcond[2]=(((x7489*x7492))+(((-1.0)*x7491*x7494))+(((-1.0)*r02*x7495)));
evalcond[3]=((1.0)+((x7488*x7491))+(((-1.0)*r02*x7494))+(((-1.0)*x7492*x7495)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7494))+((x7489*x7493))+(((-1.0)*r22*x7495)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7489*x7490))+((cj1*cj2))+(((-1.0)*r12*x7495))+(((-1.0)*r11*sj5*x7494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7497=((1.0)*cj5);
CheckValue<IkReal> x7498 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7498.valid){
continue;
}
CheckValue<IkReal> x7499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7497))+(((-1.0)*r20*sj5)))),-1);
if(!x7499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7498.value)+(((1.5707963267949)*(x7499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7500=IKsin(j4);
IkReal x7501=IKcos(j4);
IkReal x7502=(cj5*r10);
IkReal x7503=(r01*sj5);
IkReal x7504=(cj5*r00);
IkReal x7505=(cj5*r20);
IkReal x7506=((1.0)*x7501);
IkReal x7507=((1.0)*x7500);
IkReal x7508=(sj5*x7500);
evalcond[0]=((((-1.0)*r22*x7506))+((r21*x7508))+(((-1.0)*x7505*x7507)));
evalcond[1]=((((-1.0)*x7502*x7507))+((r11*x7508))+(((-1.0)*r12*x7506)));
evalcond[2]=((((-1.0)*x7503*x7506))+(((-1.0)*r02*x7507))+((x7501*x7504)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7506))+(((-1.0)*x7504*x7507))+((x7500*x7503)));
evalcond[4]=((((-1.0)*r22*x7507))+((cj2*sj1))+((cj1*sj2))+((x7501*x7505))+(((-1.0)*r21*sj5*x7506)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7501*x7502))+((cj1*cj2))+(((-1.0)*r11*sj5*x7506))+(((-1.0)*r12*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7509 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7509.valid){
continue;
}
CheckValue<IkReal> x7510=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7509.value)+(((1.5707963267949)*(x7510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7511=IKsin(j4);
IkReal x7512=IKcos(j4);
IkReal x7513=(cj5*r10);
IkReal x7514=(r01*sj5);
IkReal x7515=(cj5*r00);
IkReal x7516=(cj5*r20);
IkReal x7517=((1.0)*x7512);
IkReal x7518=((1.0)*x7511);
IkReal x7519=(sj5*x7511);
evalcond[0]=((((-1.0)*x7516*x7518))+((r21*x7519))+(((-1.0)*r22*x7517)));
evalcond[1]=(((r11*x7519))+(((-1.0)*r12*x7517))+(((-1.0)*x7513*x7518)));
evalcond[2]=((((-1.0)*r02*x7518))+((x7512*x7515))+(((-1.0)*x7514*x7517)));
evalcond[3]=((1.0)+(((-1.0)*x7515*x7518))+(((-1.0)*r02*x7517))+((x7511*x7514)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7512*x7516))+(((-1.0)*r21*sj5*x7517))+(((-1.0)*r22*x7518)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7517))+((x7512*x7513))+((cj1*cj2))+(((-1.0)*r12*x7518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7520=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7520;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7521=((1.0)*cj5);
IkReal x7522=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7521)));
j4eval[0]=x7522;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7521)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7523=cj5*cj5;
IkReal x7524=r01*r01;
IkReal x7525=(r01*sj5);
IkReal x7526=(cj5*r00);
IkReal x7527=((((2.0)*x7525*x7526))+(((-1.0)*x7523*(r00*r00)))+(((-1.0)*(r02*r02)))+((x7523*x7524))+(((-1.0)*x7524)));
j4eval[0]=x7527;
j4eval[1]=IKsign(x7527);
j4eval[2]=((IKabs(r02))+(IKabs((x7526+(((-1.0)*x7525))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7528=cj5*cj5;
IkReal x7529=r01*r01;
IkReal x7530=(r01*sj5);
IkReal x7531=(cj5*r00);
CheckValue<IkReal> x7532=IKPowWithIntegerCheck(IKsign(((((2.0)*x7530*x7531))+(((-1.0)*(r02*r02)))+(((-1.0)*x7528*(r00*r00)))+((x7528*x7529))+(((-1.0)*x7529)))),-1);
if(!x7532.valid){
continue;
}
CheckValue<IkReal> x7533 = IKatan2WithCheck(IkReal(((((-1.0)*x7530))+x7531)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7532.value)))+(x7533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7534=IKsin(j4);
IkReal x7535=IKcos(j4);
IkReal x7536=(cj5*r10);
IkReal x7537=(r01*sj5);
IkReal x7538=(cj5*r00);
IkReal x7539=(cj5*r20);
IkReal x7540=((1.0)*x7535);
IkReal x7541=((1.0)*x7534);
IkReal x7542=(sj5*x7534);
evalcond[0]=(((r21*x7542))+(((-1.0)*r22*x7540))+(((-1.0)*x7539*x7541)));
evalcond[1]=(((r11*x7542))+(((-1.0)*r12*x7540))+(((-1.0)*x7536*x7541)));
evalcond[2]=((((-1.0)*x7537*x7540))+((x7535*x7538))+(((-1.0)*r02*x7541)));
evalcond[3]=((-1.0)+(((-1.0)*x7538*x7541))+((x7534*x7537))+(((-1.0)*r02*x7540)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7541))+((x7535*x7539))+(((-1.0)*r21*sj5*x7540)));
evalcond[5]=((((-1.0)*r11*sj5*x7540))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7535*x7536))+(((-1.0)*r12*x7541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7543=((1.0)*cj5);
CheckValue<IkReal> x7544 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7544.valid){
continue;
}
CheckValue<IkReal> x7545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7543)))),-1);
if(!x7545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7544.value)+(((1.5707963267949)*(x7545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7546=IKsin(j4);
IkReal x7547=IKcos(j4);
IkReal x7548=(cj5*r10);
IkReal x7549=(r01*sj5);
IkReal x7550=(cj5*r00);
IkReal x7551=(cj5*r20);
IkReal x7552=((1.0)*x7547);
IkReal x7553=((1.0)*x7546);
IkReal x7554=(sj5*x7546);
evalcond[0]=(((r21*x7554))+(((-1.0)*x7551*x7553))+(((-1.0)*r22*x7552)));
evalcond[1]=((((-1.0)*r12*x7552))+((r11*x7554))+(((-1.0)*x7548*x7553)));
evalcond[2]=(((x7547*x7550))+(((-1.0)*r02*x7553))+(((-1.0)*x7549*x7552)));
evalcond[3]=((-1.0)+((x7546*x7549))+(((-1.0)*x7550*x7553))+(((-1.0)*r02*x7552)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7547*x7551))+(((-1.0)*r22*x7553))+(((-1.0)*r21*sj5*x7552)));
evalcond[5]=((((-1.0)*r11*sj5*x7552))+((x7547*x7548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7555.value)))+(x7556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j4);
IkReal x7558=IKcos(j4);
IkReal x7559=(cj5*r10);
IkReal x7560=(r01*sj5);
IkReal x7561=(cj5*r00);
IkReal x7562=(cj5*r20);
IkReal x7563=((1.0)*x7558);
IkReal x7564=((1.0)*x7557);
IkReal x7565=(sj5*x7557);
evalcond[0]=((((-1.0)*x7562*x7564))+(((-1.0)*r22*x7563))+((r21*x7565)));
evalcond[1]=((((-1.0)*x7559*x7564))+((r11*x7565))+(((-1.0)*r12*x7563)));
evalcond[2]=((((-1.0)*r02*x7564))+(((-1.0)*x7560*x7563))+((x7558*x7561)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7563))+((x7557*x7560))+(((-1.0)*x7561*x7564)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7564))+((cj1*sj2))+(((-1.0)*r21*sj5*x7563))+((x7558*x7562)));
evalcond[5]=(((x7558*x7559))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7564))+(((-1.0)*r11*sj5*x7563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7567 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7567)==0){
continue;
}
IkReal x7566=pow(x7567,-0.5);
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7568.value));
IkReal gconst145=((-1.0)*r11*x7566);
IkReal gconst146=(r10*x7566);
CheckValue<IkReal> x7569 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7569.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7569.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7572 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7572.valid){
continue;
}
IkReal x7570=((-1.0)*(x7572.value));
IkReal x7571=x7566;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7570;
IkReal gconst144=x7570;
IkReal gconst145=((-1.0)*r11*x7571);
IkReal gconst146=(r10*x7571);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7573=((1.0)*gconst146);
CheckValue<IkReal> x7574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7573))+(((-1.0)*gconst145*r20)))),-1);
if(!x7574.valid){
continue;
}
CheckValue<IkReal> x7575 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7573))+((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x7573))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7574.value)))+(x7575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7576=IKsin(j4);
IkReal x7577=IKcos(j4);
IkReal x7578=(gconst146*r10);
IkReal x7579=(cj1*cj2);
IkReal x7580=(gconst145*r11);
IkReal x7581=(gconst146*r20);
IkReal x7582=(gconst146*r00);
IkReal x7583=((1.0)*cj0);
IkReal x7584=(sj1*sj2);
IkReal x7585=((1.0)*x7577);
IkReal x7586=((1.0)*x7576);
IkReal x7587=(gconst145*x7576);
evalcond[0]=((((-1.0)*r22*x7585))+(((-1.0)*x7581*x7586))+((r21*x7587)));
evalcond[1]=(sj0+(((-1.0)*r02*x7585))+(((-1.0)*x7582*x7586))+((r01*x7587)));
evalcond[2]=(((x7576*x7580))+(((-1.0)*x7583))+(((-1.0)*r12*x7585))+(((-1.0)*x7578*x7586)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7586))+(((-1.0)*gconst145*r21*x7585))+((x7577*x7581)));
evalcond[4]=((((-1.0)*gconst145*r01*x7585))+(((-1.0)*r02*x7586))+(((-1.0)*x7583*x7584))+((x7577*x7582))+((cj0*x7579)));
evalcond[5]=((((-1.0)*sj0*x7584))+(((-1.0)*x7580*x7585))+((x7577*x7578))+(((-1.0)*r12*x7586))+((sj0*x7579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7588.valid){
continue;
}
CheckValue<IkReal> x7589=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x7589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7588.value)+(((1.5707963267949)*(x7589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7590=IKsin(j4);
IkReal x7591=IKcos(j4);
IkReal x7592=(gconst146*r10);
IkReal x7593=(cj1*cj2);
IkReal x7594=(gconst145*r11);
IkReal x7595=(gconst146*r20);
IkReal x7596=(gconst146*r00);
IkReal x7597=((1.0)*cj0);
IkReal x7598=(sj1*sj2);
IkReal x7599=((1.0)*x7591);
IkReal x7600=((1.0)*x7590);
IkReal x7601=(gconst145*x7590);
evalcond[0]=((((-1.0)*x7595*x7600))+(((-1.0)*r22*x7599))+((r21*x7601)));
evalcond[1]=(sj0+((r01*x7601))+(((-1.0)*x7596*x7600))+(((-1.0)*r02*x7599)));
evalcond[2]=((((-1.0)*r12*x7599))+(((-1.0)*x7592*x7600))+(((-1.0)*x7597))+((x7590*x7594)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7600))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7599))+((x7591*x7595)));
evalcond[4]=((((-1.0)*gconst145*r01*x7599))+(((-1.0)*x7597*x7598))+((cj0*x7593))+(((-1.0)*r02*x7600))+((x7591*x7596)));
evalcond[5]=((((-1.0)*sj0*x7598))+(((-1.0)*x7594*x7599))+((sj0*x7593))+((x7591*x7592))+(((-1.0)*r12*x7600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7603 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7603)==0){
continue;
}
IkReal x7602=pow(x7603,-0.5);
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7604.value))));
IkReal gconst148=((1.0)*r11*x7602);
IkReal gconst149=((-1.0)*r10*x7602);
CheckValue<IkReal> x7605 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
IkReal x7606=((1.0)*(x7608.value));
IkReal x7607=x7602;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7606)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7606)));
IkReal gconst148=((1.0)*r11*x7607);
IkReal gconst149=((-1.0)*r10*x7607);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
IkReal x7609=((1.0)*(x7611.value));
IkReal x7610=x7602;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7609)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7609)));
IkReal gconst148=((1.0)*r11*x7610);
IkReal gconst149=((-1.0)*r10*x7610);
IkReal x7612=r12*r12;
IkReal x7613=(cj0*r02);
IkReal x7614=x7602;
IkReal x7615=(sj0*x7614);
j4eval[0]=((IKabs((((r12*sj0))+x7613)))+(IKabs((((x7612*x7615))+((r12*x7613*x7614))+(((-1.0)*x7615))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
IkReal x7616=((1.0)*(x7618.value));
IkReal x7617=x7602;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7616)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7616)));
IkReal gconst148=((1.0)*r11*x7617);
IkReal gconst149=((-1.0)*r10*x7617);
IkReal x7619=(cj1*r22*sj2);
IkReal x7620=(cj2*r22*sj1);
IkReal x7621=x7602;
IkReal x7622=(r12*x7621);
j4eval[0]=((IKabs((x7619+x7620)))+(IKabs((((x7620*x7622))+((x7619*x7622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7623=(cj2*sj1);
IkReal x7624=(cj1*sj2);
IkReal x7625=(gconst148*r21);
IkReal x7626=((1.0)*gconst149*r20);
CheckValue<IkReal> x7627 = IKatan2WithCheck(IkReal((((r22*x7624))+((r22*x7623)))),IkReal((((x7624*x7625))+(((-1.0)*x7623*x7626))+(((-1.0)*x7624*x7626))+((x7623*x7625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7627.valid){
continue;
}
CheckValue<IkReal> x7628=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(((-2.0)*gconst149*r20*x7625))+(x7625*x7625))),-1);
if(!x7628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7627.value)+(((1.5707963267949)*(x7628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7629=IKsin(j4);
IkReal x7630=IKcos(j4);
IkReal x7631=(cj1*cj2);
IkReal x7632=(gconst148*r11);
IkReal x7633=((1.0)*cj0);
IkReal x7634=(sj1*sj2);
IkReal x7635=((1.0)*x7630);
IkReal x7636=(gconst149*x7630);
IkReal x7637=((1.0)*x7629);
IkReal x7638=(gconst148*x7629);
evalcond[0]=((((-1.0)*r22*x7635))+(((-1.0)*gconst149*r20*x7637))+((r21*x7638)));
evalcond[1]=(sj0+((r01*x7638))+(((-1.0)*gconst149*r00*x7637))+(((-1.0)*r02*x7635)));
evalcond[2]=((((-1.0)*x7633))+((x7629*x7632))+(((-1.0)*gconst149*r10*x7637))+(((-1.0)*r12*x7635)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7637))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7635))+((r20*x7636)));
evalcond[4]=(((r00*x7636))+(((-1.0)*gconst148*r01*x7635))+(((-1.0)*x7633*x7634))+(((-1.0)*r02*x7637))+((cj0*x7631)));
evalcond[5]=((((-1.0)*sj0*x7634))+((r10*x7636))+(((-1.0)*x7632*x7635))+((sj0*x7631))+(((-1.0)*r12*x7637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7639=((1.0)*gconst149);
CheckValue<IkReal> x7640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7639)))),-1);
if(!x7640.valid){
continue;
}
CheckValue<IkReal> x7641 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7639))+(((-1.0)*r10*sj0*x7639))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7640.value)))+(x7641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7642=IKsin(j4);
IkReal x7643=IKcos(j4);
IkReal x7644=(cj1*cj2);
IkReal x7645=(gconst148*r11);
IkReal x7646=((1.0)*cj0);
IkReal x7647=(sj1*sj2);
IkReal x7648=((1.0)*x7643);
IkReal x7649=(gconst149*x7643);
IkReal x7650=((1.0)*x7642);
IkReal x7651=(gconst148*x7642);
evalcond[0]=((((-1.0)*r22*x7648))+((r21*x7651))+(((-1.0)*gconst149*r20*x7650)));
evalcond[1]=(sj0+(((-1.0)*r02*x7648))+(((-1.0)*gconst149*r00*x7650))+((r01*x7651)));
evalcond[2]=(((x7642*x7645))+(((-1.0)*r12*x7648))+(((-1.0)*gconst149*r10*x7650))+(((-1.0)*x7646)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7650))+(((-1.0)*gconst148*r21*x7648))+((cj1*sj2))+((r20*x7649)));
evalcond[4]=((((-1.0)*r02*x7650))+(((-1.0)*gconst148*r01*x7648))+(((-1.0)*x7646*x7647))+((r00*x7649))+((cj0*x7644)));
evalcond[5]=((((-1.0)*sj0*x7647))+((sj0*x7644))+(((-1.0)*x7645*x7648))+((r10*x7649))+(((-1.0)*r12*x7650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7652.valid){
continue;
}
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7652.value)))+(x7653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7654=IKsin(j4);
IkReal x7655=IKcos(j4);
IkReal x7656=(cj1*cj2);
IkReal x7657=(gconst148*r11);
IkReal x7658=((1.0)*cj0);
IkReal x7659=(sj1*sj2);
IkReal x7660=((1.0)*x7655);
IkReal x7661=(gconst149*x7655);
IkReal x7662=((1.0)*x7654);
IkReal x7663=(gconst148*x7654);
evalcond[0]=(((r21*x7663))+(((-1.0)*r22*x7660))+(((-1.0)*gconst149*r20*x7662)));
evalcond[1]=((((-1.0)*gconst149*r00*x7662))+sj0+((r01*x7663))+(((-1.0)*r02*x7660)));
evalcond[2]=((((-1.0)*r12*x7660))+((x7654*x7657))+(((-1.0)*gconst149*r10*x7662))+(((-1.0)*x7658)));
evalcond[3]=(((cj2*sj1))+((r20*x7661))+(((-1.0)*gconst148*r21*x7660))+((cj1*sj2))+(((-1.0)*r22*x7662)));
evalcond[4]=(((r00*x7661))+(((-1.0)*gconst148*r01*x7660))+(((-1.0)*r02*x7662))+((cj0*x7656))+(((-1.0)*x7658*x7659)));
evalcond[5]=((((-1.0)*r12*x7662))+((r10*x7661))+(((-1.0)*x7657*x7660))+((sj0*x7656))+(((-1.0)*sj0*x7659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7664=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7664;
j4eval[1]=IKsign(x7664);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7665=((1.0)*cj5);
IkReal x7666=((((-1.0)*r21*x7665))+(((-1.0)*r20*sj5)));
j4eval[0]=x7666;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7665))))));
j4eval[2]=IKsign(x7666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7667=cj5*cj5;
IkReal x7668=r11*r11;
IkReal x7669=(cj5*r10);
IkReal x7670=(r11*sj5);
IkReal x7671=(((x7667*x7668))+(((2.0)*x7669*x7670))+(((-1.0)*(r12*r12)))+(((-1.0)*x7668))+(((-1.0)*x7667*(r10*r10))));
j4eval[0]=x7671;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7670))+x7669))));
j4eval[2]=IKsign(x7671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7672=cj5*cj5;
IkReal x7673=r11*r11;
IkReal x7674=(cj5*r10);
IkReal x7675=(r11*sj5);
CheckValue<IkReal> x7676 = IKatan2WithCheck(IkReal(((((-1.0)*x7675))+x7674)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7676.valid){
continue;
}
CheckValue<IkReal> x7677=IKPowWithIntegerCheck(IKsign((((x7672*x7673))+(((2.0)*x7674*x7675))+(((-1.0)*x7672*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7673)))),-1);
if(!x7677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7676.value)+(((1.5707963267949)*(x7677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7678=IKsin(j4);
IkReal x7679=IKcos(j4);
IkReal x7680=(cj5*r10);
IkReal x7681=(r01*sj5);
IkReal x7682=(cj5*r00);
IkReal x7683=(cj5*r20);
IkReal x7684=((1.0)*x7679);
IkReal x7685=((1.0)*x7678);
IkReal x7686=(sj5*x7678);
evalcond[0]=((((-1.0)*r22*x7684))+((r21*x7686))+(((-1.0)*x7683*x7685)));
evalcond[1]=((((-1.0)*x7682*x7685))+((x7678*x7681))+(((-1.0)*r02*x7684)));
evalcond[2]=(((x7679*x7680))+(((-1.0)*r11*sj5*x7684))+(((-1.0)*r12*x7685)));
evalcond[3]=((-1.0)+((r11*x7686))+(((-1.0)*x7680*x7685))+(((-1.0)*r12*x7684)));
evalcond[4]=(((cj2*sj1))+((x7679*x7683))+(((-1.0)*r21*sj5*x7684))+((cj1*sj2))+(((-1.0)*r22*x7685)));
evalcond[5]=(((x7679*x7682))+(((-1.0)*sj1*sj2))+(((-1.0)*x7681*x7684))+((cj1*cj2))+(((-1.0)*r02*x7685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7687=((1.0)*cj5);
CheckValue<IkReal> x7688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7687))+(((-1.0)*r20*sj5)))),-1);
if(!x7688.valid){
continue;
}
CheckValue<IkReal> x7689 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7688.value)))+(x7689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7690=IKsin(j4);
IkReal x7691=IKcos(j4);
IkReal x7692=(cj5*r10);
IkReal x7693=(r01*sj5);
IkReal x7694=(cj5*r00);
IkReal x7695=(cj5*r20);
IkReal x7696=((1.0)*x7691);
IkReal x7697=((1.0)*x7690);
IkReal x7698=(sj5*x7690);
evalcond[0]=((((-1.0)*x7695*x7697))+(((-1.0)*r22*x7696))+((r21*x7698)));
evalcond[1]=((((-1.0)*r02*x7696))+((x7690*x7693))+(((-1.0)*x7694*x7697)));
evalcond[2]=(((x7691*x7692))+(((-1.0)*r11*sj5*x7696))+(((-1.0)*r12*x7697)));
evalcond[3]=((-1.0)+((r11*x7698))+(((-1.0)*r12*x7696))+(((-1.0)*x7692*x7697)));
evalcond[4]=(((cj2*sj1))+((x7691*x7695))+((cj1*sj2))+(((-1.0)*r21*sj5*x7696))+(((-1.0)*r22*x7697)));
evalcond[5]=((((-1.0)*x7693*x7696))+(((-1.0)*r02*x7697))+((x7691*x7694))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7699 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7699.valid){
continue;
}
CheckValue<IkReal> x7700=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7699.value)+(((1.5707963267949)*(x7700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7701=IKsin(j4);
IkReal x7702=IKcos(j4);
IkReal x7703=(cj5*r10);
IkReal x7704=(r01*sj5);
IkReal x7705=(cj5*r00);
IkReal x7706=(cj5*r20);
IkReal x7707=((1.0)*x7702);
IkReal x7708=((1.0)*x7701);
IkReal x7709=(sj5*x7701);
evalcond[0]=(((r21*x7709))+(((-1.0)*r22*x7707))+(((-1.0)*x7706*x7708)));
evalcond[1]=(((x7701*x7704))+(((-1.0)*x7705*x7708))+(((-1.0)*r02*x7707)));
evalcond[2]=((((-1.0)*r11*sj5*x7707))+(((-1.0)*r12*x7708))+((x7702*x7703)));
evalcond[3]=((-1.0)+((r11*x7709))+(((-1.0)*r12*x7707))+(((-1.0)*x7703*x7708)));
evalcond[4]=((((-1.0)*r21*sj5*x7707))+((cj2*sj1))+(((-1.0)*r22*x7708))+((cj1*sj2))+((x7702*x7706)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7704*x7707))+((cj1*cj2))+(((-1.0)*r02*x7708))+((x7702*x7705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7710=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7710;
j4eval[1]=IKsign(x7710);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7711=((1.0)*cj5);
IkReal x7712=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7711)));
j4eval[0]=x7712;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7711))))));
j4eval[2]=IKsign(x7712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7713=cj5*cj5;
IkReal x7714=r11*r11;
IkReal x7715=(r11*sj5);
IkReal x7716=(cj5*r10);
IkReal x7717=((r12*r12)+(((-2.0)*x7715*x7716))+(((-1.0)*x7713*x7714))+x7714+((x7713*(r10*r10))));
j4eval[0]=x7717;
j4eval[1]=IKsign(x7717);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7715))+x7716))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7718=cj5*cj5;
IkReal x7719=r11*r11;
IkReal x7720=(cj5*r10);
IkReal x7721=(r11*sj5);
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(((((-1.0)*x7721))+x7720)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
CheckValue<IkReal> x7723=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7718*x7719))+((x7718*(r10*r10)))+(((-2.0)*x7720*x7721))+x7719)),-1);
if(!x7723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7722.value)+(((1.5707963267949)*(x7723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7724=IKsin(j4);
IkReal x7725=IKcos(j4);
IkReal x7726=(cj5*r10);
IkReal x7727=(r01*sj5);
IkReal x7728=(cj5*r00);
IkReal x7729=(cj5*r20);
IkReal x7730=((1.0)*x7725);
IkReal x7731=((1.0)*x7724);
IkReal x7732=(sj5*x7724);
evalcond[0]=(((r21*x7732))+(((-1.0)*r22*x7730))+(((-1.0)*x7729*x7731)));
evalcond[1]=((((-1.0)*x7728*x7731))+((x7724*x7727))+(((-1.0)*r02*x7730)));
evalcond[2]=((((-1.0)*r11*sj5*x7730))+(((-1.0)*r12*x7731))+((x7725*x7726)));
evalcond[3]=((1.0)+((r11*x7732))+(((-1.0)*r12*x7730))+(((-1.0)*x7726*x7731)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7730))+((cj1*sj2))+(((-1.0)*r22*x7731))+((x7725*x7729)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7725*x7728))+(((-1.0)*r02*x7731))+(((-1.0)*x7727*x7730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7733=((1.0)*cj5);
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7733)))),-1);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7734.value)))+(x7735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(cj5*r10);
IkReal x7739=(r01*sj5);
IkReal x7740=(cj5*r00);
IkReal x7741=(cj5*r20);
IkReal x7742=((1.0)*x7737);
IkReal x7743=((1.0)*x7736);
IkReal x7744=(sj5*x7736);
evalcond[0]=((((-1.0)*r22*x7742))+(((-1.0)*x7741*x7743))+((r21*x7744)));
evalcond[1]=((((-1.0)*r02*x7742))+(((-1.0)*x7740*x7743))+((x7736*x7739)));
evalcond[2]=((((-1.0)*r12*x7743))+(((-1.0)*r11*sj5*x7742))+((x7737*x7738)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7742))+(((-1.0)*x7738*x7743))+((r11*x7744)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7743))+(((-1.0)*r21*sj5*x7742))+((cj1*sj2))+((x7737*x7741)));
evalcond[5]=((((-1.0)*r02*x7743))+((x7737*x7740))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7739*x7742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7745=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7745.valid){
continue;
}
CheckValue<IkReal> x7746 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7745.value)))+(x7746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7747=IKsin(j4);
IkReal x7748=IKcos(j4);
IkReal x7749=(cj5*r10);
IkReal x7750=(r01*sj5);
IkReal x7751=(cj5*r00);
IkReal x7752=(cj5*r20);
IkReal x7753=((1.0)*x7748);
IkReal x7754=((1.0)*x7747);
IkReal x7755=(sj5*x7747);
evalcond[0]=((((-1.0)*r22*x7753))+(((-1.0)*x7752*x7754))+((r21*x7755)));
evalcond[1]=((((-1.0)*r02*x7753))+((x7747*x7750))+(((-1.0)*x7751*x7754)));
evalcond[2]=((((-1.0)*r12*x7754))+(((-1.0)*r11*sj5*x7753))+((x7748*x7749)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7753))+(((-1.0)*x7749*x7754))+((r11*x7755)));
evalcond[4]=((((-1.0)*r22*x7754))+((cj2*sj1))+(((-1.0)*r21*sj5*x7753))+((cj1*sj2))+((x7748*x7752)));
evalcond[5]=((((-1.0)*r02*x7754))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7748*x7751))+(((-1.0)*x7750*x7753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7756=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7756);
rxp0_2=(py*r00);
rxp1_0=(r21*x7756);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7757=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7757);
rxp0_2=(py*r00);
rxp1_0=(r21*x7757);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7758=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7758);
rxp0_2=(py*r00);
rxp1_0=(r21*x7758);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7761=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7761.valid){
continue;
}
IkReal x7759=x7761.value;
IkReal x7760=(cj0*x7759);
cj4array[0]=((((-1.0)*cj1*cj2*x7760))+((sj1*sj2*x7760)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7762=IKsin(j4);
IkReal x7763=IKcos(j4);
IkReal x7764=(r21*sj5);
IkReal x7765=((1.0)*x7763);
IkReal x7766=((1.0)*cj5*x7762);
evalcond[0]=((-1.0)*r12*x7762);
evalcond[1]=((((-1.0)*r12*x7765))+(((-1.0)*cj0)));
evalcond[2]=(((x7762*x7764))+(((-1.0)*r20*x7766)));
evalcond[3]=((((-1.0)*r00*x7766))+((r01*sj5*x7762)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7764*x7765))+((cj5*r20*x7763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7769=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7769.valid){
continue;
}
IkReal x7767=x7769.value;
IkReal x7768=((1.0)*x7767);
cj4array[0]=((((-1.0)*cj2*sj1*x7768))+(((-1.0)*cj1*sj2*x7768)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7770=IKsin(j4);
IkReal x7771=IKcos(j4);
IkReal x7772=(cj5*r00);
IkReal x7773=((1.0)*cj0);
IkReal x7774=((1.0)*x7770);
IkReal x7775=(sj5*x7770);
IkReal x7776=((1.0)*x7771);
evalcond[0]=((-1.0)*r12*x7770);
evalcond[1]=((((-1.0)*x7773))+(((-1.0)*r12*x7776)));
evalcond[2]=(((r21*x7775))+(((-1.0)*cj5*r20*x7774)));
evalcond[3]=((((-1.0)*x7772*x7774))+((r01*x7775)));
evalcond[4]=((((-1.0)*r01*sj5*x7776))+((x7771*x7772))+(((-1.0)*sj1*sj2*x7773))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7777=IKPowWithIntegerCheck(r12,-1);
if(!x7777.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7777.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7778=IKsin(j4);
IkReal x7779=IKcos(j4);
IkReal x7780=(cj5*r00);
IkReal x7781=(r21*sj5);
IkReal x7782=(cj5*r20);
IkReal x7783=(r01*sj5);
IkReal x7784=((1.0)*x7778);
IkReal x7785=((1.0)*x7779);
evalcond[0]=((-1.0)*r12*x7778);
evalcond[1]=(((x7778*x7781))+(((-1.0)*x7782*x7784)));
evalcond[2]=(((x7778*x7783))+(((-1.0)*x7780*x7784)));
evalcond[3]=(((cj2*sj1))+((x7779*x7782))+((cj1*sj2))+(((-1.0)*x7781*x7785)));
evalcond[4]=((((-1.0)*x7783*x7785))+((x7779*x7780))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7786=((1.0)*cj5);
CheckValue<IkReal> x7787 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x7786))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7787.valid){
continue;
}
CheckValue<IkReal> x7788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7786))+(((-1.0)*r20*sj5)))),-1);
if(!x7788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7787.value)+(((1.5707963267949)*(x7788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7789=IKsin(j4);
IkReal x7790=IKcos(j4);
IkReal x7791=(cj1*cj2);
IkReal x7792=(cj5*r10);
IkReal x7793=(r01*sj5);
IkReal x7794=(cj5*r00);
IkReal x7795=(cj5*r20);
IkReal x7796=((1.0)*cj0);
IkReal x7797=(sj1*sj2);
IkReal x7798=((1.0)*x7790);
IkReal x7799=((1.0)*x7789);
IkReal x7800=(sj5*x7789);
evalcond[0]=((((-1.0)*r22*x7798))+((r21*x7800))+(((-1.0)*x7795*x7799)));
evalcond[1]=(sj0+((x7789*x7793))+(((-1.0)*r02*x7798))+(((-1.0)*x7794*x7799)));
evalcond[2]=(((r11*x7800))+(((-1.0)*x7792*x7799))+(((-1.0)*r12*x7798))+(((-1.0)*x7796)));
evalcond[3]=((((-1.0)*r22*x7799))+((cj2*sj1))+((cj1*sj2))+((x7790*x7795))+(((-1.0)*r21*sj5*x7798)));
evalcond[4]=((((-1.0)*x7793*x7798))+((cj0*x7791))+(((-1.0)*r02*x7799))+((x7790*x7794))+(((-1.0)*x7796*x7797)));
evalcond[5]=((((-1.0)*r12*x7799))+(((-1.0)*r11*sj5*x7798))+(((-1.0)*sj0*x7797))+((sj0*x7791))+((x7790*x7792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7801.valid){
continue;
}
CheckValue<IkReal> x7802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7801.value)))+(x7802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7803=IKsin(j4);
IkReal x7804=IKcos(j4);
IkReal x7805=(cj1*cj2);
IkReal x7806=(cj5*r10);
IkReal x7807=(r01*sj5);
IkReal x7808=(cj5*r00);
IkReal x7809=(cj5*r20);
IkReal x7810=((1.0)*cj0);
IkReal x7811=(sj1*sj2);
IkReal x7812=((1.0)*x7804);
IkReal x7813=((1.0)*x7803);
IkReal x7814=(sj5*x7803);
evalcond[0]=((((-1.0)*r22*x7812))+((r21*x7814))+(((-1.0)*x7809*x7813)));
evalcond[1]=(sj0+((x7803*x7807))+(((-1.0)*r02*x7812))+(((-1.0)*x7808*x7813)));
evalcond[2]=((((-1.0)*x7806*x7813))+((r11*x7814))+(((-1.0)*x7810))+(((-1.0)*r12*x7812)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7812))+((cj1*sj2))+(((-1.0)*r22*x7813))+((x7804*x7809)));
evalcond[4]=(((cj0*x7805))+(((-1.0)*r02*x7813))+((x7804*x7808))+(((-1.0)*x7810*x7811))+(((-1.0)*x7807*x7812)));
evalcond[5]=((((-1.0)*sj0*x7811))+((sj0*x7805))+((x7804*x7806))+(((-1.0)*r12*x7813))+(((-1.0)*r11*sj5*x7812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7815.valid){
continue;
}
CheckValue<IkReal> x7816 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7815.value)))+(x7816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7817=IKsin(j4);
IkReal x7818=IKcos(j4);
IkReal x7819=(cj1*cj2);
IkReal x7820=(cj5*r10);
IkReal x7821=(r01*sj5);
IkReal x7822=(cj5*r00);
IkReal x7823=(cj5*r20);
IkReal x7824=((1.0)*cj0);
IkReal x7825=(sj1*sj2);
IkReal x7826=((1.0)*x7818);
IkReal x7827=((1.0)*x7817);
IkReal x7828=(sj5*x7817);
evalcond[0]=(((r21*x7828))+(((-1.0)*x7823*x7827))+(((-1.0)*r22*x7826)));
evalcond[1]=(sj0+((x7817*x7821))+(((-1.0)*r02*x7826))+(((-1.0)*x7822*x7827)));
evalcond[2]=((((-1.0)*x7820*x7827))+((r11*x7828))+(((-1.0)*x7824))+(((-1.0)*r12*x7826)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7826))+(((-1.0)*r22*x7827))+((x7818*x7823)));
evalcond[4]=((((-1.0)*x7824*x7825))+(((-1.0)*r02*x7827))+(((-1.0)*x7821*x7826))+((cj0*x7819))+((x7818*x7822)));
evalcond[5]=((((-1.0)*r11*sj5*x7826))+((sj0*x7819))+(((-1.0)*r12*x7827))+(((-1.0)*sj0*x7825))+((x7818*x7820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7829=cj5*cj5;
IkReal x7830=r21*r21;
IkReal x7831=(cj2*sj1);
IkReal x7832=(cj1*sj2);
IkReal x7833=(r21*sj5);
IkReal x7834=((1.0)*cj5*r20);
CheckValue<IkReal> x7835 = IKatan2WithCheck(IkReal((((r22*x7831))+((r22*x7832)))),IkReal((((x7831*x7833))+(((-1.0)*x7832*x7834))+(((-1.0)*x7831*x7834))+((x7832*x7833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7835.valid){
continue;
}
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x7833))+((x7829*(r20*r20)))+(r22*r22)+x7830+(((-1.0)*x7829*x7830)))),-1);
if(!x7836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7835.value)+(((1.5707963267949)*(x7836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7837=IKsin(j4);
IkReal x7838=IKcos(j4);
IkReal x7839=(r21*sj5);
IkReal x7840=(cj5*r20);
IkReal x7841=((1.0)*x7838);
IkReal x7842=((1.0)*x7837);
evalcond[0]=((((-1.0)*r22*x7841))+(((-1.0)*x7840*x7842))+((x7837*x7839)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x7839*x7841))+(((-1.0)*r22*x7842))+((cj1*sj2))+((x7838*x7840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7843=(cj5*sj4);
IkReal x7844=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x7844))+((r00*x7843))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x7843))+((r11*x7844))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x7844))+((r00*x7843))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x7843))+((r11*x7844))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x7844))+((r00*x7843))+((cj4*r02))), ((((-1.0)*r10*x7843))+((r11*x7844))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7845=IKcos(j0);
IkReal x7846=IKsin(j0);
IkReal x7847=(cj4*cj5);
IkReal x7848=((1.0)*sj1);
IkReal x7849=(r11*sj5);
IkReal x7850=((1.0)*cj5);
IkReal x7851=((1.0)*sj4);
IkReal x7852=((0.21325)*sj1);
IkReal x7853=((1.0)*sj5);
IkReal x7854=((0.24365)*cj1);
IkReal x7855=((0.08535)*cj5);
IkReal x7856=((1.0)*cj4);
IkReal x7857=((0.08535)*sj5);
IkReal x7858=(sj2*x7846);
IkReal x7859=(cj2*x7845);
IkReal x7860=(sj2*x7845);
IkReal x7861=(cj1*cj2*x7846);
evalcond[0]=(((r01*sj4*sj5))+x7846+(((-1.0)*r02*x7856))+(((-1.0)*r00*sj4*x7850)));
evalcond[1]=((((-1.0)*x7845))+((sj4*x7849))+(((-1.0)*r10*sj4*x7850))+(((-1.0)*r12*x7856)));
evalcond[2]=(((sj1*x7859))+((cj1*x7860))+(((-1.0)*r00*x7853))+(((-1.0)*r01*x7850)));
evalcond[3]=((((-1.0)*r11*x7850))+((cj2*sj1*x7846))+(((-1.0)*r10*x7853))+((cj1*x7858)));
evalcond[4]=(((r00*x7847))+((cj1*x7859))+(((-1.0)*r02*x7851))+(((-1.0)*cj4*r01*x7853))+(((-1.0)*x7848*x7860)));
evalcond[5]=((((-1.0)*x7849*x7856))+(((-1.0)*x7848*x7858))+((r10*x7847))+x7861+(((-1.0)*r12*x7851)));
evalcond[6]=((((-0.21325)*cj1*x7859))+(((0.11)*x7846))+(((-1.0)*px))+((x7852*x7860))+(((-1.0)*r00*x7857))+(((-1.0)*r01*x7855))+(((-1.0)*x7845*x7854)));
evalcond[7]=((((-1.0)*r11*x7855))+((x7852*x7858))+(((-1.0)*r10*x7857))+(((-0.21325)*x7861))+(((-1.0)*x7846*x7854))+(((-1.0)*py))+(((-0.11)*x7845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7862=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7862.valid){
continue;
}
CheckValue<IkReal> x7863 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7863.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7862.value)))+(x7863.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7864=IKcos(j0);
IkReal x7865=IKsin(j0);
IkReal x7866=(cj5*r11);
IkReal x7867=((0.21325)*sj2);
IkReal x7868=((1.0)*sj5);
IkReal x7869=(cj5*r01);
IkReal x7870=((0.24365)*cj1);
IkReal x7871=((0.08535)*sj5);
IkReal x7872=(cj1*sj2);
IkReal x7873=((0.21325)*cj1*cj2);
IkReal x7874=(sj1*x7864);
IkReal x7875=(sj1*x7865);
evalcond[0]=(((x7864*x7872))+(((-1.0)*r00*x7868))+((cj2*x7874))+(((-1.0)*x7869)));
evalcond[1]=(((x7865*x7872))+((cj2*x7875))+(((-1.0)*x7866))+(((-1.0)*r10*x7868)));
evalcond[2]=((((-1.0)*r00*x7871))+(((-1.0)*x7864*x7873))+(((-1.0)*x7864*x7870))+(((0.11)*x7865))+(((-1.0)*px))+(((-0.08535)*x7869))+((x7867*x7874)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x7871))+(((-0.08535)*x7866))+(((-0.11)*x7864))+(((-1.0)*x7865*x7873))+(((-1.0)*x7865*x7870))+((x7867*x7875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7876=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7876;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7877=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7877;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7878=((1.0)*cj5);
IkReal x7879=((((-1.0)*r21*x7878))+(((-1.0)*r20*sj5)));
j4eval[0]=x7879;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7878))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7878))))));
j4eval[2]=IKsign(x7879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7880=((-1.0)*r20);
IkReal x7882 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7882)==0){
continue;
}
IkReal x7881=pow(x7882,-0.5);
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7880),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7883.value));
IkReal gconst133=(r21*x7881);
IkReal gconst134=(x7880*x7881);
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7884.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7885=((-1.0)*r20);
IkReal x7886=x7881;
CheckValue<IkReal> x7888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7885),IKFAST_ATAN2_MAGTHRESH);
if(!x7888.valid){
continue;
}
IkReal x7887=((-1.0)*(x7888.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7887;
IkReal gconst132=x7887;
IkReal gconst133=(r21*x7886);
IkReal gconst134=(x7885*x7886);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7889=((-1.0)*r20);
IkReal x7890=x7881;
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7889),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
IkReal x7891=((-1.0)*(x7892.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7891;
IkReal gconst132=x7891;
IkReal gconst133=(r21*x7890);
IkReal gconst134=(x7889*x7890);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7893=((-1.0)*r20);
IkReal x7894=x7881;
CheckValue<IkReal> x7896 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7893),IKFAST_ATAN2_MAGTHRESH);
if(!x7896.valid){
continue;
}
IkReal x7895=((-1.0)*(x7896.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7895;
IkReal gconst132=x7895;
IkReal gconst133=(r21*x7894);
IkReal gconst134=(x7893*x7894);
IkReal x7897=r22*r22;
CheckValue<IkReal> x7900=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7897))),-1);
if(!x7900.valid){
continue;
}
IkReal x7898=x7900.value;
IkReal x7899=((((2.0)*x7898*(r20*r20)*(r21*r21)))+x7897+((x7898*(r21*r21*r21*r21)))+((x7898*(r20*r20*r20*r20))));
j4eval[0]=x7899;
j4eval[1]=IKsign(x7899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7901=(gconst133*r21);
IkReal x7902=(cj1*sj2);
IkReal x7903=(gconst134*r20);
IkReal x7904=(cj2*sj1);
CheckValue<IkReal> x7905=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7901*x7903))+(r22*r22)+(x7901*x7901)+(x7903*x7903))),-1);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906 = IKatan2WithCheck(IkReal((((r22*x7902))+((r22*x7904)))),IkReal(((((-1.0)*x7902*x7903))+((x7901*x7904))+((x7901*x7902))+(((-1.0)*x7903*x7904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7905.value)))+(x7906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(cj1*cj2);
IkReal x7910=(gconst133*r11);
IkReal x7911=(gconst133*r21);
IkReal x7912=(gconst133*r01);
IkReal x7913=((1.0)*cj0);
IkReal x7914=(sj1*sj2);
IkReal x7915=((1.0)*x7908);
IkReal x7916=(gconst134*x7908);
IkReal x7917=((1.0)*x7907);
evalcond[0]=((((-1.0)*r22*x7915))+((x7907*x7911))+(((-1.0)*gconst134*r20*x7917)));
evalcond[1]=(sj0+(((-1.0)*r02*x7915))+((x7907*x7912))+(((-1.0)*gconst134*r00*x7917)));
evalcond[2]=((((-1.0)*gconst134*r10*x7917))+(((-1.0)*x7913))+(((-1.0)*r12*x7915))+((x7907*x7910)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7917))+((r20*x7916))+(((-1.0)*x7911*x7915)));
evalcond[4]=((((-1.0)*r02*x7917))+(((-1.0)*x7913*x7914))+(((-1.0)*x7912*x7915))+((r00*x7916))+((cj0*x7909)));
evalcond[5]=((((-1.0)*sj0*x7914))+((r10*x7916))+((sj0*x7909))+(((-1.0)*x7910*x7915))+(((-1.0)*r12*x7917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7918.valid){
continue;
}
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7918.value)))+(x7919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7920=IKsin(j4);
IkReal x7921=IKcos(j4);
IkReal x7922=(cj1*cj2);
IkReal x7923=(gconst133*r11);
IkReal x7924=(gconst133*r21);
IkReal x7925=(gconst133*r01);
IkReal x7926=((1.0)*cj0);
IkReal x7927=(sj1*sj2);
IkReal x7928=((1.0)*x7921);
IkReal x7929=(gconst134*x7921);
IkReal x7930=((1.0)*x7920);
evalcond[0]=((((-1.0)*r22*x7928))+((x7920*x7924))+(((-1.0)*gconst134*r20*x7930)));
evalcond[1]=(sj0+(((-1.0)*r02*x7928))+((x7920*x7925))+(((-1.0)*gconst134*r00*x7930)));
evalcond[2]=((((-1.0)*x7926))+(((-1.0)*gconst134*r10*x7930))+((x7920*x7923))+(((-1.0)*r12*x7928)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7930))+(((-1.0)*x7924*x7928))+((cj1*sj2))+((r20*x7929)));
evalcond[4]=((((-1.0)*x7925*x7928))+(((-1.0)*r02*x7930))+((r00*x7929))+(((-1.0)*x7926*x7927))+((cj0*x7922)));
evalcond[5]=((((-1.0)*sj0*x7927))+(((-1.0)*r12*x7930))+((r10*x7929))+(((-1.0)*x7923*x7928))+((sj0*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
CheckValue<IkReal> x7932=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7931.value)+(((1.5707963267949)*(x7932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7933=IKsin(j4);
IkReal x7934=IKcos(j4);
IkReal x7935=(cj1*cj2);
IkReal x7936=(gconst133*r11);
IkReal x7937=(gconst133*r21);
IkReal x7938=(gconst133*r01);
IkReal x7939=((1.0)*cj0);
IkReal x7940=(sj1*sj2);
IkReal x7941=((1.0)*x7934);
IkReal x7942=(gconst134*x7934);
IkReal x7943=((1.0)*x7933);
evalcond[0]=((((-1.0)*r22*x7941))+((x7933*x7937))+(((-1.0)*gconst134*r20*x7943)));
evalcond[1]=(sj0+((x7933*x7938))+(((-1.0)*r02*x7941))+(((-1.0)*gconst134*r00*x7943)));
evalcond[2]=(((x7933*x7936))+(((-1.0)*gconst134*r10*x7943))+(((-1.0)*r12*x7941))+(((-1.0)*x7939)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7943))+((r20*x7942))+((cj1*sj2))+(((-1.0)*x7937*x7941)));
evalcond[4]=((((-1.0)*x7938*x7941))+((cj0*x7935))+(((-1.0)*x7939*x7940))+(((-1.0)*r02*x7943))+((r00*x7942)));
evalcond[5]=(((sj0*x7935))+(((-1.0)*sj0*x7940))+(((-1.0)*x7936*x7941))+(((-1.0)*r12*x7943))+((r10*x7942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7944=((-1.0)*r21);
IkReal x7946 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7946)==0){
continue;
}
IkReal x7945=pow(x7946,-0.5);
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(x7944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7947.value))));
IkReal gconst136=(x7944*x7945);
IkReal gconst137=((1.0)*r20*x7945);
CheckValue<IkReal> x7948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7948.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7948.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7949=((-1.0)*r21);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(x7949),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
IkReal x7950=((1.0)*(x7952.value));
IkReal x7951=x7945;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7950)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7950)));
IkReal gconst136=(x7949*x7951);
IkReal gconst137=((1.0)*r20*x7951);
IkReal x7953=r22*r22;
IkReal x7954=((1.0)*x7953);
CheckValue<IkReal> x7958=IKPowWithIntegerCheck(((-1.0)+x7953),-1);
if(!x7958.valid){
continue;
}
IkReal x7955=x7958.value;
if((((1.0)+(((-1.0)*x7954)))) < -0.00001)
continue;
IkReal x7956=IKsqrt(((1.0)+(((-1.0)*x7954))));
IkReal x7957=(sj0*x7955*x7956);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7954*x7957))+x7957))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7959=((-1.0)*r21);
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(x7959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
IkReal x7960=((1.0)*(x7962.value));
IkReal x7961=x7945;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7960)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7960)));
IkReal gconst136=(x7959*x7961);
IkReal gconst137=((1.0)*r20*x7961);
IkReal x7963=r22*r22;
IkReal x7964=((1.0)*x7963);
CheckValue<IkReal> x7968=IKPowWithIntegerCheck(((-1.0)+x7963),-1);
if(!x7968.valid){
continue;
}
IkReal x7965=x7968.value;
if((((1.0)+(((-1.0)*x7964)))) < -0.00001)
continue;
IkReal x7966=IKsqrt(((1.0)+(((-1.0)*x7964))));
IkReal x7967=(cj0*x7965*x7966);
j4eval[0]=((IKabs(((((-1.0)*x7964*x7967))+x7967)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7969=((-1.0)*r21);
CheckValue<IkReal> x7972 = IKatan2WithCheck(IkReal(x7969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7972.valid){
continue;
}
IkReal x7970=((1.0)*(x7972.value));
IkReal x7971=x7945;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7970)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7970)));
IkReal gconst136=(x7969*x7971);
IkReal gconst137=((1.0)*r20*x7971);
IkReal x7973=r22*r22;
IkReal x7974=(cj0*r02);
IkReal x7975=(r12*sj0);
CheckValue<IkReal> x7979=IKPowWithIntegerCheck(((-1.0)+x7973),-1);
if(!x7979.valid){
continue;
}
IkReal x7976=x7979.value;
if((((1.0)+(((-1.0)*x7973)))) < -0.00001)
continue;
IkReal x7977=IKsqrt(((1.0)+(((-1.0)*x7973))));
IkReal x7978=((1.0)*r22*x7976*x7977);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7975*x7978))+(((-1.0)*x7974*x7978)))))+(IKabs((x7975+x7974))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7980=((1.0)*gconst137);
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7980))+(((-1.0)*gconst136*r20)))),-1);
if(!x7981.valid){
continue;
}
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7980))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*cj0*r00*x7980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7981.value)))+(x7982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7983=IKsin(j4);
IkReal x7984=IKcos(j4);
IkReal x7985=(gconst136*r01);
IkReal x7986=(gconst137*r10);
IkReal x7987=(cj1*cj2);
IkReal x7988=(gconst137*r20);
IkReal x7989=(gconst136*r11);
IkReal x7990=(gconst136*r21);
IkReal x7991=(gconst137*r00);
IkReal x7992=((1.0)*cj0);
IkReal x7993=(sj1*sj2);
IkReal x7994=((1.0)*x7984);
IkReal x7995=((1.0)*x7983);
evalcond[0]=(((x7983*x7990))+(((-1.0)*x7988*x7995))+(((-1.0)*r22*x7994)));
evalcond[1]=((((-1.0)*x7991*x7995))+sj0+((x7983*x7985))+(((-1.0)*r02*x7994)));
evalcond[2]=((((-1.0)*r12*x7994))+((x7983*x7989))+(((-1.0)*x7986*x7995))+(((-1.0)*x7992)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7990*x7994))+((x7984*x7988))+(((-1.0)*r22*x7995)));
evalcond[4]=((((-1.0)*x7992*x7993))+((x7984*x7991))+(((-1.0)*x7985*x7994))+((cj0*x7987))+(((-1.0)*r02*x7995)));
evalcond[5]=((((-1.0)*r12*x7995))+(((-1.0)*sj0*x7993))+((x7984*x7986))+((sj0*x7987))+(((-1.0)*x7989*x7994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7996 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7996.valid){
continue;
}
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7996.value)+(((1.5707963267949)*(x7997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7998=IKsin(j4);
IkReal x7999=IKcos(j4);
IkReal x8000=(gconst136*r01);
IkReal x8001=(gconst137*r10);
IkReal x8002=(cj1*cj2);
IkReal x8003=(gconst137*r20);
IkReal x8004=(gconst136*r11);
IkReal x8005=(gconst136*r21);
IkReal x8006=(gconst137*r00);
IkReal x8007=((1.0)*cj0);
IkReal x8008=(sj1*sj2);
IkReal x8009=((1.0)*x7999);
IkReal x8010=((1.0)*x7998);
evalcond[0]=(((x7998*x8005))+(((-1.0)*r22*x8009))+(((-1.0)*x8003*x8010)));
evalcond[1]=(sj0+((x7998*x8000))+(((-1.0)*x8006*x8010))+(((-1.0)*r02*x8009)));
evalcond[2]=(((x7998*x8004))+(((-1.0)*r12*x8009))+(((-1.0)*x8007))+(((-1.0)*x8001*x8010)));
evalcond[3]=((((-1.0)*r22*x8010))+((cj2*sj1))+((cj1*sj2))+((x7999*x8003))+(((-1.0)*x8005*x8009)));
evalcond[4]=((((-1.0)*r02*x8010))+((cj0*x8002))+((x7999*x8006))+(((-1.0)*x8007*x8008))+(((-1.0)*x8000*x8009)));
evalcond[5]=(((sj0*x8002))+(((-1.0)*x8004*x8009))+((x7999*x8001))+(((-1.0)*sj0*x8008))+(((-1.0)*r12*x8010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8011=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x8011.valid){
continue;
}
CheckValue<IkReal> x8012 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8011.value)))+(x8012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8013=IKsin(j4);
IkReal x8014=IKcos(j4);
IkReal x8015=(gconst136*r01);
IkReal x8016=(gconst137*r10);
IkReal x8017=(cj1*cj2);
IkReal x8018=(gconst137*r20);
IkReal x8019=(gconst136*r11);
IkReal x8020=(gconst136*r21);
IkReal x8021=(gconst137*r00);
IkReal x8022=((1.0)*cj0);
IkReal x8023=(sj1*sj2);
IkReal x8024=((1.0)*x8014);
IkReal x8025=((1.0)*x8013);
evalcond[0]=((((-1.0)*x8018*x8025))+(((-1.0)*r22*x8024))+((x8013*x8020)));
evalcond[1]=(sj0+(((-1.0)*r02*x8024))+((x8013*x8015))+(((-1.0)*x8021*x8025)));
evalcond[2]=((((-1.0)*r12*x8024))+((x8013*x8019))+(((-1.0)*x8016*x8025))+(((-1.0)*x8022)));
evalcond[3]=(((cj2*sj1))+((x8014*x8018))+((cj1*sj2))+(((-1.0)*x8020*x8024))+(((-1.0)*r22*x8025)));
evalcond[4]=(((cj0*x8017))+(((-1.0)*x8022*x8023))+(((-1.0)*r02*x8025))+((x8014*x8021))+(((-1.0)*x8015*x8024)));
evalcond[5]=((((-1.0)*sj0*x8023))+(((-1.0)*r12*x8025))+((x8014*x8016))+(((-1.0)*x8019*x8024))+((sj0*x8017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8027 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8027)==0){
continue;
}
IkReal x8026=pow(x8027,-0.5);
CheckValue<IkReal> x8028 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8028.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8028.value));
IkReal gconst139=((-1.0)*r01*x8026);
IkReal gconst140=(r00*x8026);
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8029.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
IkReal x8030=((-1.0)*(x8032.value));
IkReal x8031=x8026;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8030;
IkReal gconst138=x8030;
IkReal gconst139=((-1.0)*r01*x8031);
IkReal gconst140=(r00*x8031);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8033=((1.0)*gconst140);
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8033))+(((-1.0)*gconst139*r20)))),-1);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8033))+((gconst139*r11*sj0))+(((-1.0)*r10*sj0*x8033))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8034.value)))+(x8035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8036=IKsin(j4);
IkReal x8037=IKcos(j4);
IkReal x8038=(gconst140*r00);
IkReal x8039=(cj1*cj2);
IkReal x8040=(gconst139*r11);
IkReal x8041=(gconst139*r01);
IkReal x8042=((1.0)*cj0);
IkReal x8043=(gconst139*r21);
IkReal x8044=(sj1*sj2);
IkReal x8045=((1.0)*x8037);
IkReal x8046=((1.0)*x8036);
IkReal x8047=(gconst140*x8037);
evalcond[0]=((((-1.0)*gconst140*r20*x8046))+(((-1.0)*r22*x8045))+((x8036*x8043)));
evalcond[1]=(sj0+(((-1.0)*r02*x8045))+(((-1.0)*x8038*x8046))+((x8036*x8041)));
evalcond[2]=((((-1.0)*x8042))+((x8036*x8040))+(((-1.0)*r12*x8045))+(((-1.0)*gconst140*r10*x8046)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8047))+(((-1.0)*x8043*x8045))+(((-1.0)*r22*x8046)));
evalcond[4]=(((x8037*x8038))+(((-1.0)*x8042*x8044))+((cj0*x8039))+(((-1.0)*x8041*x8045))+(((-1.0)*r02*x8046)));
evalcond[5]=(((r10*x8047))+(((-1.0)*sj0*x8044))+((sj0*x8039))+(((-1.0)*x8040*x8045))+(((-1.0)*r12*x8046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
CheckValue<IkReal> x8049=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x8049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8048.value)+(((1.5707963267949)*(x8049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8050=IKsin(j4);
IkReal x8051=IKcos(j4);
IkReal x8052=(gconst140*r00);
IkReal x8053=(cj1*cj2);
IkReal x8054=(gconst139*r11);
IkReal x8055=(gconst139*r01);
IkReal x8056=((1.0)*cj0);
IkReal x8057=(gconst139*r21);
IkReal x8058=(sj1*sj2);
IkReal x8059=((1.0)*x8051);
IkReal x8060=((1.0)*x8050);
IkReal x8061=(gconst140*x8051);
evalcond[0]=((((-1.0)*gconst140*r20*x8060))+((x8050*x8057))+(((-1.0)*r22*x8059)));
evalcond[1]=(sj0+(((-1.0)*x8052*x8060))+((x8050*x8055))+(((-1.0)*r02*x8059)));
evalcond[2]=((((-1.0)*r12*x8059))+(((-1.0)*gconst140*r10*x8060))+((x8050*x8054))+(((-1.0)*x8056)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8057*x8059))+((cj1*sj2))+((r20*x8061))+(((-1.0)*r22*x8060)));
evalcond[4]=((((-1.0)*x8055*x8059))+(((-1.0)*x8056*x8058))+((cj0*x8053))+((x8051*x8052))+(((-1.0)*r02*x8060)));
evalcond[5]=(((r10*x8061))+(((-1.0)*sj0*x8058))+((sj0*x8053))+(((-1.0)*r12*x8060))+(((-1.0)*x8054*x8059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8063 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8063)==0){
continue;
}
IkReal x8062=pow(x8063,-0.5);
CheckValue<IkReal> x8064 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8064.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8064.value))));
IkReal gconst142=((1.0)*r01*x8062);
IkReal gconst143=((-1.0)*r00*x8062);
CheckValue<IkReal> x8065 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8065.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8065.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8068 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8068.valid){
continue;
}
IkReal x8066=((1.0)*(x8068.value));
IkReal x8067=x8062;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8066)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8066)));
IkReal gconst142=((1.0)*r01*x8067);
IkReal gconst143=((-1.0)*r00*x8067);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x8071 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8071.valid){
continue;
}
IkReal x8069=((1.0)*(x8071.value));
IkReal x8070=x8062;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8069)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8069)));
IkReal gconst142=((1.0)*r01*x8070);
IkReal gconst143=((-1.0)*r00*x8070);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8074 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8074.valid){
continue;
}
IkReal x8072=((1.0)*(x8074.value));
IkReal x8073=x8062;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8072)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8072)));
IkReal gconst142=((1.0)*r01*x8073);
IkReal gconst143=((-1.0)*r00*x8073);
IkReal x8075=r02*r02;
IkReal x8076=(r12*sj0);
IkReal x8077=x8062;
IkReal x8078=(cj0*x8077);
j4eval[0]=((IKabs((x8076+((cj0*r02)))))+(IKabs(((((-1.0)*x8078))+((x8075*x8078))+((r02*x8076*x8077))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8079=((1.0)*gconst143);
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8079))+(((-1.0)*r10*sj0*x8079))+((cj0*gconst142*r01))+((gconst142*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
CheckValue<IkReal> x8081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8079))+(((-1.0)*gconst142*r20)))),-1);
if(!x8081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8080.value)+(((1.5707963267949)*(x8081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8082=IKsin(j4);
IkReal x8083=IKcos(j4);
IkReal x8084=(cj1*cj2);
IkReal x8085=(gconst143*r20);
IkReal x8086=((1.0)*cj0);
IkReal x8087=(sj1*sj2);
IkReal x8088=((1.0)*x8083);
IkReal x8089=((1.0)*x8082);
IkReal x8090=(gconst142*x8082);
IkReal x8091=(gconst143*x8083);
evalcond[0]=((((-1.0)*r22*x8088))+((r21*x8090))+(((-1.0)*x8085*x8089)));
evalcond[1]=((((-1.0)*r02*x8088))+sj0+((r01*x8090))+(((-1.0)*gconst143*r00*x8089)));
evalcond[2]=((((-1.0)*x8086))+((r11*x8090))+(((-1.0)*gconst143*r10*x8089))+(((-1.0)*r12*x8088)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8088))+(((-1.0)*r22*x8089))+((x8083*x8085)));
evalcond[4]=((((-1.0)*r02*x8089))+(((-1.0)*x8086*x8087))+((r00*x8091))+((cj0*x8084))+(((-1.0)*gconst142*r01*x8088)));
evalcond[5]=(((r10*x8091))+((sj0*x8084))+(((-1.0)*gconst142*r11*x8088))+(((-1.0)*sj0*x8087))+(((-1.0)*r12*x8089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8092.valid){
continue;
}
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8092.value)))+(x8093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8094=IKsin(j4);
IkReal x8095=IKcos(j4);
IkReal x8096=(cj1*cj2);
IkReal x8097=(gconst143*r20);
IkReal x8098=((1.0)*cj0);
IkReal x8099=(sj1*sj2);
IkReal x8100=((1.0)*x8095);
IkReal x8101=((1.0)*x8094);
IkReal x8102=(gconst142*x8094);
IkReal x8103=(gconst143*x8095);
evalcond[0]=((((-1.0)*r22*x8100))+((r21*x8102))+(((-1.0)*x8097*x8101)));
evalcond[1]=(sj0+((r01*x8102))+(((-1.0)*gconst143*r00*x8101))+(((-1.0)*r02*x8100)));
evalcond[2]=((((-1.0)*gconst143*r10*x8101))+(((-1.0)*x8098))+((r11*x8102))+(((-1.0)*r12*x8100)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8100))+((x8095*x8097))+((cj1*sj2))+(((-1.0)*r22*x8101)));
evalcond[4]=((((-1.0)*gconst142*r01*x8100))+((r00*x8103))+((cj0*x8096))+(((-1.0)*x8098*x8099))+(((-1.0)*r02*x8101)));
evalcond[5]=(((r10*x8103))+((sj0*x8096))+(((-1.0)*gconst142*r11*x8100))+(((-1.0)*sj0*x8099))+(((-1.0)*r12*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8104=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x8104.valid){
continue;
}
CheckValue<IkReal> x8105 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8104.value)))+(x8105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8106=IKsin(j4);
IkReal x8107=IKcos(j4);
IkReal x8108=(cj1*cj2);
IkReal x8109=(gconst143*r20);
IkReal x8110=((1.0)*cj0);
IkReal x8111=(sj1*sj2);
IkReal x8112=((1.0)*x8107);
IkReal x8113=((1.0)*x8106);
IkReal x8114=(gconst142*x8106);
IkReal x8115=(gconst143*x8107);
evalcond[0]=((((-1.0)*x8109*x8113))+((r21*x8114))+(((-1.0)*r22*x8112)));
evalcond[1]=((((-1.0)*gconst143*r00*x8113))+sj0+(((-1.0)*r02*x8112))+((r01*x8114)));
evalcond[2]=((((-1.0)*x8110))+(((-1.0)*r12*x8112))+(((-1.0)*gconst143*r10*x8113))+((r11*x8114)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8107*x8109))+(((-1.0)*r22*x8113))+(((-1.0)*gconst142*r21*x8112)));
evalcond[4]=((((-1.0)*x8110*x8111))+((cj0*x8108))+(((-1.0)*gconst142*r01*x8112))+(((-1.0)*r02*x8113))+((r00*x8115)));
evalcond[5]=(((sj0*x8108))+(((-1.0)*r12*x8113))+((r10*x8115))+(((-1.0)*gconst142*r11*x8112))+(((-1.0)*sj0*x8111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8116=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8116;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8117=((1.0)*cj5);
IkReal x8118=((((-1.0)*r21*x8117))+(((-1.0)*r20*sj5)));
j4eval[0]=x8118;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8117))))));
j4eval[2]=IKsign(x8118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8119=cj5*cj5;
IkReal x8120=r01*r01;
IkReal x8121=(cj5*r00);
IkReal x8122=(r01*sj5);
IkReal x8123=((((-1.0)*x8119*x8120))+(((-2.0)*x8121*x8122))+(r02*r02)+x8120+((x8119*(r00*r00))));
j4eval[0]=x8123;
j4eval[1]=((IKabs(r02))+(IKabs((x8121+(((-1.0)*x8122))))));
j4eval[2]=IKsign(x8123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8124=cj5*cj5;
IkReal x8125=r01*r01;
IkReal x8126=(r01*sj5);
IkReal x8127=(cj5*r00);
CheckValue<IkReal> x8128 = IKatan2WithCheck(IkReal((x8127+(((-1.0)*x8126)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8128.valid){
continue;
}
CheckValue<IkReal> x8129=IKPowWithIntegerCheck(IKsign(((r02*r02)+((x8124*(r00*r00)))+(((-1.0)*x8124*x8125))+x8125+(((-2.0)*x8126*x8127)))),-1);
if(!x8129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8128.value)+(((1.5707963267949)*(x8129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8130=IKsin(j4);
IkReal x8131=IKcos(j4);
IkReal x8132=(cj5*r10);
IkReal x8133=(r01*sj5);
IkReal x8134=(cj5*r00);
IkReal x8135=(cj5*r20);
IkReal x8136=((1.0)*x8131);
IkReal x8137=((1.0)*x8130);
IkReal x8138=(sj5*x8130);
evalcond[0]=((((-1.0)*r22*x8136))+((r21*x8138))+(((-1.0)*x8135*x8137)));
evalcond[1]=((((-1.0)*x8132*x8137))+((r11*x8138))+(((-1.0)*r12*x8136)));
evalcond[2]=((((-1.0)*r02*x8137))+((x8131*x8134))+(((-1.0)*x8133*x8136)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8136))+(((-1.0)*x8134*x8137))+((x8130*x8133)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8137))+(((-1.0)*r21*sj5*x8136))+((x8131*x8135))+((cj1*sj2)));
evalcond[5]=(((x8131*x8132))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8137))+(((-1.0)*r11*sj5*x8136))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8139=((1.0)*cj5);
CheckValue<IkReal> x8140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8139))+(((-1.0)*r20*sj5)))),-1);
if(!x8140.valid){
continue;
}
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8140.value)))+(x8141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8142=IKsin(j4);
IkReal x8143=IKcos(j4);
IkReal x8144=(cj5*r10);
IkReal x8145=(r01*sj5);
IkReal x8146=(cj5*r00);
IkReal x8147=(cj5*r20);
IkReal x8148=((1.0)*x8143);
IkReal x8149=((1.0)*x8142);
IkReal x8150=(sj5*x8142);
evalcond[0]=((((-1.0)*r22*x8148))+((r21*x8150))+(((-1.0)*x8147*x8149)));
evalcond[1]=((((-1.0)*x8144*x8149))+(((-1.0)*r12*x8148))+((r11*x8150)));
evalcond[2]=(((x8143*x8146))+(((-1.0)*r02*x8149))+(((-1.0)*x8145*x8148)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8148))+(((-1.0)*x8146*x8149))+((x8142*x8145)));
evalcond[4]=(((cj2*sj1))+((x8143*x8147))+((cj1*sj2))+(((-1.0)*r22*x8149))+(((-1.0)*r21*sj5*x8148)));
evalcond[5]=((((-1.0)*r11*sj5*x8148))+((x8143*x8144))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8149))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8151 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8151.valid){
continue;
}
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8151.value)+(((1.5707963267949)*(x8152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8153=IKsin(j4);
IkReal x8154=IKcos(j4);
IkReal x8155=(cj5*r10);
IkReal x8156=(r01*sj5);
IkReal x8157=(cj5*r00);
IkReal x8158=(cj5*r20);
IkReal x8159=((1.0)*x8154);
IkReal x8160=((1.0)*x8153);
IkReal x8161=(sj5*x8153);
evalcond[0]=(((r21*x8161))+(((-1.0)*x8158*x8160))+(((-1.0)*r22*x8159)));
evalcond[1]=(((r11*x8161))+(((-1.0)*x8155*x8160))+(((-1.0)*r12*x8159)));
evalcond[2]=((((-1.0)*x8156*x8159))+(((-1.0)*r02*x8160))+((x8154*x8157)));
evalcond[3]=((1.0)+(((-1.0)*x8157*x8160))+((x8153*x8156))+(((-1.0)*r02*x8159)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8154*x8158))+(((-1.0)*r21*sj5*x8159))+(((-1.0)*r22*x8160)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8159))+(((-1.0)*r12*x8160))+((x8154*x8155))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8162=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8162;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8163=((1.0)*cj5);
IkReal x8164=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8163)));
j4eval[0]=x8164;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8163)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8165=cj5*cj5;
IkReal x8166=r01*r01;
IkReal x8167=(r01*sj5);
IkReal x8168=(cj5*r00);
IkReal x8169=((((-1.0)*(r02*r02)))+(((-1.0)*x8165*(r00*r00)))+(((-1.0)*x8166))+((x8165*x8166))+(((2.0)*x8167*x8168)));
j4eval[0]=x8169;
j4eval[1]=IKsign(x8169);
j4eval[2]=((IKabs(((((-1.0)*x8167))+x8168)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8170=cj5*cj5;
IkReal x8171=r01*r01;
IkReal x8172=(r01*sj5);
IkReal x8173=(cj5*r00);
CheckValue<IkReal> x8174=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8171))+(((-1.0)*x8170*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8170*x8171))+(((2.0)*x8172*x8173)))),-1);
if(!x8174.valid){
continue;
}
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal(((((-1.0)*x8172))+x8173)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8174.value)))+(x8175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8176=IKsin(j4);
IkReal x8177=IKcos(j4);
IkReal x8178=(cj5*r10);
IkReal x8179=(r01*sj5);
IkReal x8180=(cj5*r00);
IkReal x8181=(cj5*r20);
IkReal x8182=((1.0)*x8177);
IkReal x8183=((1.0)*x8176);
IkReal x8184=(sj5*x8176);
evalcond[0]=((((-1.0)*r22*x8182))+((r21*x8184))+(((-1.0)*x8181*x8183)));
evalcond[1]=(((r11*x8184))+(((-1.0)*r12*x8182))+(((-1.0)*x8178*x8183)));
evalcond[2]=((((-1.0)*r02*x8183))+(((-1.0)*x8179*x8182))+((x8177*x8180)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8182))+((x8176*x8179))+(((-1.0)*x8180*x8183)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8183))+((x8177*x8181))+((cj1*sj2))+(((-1.0)*r21*sj5*x8182)));
evalcond[5]=(((x8177*x8178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8183))+(((-1.0)*r11*sj5*x8182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8185=((1.0)*cj5);
CheckValue<IkReal> x8186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8185)))),-1);
if(!x8186.valid){
continue;
}
CheckValue<IkReal> x8187 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8186.value)))+(x8187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8188=IKsin(j4);
IkReal x8189=IKcos(j4);
IkReal x8190=(cj5*r10);
IkReal x8191=(r01*sj5);
IkReal x8192=(cj5*r00);
IkReal x8193=(cj5*r20);
IkReal x8194=((1.0)*x8189);
IkReal x8195=((1.0)*x8188);
IkReal x8196=(sj5*x8188);
evalcond[0]=(((r21*x8196))+(((-1.0)*r22*x8194))+(((-1.0)*x8193*x8195)));
evalcond[1]=(((r11*x8196))+(((-1.0)*r12*x8194))+(((-1.0)*x8190*x8195)));
evalcond[2]=((((-1.0)*r02*x8195))+((x8189*x8192))+(((-1.0)*x8191*x8194)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8194))+(((-1.0)*x8192*x8195))+((x8188*x8191)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8195))+((cj1*sj2))+(((-1.0)*r21*sj5*x8194))+((x8189*x8193)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8195))+(((-1.0)*r11*sj5*x8194))+((x8189*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8197=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8197.valid){
continue;
}
CheckValue<IkReal> x8198 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8197.value)))+(x8198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8199=IKsin(j4);
IkReal x8200=IKcos(j4);
IkReal x8201=(cj5*r10);
IkReal x8202=(r01*sj5);
IkReal x8203=(cj5*r00);
IkReal x8204=(cj5*r20);
IkReal x8205=((1.0)*x8200);
IkReal x8206=((1.0)*x8199);
IkReal x8207=(sj5*x8199);
evalcond[0]=((((-1.0)*x8204*x8206))+(((-1.0)*r22*x8205))+((r21*x8207)));
evalcond[1]=(((r11*x8207))+(((-1.0)*x8201*x8206))+(((-1.0)*r12*x8205)));
evalcond[2]=((((-1.0)*x8202*x8205))+(((-1.0)*r02*x8206))+((x8200*x8203)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8205))+((x8199*x8202))+(((-1.0)*x8203*x8206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8200*x8204))+(((-1.0)*r21*sj5*x8205))+(((-1.0)*r22*x8206)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8206))+((x8200*x8201))+(((-1.0)*r11*sj5*x8205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8209 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8209)==0){
continue;
}
IkReal x8208=pow(x8209,-0.5);
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8210.value));
IkReal gconst145=((-1.0)*r11*x8208);
IkReal gconst146=(r10*x8208);
CheckValue<IkReal> x8211 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8211.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8211.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8214 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8214.valid){
continue;
}
IkReal x8212=((-1.0)*(x8214.value));
IkReal x8213=x8208;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8212;
IkReal gconst144=x8212;
IkReal gconst145=((-1.0)*r11*x8213);
IkReal gconst146=(r10*x8213);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8215=((1.0)*gconst146);
CheckValue<IkReal> x8216=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x8215)))),-1);
if(!x8216.valid){
continue;
}
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*cj0*r00*x8215))+(((-1.0)*r10*sj0*x8215))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8216.value)))+(x8217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8218=IKsin(j4);
IkReal x8219=IKcos(j4);
IkReal x8220=(gconst146*r10);
IkReal x8221=(cj1*cj2);
IkReal x8222=(gconst145*r11);
IkReal x8223=(gconst146*r20);
IkReal x8224=(gconst146*r00);
IkReal x8225=((1.0)*cj0);
IkReal x8226=(sj1*sj2);
IkReal x8227=((1.0)*x8219);
IkReal x8228=((1.0)*x8218);
IkReal x8229=(gconst145*x8218);
evalcond[0]=((((-1.0)*x8223*x8228))+((r21*x8229))+(((-1.0)*r22*x8227)));
evalcond[1]=(sj0+(((-1.0)*r02*x8227))+(((-1.0)*x8224*x8228))+((r01*x8229)));
evalcond[2]=((((-1.0)*x8220*x8228))+((x8218*x8222))+(((-1.0)*x8225))+(((-1.0)*r12*x8227)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8227))+((x8219*x8223))+(((-1.0)*r22*x8228)));
evalcond[4]=(((cj0*x8221))+(((-1.0)*r02*x8228))+(((-1.0)*gconst145*r01*x8227))+(((-1.0)*x8225*x8226))+((x8219*x8224)));
evalcond[5]=((((-1.0)*sj0*x8226))+(((-1.0)*r12*x8228))+((x8219*x8220))+((sj0*x8221))+(((-1.0)*x8222*x8227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8230.valid){
continue;
}
CheckValue<IkReal> x8231=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x8231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8230.value)+(((1.5707963267949)*(x8231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8232=IKsin(j4);
IkReal x8233=IKcos(j4);
IkReal x8234=(gconst146*r10);
IkReal x8235=(cj1*cj2);
IkReal x8236=(gconst145*r11);
IkReal x8237=(gconst146*r20);
IkReal x8238=(gconst146*r00);
IkReal x8239=((1.0)*cj0);
IkReal x8240=(sj1*sj2);
IkReal x8241=((1.0)*x8233);
IkReal x8242=((1.0)*x8232);
IkReal x8243=(gconst145*x8232);
evalcond[0]=((((-1.0)*r22*x8241))+((r21*x8243))+(((-1.0)*x8237*x8242)));
evalcond[1]=(sj0+(((-1.0)*x8238*x8242))+(((-1.0)*r02*x8241))+((r01*x8243)));
evalcond[2]=(((x8232*x8236))+(((-1.0)*x8239))+(((-1.0)*r12*x8241))+(((-1.0)*x8234*x8242)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8242))+((x8233*x8237))+(((-1.0)*gconst145*r21*x8241)));
evalcond[4]=(((cj0*x8235))+(((-1.0)*x8239*x8240))+(((-1.0)*gconst145*r01*x8241))+(((-1.0)*r02*x8242))+((x8233*x8238)));
evalcond[5]=((((-1.0)*sj0*x8240))+(((-1.0)*x8236*x8241))+(((-1.0)*r12*x8242))+((sj0*x8235))+((x8233*x8234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8245 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8245)==0){
continue;
}
IkReal x8244=pow(x8245,-0.5);
CheckValue<IkReal> x8246 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8246.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8246.value))));
IkReal gconst148=((1.0)*r11*x8244);
IkReal gconst149=((-1.0)*r10*x8244);
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8247.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8250 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8250.valid){
continue;
}
IkReal x8248=((1.0)*(x8250.value));
IkReal x8249=x8244;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8248)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8248)));
IkReal gconst148=((1.0)*r11*x8249);
IkReal gconst149=((-1.0)*r10*x8249);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8253.valid){
continue;
}
IkReal x8251=((1.0)*(x8253.value));
IkReal x8252=x8244;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8251)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8251)));
IkReal gconst148=((1.0)*r11*x8252);
IkReal gconst149=((-1.0)*r10*x8252);
IkReal x8254=r12*r12;
IkReal x8255=(cj0*r02);
IkReal x8256=x8244;
IkReal x8257=(sj0*x8256);
j4eval[0]=((IKabs((((r12*sj0))+x8255)))+(IKabs(((((-1.0)*x8257))+((r12*x8255*x8256))+((x8254*x8257))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
IkReal x8258=((1.0)*(x8260.value));
IkReal x8259=x8244;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8258)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8258)));
IkReal gconst148=((1.0)*r11*x8259);
IkReal gconst149=((-1.0)*r10*x8259);
IkReal x8261=(cj1*r22*sj2);
IkReal x8262=(cj2*r22*sj1);
IkReal x8263=x8244;
IkReal x8264=(r12*x8263);
j4eval[0]=((IKabs((((x8261*x8264))+((x8262*x8264)))))+(IKabs((x8261+x8262))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8265=(cj2*sj1);
IkReal x8266=(cj1*sj2);
IkReal x8267=(gconst148*r21);
IkReal x8268=((1.0)*gconst149*r20);
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal((((r22*x8265))+((r22*x8266)))),IkReal((((x8266*x8267))+((x8265*x8267))+(((-1.0)*x8265*x8268))+(((-1.0)*x8266*x8268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
CheckValue<IkReal> x8270=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(((-2.0)*gconst149*r20*x8267))+(x8267*x8267))),-1);
if(!x8270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8269.value)+(((1.5707963267949)*(x8270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8271=IKsin(j4);
IkReal x8272=IKcos(j4);
IkReal x8273=(cj1*cj2);
IkReal x8274=(gconst148*r11);
IkReal x8275=((1.0)*cj0);
IkReal x8276=(sj1*sj2);
IkReal x8277=((1.0)*x8272);
IkReal x8278=(gconst149*x8272);
IkReal x8279=((1.0)*x8271);
IkReal x8280=(gconst148*x8271);
evalcond[0]=((((-1.0)*gconst149*r20*x8279))+((r21*x8280))+(((-1.0)*r22*x8277)));
evalcond[1]=(sj0+((r01*x8280))+(((-1.0)*r02*x8277))+(((-1.0)*gconst149*r00*x8279)));
evalcond[2]=((((-1.0)*gconst149*r10*x8279))+(((-1.0)*x8275))+((x8271*x8274))+(((-1.0)*r12*x8277)));
evalcond[3]=(((cj2*sj1))+((r20*x8278))+((cj1*sj2))+(((-1.0)*r22*x8279))+(((-1.0)*gconst148*r21*x8277)));
evalcond[4]=((((-1.0)*gconst148*r01*x8277))+(((-1.0)*x8275*x8276))+((cj0*x8273))+(((-1.0)*r02*x8279))+((r00*x8278)));
evalcond[5]=((((-1.0)*sj0*x8276))+(((-1.0)*x8274*x8277))+(((-1.0)*r12*x8279))+((sj0*x8273))+((r10*x8278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8281=((1.0)*gconst149);
CheckValue<IkReal> x8282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8281))+(((-1.0)*gconst148*r20)))),-1);
if(!x8282.valid){
continue;
}
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8281))+((cj0*gconst148*r01))+(((-1.0)*r10*sj0*x8281))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8282.value)))+(x8283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8284=IKsin(j4);
IkReal x8285=IKcos(j4);
IkReal x8286=(cj1*cj2);
IkReal x8287=(gconst148*r11);
IkReal x8288=((1.0)*cj0);
IkReal x8289=(sj1*sj2);
IkReal x8290=((1.0)*x8285);
IkReal x8291=(gconst149*x8285);
IkReal x8292=((1.0)*x8284);
IkReal x8293=(gconst148*x8284);
evalcond[0]=(((r21*x8293))+(((-1.0)*gconst149*r20*x8292))+(((-1.0)*r22*x8290)));
evalcond[1]=(sj0+((r01*x8293))+(((-1.0)*gconst149*r00*x8292))+(((-1.0)*r02*x8290)));
evalcond[2]=((((-1.0)*r12*x8290))+(((-1.0)*x8288))+(((-1.0)*gconst149*r10*x8292))+((x8284*x8287)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8290))+((r20*x8291))+((cj1*sj2))+(((-1.0)*r22*x8292)));
evalcond[4]=(((r00*x8291))+((cj0*x8286))+(((-1.0)*x8288*x8289))+(((-1.0)*r02*x8292))+(((-1.0)*gconst148*r01*x8290)));
evalcond[5]=((((-1.0)*r12*x8292))+(((-1.0)*sj0*x8289))+((r10*x8291))+((sj0*x8286))+(((-1.0)*x8287*x8290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8294=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8294.valid){
continue;
}
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8294.value)))+(x8295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8296=IKsin(j4);
IkReal x8297=IKcos(j4);
IkReal x8298=(cj1*cj2);
IkReal x8299=(gconst148*r11);
IkReal x8300=((1.0)*cj0);
IkReal x8301=(sj1*sj2);
IkReal x8302=((1.0)*x8297);
IkReal x8303=(gconst149*x8297);
IkReal x8304=((1.0)*x8296);
IkReal x8305=(gconst148*x8296);
evalcond[0]=((((-1.0)*r22*x8302))+((r21*x8305))+(((-1.0)*gconst149*r20*x8304)));
evalcond[1]=(sj0+((r01*x8305))+(((-1.0)*r02*x8302))+(((-1.0)*gconst149*r00*x8304)));
evalcond[2]=(((x8296*x8299))+(((-1.0)*r12*x8302))+(((-1.0)*gconst149*r10*x8304))+(((-1.0)*x8300)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8304))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8302))+((r20*x8303)));
evalcond[4]=((((-1.0)*gconst148*r01*x8302))+((r00*x8303))+(((-1.0)*x8300*x8301))+((cj0*x8298))+(((-1.0)*r02*x8304)));
evalcond[5]=((((-1.0)*r12*x8304))+((r10*x8303))+((sj0*x8298))+(((-1.0)*sj0*x8301))+(((-1.0)*x8299*x8302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8306=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8306;
j4eval[1]=IKsign(x8306);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8307=((1.0)*cj5);
IkReal x8308=((((-1.0)*r21*x8307))+(((-1.0)*r20*sj5)));
j4eval[0]=x8308;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8307))))));
j4eval[2]=IKsign(x8308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8309=cj5*cj5;
IkReal x8310=r11*r11;
IkReal x8311=(cj5*r10);
IkReal x8312=(r11*sj5);
IkReal x8313=((((2.0)*x8311*x8312))+(((-1.0)*(r12*r12)))+(((-1.0)*x8310))+((x8309*x8310))+(((-1.0)*x8309*(r10*r10))));
j4eval[0]=x8313;
j4eval[1]=((IKabs((x8311+(((-1.0)*x8312)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8314=cj5*cj5;
IkReal x8315=r11*r11;
IkReal x8316=(cj5*r10);
IkReal x8317=(r11*sj5);
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal((x8316+(((-1.0)*x8317)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
CheckValue<IkReal> x8319=IKPowWithIntegerCheck(IKsign(((((2.0)*x8316*x8317))+((x8314*x8315))+(((-1.0)*x8314*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8315)))),-1);
if(!x8319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8318.value)+(((1.5707963267949)*(x8319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8320=IKsin(j4);
IkReal x8321=IKcos(j4);
IkReal x8322=(cj5*r10);
IkReal x8323=(r01*sj5);
IkReal x8324=(cj5*r00);
IkReal x8325=(cj5*r20);
IkReal x8326=((1.0)*x8321);
IkReal x8327=((1.0)*x8320);
IkReal x8328=(sj5*x8320);
evalcond[0]=((((-1.0)*r22*x8326))+(((-1.0)*x8325*x8327))+((r21*x8328)));
evalcond[1]=(((x8320*x8323))+(((-1.0)*r02*x8326))+(((-1.0)*x8324*x8327)));
evalcond[2]=(((x8321*x8322))+(((-1.0)*r11*sj5*x8326))+(((-1.0)*r12*x8327)));
evalcond[3]=((-1.0)+(((-1.0)*x8322*x8327))+((r11*x8328))+(((-1.0)*r12*x8326)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8327))+((x8321*x8325))+((cj1*sj2))+(((-1.0)*r21*sj5*x8326)));
evalcond[5]=(((x8321*x8324))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8323*x8326))+(((-1.0)*r02*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=((1.0)*cj5);
CheckValue<IkReal> x8330 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8329))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8329))+(((-1.0)*r20*sj5)))),-1);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8330.value)+(((1.5707963267949)*(x8331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(cj5*r10);
IkReal x8335=(r01*sj5);
IkReal x8336=(cj5*r00);
IkReal x8337=(cj5*r20);
IkReal x8338=((1.0)*x8333);
IkReal x8339=((1.0)*x8332);
IkReal x8340=(sj5*x8332);
evalcond[0]=((((-1.0)*r22*x8338))+((r21*x8340))+(((-1.0)*x8337*x8339)));
evalcond[1]=(((x8332*x8335))+(((-1.0)*r02*x8338))+(((-1.0)*x8336*x8339)));
evalcond[2]=(((x8333*x8334))+(((-1.0)*r12*x8339))+(((-1.0)*r11*sj5*x8338)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8338))+((r11*x8340))+(((-1.0)*x8334*x8339)));
evalcond[4]=(((cj2*sj1))+((x8333*x8337))+(((-1.0)*r22*x8339))+((cj1*sj2))+(((-1.0)*r21*sj5*x8338)));
evalcond[5]=(((x8333*x8336))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8339))+((cj1*cj2))+(((-1.0)*x8335*x8338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8341 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8341.valid){
continue;
}
CheckValue<IkReal> x8342=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8341.value)+(((1.5707963267949)*(x8342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8343=IKsin(j4);
IkReal x8344=IKcos(j4);
IkReal x8345=(cj5*r10);
IkReal x8346=(r01*sj5);
IkReal x8347=(cj5*r00);
IkReal x8348=(cj5*r20);
IkReal x8349=((1.0)*x8344);
IkReal x8350=((1.0)*x8343);
IkReal x8351=(sj5*x8343);
evalcond[0]=((((-1.0)*r22*x8349))+((r21*x8351))+(((-1.0)*x8348*x8350)));
evalcond[1]=((((-1.0)*r02*x8349))+((x8343*x8346))+(((-1.0)*x8347*x8350)));
evalcond[2]=((((-1.0)*r12*x8350))+((x8344*x8345))+(((-1.0)*r11*sj5*x8349)));
evalcond[3]=((-1.0)+(((-1.0)*x8345*x8350))+((r11*x8351))+(((-1.0)*r12*x8349)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8350))+(((-1.0)*r21*sj5*x8349))+((cj1*sj2))+((x8344*x8348)));
evalcond[5]=((((-1.0)*r02*x8350))+(((-1.0)*sj1*sj2))+((x8344*x8347))+((cj1*cj2))+(((-1.0)*x8346*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8352=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8352;
j4eval[1]=IKsign(x8352);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8353=((1.0)*cj5);
IkReal x8354=((((-1.0)*r01*x8353))+(((-1.0)*r00*sj5)));
j4eval[0]=x8354;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8353)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8355=cj5*cj5;
IkReal x8356=r11*r11;
IkReal x8357=(r11*sj5);
IkReal x8358=(cj5*r10);
IkReal x8359=(x8356+(r12*r12)+(((-2.0)*x8357*x8358))+((x8355*(r10*r10)))+(((-1.0)*x8355*x8356)));
j4eval[0]=x8359;
j4eval[1]=IKsign(x8359);
j4eval[2]=((IKabs(r12))+(IKabs((x8358+(((-1.0)*x8357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8360=cj5*cj5;
IkReal x8361=r11*r11;
IkReal x8362=(cj5*r10);
IkReal x8363=(r11*sj5);
CheckValue<IkReal> x8364=IKPowWithIntegerCheck(IKsign((x8361+(r12*r12)+(((-2.0)*x8362*x8363))+((x8360*(r10*r10)))+(((-1.0)*x8360*x8361)))),-1);
if(!x8364.valid){
continue;
}
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal((x8362+(((-1.0)*x8363)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8364.value)))+(x8365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8366=IKsin(j4);
IkReal x8367=IKcos(j4);
IkReal x8368=(cj5*r10);
IkReal x8369=(r01*sj5);
IkReal x8370=(cj5*r00);
IkReal x8371=(cj5*r20);
IkReal x8372=((1.0)*x8367);
IkReal x8373=((1.0)*x8366);
IkReal x8374=(sj5*x8366);
evalcond[0]=((((-1.0)*x8371*x8373))+(((-1.0)*r22*x8372))+((r21*x8374)));
evalcond[1]=((((-1.0)*r02*x8372))+((x8366*x8369))+(((-1.0)*x8370*x8373)));
evalcond[2]=((((-1.0)*r12*x8373))+((x8367*x8368))+(((-1.0)*r11*sj5*x8372)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8372))+(((-1.0)*x8368*x8373))+((r11*x8374)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8372))+((cj1*sj2))+(((-1.0)*r22*x8373))+((x8367*x8371)));
evalcond[5]=((((-1.0)*r02*x8373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8369*x8372))+((x8367*x8370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8375=((1.0)*cj5);
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8375)))),-1);
if(!x8376.valid){
continue;
}
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8375))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8376.value)))+(x8377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8378=IKsin(j4);
IkReal x8379=IKcos(j4);
IkReal x8380=(cj5*r10);
IkReal x8381=(r01*sj5);
IkReal x8382=(cj5*r00);
IkReal x8383=(cj5*r20);
IkReal x8384=((1.0)*x8379);
IkReal x8385=((1.0)*x8378);
IkReal x8386=(sj5*x8378);
evalcond[0]=(((r21*x8386))+(((-1.0)*x8383*x8385))+(((-1.0)*r22*x8384)));
evalcond[1]=((((-1.0)*r02*x8384))+(((-1.0)*x8382*x8385))+((x8378*x8381)));
evalcond[2]=((((-1.0)*r12*x8385))+((x8379*x8380))+(((-1.0)*r11*sj5*x8384)));
evalcond[3]=((1.0)+(((-1.0)*x8380*x8385))+(((-1.0)*r12*x8384))+((r11*x8386)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8384))+((cj1*sj2))+(((-1.0)*r22*x8385))+((x8379*x8383)));
evalcond[5]=((((-1.0)*x8381*x8384))+(((-1.0)*r02*x8385))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8379*x8382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8387.value)))+(x8388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(cj5*r10);
IkReal x8392=(r01*sj5);
IkReal x8393=(cj5*r00);
IkReal x8394=(cj5*r20);
IkReal x8395=((1.0)*x8390);
IkReal x8396=((1.0)*x8389);
IkReal x8397=(sj5*x8389);
evalcond[0]=(((r21*x8397))+(((-1.0)*x8394*x8396))+(((-1.0)*r22*x8395)));
evalcond[1]=((((-1.0)*x8393*x8396))+(((-1.0)*r02*x8395))+((x8389*x8392)));
evalcond[2]=(((x8390*x8391))+(((-1.0)*r11*sj5*x8395))+(((-1.0)*r12*x8396)));
evalcond[3]=((1.0)+(((-1.0)*x8391*x8396))+(((-1.0)*r12*x8395))+((r11*x8397)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8395))+((cj1*sj2))+((x8390*x8394))+(((-1.0)*r22*x8396)));
evalcond[5]=((((-1.0)*r02*x8396))+((x8390*x8393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8392*x8395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8398=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8398);
rxp0_2=(py*r00);
rxp1_0=(r21*x8398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8399=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8399);
rxp0_2=(py*r00);
rxp1_0=(r21*x8399);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8400=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8400);
rxp0_2=(py*r00);
rxp1_0=(r21*x8400);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8403.valid){
continue;
}
IkReal x8401=x8403.value;
IkReal x8402=(cj0*x8401);
cj4array[0]=(((sj1*sj2*x8402))+(((-1.0)*cj1*cj2*x8402)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8404=IKsin(j4);
IkReal x8405=IKcos(j4);
IkReal x8406=(r21*sj5);
IkReal x8407=((1.0)*x8405);
IkReal x8408=((1.0)*cj5*x8404);
evalcond[0]=((-1.0)*r12*x8404);
evalcond[1]=((((-1.0)*r12*x8407))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x8408))+((x8404*x8406)));
evalcond[3]=(((r01*sj5*x8404))+(((-1.0)*r00*x8408)));
evalcond[4]=((((-1.0)*x8406*x8407))+((cj2*sj1))+((cj1*sj2))+((cj5*r20*x8405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8411=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8411.valid){
continue;
}
IkReal x8409=x8411.value;
IkReal x8410=((1.0)*x8409);
cj4array[0]=((((-1.0)*cj2*sj1*x8410))+(((-1.0)*cj1*sj2*x8410)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8412=IKsin(j4);
IkReal x8413=IKcos(j4);
IkReal x8414=(cj5*r00);
IkReal x8415=((1.0)*cj0);
IkReal x8416=((1.0)*x8412);
IkReal x8417=(sj5*x8412);
IkReal x8418=((1.0)*x8413);
evalcond[0]=((-1.0)*r12*x8412);
evalcond[1]=((((-1.0)*r12*x8418))+(((-1.0)*x8415)));
evalcond[2]=((((-1.0)*cj5*r20*x8416))+((r21*x8417)));
evalcond[3]=((((-1.0)*x8414*x8416))+((r01*x8417)));
evalcond[4]=(((x8413*x8414))+(((-1.0)*r01*sj5*x8418))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x8415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8419=IKPowWithIntegerCheck(r12,-1);
if(!x8419.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8419.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8420=IKsin(j4);
IkReal x8421=IKcos(j4);
IkReal x8422=(cj5*r00);
IkReal x8423=(r21*sj5);
IkReal x8424=(cj5*r20);
IkReal x8425=(r01*sj5);
IkReal x8426=((1.0)*x8420);
IkReal x8427=((1.0)*x8421);
evalcond[0]=((-1.0)*r12*x8420);
evalcond[1]=((((-1.0)*x8424*x8426))+((x8420*x8423)));
evalcond[2]=((((-1.0)*x8422*x8426))+((x8420*x8425)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8421*x8424))+(((-1.0)*x8423*x8427)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x8421*x8422))+((cj0*cj1*cj2))+(((-1.0)*x8425*x8427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8428=((1.0)*cj5);
CheckValue<IkReal> x8429 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x8428))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x8428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8429.valid){
continue;
}
CheckValue<IkReal> x8430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8428))+(((-1.0)*r20*sj5)))),-1);
if(!x8430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8429.value)+(((1.5707963267949)*(x8430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8431=IKsin(j4);
IkReal x8432=IKcos(j4);
IkReal x8433=(cj1*cj2);
IkReal x8434=(cj5*r10);
IkReal x8435=(r01*sj5);
IkReal x8436=(cj5*r00);
IkReal x8437=(cj5*r20);
IkReal x8438=((1.0)*cj0);
IkReal x8439=(sj1*sj2);
IkReal x8440=((1.0)*x8432);
IkReal x8441=((1.0)*x8431);
IkReal x8442=(sj5*x8431);
evalcond[0]=(((r21*x8442))+(((-1.0)*x8437*x8441))+(((-1.0)*r22*x8440)));
evalcond[1]=(sj0+(((-1.0)*r02*x8440))+(((-1.0)*x8436*x8441))+((x8431*x8435)));
evalcond[2]=(((r11*x8442))+(((-1.0)*x8438))+(((-1.0)*x8434*x8441))+(((-1.0)*r12*x8440)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8440))+((cj1*sj2))+((x8432*x8437))+(((-1.0)*r22*x8441)));
evalcond[4]=(((x8432*x8436))+(((-1.0)*x8438*x8439))+(((-1.0)*x8435*x8440))+(((-1.0)*r02*x8441))+((cj0*x8433)));
evalcond[5]=((((-1.0)*r12*x8441))+((sj0*x8433))+((x8432*x8434))+(((-1.0)*r11*sj5*x8440))+(((-1.0)*sj0*x8439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8443=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8443.valid){
continue;
}
CheckValue<IkReal> x8444 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8443.value)))+(x8444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8445=IKsin(j4);
IkReal x8446=IKcos(j4);
IkReal x8447=(cj1*cj2);
IkReal x8448=(cj5*r10);
IkReal x8449=(r01*sj5);
IkReal x8450=(cj5*r00);
IkReal x8451=(cj5*r20);
IkReal x8452=((1.0)*cj0);
IkReal x8453=(sj1*sj2);
IkReal x8454=((1.0)*x8446);
IkReal x8455=((1.0)*x8445);
IkReal x8456=(sj5*x8445);
evalcond[0]=(((r21*x8456))+(((-1.0)*x8451*x8455))+(((-1.0)*r22*x8454)));
evalcond[1]=(sj0+(((-1.0)*x8450*x8455))+((x8445*x8449))+(((-1.0)*r02*x8454)));
evalcond[2]=(((r11*x8456))+(((-1.0)*r12*x8454))+(((-1.0)*x8448*x8455))+(((-1.0)*x8452)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8454))+((cj1*sj2))+(((-1.0)*r22*x8455))+((x8446*x8451)));
evalcond[4]=((((-1.0)*x8452*x8453))+(((-1.0)*x8449*x8454))+((x8446*x8450))+(((-1.0)*r02*x8455))+((cj0*x8447)));
evalcond[5]=((((-1.0)*r12*x8455))+(((-1.0)*sj0*x8453))+((sj0*x8447))+((x8446*x8448))+(((-1.0)*r11*sj5*x8454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8457=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8457.valid){
continue;
}
CheckValue<IkReal> x8458 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8457.value)))+(x8458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8459=IKsin(j4);
IkReal x8460=IKcos(j4);
IkReal x8461=(cj1*cj2);
IkReal x8462=(cj5*r10);
IkReal x8463=(r01*sj5);
IkReal x8464=(cj5*r00);
IkReal x8465=(cj5*r20);
IkReal x8466=((1.0)*cj0);
IkReal x8467=(sj1*sj2);
IkReal x8468=((1.0)*x8460);
IkReal x8469=((1.0)*x8459);
IkReal x8470=(sj5*x8459);
evalcond[0]=((((-1.0)*x8465*x8469))+((r21*x8470))+(((-1.0)*r22*x8468)));
evalcond[1]=(sj0+(((-1.0)*r02*x8468))+((x8459*x8463))+(((-1.0)*x8464*x8469)));
evalcond[2]=((((-1.0)*x8466))+((r11*x8470))+(((-1.0)*r12*x8468))+(((-1.0)*x8462*x8469)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8468))+((x8460*x8465))+(((-1.0)*r22*x8469)));
evalcond[4]=((((-1.0)*r02*x8469))+((cj0*x8461))+(((-1.0)*x8463*x8468))+((x8460*x8464))+(((-1.0)*x8466*x8467)));
evalcond[5]=((((-1.0)*sj0*x8467))+((x8460*x8462))+(((-1.0)*r12*x8469))+((sj0*x8461))+(((-1.0)*r11*sj5*x8468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8471=cj2*cj2;
IkReal x8472=cj1*cj1;
IkReal x8473=((182.008875)*cj5);
IkReal x8474=(cj1*cj2);
IkReal x8475=(sj1*sj2);
IkReal x8476=(cj5*r11);
IkReal x8477=((2132.5)*py);
IkReal x8478=((182.008875)*sj5);
IkReal x8479=((207.955275)*cj1);
IkReal x8480=(cj5*r01);
IkReal x8481=(r00*sj5);
IkReal x8482=((2436.5)*cj1);
IkReal x8483=(r10*sj5);
IkReal x8484=((2132.5)*px);
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal((((x8476*x8479))+(((-1.0)*r10*x8475*x8478))+(((-1100.0)*px))+((py*x8482))+((x8479*x8483))+(((-93.885)*x8480))+(((-93.885)*x8481))+(((-1.0)*r11*x8473*x8475))+((r10*x8474*x8478))+((x8474*x8477))+(((-1.0)*x8475*x8477))+((r11*x8473*x8474)))),IkReal(((((93.885)*x8476))+((x8479*x8480))+((x8479*x8481))+(((-1.0)*r00*x8475*x8478))+(((1100.0)*py))+((r00*x8474*x8478))+(((93.885)*x8483))+((r01*x8473*x8474))+(((-1.0)*r01*x8473*x8475))+((px*x8482))+((x8474*x8484))+(((-1.0)*x8475*x8484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
CheckValue<IkReal> x8486=IKPowWithIntegerCheck(IKsign(((-575.755625)+(((454.755625)*x8471))+(((-1039.16725)*cj2*x8472))+(((-909.51125)*x8471*x8472))+(((909.51125)*x8474*x8475))+(((1039.16725)*cj1*x8475))+(((-138.8976)*x8472)))),-1);
if(!x8486.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8485.value)+(((1.5707963267949)*(x8486.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8487=IKcos(j0);
IkReal x8488=IKsin(j0);
IkReal x8489=((0.24365)*cj1);
IkReal x8490=((0.08535)*sj5);
IkReal x8491=((0.08535)*cj5);
IkReal x8492=((0.21325)*sj1*sj2);
IkReal x8493=((0.21325)*cj1*cj2);
evalcond[0]=((((-1.0)*r00*x8490))+(((-1.0)*x8487*x8489))+(((-1.0)*x8487*x8493))+((x8487*x8492))+(((-1.0)*px))+(((0.11)*x8488))+(((-1.0)*r01*x8491)));
evalcond[1]=((((-1.0)*r10*x8490))+((x8488*x8492))+(((-1.0)*py))+(((-1.0)*x8488*x8493))+(((-1.0)*r11*x8491))+(((-1.0)*x8488*x8489))+(((-0.11)*x8487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8494=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8494;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8495=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8495;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8496=((1.0)*cj5);
IkReal x8497=((((-1.0)*r21*x8496))+(((-1.0)*r20*sj5)));
j4eval[0]=x8497;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x8496))+(((-1.0)*cj0*r00*x8496))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x8497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8498=((-1.0)*r20);
IkReal x8500 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8500)==0){
continue;
}
IkReal x8499=pow(x8500,-0.5);
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8498),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8501.value));
IkReal gconst1=(r21*x8499);
IkReal gconst2=(x8498*x8499);
CheckValue<IkReal> x8502 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8502.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8502.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8503=((-1.0)*r20);
IkReal x8504=x8499;
CheckValue<IkReal> x8506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8503),IKFAST_ATAN2_MAGTHRESH);
if(!x8506.valid){
continue;
}
IkReal x8505=((-1.0)*(x8506.value));
sj5=gconst1;
cj5=gconst2;
j5=x8505;
IkReal gconst0=x8505;
IkReal gconst1=(r21*x8504);
IkReal gconst2=(x8503*x8504);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8507=((-1.0)*r20);
IkReal x8508=x8499;
CheckValue<IkReal> x8510 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8507),IKFAST_ATAN2_MAGTHRESH);
if(!x8510.valid){
continue;
}
IkReal x8509=((-1.0)*(x8510.value));
sj5=gconst1;
cj5=gconst2;
j5=x8509;
IkReal gconst0=x8509;
IkReal gconst1=(r21*x8508);
IkReal gconst2=(x8507*x8508);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8511=((-1.0)*r20);
IkReal x8512=x8499;
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8511),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
IkReal x8513=((-1.0)*(x8514.value));
sj5=gconst1;
cj5=gconst2;
j5=x8513;
IkReal gconst0=x8513;
IkReal gconst1=(r21*x8512);
IkReal gconst2=(x8511*x8512);
IkReal x8515=r22*r22;
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8515))),-1);
if(!x8519.valid){
continue;
}
IkReal x8516=x8519.value;
IkReal x8517=(sj3*x8516);
IkReal x8518=(((x8517*(r20*r20*r20*r20)))+((sj3*x8515))+(((2.0)*x8517*(r20*r20)*(r21*r21)))+((x8517*(r21*r21*r21*r21))));
j4eval[0]=x8518;
j4eval[1]=IKsign(x8518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8520=((-1.0)*r20);
IkReal x8521=x8499;
CheckValue<IkReal> x8523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8520),IKFAST_ATAN2_MAGTHRESH);
if(!x8523.valid){
continue;
}
IkReal x8522=((-1.0)*(x8523.value));
sj5=gconst1;
cj5=gconst2;
j5=x8522;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8522;
IkReal gconst1=(r21*x8521);
IkReal gconst2=(x8520*x8521);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8524=((-1.0)*r20);
IkReal x8525=x8499;
CheckValue<IkReal> x8527 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8524),IKFAST_ATAN2_MAGTHRESH);
if(!x8527.valid){
continue;
}
IkReal x8526=((-1.0)*(x8527.value));
sj5=gconst1;
cj5=gconst2;
j5=x8526;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8526;
IkReal gconst1=(r21*x8525);
IkReal gconst2=(x8524*x8525);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8528=((-1.0)*r20);
IkReal x8529=x8499;
CheckValue<IkReal> x8531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8528),IKFAST_ATAN2_MAGTHRESH);
if(!x8531.valid){
continue;
}
IkReal x8530=((-1.0)*(x8531.value));
sj5=gconst1;
cj5=gconst2;
j5=x8530;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8530;
IkReal gconst1=(r21*x8529);
IkReal gconst2=(x8528*x8529);
IkReal x8532=((1.0)*(r22*r22));
CheckValue<IkReal> x8536=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8532))),-1);
if(!x8536.valid){
continue;
}
IkReal x8533=x8536.value;
IkReal x8534=((1.0)*x8533);
IkReal x8535=((((-1.0)*x8532))+(((-1.0)*x8534*(r21*r21*r21*r21)))+(((-2.0)*x8533*(r20*r20)*(r21*r21)))+(((-1.0)*x8534*(r20*r20*r20*r20))));
j4eval[0]=x8535;
j4eval[1]=IKsign(x8535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8537=((-1.0)*r20);
IkReal x8538=x8499;
CheckValue<IkReal> x8540 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8537),IKFAST_ATAN2_MAGTHRESH);
if(!x8540.valid){
continue;
}
IkReal x8539=((-1.0)*(x8540.value));
sj5=gconst1;
cj5=gconst2;
j5=x8539;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8539;
IkReal gconst1=(r21*x8538);
IkReal gconst2=(x8537*x8538);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8541=((-1.0)*r20);
IkReal x8542=x8499;
CheckValue<IkReal> x8544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8541),IKFAST_ATAN2_MAGTHRESH);
if(!x8544.valid){
continue;
}
IkReal x8543=((-1.0)*(x8544.value));
sj5=gconst1;
cj5=gconst2;
j5=x8543;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8543;
IkReal gconst1=(r21*x8542);
IkReal gconst2=(x8541*x8542);
IkReal x8545=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(x8545,-1);
if(!x8549.valid){
continue;
}
IkReal x8546=x8549.value;
IkReal x8547=((1.0)*x8546);
IkReal x8548=((((-1.0)*x8547*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8546))+(((-1.0)*(r02*r02)))+(((-1.0)*x8547*(r00*r00)*(r20*r20))));
j4eval[0]=x8548;
j4eval[1]=IKsign(x8548);
j4eval[2]=r02;
j4eval[3]=x8545;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8550=((-1.0)*r20);
IkReal x8551=x8499;
CheckValue<IkReal> x8553 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8550),IKFAST_ATAN2_MAGTHRESH);
if(!x8553.valid){
continue;
}
IkReal x8552=((-1.0)*(x8553.value));
sj5=gconst1;
cj5=gconst2;
j5=x8552;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8552;
IkReal gconst1=(r21*x8551);
IkReal gconst2=(x8550*x8551);
IkReal x8554=r22*r22;
IkReal x8555=((1.0)*r02);
IkReal x8556=(cj1*sj2);
IkReal x8557=(cj2*sj1);
CheckValue<IkReal> x8561=IKPowWithIntegerCheck(((-1.0)+x8554),-1);
if(!x8561.valid){
continue;
}
IkReal x8558=x8561.value;
if((((1.0)+(((-1.0)*x8554)))) < -0.00001)
continue;
IkReal x8559=IKsqrt(((1.0)+(((-1.0)*x8554))));
IkReal x8560=(r02*r22*x8558*x8559);
j4eval[0]=((IKabs((((x8557*x8560))+((x8556*x8560)))))+(IKabs(((((-1.0)*x8555*x8556))+(((-1.0)*x8555*x8557))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8562=(cj1*sj2);
IkReal x8563=(gconst1*r01);
IkReal x8564=((1.0)*r02);
IkReal x8565=(cj2*sj1);
IkReal x8566=((1.0)*gconst2*r00);
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal((((x8562*x8563))+(((-1.0)*x8565*x8566))+((x8563*x8565))+(((-1.0)*x8562*x8566)))),IkReal(((((-1.0)*x8564*x8565))+(((-1.0)*x8562*x8564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8567.value)+(((1.5707963267949)*(x8568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8569=IKcos(j4);
IkReal x8570=IKsin(j4);
IkReal x8571=((1.0)*x8569);
IkReal x8572=(gconst1*x8569);
IkReal x8573=(gconst1*x8570);
IkReal x8574=((1.0)*gconst2*x8570);
evalcond[0]=(((r02*x8570))+(((-1.0)*gconst2*r00*x8571))+((r01*x8572)));
evalcond[1]=((((-1.0)*r20*x8574))+((r21*x8573))+(((-1.0)*r22*x8571)));
evalcond[2]=(((r11*x8573))+(((-1.0)*r10*x8574))+(((-1.0)*r12*x8571)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8571))+((r01*x8573))+(((-1.0)*r00*x8574)));
evalcond[4]=(((cj2*sj1))+((r22*x8570))+((cj1*sj2))+((r21*x8572))+(((-1.0)*gconst2*r20*x8571)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8570))+((r11*x8572))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8575=(gconst1*r01);
IkReal x8576=(gconst2*r00);
CheckValue<IkReal> x8577=IKPowWithIntegerCheck(IKsign(((((2.0)*x8575*x8576))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8576*x8576)))+(((-1.0)*(x8575*x8575))))),-1);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578 = IKatan2WithCheck(IkReal((x8575+(((-1.0)*x8576)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8577.value)))+(x8578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKcos(j4);
IkReal x8580=IKsin(j4);
IkReal x8581=((1.0)*x8579);
IkReal x8582=(gconst1*x8579);
IkReal x8583=(gconst1*x8580);
IkReal x8584=((1.0)*gconst2*x8580);
evalcond[0]=(((r02*x8580))+(((-1.0)*gconst2*r00*x8581))+((r01*x8582)));
evalcond[1]=((((-1.0)*r22*x8581))+(((-1.0)*r20*x8584))+((r21*x8583)));
evalcond[2]=(((r11*x8583))+(((-1.0)*r12*x8581))+(((-1.0)*r10*x8584)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8581))+((r01*x8583))+(((-1.0)*r00*x8584)));
evalcond[4]=(((cj2*sj1))+((r22*x8580))+((cj1*sj2))+((r21*x8582))+(((-1.0)*gconst2*r20*x8581)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8580))+((r11*x8582))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
CheckValue<IkReal> x8586=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8585.value)+(((1.5707963267949)*(x8586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8587=IKcos(j4);
IkReal x8588=IKsin(j4);
IkReal x8589=((1.0)*x8587);
IkReal x8590=(gconst1*x8587);
IkReal x8591=(gconst1*x8588);
IkReal x8592=((1.0)*gconst2*x8588);
evalcond[0]=(((r02*x8588))+(((-1.0)*gconst2*r00*x8589))+((r01*x8590)));
evalcond[1]=((((-1.0)*r20*x8592))+(((-1.0)*r22*x8589))+((r21*x8591)));
evalcond[2]=((((-1.0)*r10*x8592))+(((-1.0)*r12*x8589))+((r11*x8591)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8592))+((r01*x8591))+(((-1.0)*r02*x8589)));
evalcond[4]=(((cj2*sj1))+((r22*x8588))+((cj1*sj2))+((r21*x8590))+(((-1.0)*gconst2*r20*x8589)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8588))+((cj1*cj2))+((r11*x8590))+(((-1.0)*gconst2*r10*x8589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8593=((-1.0)*r20);
IkReal x8594=x8499;
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8593),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
IkReal x8595=((-1.0)*(x8596.value));
sj5=gconst1;
cj5=gconst2;
j5=x8595;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8595;
IkReal gconst1=(r21*x8594);
IkReal gconst2=(x8593*x8594);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8597=((-1.0)*r20);
IkReal x8598=x8499;
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8597),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
IkReal x8599=((-1.0)*(x8600.value));
sj5=gconst1;
cj5=gconst2;
j5=x8599;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8599;
IkReal gconst1=(r21*x8598);
IkReal gconst2=(x8597*x8598);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8601=((-1.0)*r20);
IkReal x8602=x8499;
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8601),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal x8603=((-1.0)*(x8604.value));
sj5=gconst1;
cj5=gconst2;
j5=x8603;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8603;
IkReal gconst1=(r21*x8602);
IkReal gconst2=(x8601*x8602);
IkReal x8605=r22*r22;
IkReal x8606=((1.0)*r02);
IkReal x8607=(cj1*sj2);
IkReal x8608=(cj2*sj1);
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(((-1.0)+x8605),-1);
if(!x8612.valid){
continue;
}
IkReal x8609=x8612.value;
if((((1.0)+(((-1.0)*x8605)))) < -0.00001)
continue;
IkReal x8610=IKsqrt(((1.0)+(((-1.0)*x8605))));
IkReal x8611=(r02*r22*x8609*x8610);
j4eval[0]=((IKabs(((((-1.0)*x8606*x8607))+(((-1.0)*x8606*x8608)))))+(IKabs((((x8607*x8611))+((x8608*x8611))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8613=(cj1*sj2);
IkReal x8614=(gconst1*r01);
IkReal x8615=((1.0)*r02);
IkReal x8616=(cj2*sj1);
IkReal x8617=((1.0)*gconst2*r00);
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal((((x8614*x8616))+(((-1.0)*x8613*x8617))+((x8613*x8614))+(((-1.0)*x8616*x8617)))),IkReal(((((-1.0)*x8613*x8615))+(((-1.0)*x8615*x8616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
CheckValue<IkReal> x8619=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8618.value)+(((1.5707963267949)*(x8619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8620=IKcos(j4);
IkReal x8621=IKsin(j4);
IkReal x8622=((1.0)*x8620);
IkReal x8623=(gconst1*x8620);
IkReal x8624=(gconst1*x8621);
IkReal x8625=((1.0)*gconst2*x8621);
evalcond[0]=(((r02*x8621))+(((-1.0)*gconst2*r00*x8622))+((r01*x8623)));
evalcond[1]=(((r21*x8624))+(((-1.0)*r22*x8622))+(((-1.0)*r20*x8625)));
evalcond[2]=((((-1.0)*r12*x8622))+(((-1.0)*r10*x8625))+((r11*x8624)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8625))+((r01*x8624))+(((-1.0)*r02*x8622)));
evalcond[4]=(((cj2*sj1))+((r21*x8623))+((cj1*sj2))+((r22*x8621))+(((-1.0)*gconst2*r20*x8622)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8622))+((r12*x8621))+((r11*x8623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8626=(gconst1*r01);
IkReal x8627=(gconst2*r00);
CheckValue<IkReal> x8628 = IKatan2WithCheck(IkReal(((((-1.0)*x8627))+x8626)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8628.valid){
continue;
}
CheckValue<IkReal> x8629=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8626*x8627))+(x8627*x8627)+(r02*r02)+(x8626*x8626))),-1);
if(!x8629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8628.value)+(((1.5707963267949)*(x8629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8630=IKcos(j4);
IkReal x8631=IKsin(j4);
IkReal x8632=((1.0)*x8630);
IkReal x8633=(gconst1*x8630);
IkReal x8634=(gconst1*x8631);
IkReal x8635=((1.0)*gconst2*x8631);
evalcond[0]=(((r02*x8631))+(((-1.0)*gconst2*r00*x8632))+((r01*x8633)));
evalcond[1]=(((r21*x8634))+(((-1.0)*r22*x8632))+(((-1.0)*r20*x8635)));
evalcond[2]=((((-1.0)*r12*x8632))+(((-1.0)*r10*x8635))+((r11*x8634)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8635))+((r01*x8634))+(((-1.0)*r02*x8632)));
evalcond[4]=(((cj2*sj1))+((r21*x8633))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8632))+((r22*x8631)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8632))+((r12*x8631))+((r11*x8633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8636=((1.0)*gconst2);
CheckValue<IkReal> x8637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8636))+(((-1.0)*gconst1*r10)))),-1);
if(!x8637.valid){
continue;
}
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8637.value)))+(x8638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8639=IKcos(j4);
IkReal x8640=IKsin(j4);
IkReal x8641=((1.0)*x8639);
IkReal x8642=(gconst1*x8639);
IkReal x8643=(gconst1*x8640);
IkReal x8644=((1.0)*gconst2*x8640);
evalcond[0]=((((-1.0)*gconst2*r00*x8641))+((r02*x8640))+((r01*x8642)));
evalcond[1]=((((-1.0)*r22*x8641))+((r21*x8643))+(((-1.0)*r20*x8644)));
evalcond[2]=(((r11*x8643))+(((-1.0)*r10*x8644))+(((-1.0)*r12*x8641)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8641))+((r01*x8643))+(((-1.0)*r00*x8644)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8642))+(((-1.0)*gconst2*r20*x8641))+((r22*x8640)));
evalcond[5]=(((r12*x8640))+((r11*x8642))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8645=((-1.0)*r20);
IkReal x8646=x8499;
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8645),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal x8647=((-1.0)*(x8648.value));
sj5=gconst1;
cj5=gconst2;
j5=x8647;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8647;
IkReal gconst1=(r21*x8646);
IkReal gconst2=(x8645*x8646);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8649=((-1.0)*r20);
IkReal x8650=x8499;
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8649),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
IkReal x8651=((-1.0)*(x8652.value));
sj5=gconst1;
cj5=gconst2;
j5=x8651;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8651;
IkReal gconst1=(r21*x8650);
IkReal gconst2=(x8649*x8650);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8653=((-1.0)*r20);
IkReal x8654=x8499;
CheckValue<IkReal> x8656 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8653),IKFAST_ATAN2_MAGTHRESH);
if(!x8656.valid){
continue;
}
IkReal x8655=((-1.0)*(x8656.value));
sj5=gconst1;
cj5=gconst2;
j5=x8655;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8655;
IkReal gconst1=(r21*x8654);
IkReal gconst2=(x8653*x8654);
IkReal x8657=r22*r22;
IkReal x8658=(cj1*r12*sj2);
IkReal x8659=(cj2*r12*sj1);
CheckValue<IkReal> x8663=IKPowWithIntegerCheck(((-1.0)+x8657),-1);
if(!x8663.valid){
continue;
}
IkReal x8660=x8663.value;
if((((1.0)+(((-1.0)*x8657)))) < -0.00001)
continue;
IkReal x8661=IKsqrt(((1.0)+(((-1.0)*x8657))));
IkReal x8662=(r22*x8660*x8661);
j4eval[0]=((IKabs((((x8659*x8662))+((x8658*x8662)))))+(IKabs(((((-1.0)*x8659))+(((-1.0)*x8658))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8664=(cj1*sj2);
IkReal x8665=(cj2*sj1);
IkReal x8666=((1.0)*r12);
IkReal x8667=(gconst1*r11);
IkReal x8668=((1.0)*gconst2*r10);
CheckValue<IkReal> x8669 = IKatan2WithCheck(IkReal((((x8664*x8667))+(((-1.0)*x8665*x8668))+(((-1.0)*x8664*x8668))+((x8665*x8667)))),IkReal(((((-1.0)*x8665*x8666))+(((-1.0)*x8664*x8666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8669.valid){
continue;
}
CheckValue<IkReal> x8670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8669.value)+(((1.5707963267949)*(x8670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8671=IKcos(j4);
IkReal x8672=IKsin(j4);
IkReal x8673=((1.0)*x8671);
IkReal x8674=(gconst1*x8671);
IkReal x8675=(gconst1*x8672);
IkReal x8676=((1.0)*gconst2*x8672);
evalcond[0]=(((r11*x8674))+((r12*x8672))+(((-1.0)*gconst2*r10*x8673)));
evalcond[1]=((((-1.0)*r22*x8673))+(((-1.0)*r20*x8676))+((r21*x8675)));
evalcond[2]=((((-1.0)*r02*x8673))+(((-1.0)*r00*x8676))+((r01*x8675)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8673))+((r11*x8675))+(((-1.0)*r10*x8676)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8672))+(((-1.0)*gconst2*r20*x8673))+((r21*x8674)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8673))+((r01*x8674))+((r02*x8672))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8677=(gconst1*r11);
IkReal x8678=(gconst2*r10);
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal((x8677+(((-1.0)*x8678)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
CheckValue<IkReal> x8680=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8677*x8678))+(r12*r12)+(x8678*x8678)+(x8677*x8677))),-1);
if(!x8680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8679.value)+(((1.5707963267949)*(x8680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8681=IKcos(j4);
IkReal x8682=IKsin(j4);
IkReal x8683=((1.0)*x8681);
IkReal x8684=(gconst1*x8681);
IkReal x8685=(gconst1*x8682);
IkReal x8686=((1.0)*gconst2*x8682);
evalcond[0]=(((r12*x8682))+((r11*x8684))+(((-1.0)*gconst2*r10*x8683)));
evalcond[1]=((((-1.0)*r22*x8683))+(((-1.0)*r20*x8686))+((r21*x8685)));
evalcond[2]=((((-1.0)*r00*x8686))+(((-1.0)*r02*x8683))+((r01*x8685)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8683))+((r11*x8685))+(((-1.0)*r10*x8686)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8682))+((r21*x8684))+(((-1.0)*gconst2*r20*x8683)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8684))+(((-1.0)*gconst2*r00*x8683))+((cj1*cj2))+((r02*x8682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8687.value)+(((1.5707963267949)*(x8688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8689=IKcos(j4);
IkReal x8690=IKsin(j4);
IkReal x8691=((1.0)*x8689);
IkReal x8692=(gconst1*x8689);
IkReal x8693=(gconst1*x8690);
IkReal x8694=((1.0)*gconst2*x8690);
evalcond[0]=((((-1.0)*gconst2*r10*x8691))+((r12*x8690))+((r11*x8692)));
evalcond[1]=(((r21*x8693))+(((-1.0)*r22*x8691))+(((-1.0)*r20*x8694)));
evalcond[2]=((((-1.0)*r02*x8691))+((r01*x8693))+(((-1.0)*r00*x8694)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8691))+(((-1.0)*r10*x8694))+((r11*x8693)));
evalcond[4]=((((-1.0)*gconst2*r20*x8691))+((cj2*sj1))+((r21*x8692))+((r22*x8690))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8691))+((r02*x8690))+((r01*x8692))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8695=((-1.0)*r20);
IkReal x8696=x8499;
CheckValue<IkReal> x8698 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8695),IKFAST_ATAN2_MAGTHRESH);
if(!x8698.valid){
continue;
}
IkReal x8697=((-1.0)*(x8698.value));
sj5=gconst1;
cj5=gconst2;
j5=x8697;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8697;
IkReal gconst1=(r21*x8696);
IkReal gconst2=(x8695*x8696);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8699=((-1.0)*r20);
IkReal x8700=x8499;
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8699),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
IkReal x8701=((-1.0)*(x8702.value));
sj5=gconst1;
cj5=gconst2;
j5=x8701;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8701;
IkReal gconst1=(r21*x8700);
IkReal gconst2=(x8699*x8700);
IkReal x8703=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8707=IKPowWithIntegerCheck(x8703,-1);
if(!x8707.valid){
continue;
}
IkReal x8704=x8707.value;
IkReal x8705=((1.0)*x8704);
IkReal x8706=((((-1.0)*x8705*(r10*r10)*(r20*r20)))+(((-1.0)*x8705*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8704))+(((-1.0)*(r12*r12))));
j4eval[0]=x8706;
j4eval[1]=r12;
j4eval[2]=x8703;
j4eval[3]=IKsign(x8706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8708=((-1.0)*r20);
IkReal x8709=x8499;
CheckValue<IkReal> x8711 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8708),IKFAST_ATAN2_MAGTHRESH);
if(!x8711.valid){
continue;
}
IkReal x8710=((-1.0)*(x8711.value));
sj5=gconst1;
cj5=gconst2;
j5=x8710;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8710;
IkReal gconst1=(r21*x8709);
IkReal gconst2=(x8708*x8709);
IkReal x8712=r22*r22;
IkReal x8713=(cj1*r12*sj2);
IkReal x8714=(cj2*r12*sj1);
CheckValue<IkReal> x8718=IKPowWithIntegerCheck(((-1.0)+x8712),-1);
if(!x8718.valid){
continue;
}
IkReal x8715=x8718.value;
if((((1.0)+(((-1.0)*x8712)))) < -0.00001)
continue;
IkReal x8716=IKsqrt(((1.0)+(((-1.0)*x8712))));
IkReal x8717=(r22*x8715*x8716);
j4eval[0]=((IKabs((((x8713*x8717))+((x8714*x8717)))))+(IKabs(((((-1.0)*x8713))+(((-1.0)*x8714))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8719=(cj1*sj2);
IkReal x8720=(cj2*sj1);
IkReal x8721=((1.0)*r12);
IkReal x8722=(gconst1*r11);
IkReal x8723=((1.0)*gconst2*r10);
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8724.valid){
continue;
}
CheckValue<IkReal> x8725 = IKatan2WithCheck(IkReal(((((-1.0)*x8720*x8723))+((x8720*x8722))+(((-1.0)*x8719*x8723))+((x8719*x8722)))),IkReal(((((-1.0)*x8720*x8721))+(((-1.0)*x8719*x8721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8724.value)))+(x8725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8726=IKcos(j4);
IkReal x8727=IKsin(j4);
IkReal x8728=((1.0)*x8726);
IkReal x8729=(gconst1*x8726);
IkReal x8730=(gconst1*x8727);
IkReal x8731=((1.0)*gconst2*x8727);
evalcond[0]=(((r11*x8729))+((r12*x8727))+(((-1.0)*gconst2*r10*x8728)));
evalcond[1]=(((r21*x8730))+(((-1.0)*r20*x8731))+(((-1.0)*r22*x8728)));
evalcond[2]=((((-1.0)*r02*x8728))+(((-1.0)*r00*x8731))+((r01*x8730)));
evalcond[3]=((1.0)+((r11*x8730))+(((-1.0)*r10*x8731))+(((-1.0)*r12*x8728)));
evalcond[4]=(((cj2*sj1))+((r21*x8729))+((cj1*sj2))+((r22*x8727))+(((-1.0)*gconst2*r20*x8728)));
evalcond[5]=(((r02*x8727))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8728))+((r01*x8729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8732=(gconst2*r10);
IkReal x8733=(gconst1*r11);
CheckValue<IkReal> x8734 = IKatan2WithCheck(IkReal((x8733+(((-1.0)*x8732)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8734.valid){
continue;
}
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8732*x8732)))+(((-1.0)*(x8733*x8733)))+(((-1.0)*(r12*r12)))+(((2.0)*x8732*x8733)))),-1);
if(!x8735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8734.value)+(((1.5707963267949)*(x8735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8736=IKcos(j4);
IkReal x8737=IKsin(j4);
IkReal x8738=((1.0)*x8736);
IkReal x8739=(gconst1*x8736);
IkReal x8740=(gconst1*x8737);
IkReal x8741=((1.0)*gconst2*x8737);
evalcond[0]=(((r11*x8739))+((r12*x8737))+(((-1.0)*gconst2*r10*x8738)));
evalcond[1]=((((-1.0)*r22*x8738))+((r21*x8740))+(((-1.0)*r20*x8741)));
evalcond[2]=(((r01*x8740))+(((-1.0)*r00*x8741))+(((-1.0)*r02*x8738)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8741))+(((-1.0)*r12*x8738))+((r11*x8740)));
evalcond[4]=(((cj2*sj1))+((r21*x8739))+((cj1*sj2))+((r22*x8737))+(((-1.0)*gconst2*r20*x8738)));
evalcond[5]=(((r02*x8737))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8738))+((r01*x8739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8742=((1.0)*gconst2);
CheckValue<IkReal> x8743=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8742)))),-1);
if(!x8743.valid){
continue;
}
CheckValue<IkReal> x8744 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8743.value)))+(x8744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8745=IKcos(j4);
IkReal x8746=IKsin(j4);
IkReal x8747=((1.0)*x8745);
IkReal x8748=(gconst1*x8745);
IkReal x8749=(gconst1*x8746);
IkReal x8750=((1.0)*gconst2*x8746);
evalcond[0]=(((r12*x8746))+(((-1.0)*gconst2*r10*x8747))+((r11*x8748)));
evalcond[1]=((((-1.0)*r22*x8747))+(((-1.0)*r20*x8750))+((r21*x8749)));
evalcond[2]=(((r01*x8749))+(((-1.0)*r00*x8750))+(((-1.0)*r02*x8747)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8747))+(((-1.0)*r10*x8750))+((r11*x8749)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8747))+((r22*x8746))+((r21*x8748)));
evalcond[5]=(((r01*x8748))+(((-1.0)*gconst2*r00*x8747))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8751=((-1.0)*r20);
IkReal x8752=((-1.0)*r21);
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(x8752),IkReal(x8751),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
IkReal x8753=((-1.0)*(x8754.value));
sj5=gconst1;
cj5=gconst2;
j5=x8753;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8751);
rxp0_2=(py*r00);
rxp1_0=(py*x8752);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8753;
IkReal gconst1=r21;
IkReal gconst2=x8751;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8755=((-1.0)*r20);
IkReal x8756=((-1.0)*r21);
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal(x8756),IkReal(x8755),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
IkReal x8757=((-1.0)*(x8758.value));
sj5=gconst1;
cj5=gconst2;
j5=x8757;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8755);
rxp0_2=(py*r00);
rxp1_0=(py*x8756);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8757;
IkReal gconst1=r21;
IkReal gconst2=x8755;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8759=((-1.0)*r20);
IkReal x8760=((-1.0)*r21);
CheckValue<IkReal> x8762 = IKatan2WithCheck(IkReal(x8760),IkReal(x8759),IKFAST_ATAN2_MAGTHRESH);
if(!x8762.valid){
continue;
}
IkReal x8761=((-1.0)*(x8762.value));
sj5=gconst1;
cj5=gconst2;
j5=x8761;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8759);
rxp0_2=(py*r00);
rxp1_0=(py*x8760);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8761;
IkReal gconst1=r21;
IkReal gconst2=x8759;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8765=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8765.valid){
continue;
}
IkReal x8763=x8765.value;
IkReal x8764=(cj0*x8763);
cj4array[0]=((((-1.0)*cj1*cj2*x8764))+((sj1*sj2*x8764)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(gconst1*r21);
IkReal x8769=(gconst2*r20);
IkReal x8770=((1.0)*x8767);
IkReal x8771=((1.0)*x8766);
evalcond[0]=(r12*x8766);
evalcond[1]=((((-1.0)*r12*x8770))+(((-1.0)*cj0)));
evalcond[2]=(((x8766*x8768))+(((-1.0)*x8769*x8771)));
evalcond[3]=((((-1.0)*gconst2*r00*x8771))+((gconst1*r01*x8766)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8767*x8768))+(((-1.0)*x8769*x8770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8774=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8774.valid){
continue;
}
IkReal x8772=x8774.value;
IkReal x8773=((1.0)*x8772);
cj4array[0]=((((-1.0)*cj2*sj1*x8773))+(((-1.0)*cj1*sj2*x8773)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8775=IKsin(j4);
IkReal x8776=IKcos(j4);
IkReal x8777=((1.0)*cj0);
IkReal x8778=(gconst1*r01);
IkReal x8779=((1.0)*x8776);
IkReal x8780=((1.0)*gconst2*x8775);
evalcond[0]=(r12*x8775);
evalcond[1]=((((-1.0)*x8777))+(((-1.0)*r12*x8779)));
evalcond[2]=(((gconst1*r21*x8775))+(((-1.0)*r20*x8780)));
evalcond[3]=((((-1.0)*r00*x8780))+((x8775*x8778)));
evalcond[4]=((((-1.0)*gconst2*r00*x8779))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x8777))+((x8776*x8778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8781=IKPowWithIntegerCheck(r12,-1);
if(!x8781.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8781.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8782=IKsin(j4);
IkReal x8783=IKcos(j4);
IkReal x8784=(gconst1*x8783);
IkReal x8785=(gconst1*x8782);
IkReal x8786=((1.0)*gconst2*r20);
IkReal x8787=((1.0)*gconst2*r00);
evalcond[0]=(r12*x8782);
evalcond[1]=(((r21*x8785))+(((-1.0)*x8782*x8786)));
evalcond[2]=((((-1.0)*x8782*x8787))+((r01*x8785)));
evalcond[3]=(((cj2*sj1))+((r21*x8784))+((cj1*sj2))+(((-1.0)*x8783*x8786)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x8783*x8787))+((r01*x8784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8788=(cj2*sj1);
IkReal x8789=(cj1*sj2);
IkReal x8790=(gconst1*r21);
IkReal x8791=((1.0)*gconst2*r20);
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x8791))+(((2.0)*gconst2*r20*x8790))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8790*x8790))))),-1);
if(!x8792.valid){
continue;
}
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal((((r22*x8789))+((r22*x8788)))),IkReal(((((-1.0)*x8789*x8791))+(((-1.0)*x8788*x8791))+((x8789*x8790))+((x8788*x8790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8792.value)))+(x8793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8794=IKsin(j4);
IkReal x8795=IKcos(j4);
IkReal x8796=(cj1*cj2);
IkReal x8797=((1.0)*cj0);
IkReal x8798=(sj1*sj2);
IkReal x8799=((1.0)*x8795);
IkReal x8800=(gconst1*x8795);
IkReal x8801=(gconst1*x8794);
IkReal x8802=((1.0)*gconst2*x8794);
evalcond[0]=(((r21*x8801))+(((-1.0)*r20*x8802))+(((-1.0)*r22*x8799)));
evalcond[1]=(sj0+(((-1.0)*r00*x8802))+(((-1.0)*r02*x8799))+((r01*x8801)));
evalcond[2]=((((-1.0)*r12*x8799))+(((-1.0)*r10*x8802))+((r11*x8801))+(((-1.0)*x8797)));
evalcond[3]=(((cj2*sj1))+((r21*x8800))+(((-1.0)*gconst2*r20*x8799))+((cj1*sj2))+((r22*x8794)));
evalcond[4]=((((-1.0)*x8797*x8798))+((cj0*x8796))+((r02*x8794))+((r01*x8800))+(((-1.0)*gconst2*r00*x8799)));
evalcond[5]=(((r12*x8794))+(((-1.0)*sj0*x8798))+((r11*x8800))+(((-1.0)*gconst2*r10*x8799))+((sj0*x8796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8803.valid){
continue;
}
CheckValue<IkReal> x8804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8803.value)))+(x8804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8805=IKsin(j4);
IkReal x8806=IKcos(j4);
IkReal x8807=(cj1*cj2);
IkReal x8808=((1.0)*cj0);
IkReal x8809=(sj1*sj2);
IkReal x8810=((1.0)*x8806);
IkReal x8811=(gconst1*x8806);
IkReal x8812=(gconst1*x8805);
IkReal x8813=((1.0)*gconst2*x8805);
evalcond[0]=(((r21*x8812))+(((-1.0)*r22*x8810))+(((-1.0)*r20*x8813)));
evalcond[1]=(sj0+(((-1.0)*r02*x8810))+((r01*x8812))+(((-1.0)*r00*x8813)));
evalcond[2]=((((-1.0)*r10*x8813))+(((-1.0)*r12*x8810))+((r11*x8812))+(((-1.0)*x8808)));
evalcond[3]=(((r21*x8811))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8810))+((r22*x8805))+((cj1*sj2)));
evalcond[4]=(((cj0*x8807))+((r02*x8805))+((r01*x8811))+(((-1.0)*x8808*x8809))+(((-1.0)*gconst2*r00*x8810)));
evalcond[5]=(((r12*x8805))+((r11*x8811))+((sj0*x8807))+(((-1.0)*gconst2*r10*x8810))+(((-1.0)*sj0*x8809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8814=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8814.valid){
continue;
}
CheckValue<IkReal> x8815 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8814.value)))+(x8815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8816=IKsin(j4);
IkReal x8817=IKcos(j4);
IkReal x8818=(cj1*cj2);
IkReal x8819=((1.0)*cj0);
IkReal x8820=(sj1*sj2);
IkReal x8821=((1.0)*x8817);
IkReal x8822=(gconst1*x8817);
IkReal x8823=(gconst1*x8816);
IkReal x8824=((1.0)*gconst2*x8816);
evalcond[0]=(((r21*x8823))+(((-1.0)*r20*x8824))+(((-1.0)*r22*x8821)));
evalcond[1]=(sj0+(((-1.0)*r02*x8821))+((r01*x8823))+(((-1.0)*r00*x8824)));
evalcond[2]=((((-1.0)*r12*x8821))+((r11*x8823))+(((-1.0)*x8819))+(((-1.0)*r10*x8824)));
evalcond[3]=((((-1.0)*gconst2*r20*x8821))+((r21*x8822))+((cj2*sj1))+((r22*x8816))+((cj1*sj2)));
evalcond[4]=(((r02*x8816))+((r01*x8822))+(((-1.0)*gconst2*r00*x8821))+(((-1.0)*x8819*x8820))+((cj0*x8818)));
evalcond[5]=(((r12*x8816))+((sj0*x8818))+((r11*x8822))+(((-1.0)*gconst2*r10*x8821))+(((-1.0)*sj0*x8820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8825=((-1.0)*r20);
IkReal x8826=x8499;
CheckValue<IkReal> x8828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8825),IKFAST_ATAN2_MAGTHRESH);
if(!x8828.valid){
continue;
}
IkReal x8827=((-1.0)*(x8828.value));
sj5=gconst1;
cj5=gconst2;
j5=x8827;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8827;
IkReal gconst1=(r21*x8826);
IkReal gconst2=(x8825*x8826);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8829=((-1.0)*r20);
IkReal x8830=x8499;
CheckValue<IkReal> x8832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8829),IKFAST_ATAN2_MAGTHRESH);
if(!x8832.valid){
continue;
}
IkReal x8831=((-1.0)*(x8832.value));
sj5=gconst1;
cj5=gconst2;
j5=x8831;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8831;
IkReal gconst1=(r21*x8830);
IkReal gconst2=(x8829*x8830);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8833=((-1.0)*r20);
IkReal x8834=x8499;
CheckValue<IkReal> x8836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8833),IKFAST_ATAN2_MAGTHRESH);
if(!x8836.valid){
continue;
}
IkReal x8835=((-1.0)*(x8836.value));
sj5=gconst1;
cj5=gconst2;
j5=x8835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8835;
IkReal gconst1=(r21*x8834);
IkReal gconst2=(x8833*x8834);
IkReal x8837=r22*r22;
CheckValue<IkReal> x8840=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8837))),-1);
if(!x8840.valid){
continue;
}
IkReal x8838=x8840.value;
IkReal x8839=(((x8838*(r20*r20*r20*r20)))+((x8838*(r21*r21*r21*r21)))+x8837+(((2.0)*x8838*(r20*r20)*(r21*r21))));
j4eval[0]=x8839;
j4eval[1]=IKsign(x8839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8841=((-1.0)*r20);
IkReal x8842=x8499;
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8841),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
IkReal x8843=((-1.0)*(x8844.value));
sj5=gconst1;
cj5=gconst2;
j5=x8843;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8843;
IkReal gconst1=(r21*x8842);
IkReal gconst2=(x8841*x8842);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8845=((-1.0)*r20);
IkReal x8846=x8499;
CheckValue<IkReal> x8848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8845),IKFAST_ATAN2_MAGTHRESH);
if(!x8848.valid){
continue;
}
IkReal x8847=((-1.0)*(x8848.value));
sj5=gconst1;
cj5=gconst2;
j5=x8847;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8847;
IkReal gconst1=(r21*x8846);
IkReal gconst2=(x8845*x8846);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8849=((-1.0)*r20);
IkReal x8850=x8499;
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8849),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
IkReal x8851=((-1.0)*(x8852.value));
sj5=gconst1;
cj5=gconst2;
j5=x8851;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8851;
IkReal gconst1=(r21*x8850);
IkReal gconst2=(x8849*x8850);
IkReal x8853=r22*r22;
IkReal x8854=(cj1*r02*sj2);
IkReal x8855=(cj2*r02*sj1);
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(((-1.0)+x8853),-1);
if(!x8859.valid){
continue;
}
IkReal x8856=x8859.value;
if((((1.0)+(((-1.0)*x8853)))) < -0.00001)
continue;
IkReal x8857=IKsqrt(((1.0)+(((-1.0)*x8853))));
IkReal x8858=((1.0)*r22*x8856*x8857);
j4eval[0]=((IKabs((x8855+x8854)))+(IKabs(((((-1.0)*x8854*x8858))+(((-1.0)*x8855*x8858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8860=(cj2*sj1);
IkReal x8861=(cj1*sj2);
IkReal x8862=(gconst2*r00);
IkReal x8863=((1.0)*gconst1*r01);
CheckValue<IkReal> x8864=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8864.valid){
continue;
}
CheckValue<IkReal> x8865 = IKatan2WithCheck(IkReal((((x8860*x8862))+((x8861*x8862))+(((-1.0)*x8860*x8863))+(((-1.0)*x8861*x8863)))),IkReal((((r02*x8860))+((r02*x8861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8864.value)))+(x8865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8866=IKsin(j4);
IkReal x8867=IKcos(j4);
IkReal x8868=(gconst1*r11);
IkReal x8869=(gconst1*r21);
IkReal x8870=(gconst1*r01);
IkReal x8871=((1.0)*x8867);
IkReal x8872=(gconst2*x8867);
IkReal x8873=((1.0)*x8866);
evalcond[0]=((((-1.0)*r22*x8871))+(((-1.0)*gconst2*r20*x8873))+((x8866*x8869)));
evalcond[1]=((((-1.0)*gconst2*r10*x8873))+((x8866*x8868))+(((-1.0)*r12*x8871)));
evalcond[2]=((((-1.0)*x8870*x8871))+(((-1.0)*r02*x8873))+((r00*x8872)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8871))+((x8866*x8870))+(((-1.0)*gconst2*r00*x8873)));
evalcond[4]=(((cj2*sj1))+((r20*x8872))+(((-1.0)*r22*x8873))+((cj1*sj2))+(((-1.0)*x8869*x8871)));
evalcond[5]=(((r10*x8872))+(((-1.0)*x8868*x8871))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8873))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8874=(gconst1*r01);
IkReal x8875=(gconst2*r00);
CheckValue<IkReal> x8876=IKPowWithIntegerCheck(IKsign(((x8874*x8874)+(((-2.0)*x8874*x8875))+(x8875*x8875)+(r02*r02))),-1);
if(!x8876.valid){
continue;
}
CheckValue<IkReal> x8877 = IKatan2WithCheck(IkReal(((((-1.0)*x8874))+x8875)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8876.value)))+(x8877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8878=IKsin(j4);
IkReal x8879=IKcos(j4);
IkReal x8880=(gconst1*r11);
IkReal x8881=(gconst1*r21);
IkReal x8882=(gconst1*r01);
IkReal x8883=((1.0)*x8879);
IkReal x8884=(gconst2*x8879);
IkReal x8885=((1.0)*x8878);
evalcond[0]=((((-1.0)*r22*x8883))+((x8878*x8881))+(((-1.0)*gconst2*r20*x8885)));
evalcond[1]=(((x8878*x8880))+(((-1.0)*r12*x8883))+(((-1.0)*gconst2*r10*x8885)));
evalcond[2]=(((r00*x8884))+(((-1.0)*x8882*x8883))+(((-1.0)*r02*x8885)));
evalcond[3]=((1.0)+((x8878*x8882))+(((-1.0)*gconst2*r00*x8885))+(((-1.0)*r02*x8883)));
evalcond[4]=((((-1.0)*x8881*x8883))+(((-1.0)*r22*x8885))+((cj2*sj1))+((cj1*sj2))+((r20*x8884)));
evalcond[5]=((((-1.0)*r12*x8885))+(((-1.0)*sj1*sj2))+((r10*x8884))+(((-1.0)*x8880*x8883))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8886 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8886.valid){
continue;
}
CheckValue<IkReal> x8887=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8886.value)+(((1.5707963267949)*(x8887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8888=IKsin(j4);
IkReal x8889=IKcos(j4);
IkReal x8890=(gconst1*r11);
IkReal x8891=(gconst1*r21);
IkReal x8892=(gconst1*r01);
IkReal x8893=((1.0)*x8889);
IkReal x8894=(gconst2*x8889);
IkReal x8895=((1.0)*x8888);
evalcond[0]=(((x8888*x8891))+(((-1.0)*gconst2*r20*x8895))+(((-1.0)*r22*x8893)));
evalcond[1]=((((-1.0)*r12*x8893))+((x8888*x8890))+(((-1.0)*gconst2*r10*x8895)));
evalcond[2]=(((r00*x8894))+(((-1.0)*x8892*x8893))+(((-1.0)*r02*x8895)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8895))+(((-1.0)*r02*x8893))+((x8888*x8892)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8891*x8893))+((r20*x8894))+((cj1*sj2))+(((-1.0)*r22*x8895)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8895))+((r10*x8894))+(((-1.0)*x8890*x8893))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8896=((-1.0)*r20);
IkReal x8897=x8499;
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8896),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
IkReal x8898=((-1.0)*(x8899.value));
sj5=gconst1;
cj5=gconst2;
j5=x8898;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8898;
IkReal gconst1=(r21*x8897);
IkReal gconst2=(x8896*x8897);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8900=((-1.0)*r20);
IkReal x8901=x8499;
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8900),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
IkReal x8902=((-1.0)*(x8903.value));
sj5=gconst1;
cj5=gconst2;
j5=x8902;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8902;
IkReal gconst1=(r21*x8901);
IkReal gconst2=(x8900*x8901);
IkReal x8904=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(x8904,-1);
if(!x8908.valid){
continue;
}
IkReal x8905=x8908.value;
IkReal x8906=((1.0)*x8905);
IkReal x8907=((((-1.0)*(r02*r02)))+(((-1.0)*x8906*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8905))+(((-1.0)*x8906*(r01*r01)*(r21*r21))));
j4eval[0]=x8907;
j4eval[1]=IKsign(x8907);
j4eval[2]=r02;
j4eval[3]=x8904;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8909=((-1.0)*r20);
IkReal x8910=x8499;
CheckValue<IkReal> x8912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8909),IKFAST_ATAN2_MAGTHRESH);
if(!x8912.valid){
continue;
}
IkReal x8911=((-1.0)*(x8912.value));
sj5=gconst1;
cj5=gconst2;
j5=x8911;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8911;
IkReal gconst1=(r21*x8910);
IkReal gconst2=(x8909*x8910);
IkReal x8913=r22*r22;
IkReal x8914=(cj1*r02*sj2);
IkReal x8915=(cj2*r02*sj1);
CheckValue<IkReal> x8919=IKPowWithIntegerCheck(((-1.0)+x8913),-1);
if(!x8919.valid){
continue;
}
IkReal x8916=x8919.value;
if((((1.0)+(((-1.0)*x8913)))) < -0.00001)
continue;
IkReal x8917=IKsqrt(((1.0)+(((-1.0)*x8913))));
IkReal x8918=((1.0)*r22*x8916*x8917);
j4eval[0]=((IKabs(((((-1.0)*x8915*x8918))+(((-1.0)*x8914*x8918)))))+(IKabs((x8914+x8915))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8920=(cj2*sj1);
IkReal x8921=(cj1*sj2);
IkReal x8922=(gconst2*r00);
IkReal x8923=((1.0)*gconst1*r01);
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal((((x8921*x8922))+((x8920*x8922))+(((-1.0)*x8920*x8923))+(((-1.0)*x8921*x8923)))),IkReal((((r02*x8921))+((r02*x8920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
CheckValue<IkReal> x8925=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8924.value)+(((1.5707963267949)*(x8925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8926=IKsin(j4);
IkReal x8927=IKcos(j4);
IkReal x8928=(gconst1*r11);
IkReal x8929=(gconst1*r21);
IkReal x8930=(gconst1*r01);
IkReal x8931=((1.0)*x8927);
IkReal x8932=(gconst2*x8927);
IkReal x8933=((1.0)*x8926);
evalcond[0]=((((-1.0)*r22*x8931))+(((-1.0)*gconst2*r20*x8933))+((x8926*x8929)));
evalcond[1]=((((-1.0)*r12*x8931))+(((-1.0)*gconst2*r10*x8933))+((x8926*x8928)));
evalcond[2]=((((-1.0)*x8930*x8931))+(((-1.0)*r02*x8933))+((r00*x8932)));
evalcond[3]=((-1.0)+((x8926*x8930))+(((-1.0)*gconst2*r00*x8933))+(((-1.0)*r02*x8931)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8933))+((cj1*sj2))+((r20*x8932))+(((-1.0)*x8929*x8931)));
evalcond[5]=((((-1.0)*r12*x8933))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8928*x8931))+((r10*x8932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8934=(gconst2*r00);
IkReal x8935=(gconst1*r01);
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal((x8934+(((-1.0)*x8935)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
CheckValue<IkReal> x8937=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8935*x8935)))+(((-1.0)*(x8934*x8934)))+(((-1.0)*(r02*r02)))+(((2.0)*x8934*x8935)))),-1);
if(!x8937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8936.value)+(((1.5707963267949)*(x8937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8938=IKsin(j4);
IkReal x8939=IKcos(j4);
IkReal x8940=(gconst1*r11);
IkReal x8941=(gconst1*r21);
IkReal x8942=(gconst1*r01);
IkReal x8943=((1.0)*x8939);
IkReal x8944=(gconst2*x8939);
IkReal x8945=((1.0)*x8938);
evalcond[0]=(((x8938*x8941))+(((-1.0)*r22*x8943))+(((-1.0)*gconst2*r20*x8945)));
evalcond[1]=(((x8938*x8940))+(((-1.0)*r12*x8943))+(((-1.0)*gconst2*r10*x8945)));
evalcond[2]=((((-1.0)*x8942*x8943))+(((-1.0)*r02*x8945))+((r00*x8944)));
evalcond[3]=((-1.0)+((x8938*x8942))+(((-1.0)*r02*x8943))+(((-1.0)*gconst2*r00*x8945)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8945))+((cj1*sj2))+(((-1.0)*x8941*x8943))+((r20*x8944)));
evalcond[5]=((((-1.0)*r12*x8945))+(((-1.0)*x8940*x8943))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8946=((1.0)*gconst2);
CheckValue<IkReal> x8947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8946))+(((-1.0)*gconst1*r10)))),-1);
if(!x8947.valid){
continue;
}
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8947.value)))+(x8948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8949=IKsin(j4);
IkReal x8950=IKcos(j4);
IkReal x8951=(gconst1*r11);
IkReal x8952=(gconst1*r21);
IkReal x8953=(gconst1*r01);
IkReal x8954=((1.0)*x8950);
IkReal x8955=(gconst2*x8950);
IkReal x8956=((1.0)*x8949);
evalcond[0]=((((-1.0)*r22*x8954))+(((-1.0)*gconst2*r20*x8956))+((x8949*x8952)));
evalcond[1]=((((-1.0)*r12*x8954))+(((-1.0)*gconst2*r10*x8956))+((x8949*x8951)));
evalcond[2]=((((-1.0)*x8953*x8954))+((r00*x8955))+(((-1.0)*r02*x8956)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8954))+(((-1.0)*gconst2*r00*x8956))+((x8949*x8953)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8956))+(((-1.0)*x8952*x8954))+((r20*x8955)));
evalcond[5]=((((-1.0)*x8951*x8954))+(((-1.0)*r12*x8956))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8957=((-1.0)*r20);
IkReal x8958=x8499;
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8957),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
IkReal x8959=((-1.0)*(x8960.value));
sj5=gconst1;
cj5=gconst2;
j5=x8959;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8959;
IkReal gconst1=(r21*x8958);
IkReal gconst2=(x8957*x8958);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8961=((-1.0)*r20);
IkReal x8962=x8499;
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8961),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
IkReal x8963=((-1.0)*(x8964.value));
sj5=gconst1;
cj5=gconst2;
j5=x8963;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8963;
IkReal gconst1=(r21*x8962);
IkReal gconst2=(x8961*x8962);
IkReal x8965=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8969=IKPowWithIntegerCheck(x8965,-1);
if(!x8969.valid){
continue;
}
IkReal x8966=x8969.value;
IkReal x8967=((1.0)*x8966);
IkReal x8968=((((-1.0)*x8967*(r10*r10)*(r20*r20)))+(((-1.0)*x8967*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8966)));
j4eval[0]=x8968;
j4eval[1]=r12;
j4eval[2]=x8965;
j4eval[3]=IKsign(x8968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8970=((-1.0)*r20);
IkReal x8971=x8499;
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8970),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
IkReal x8972=((-1.0)*(x8973.value));
sj5=gconst1;
cj5=gconst2;
j5=x8972;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8972;
IkReal gconst1=(r21*x8971);
IkReal gconst2=(x8970*x8971);
IkReal x8974=r22*r22;
IkReal x8975=(cj1*r12*sj2);
IkReal x8976=(cj2*r12*sj1);
CheckValue<IkReal> x8980=IKPowWithIntegerCheck(((-1.0)+x8974),-1);
if(!x8980.valid){
continue;
}
IkReal x8977=x8980.value;
if((((1.0)+(((-1.0)*x8974)))) < -0.00001)
continue;
IkReal x8978=IKsqrt(((1.0)+(((-1.0)*x8974))));
IkReal x8979=((1.0)*r22*x8977*x8978);
j4eval[0]=((IKabs(((((-1.0)*x8976*x8979))+(((-1.0)*x8975*x8979)))))+(IKabs((x8975+x8976))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8981=((1.0)*gconst1);
IkReal x8982=(cj2*sj1);
IkReal x8983=(gconst2*r10);
IkReal x8984=(cj1*sj2);
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal((((x8983*x8984))+(((-1.0)*r11*x8981*x8982))+(((-1.0)*r11*x8981*x8984))+((x8982*x8983)))),IkReal((((r12*x8982))+((r12*x8984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8981)))),-1);
if(!x8986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8985.value)+(((1.5707963267949)*(x8986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8987=IKsin(j4);
IkReal x8988=IKcos(j4);
IkReal x8989=((1.0)*x8988);
IkReal x8990=(gconst2*x8988);
IkReal x8991=(gconst1*x8987);
IkReal x8992=((1.0)*x8987);
evalcond[0]=(((r21*x8991))+(((-1.0)*gconst2*r20*x8992))+(((-1.0)*r22*x8989)));
evalcond[1]=((((-1.0)*r02*x8989))+((r01*x8991))+(((-1.0)*gconst2*r00*x8992)));
evalcond[2]=((((-1.0)*r12*x8992))+(((-1.0)*gconst1*r11*x8989))+((r10*x8990)));
evalcond[3]=((-1.0)+((r11*x8991))+(((-1.0)*r12*x8989))+(((-1.0)*gconst2*r10*x8992)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x8990))+(((-1.0)*r22*x8992))+(((-1.0)*gconst1*r21*x8989)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r00*x8990))+(((-1.0)*gconst1*r01*x8989))+(((-1.0)*r02*x8992))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8993=(gconst1*r11);
IkReal x8994=(gconst2*r10);
CheckValue<IkReal> x8995=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8993*x8993)))+(((-1.0)*(x8994*x8994)))+(((2.0)*x8993*x8994))+(((-1.0)*(r12*r12))))),-1);
if(!x8995.valid){
continue;
}
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal((x8994+(((-1.0)*x8993)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8995.value)))+(x8996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8997=IKsin(j4);
IkReal x8998=IKcos(j4);
IkReal x8999=((1.0)*x8998);
IkReal x9000=(gconst2*x8998);
IkReal x9001=(gconst1*x8997);
IkReal x9002=((1.0)*x8997);
evalcond[0]=(((r21*x9001))+(((-1.0)*r22*x8999))+(((-1.0)*gconst2*r20*x9002)));
evalcond[1]=((((-1.0)*r02*x8999))+(((-1.0)*gconst2*r00*x9002))+((r01*x9001)));
evalcond[2]=((((-1.0)*r12*x9002))+((r10*x9000))+(((-1.0)*gconst1*r11*x8999)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8999))+(((-1.0)*gconst2*r10*x9002))+((r11*x9001)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9002))+(((-1.0)*gconst1*r21*x8999))+((cj1*sj2))+((r20*x9000)));
evalcond[5]=((((-1.0)*r02*x9002))+(((-1.0)*gconst1*r01*x8999))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r00*x9000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9003 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9003.valid){
continue;
}
CheckValue<IkReal> x9004=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9003.value)+(((1.5707963267949)*(x9004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9005=IKsin(j4);
IkReal x9006=IKcos(j4);
IkReal x9007=((1.0)*x9006);
IkReal x9008=(gconst2*x9006);
IkReal x9009=(gconst1*x9005);
IkReal x9010=((1.0)*x9005);
evalcond[0]=((((-1.0)*gconst2*r20*x9010))+(((-1.0)*r22*x9007))+((r21*x9009)));
evalcond[1]=((((-1.0)*r02*x9007))+(((-1.0)*gconst2*r00*x9010))+((r01*x9009)));
evalcond[2]=((((-1.0)*gconst1*r11*x9007))+(((-1.0)*r12*x9010))+((r10*x9008)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9007))+((r11*x9009))+(((-1.0)*gconst2*r10*x9010)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9007))+(((-1.0)*r22*x9010))+((cj1*sj2))+((r20*x9008)));
evalcond[5]=((((-1.0)*gconst1*r01*x9007))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9010))+((r00*x9008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9011=((-1.0)*r20);
IkReal x9012=x8499;
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9011),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
IkReal x9013=((-1.0)*(x9014.value));
sj5=gconst1;
cj5=gconst2;
j5=x9013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9013;
IkReal gconst1=(r21*x9012);
IkReal gconst2=(x9011*x9012);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9015=((-1.0)*r20);
IkReal x9016=x8499;
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9015),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
IkReal x9017=((-1.0)*(x9018.value));
sj5=gconst1;
cj5=gconst2;
j5=x9017;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9017;
IkReal gconst1=(r21*x9016);
IkReal gconst2=(x9015*x9016);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9019=((-1.0)*r20);
IkReal x9020=x8499;
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9019),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
IkReal x9021=((-1.0)*(x9022.value));
sj5=gconst1;
cj5=gconst2;
j5=x9021;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9021;
IkReal gconst1=(r21*x9020);
IkReal gconst2=(x9019*x9020);
IkReal x9023=r22*r22;
IkReal x9024=(cj1*r12*sj2);
IkReal x9025=(cj2*r12*sj1);
CheckValue<IkReal> x9029=IKPowWithIntegerCheck(((-1.0)+x9023),-1);
if(!x9029.valid){
continue;
}
IkReal x9026=x9029.value;
if((((1.0)+(((-1.0)*x9023)))) < -0.00001)
continue;
IkReal x9027=IKsqrt(((1.0)+(((-1.0)*x9023))));
IkReal x9028=((1.0)*r22*x9026*x9027);
j4eval[0]=((IKabs(((((-1.0)*x9024*x9028))+(((-1.0)*x9025*x9028)))))+(IKabs((x9025+x9024))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9030=((1.0)*gconst1);
IkReal x9031=(cj2*sj1);
IkReal x9032=(gconst2*r10);
IkReal x9033=(cj1*sj2);
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9030)))),-1);
if(!x9034.valid){
continue;
}
CheckValue<IkReal> x9035 = IKatan2WithCheck(IkReal((((x9031*x9032))+(((-1.0)*r11*x9030*x9033))+(((-1.0)*r11*x9030*x9031))+((x9032*x9033)))),IkReal((((r12*x9033))+((r12*x9031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9034.value)))+(x9035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9036=IKsin(j4);
IkReal x9037=IKcos(j4);
IkReal x9038=((1.0)*x9037);
IkReal x9039=(gconst2*x9037);
IkReal x9040=(gconst1*x9036);
IkReal x9041=((1.0)*x9036);
evalcond[0]=((((-1.0)*r22*x9038))+((r21*x9040))+(((-1.0)*gconst2*r20*x9041)));
evalcond[1]=(((r01*x9040))+(((-1.0)*gconst2*r00*x9041))+(((-1.0)*r02*x9038)));
evalcond[2]=((((-1.0)*gconst1*r11*x9038))+((r10*x9039))+(((-1.0)*r12*x9041)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9038))+((r11*x9040))+(((-1.0)*gconst2*r10*x9041)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9041))+(((-1.0)*gconst1*r21*x9038))+((r20*x9039)));
evalcond[5]=(((r00*x9039))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9038))+(((-1.0)*r02*x9041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9042=(gconst1*r11);
IkReal x9043=(gconst2*r10);
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal(((((-1.0)*x9042))+x9043)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
CheckValue<IkReal> x9045=IKPowWithIntegerCheck(IKsign(((x9043*x9043)+(((-2.0)*x9042*x9043))+(r12*r12)+(x9042*x9042))),-1);
if(!x9045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9044.value)+(((1.5707963267949)*(x9045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9046=IKsin(j4);
IkReal x9047=IKcos(j4);
IkReal x9048=((1.0)*x9047);
IkReal x9049=(gconst2*x9047);
IkReal x9050=(gconst1*x9046);
IkReal x9051=((1.0)*x9046);
evalcond[0]=((((-1.0)*r22*x9048))+(((-1.0)*gconst2*r20*x9051))+((r21*x9050)));
evalcond[1]=(((r01*x9050))+(((-1.0)*gconst2*r00*x9051))+(((-1.0)*r02*x9048)));
evalcond[2]=((((-1.0)*gconst1*r11*x9048))+(((-1.0)*r12*x9051))+((r10*x9049)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9051))+((r11*x9050))+(((-1.0)*r12*x9048)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9048))+((cj1*sj2))+((r20*x9049))+(((-1.0)*r22*x9051)));
evalcond[5]=((((-1.0)*gconst1*r01*x9048))+(((-1.0)*r02*x9051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9052=((1.0)*gconst2);
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
CheckValue<IkReal> x9054=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9052)))),-1);
if(!x9054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9053.value)+(((1.5707963267949)*(x9054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9055=IKsin(j4);
IkReal x9056=IKcos(j4);
IkReal x9057=((1.0)*x9056);
IkReal x9058=(gconst2*x9056);
IkReal x9059=(gconst1*x9055);
IkReal x9060=((1.0)*x9055);
evalcond[0]=((((-1.0)*gconst2*r20*x9060))+(((-1.0)*r22*x9057))+((r21*x9059)));
evalcond[1]=((((-1.0)*r02*x9057))+(((-1.0)*gconst2*r00*x9060))+((r01*x9059)));
evalcond[2]=((((-1.0)*gconst1*r11*x9057))+((r10*x9058))+(((-1.0)*r12*x9060)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9057))+((r11*x9059))+(((-1.0)*gconst2*r10*x9060)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9057))+((cj1*sj2))+((r20*x9058))+(((-1.0)*r22*x9060)));
evalcond[5]=((((-1.0)*gconst1*r01*x9057))+((r00*x9058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9061=((-1.0)*r20);
IkReal x9062=((-1.0)*r21);
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal(x9062),IkReal(x9061),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
IkReal x9063=((-1.0)*(x9064.value));
sj5=gconst1;
cj5=gconst2;
j5=x9063;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9061);
rxp0_2=(py*r00);
rxp1_0=(py*x9062);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9063;
IkReal gconst1=r21;
IkReal gconst2=x9061;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9065=((-1.0)*r20);
IkReal x9066=((-1.0)*r21);
CheckValue<IkReal> x9068 = IKatan2WithCheck(IkReal(x9066),IkReal(x9065),IKFAST_ATAN2_MAGTHRESH);
if(!x9068.valid){
continue;
}
IkReal x9067=((-1.0)*(x9068.value));
sj5=gconst1;
cj5=gconst2;
j5=x9067;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9065);
rxp0_2=(py*r00);
rxp1_0=(py*x9066);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9067;
IkReal gconst1=r21;
IkReal gconst2=x9065;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9069=((-1.0)*r20);
IkReal x9070=((-1.0)*r21);
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(x9070),IkReal(x9069),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
IkReal x9071=((-1.0)*(x9072.value));
sj5=gconst1;
cj5=gconst2;
j5=x9071;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9069);
rxp0_2=(py*r00);
rxp1_0=(py*x9070);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9071;
IkReal gconst1=r21;
IkReal gconst2=x9069;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9075=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9075.valid){
continue;
}
IkReal x9073=x9075.value;
IkReal x9074=(cj0*x9073);
cj4array[0]=((((-1.0)*cj1*cj2*x9074))+((sj1*sj2*x9074)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9076=IKsin(j4);
IkReal x9077=IKcos(j4);
IkReal x9078=(gconst2*r20);
IkReal x9079=(gconst1*x9076);
IkReal x9080=((1.0)*x9077);
IkReal x9081=((1.0)*x9076);
evalcond[0]=((-1.0)*r12*x9076);
evalcond[1]=((((-1.0)*r12*x9080))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9079))+(((-1.0)*x9078*x9081)));
evalcond[3]=((((-1.0)*gconst2*r00*x9081))+((r01*x9079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9080))+((x9077*x9078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9084=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9084.valid){
continue;
}
IkReal x9082=x9084.value;
IkReal x9083=((1.0)*x9082);
cj4array[0]=((((-1.0)*cj1*sj2*x9083))+(((-1.0)*cj2*sj1*x9083)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9085=IKsin(j4);
IkReal x9086=IKcos(j4);
IkReal x9087=(gconst2*r00);
IkReal x9088=(gconst1*r01);
IkReal x9089=((1.0)*cj0);
IkReal x9090=((1.0)*x9086);
IkReal x9091=((1.0)*x9085);
evalcond[0]=((-1.0)*r12*x9085);
evalcond[1]=((((-1.0)*x9089))+(((-1.0)*r12*x9090)));
evalcond[2]=((((-1.0)*gconst2*r20*x9091))+((gconst1*r21*x9085)));
evalcond[3]=(((x9085*x9088))+(((-1.0)*x9087*x9091)));
evalcond[4]=((((-1.0)*sj1*sj2*x9089))+((x9086*x9087))+((cj0*cj1*cj2))+(((-1.0)*x9088*x9090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9092=IKPowWithIntegerCheck(r12,-1);
if(!x9092.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9092.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9093=IKsin(j4);
IkReal x9094=IKcos(j4);
IkReal x9095=(gconst2*x9094);
IkReal x9096=(gconst1*x9093);
IkReal x9097=((1.0)*gconst1*x9094);
IkReal x9098=((1.0)*gconst2*x9093);
evalcond[0]=((-1.0)*r12*x9093);
evalcond[1]=((((-1.0)*r20*x9098))+((r21*x9096)));
evalcond[2]=((((-1.0)*r00*x9098))+((r01*x9096)));
evalcond[3]=(((cj2*sj1))+((r20*x9095))+((cj1*sj2))+(((-1.0)*r21*x9097)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*r01*x9097))+((r00*x9095))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9099=(cj2*sj1);
IkReal x9100=(cj1*sj2);
IkReal x9101=(gconst1*r21);
IkReal x9102=((1.0)*gconst2*r20);
CheckValue<IkReal> x9103=IKPowWithIntegerCheck(IKsign(((x9101*x9101)+(r22*r22)+(((-2.0)*gconst2*r20*x9101))+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9103.valid){
continue;
}
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal((((r22*x9100))+((r22*x9099)))),IkReal(((((-1.0)*x9100*x9102))+(((-1.0)*x9099*x9102))+((x9100*x9101))+((x9099*x9101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9103.value)))+(x9104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9105=IKsin(j4);
IkReal x9106=IKcos(j4);
IkReal x9107=(cj1*cj2);
IkReal x9108=(gconst1*r11);
IkReal x9109=(gconst1*r21);
IkReal x9110=(gconst1*r01);
IkReal x9111=((1.0)*cj0);
IkReal x9112=(sj1*sj2);
IkReal x9113=((1.0)*x9106);
IkReal x9114=(gconst2*x9106);
IkReal x9115=((1.0)*x9105);
evalcond[0]=((((-1.0)*gconst2*r20*x9115))+((x9105*x9109))+(((-1.0)*r22*x9113)));
evalcond[1]=(sj0+((x9105*x9110))+(((-1.0)*gconst2*r00*x9115))+(((-1.0)*r02*x9113)));
evalcond[2]=((((-1.0)*x9111))+(((-1.0)*gconst2*r10*x9115))+((x9105*x9108))+(((-1.0)*r12*x9113)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9109*x9113))+((r20*x9114))+(((-1.0)*r22*x9115)));
evalcond[4]=((((-1.0)*x9111*x9112))+(((-1.0)*x9110*x9113))+((cj0*x9107))+((r00*x9114))+(((-1.0)*r02*x9115)));
evalcond[5]=(((sj0*x9107))+(((-1.0)*sj0*x9112))+(((-1.0)*x9108*x9113))+((r10*x9114))+(((-1.0)*r12*x9115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9116=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9116.valid){
continue;
}
CheckValue<IkReal> x9117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9116.value)))+(x9117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9118=IKsin(j4);
IkReal x9119=IKcos(j4);
IkReal x9120=(cj1*cj2);
IkReal x9121=(gconst1*r11);
IkReal x9122=(gconst1*r21);
IkReal x9123=(gconst1*r01);
IkReal x9124=((1.0)*cj0);
IkReal x9125=(sj1*sj2);
IkReal x9126=((1.0)*x9119);
IkReal x9127=(gconst2*x9119);
IkReal x9128=((1.0)*x9118);
evalcond[0]=((((-1.0)*gconst2*r20*x9128))+(((-1.0)*r22*x9126))+((x9118*x9122)));
evalcond[1]=((((-1.0)*gconst2*r00*x9128))+sj0+(((-1.0)*r02*x9126))+((x9118*x9123)));
evalcond[2]=((((-1.0)*r12*x9126))+(((-1.0)*x9124))+((x9118*x9121))+(((-1.0)*gconst2*r10*x9128)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9128))+((r20*x9127))+(((-1.0)*x9122*x9126)));
evalcond[4]=((((-1.0)*x9124*x9125))+(((-1.0)*r02*x9128))+((cj0*x9120))+((r00*x9127))+(((-1.0)*x9123*x9126)));
evalcond[5]=(((r10*x9127))+(((-1.0)*r12*x9128))+(((-1.0)*x9121*x9126))+(((-1.0)*sj0*x9125))+((sj0*x9120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9129=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9129.valid){
continue;
}
CheckValue<IkReal> x9130 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9129.value)))+(x9130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9131=IKsin(j4);
IkReal x9132=IKcos(j4);
IkReal x9133=(cj1*cj2);
IkReal x9134=(gconst1*r11);
IkReal x9135=(gconst1*r21);
IkReal x9136=(gconst1*r01);
IkReal x9137=((1.0)*cj0);
IkReal x9138=(sj1*sj2);
IkReal x9139=((1.0)*x9132);
IkReal x9140=(gconst2*x9132);
IkReal x9141=((1.0)*x9131);
evalcond[0]=((((-1.0)*gconst2*r20*x9141))+((x9131*x9135))+(((-1.0)*r22*x9139)));
evalcond[1]=((((-1.0)*gconst2*r00*x9141))+((x9131*x9136))+sj0+(((-1.0)*r02*x9139)));
evalcond[2]=(((x9131*x9134))+(((-1.0)*gconst2*r10*x9141))+(((-1.0)*r12*x9139))+(((-1.0)*x9137)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9140))+(((-1.0)*r22*x9141))+(((-1.0)*x9135*x9139)));
evalcond[4]=((((-1.0)*x9137*x9138))+((r00*x9140))+(((-1.0)*x9136*x9139))+((cj0*x9133))+(((-1.0)*r02*x9141)));
evalcond[5]=((((-1.0)*sj0*x9138))+((r10*x9140))+((sj0*x9133))+(((-1.0)*x9134*x9139))+(((-1.0)*r12*x9141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9142=((-1.0)*r20);
IkReal x9143=x8499;
CheckValue<IkReal> x9145 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9142),IKFAST_ATAN2_MAGTHRESH);
if(!x9145.valid){
continue;
}
IkReal x9144=((-1.0)*(x9145.value));
sj5=gconst1;
cj5=gconst2;
j5=x9144;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9144;
IkReal gconst1=(r21*x9143);
IkReal gconst2=(x9142*x9143);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9146=((-1.0)*r20);
IkReal x9147=x8499;
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9146),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
IkReal x9148=((-1.0)*(x9149.value));
sj5=gconst1;
cj5=gconst2;
j5=x9148;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9148;
IkReal gconst1=(r21*x9147);
IkReal gconst2=(x9146*x9147);
CheckValue<IkReal> x9157=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9157.valid){
continue;
}
IkReal x9150=x9157.value;
IkReal x9151=(sj3*x9150);
IkReal x9152=(r11*x9151);
IkReal x9153=(r00*x9151);
IkReal x9154=(r01*x9151);
IkReal x9155=(r10*x9151);
IkReal x9156=(r20*r21*x9151);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9153*(r20*r20)))+((r01*x9152*(r21*r21)))+((r10*r20*r21*x9154))+((r00*r20*r21*x9152))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9158=gconst1*gconst1;
IkReal x9159=gconst2*gconst2;
IkReal x9160=((1.0)*cj3);
IkReal x9161=(gconst2*r10);
IkReal x9162=(r01*sj3);
IkReal x9163=(gconst1*r00*sj3);
IkReal x9164=(gconst1*gconst2*r11);
IkReal x9165=(r10*x9159);
IkReal x9166=(r11*x9158);
CheckValue<IkReal> x9167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9160*x9166))+(((-1.0)*r00*x9160*x9165))+(((-1.0)*r02*r12*x9160))+((cj3*gconst1*r01*x9161))+((cj3*r00*x9164)))),-1);
if(!x9167.valid){
continue;
}
CheckValue<IkReal> x9168 = IKatan2WithCheck(IkReal((((gconst2*r12*x9162))+((r12*x9163)))),IkReal((((r00*sj3*x9166))+(((-1.0)*x9162*x9165))+((x9162*x9164))+(((-1.0)*x9161*x9163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9167.value)))+(x9168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9169=IKsin(j4);
IkReal x9170=IKcos(j4);
IkReal x9171=(cj2*sj1);
IkReal x9172=(cj1*sj2);
IkReal x9173=(gconst1*sj3);
IkReal x9174=(cj3*gconst1);
IkReal x9175=(sj1*sj2);
IkReal x9176=(cj3*gconst2);
IkReal x9177=(cj1*cj2);
IkReal x9178=(gconst2*sj3);
IkReal x9179=((1.0)*x9170);
IkReal x9180=((1.0)*x9169);
IkReal x9181=(gconst1*x9169);
IkReal x9182=(cj3*x9169);
IkReal x9183=(x9172+x9171);
IkReal x9184=(x9170*x9178);
evalcond[0]=((((-1.0)*gconst2*r20*x9180))+(((-1.0)*r22*x9179))+((r21*x9181)));
evalcond[1]=(((r11*x9181))+(((-1.0)*gconst2*r10*x9180))+(((-1.0)*r12*x9179)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9180))+(((-1.0)*r02*x9179))+((r01*x9181)));
evalcond[3]=(((r02*x9182))+((r00*x9173))+(((-1.0)*r00*x9176*x9179))+((r01*x9178))+((r01*x9170*x9174)));
evalcond[4]=(((r00*x9184))+(((-1.0)*r01*x9173*x9179))+((r00*x9174))+((r01*x9176))+(((-1.0)*r02*sj3*x9180)));
evalcond[5]=(x9183+((r20*x9173))+((r21*x9178))+((r21*x9170*x9174))+((r22*x9182))+(((-1.0)*r20*x9176*x9179)));
evalcond[6]=(((r10*x9174))+x9183+((r10*x9184))+(((-1.0)*r12*sj3*x9180))+(((-1.0)*r11*x9173*x9179))+((r11*x9176)));
evalcond[7]=(((r10*x9173))+(((-1.0)*x9175))+((r12*x9182))+((r11*x9170*x9174))+x9177+(((-1.0)*r10*x9176*x9179))+((r11*x9178)));
evalcond[8]=((((-1.0)*x9177))+(((-1.0)*r22*sj3*x9180))+x9175+((r20*x9184))+((r20*x9174))+((r21*x9176))+(((-1.0)*r21*x9173*x9179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9185=gconst2*gconst2;
IkReal x9186=gconst1*gconst1;
IkReal x9187=(gconst1*r00);
IkReal x9188=(r11*sj3);
IkReal x9189=((1.0)*gconst2);
IkReal x9190=(cj3*r12);
IkReal x9191=(cj3*r11);
IkReal x9192=(gconst2*r01);
IkReal x9193=(cj3*r10);
IkReal x9194=(r10*sj3);
CheckValue<IkReal> x9195 = IKatan2WithCheck(IkReal((((x9187*x9190))+((x9190*x9192)))),IkReal(((((-1.0)*r01*x9185*x9193))+((r00*x9186*x9191))+(((-1.0)*x9187*x9189*x9193))+((gconst1*x9191*x9192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9195.valid){
continue;
}
CheckValue<IkReal> x9196=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9185*x9194))+((r01*x9186*x9188))+(((-1.0)*gconst1*r01*x9189*x9194))+(((-1.0)*x9187*x9188*x9189)))),-1);
if(!x9196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9195.value)+(((1.5707963267949)*(x9196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9197=IKsin(j4);
IkReal x9198=IKcos(j4);
IkReal x9199=(cj2*sj1);
IkReal x9200=(cj1*sj2);
IkReal x9201=(gconst1*sj3);
IkReal x9202=(cj3*gconst1);
IkReal x9203=(sj1*sj2);
IkReal x9204=(cj3*gconst2);
IkReal x9205=(cj1*cj2);
IkReal x9206=(gconst2*sj3);
IkReal x9207=((1.0)*x9198);
IkReal x9208=((1.0)*x9197);
IkReal x9209=(gconst1*x9197);
IkReal x9210=(cj3*x9197);
IkReal x9211=(x9200+x9199);
IkReal x9212=(x9198*x9206);
evalcond[0]=((((-1.0)*gconst2*r20*x9208))+((r21*x9209))+(((-1.0)*r22*x9207)));
evalcond[1]=(((r11*x9209))+(((-1.0)*r12*x9207))+(((-1.0)*gconst2*r10*x9208)));
evalcond[2]=((1.0)+((r01*x9209))+(((-1.0)*r02*x9207))+(((-1.0)*gconst2*r00*x9208)));
evalcond[3]=(((r00*x9201))+((r01*x9206))+(((-1.0)*r00*x9204*x9207))+((r01*x9198*x9202))+((r02*x9210)));
evalcond[4]=(((r00*x9212))+((r00*x9202))+(((-1.0)*r01*x9201*x9207))+((r01*x9204))+(((-1.0)*r02*sj3*x9208)));
evalcond[5]=(((r20*x9201))+x9211+((r21*x9206))+((r22*x9210))+((r21*x9198*x9202))+(((-1.0)*r20*x9204*x9207)));
evalcond[6]=(((r10*x9212))+((r10*x9202))+x9211+((r11*x9204))+(((-1.0)*r12*sj3*x9208))+(((-1.0)*r11*x9201*x9207)));
evalcond[7]=(((r10*x9201))+(((-1.0)*r10*x9204*x9207))+x9205+((r11*x9206))+((r12*x9210))+((r11*x9198*x9202))+(((-1.0)*x9203)));
evalcond[8]=(((r20*x9202))+((r20*x9212))+x9203+(((-1.0)*r22*sj3*x9208))+((r21*x9204))+(((-1.0)*r21*x9201*x9207))+(((-1.0)*x9205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9213 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9213.valid){
continue;
}
CheckValue<IkReal> x9214=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9213.value)+(((1.5707963267949)*(x9214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9215=IKsin(j4);
IkReal x9216=IKcos(j4);
IkReal x9217=(cj2*sj1);
IkReal x9218=(cj1*sj2);
IkReal x9219=(gconst1*sj3);
IkReal x9220=(cj3*gconst1);
IkReal x9221=(sj1*sj2);
IkReal x9222=(cj3*gconst2);
IkReal x9223=(cj1*cj2);
IkReal x9224=(gconst2*sj3);
IkReal x9225=((1.0)*x9216);
IkReal x9226=((1.0)*x9215);
IkReal x9227=(gconst1*x9215);
IkReal x9228=(cj3*x9215);
IkReal x9229=(x9218+x9217);
IkReal x9230=(x9216*x9224);
evalcond[0]=((((-1.0)*gconst2*r20*x9226))+((r21*x9227))+(((-1.0)*r22*x9225)));
evalcond[1]=((((-1.0)*gconst2*r10*x9226))+((r11*x9227))+(((-1.0)*r12*x9225)));
evalcond[2]=((1.0)+((r01*x9227))+(((-1.0)*gconst2*r00*x9226))+(((-1.0)*r02*x9225)));
evalcond[3]=(((r01*x9224))+((r00*x9219))+(((-1.0)*r00*x9222*x9225))+((r02*x9228))+((r01*x9216*x9220)));
evalcond[4]=(((r00*x9220))+((r01*x9222))+(((-1.0)*r01*x9219*x9225))+(((-1.0)*r02*sj3*x9226))+((r00*x9230)));
evalcond[5]=(((r20*x9219))+(((-1.0)*r20*x9222*x9225))+x9229+((r21*x9224))+((r22*x9228))+((r21*x9216*x9220)));
evalcond[6]=((((-1.0)*r12*sj3*x9226))+x9229+(((-1.0)*r11*x9219*x9225))+((r11*x9222))+((r10*x9230))+((r10*x9220)));
evalcond[7]=(((r10*x9219))+x9223+((r12*x9228))+((r11*x9224))+(((-1.0)*x9221))+(((-1.0)*r10*x9222*x9225))+((r11*x9216*x9220)));
evalcond[8]=((((-1.0)*r21*x9219*x9225))+((r20*x9220))+(((-1.0)*r22*sj3*x9226))+x9221+((r21*x9222))+((r20*x9230))+(((-1.0)*x9223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9231=((-1.0)*r20);
IkReal x9232=x8499;
CheckValue<IkReal> x9234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9231),IKFAST_ATAN2_MAGTHRESH);
if(!x9234.valid){
continue;
}
IkReal x9233=((-1.0)*(x9234.value));
sj5=gconst1;
cj5=gconst2;
j5=x9233;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9233;
IkReal gconst1=(r21*x9232);
IkReal gconst2=(x9231*x9232);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9235=((-1.0)*r20);
IkReal x9236=x8499;
CheckValue<IkReal> x9238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9235),IKFAST_ATAN2_MAGTHRESH);
if(!x9238.valid){
continue;
}
IkReal x9237=((-1.0)*(x9238.value));
sj5=gconst1;
cj5=gconst2;
j5=x9237;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9237;
IkReal gconst1=(r21*x9236);
IkReal gconst2=(x9235*x9236);
CheckValue<IkReal> x9246=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9246.valid){
continue;
}
IkReal x9239=x9246.value;
IkReal x9240=(sj3*x9239);
IkReal x9241=(r11*x9240);
IkReal x9242=(r00*x9240);
IkReal x9243=(r01*x9240);
IkReal x9244=(r10*x9240);
IkReal x9245=(r20*r21*x9240);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9242*(r20*r20)))+((r10*r20*r21*x9243))+((r00*r20*r21*x9241))+((r01*x9241*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9247=gconst1*gconst1;
IkReal x9248=gconst2*gconst2;
IkReal x9249=((1.0)*cj3);
IkReal x9250=(gconst2*r10);
IkReal x9251=(r01*sj3);
IkReal x9252=(gconst1*r00*sj3);
IkReal x9253=(gconst1*gconst2*r11);
IkReal x9254=(r10*x9248);
IkReal x9255=(r11*x9247);
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal((((gconst2*r12*x9251))+((r12*x9252)))),IkReal((((x9251*x9253))+((r00*sj3*x9255))+(((-1.0)*x9250*x9252))+(((-1.0)*x9251*x9254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
CheckValue<IkReal> x9257=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9249*x9254))+((cj3*gconst1*r01*x9250))+(((-1.0)*r01*x9249*x9255))+((cj3*r00*x9253))+(((-1.0)*r02*r12*x9249)))),-1);
if(!x9257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9256.value)+(((1.5707963267949)*(x9257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9258=IKsin(j4);
IkReal x9259=IKcos(j4);
IkReal x9260=(sj1*sj2);
IkReal x9261=(gconst1*sj3);
IkReal x9262=(cj3*gconst1);
IkReal x9263=(cj3*gconst2);
IkReal x9264=((1.0)*cj2);
IkReal x9265=(cj1*sj2);
IkReal x9266=(gconst2*sj3);
IkReal x9267=(cj1*x9264);
IkReal x9268=((1.0)*x9259);
IkReal x9269=((1.0)*x9258);
IkReal x9270=(gconst1*x9258);
IkReal x9271=(cj3*x9258);
IkReal x9272=(x9259*x9266);
evalcond[0]=((((-1.0)*gconst2*r20*x9269))+(((-1.0)*r22*x9268))+((r21*x9270)));
evalcond[1]=((((-1.0)*gconst2*r10*x9269))+((r11*x9270))+(((-1.0)*r12*x9268)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9269))+((r01*x9270))+(((-1.0)*r02*x9268)));
evalcond[3]=(((r02*x9271))+((r01*x9259*x9262))+((r01*x9266))+((r00*x9261))+(((-1.0)*r00*x9263*x9268)));
evalcond[4]=((((-1.0)*r02*sj3*x9269))+((r00*x9272))+(((-1.0)*r01*x9261*x9268))+((r01*x9263))+((r00*x9262)));
evalcond[5]=(((cj2*sj1))+x9265+((r20*x9261))+((r21*x9259*x9262))+((r21*x9266))+(((-1.0)*r20*x9263*x9268))+((r22*x9271)));
evalcond[6]=(((r12*x9271))+(((-1.0)*x9267))+x9260+(((-1.0)*r10*x9263*x9268))+((r10*x9261))+((r11*x9259*x9262))+((r11*x9266)));
evalcond[7]=((((-1.0)*x9267))+(((-1.0)*r22*sj3*x9269))+x9260+((r20*x9262))+(((-1.0)*r21*x9261*x9268))+((r20*x9272))+((r21*x9263)));
evalcond[8]=((((-1.0)*r11*x9261*x9268))+((r10*x9272))+(((-1.0)*r12*sj3*x9269))+((r10*x9262))+(((-1.0)*x9265))+(((-1.0)*sj1*x9264))+((r11*x9263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9273=gconst2*gconst2;
IkReal x9274=gconst1*gconst1;
IkReal x9275=(gconst1*r00);
IkReal x9276=(r11*sj3);
IkReal x9277=((1.0)*gconst2);
IkReal x9278=(cj3*r12);
IkReal x9279=(cj3*r11);
IkReal x9280=(gconst2*r01);
IkReal x9281=(cj3*r10);
IkReal x9282=(r10*sj3);
CheckValue<IkReal> x9283 = IKatan2WithCheck(IkReal((((x9275*x9278))+((x9278*x9280)))),IkReal(((((-1.0)*x9275*x9277*x9281))+((r00*x9274*x9279))+(((-1.0)*r01*x9273*x9281))+((gconst1*x9279*x9280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9283.valid){
continue;
}
CheckValue<IkReal> x9284=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9277*x9282))+((r01*x9274*x9276))+(((-1.0)*x9275*x9276*x9277))+((r00*x9273*x9282)))),-1);
if(!x9284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9283.value)+(((1.5707963267949)*(x9284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9285=IKsin(j4);
IkReal x9286=IKcos(j4);
IkReal x9287=(sj1*sj2);
IkReal x9288=(gconst1*sj3);
IkReal x9289=(cj3*gconst1);
IkReal x9290=(cj3*gconst2);
IkReal x9291=((1.0)*cj2);
IkReal x9292=(cj1*sj2);
IkReal x9293=(gconst2*sj3);
IkReal x9294=(cj1*x9291);
IkReal x9295=((1.0)*x9286);
IkReal x9296=((1.0)*x9285);
IkReal x9297=(gconst1*x9285);
IkReal x9298=(cj3*x9285);
IkReal x9299=(x9286*x9293);
evalcond[0]=((((-1.0)*gconst2*r20*x9296))+(((-1.0)*r22*x9295))+((r21*x9297)));
evalcond[1]=(((r11*x9297))+(((-1.0)*gconst2*r10*x9296))+(((-1.0)*r12*x9295)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9296))+((r01*x9297))+(((-1.0)*r02*x9295)));
evalcond[3]=(((r02*x9298))+((r00*x9288))+((r01*x9293))+(((-1.0)*r00*x9290*x9295))+((r01*x9286*x9289)));
evalcond[4]=((((-1.0)*r02*sj3*x9296))+(((-1.0)*r01*x9288*x9295))+((r00*x9299))+((r00*x9289))+((r01*x9290)));
evalcond[5]=(((cj2*sj1))+((r22*x9298))+x9292+(((-1.0)*r20*x9290*x9295))+((r20*x9288))+((r21*x9286*x9289))+((r21*x9293)));
evalcond[6]=(((r11*x9293))+x9287+(((-1.0)*x9294))+((r10*x9288))+((r11*x9286*x9289))+(((-1.0)*r10*x9290*x9295))+((r12*x9298)));
evalcond[7]=((((-1.0)*r22*sj3*x9296))+x9287+(((-1.0)*x9294))+(((-1.0)*r21*x9288*x9295))+((r20*x9289))+((r20*x9299))+((r21*x9290)));
evalcond[8]=(((r11*x9290))+(((-1.0)*sj1*x9291))+(((-1.0)*r12*sj3*x9296))+((r10*x9299))+((r10*x9289))+(((-1.0)*x9292))+(((-1.0)*r11*x9288*x9295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9300=((1.0)*gconst2);
CheckValue<IkReal> x9301=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9300)))),-1);
if(!x9301.valid){
continue;
}
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9300))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9301.value)))+(x9302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9303=IKsin(j4);
IkReal x9304=IKcos(j4);
IkReal x9305=(sj1*sj2);
IkReal x9306=(gconst1*sj3);
IkReal x9307=(cj3*gconst1);
IkReal x9308=(cj3*gconst2);
IkReal x9309=((1.0)*cj2);
IkReal x9310=(cj1*sj2);
IkReal x9311=(gconst2*sj3);
IkReal x9312=(cj1*x9309);
IkReal x9313=((1.0)*x9304);
IkReal x9314=((1.0)*x9303);
IkReal x9315=(gconst1*x9303);
IkReal x9316=(cj3*x9303);
IkReal x9317=(x9304*x9311);
evalcond[0]=(((r21*x9315))+(((-1.0)*r22*x9313))+(((-1.0)*gconst2*r20*x9314)));
evalcond[1]=((((-1.0)*gconst2*r10*x9314))+((r11*x9315))+(((-1.0)*r12*x9313)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9314))+((r01*x9315))+(((-1.0)*r02*x9313)));
evalcond[3]=(((r02*x9316))+((r01*x9304*x9307))+((r01*x9311))+((r00*x9306))+(((-1.0)*r00*x9308*x9313)));
evalcond[4]=((((-1.0)*r02*sj3*x9314))+(((-1.0)*r01*x9306*x9313))+((r01*x9308))+((r00*x9317))+((r00*x9307)));
evalcond[5]=(((cj2*sj1))+((r22*x9316))+x9310+((r21*x9311))+(((-1.0)*r20*x9308*x9313))+((r21*x9304*x9307))+((r20*x9306)));
evalcond[6]=(x9305+(((-1.0)*r10*x9308*x9313))+(((-1.0)*x9312))+((r12*x9316))+((r11*x9311))+((r11*x9304*x9307))+((r10*x9306)));
evalcond[7]=(x9305+((r21*x9308))+(((-1.0)*x9312))+((r20*x9317))+((r20*x9307))+(((-1.0)*r22*sj3*x9314))+(((-1.0)*r21*x9306*x9313)));
evalcond[8]=((((-1.0)*r11*x9306*x9313))+(((-1.0)*sj1*x9309))+(((-1.0)*r12*sj3*x9314))+(((-1.0)*x9310))+((r11*x9308))+((r10*x9307))+((r10*x9317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9318=((-1.0)*r20);
IkReal x9319=x8499;
CheckValue<IkReal> x9321 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9318),IKFAST_ATAN2_MAGTHRESH);
if(!x9321.valid){
continue;
}
IkReal x9320=((-1.0)*(x9321.value));
sj5=gconst1;
cj5=gconst2;
j5=x9320;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9320;
IkReal gconst1=(r21*x9319);
IkReal gconst2=(x9318*x9319);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9322=((-1.0)*r20);
IkReal x9323=x8499;
CheckValue<IkReal> x9325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9322),IKFAST_ATAN2_MAGTHRESH);
if(!x9325.valid){
continue;
}
IkReal x9324=((-1.0)*(x9325.value));
sj5=gconst1;
cj5=gconst2;
j5=x9324;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9324;
IkReal gconst1=(r21*x9323);
IkReal gconst2=(x9322*x9323);
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9333.valid){
continue;
}
IkReal x9326=x9333.value;
IkReal x9327=(sj3*x9326);
IkReal x9328=(r11*x9327);
IkReal x9329=(r00*x9327);
IkReal x9330=(r01*x9327);
IkReal x9331=(r10*x9327);
IkReal x9332=(r20*r21*x9327);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9328))+((r10*x9329*(r20*r20)))+((r10*r20*r21*x9330))+((r01*x9328*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9334=gconst2*gconst2;
IkReal x9335=gconst1*gconst1;
IkReal x9336=((1.0)*cj3);
IkReal x9337=((1.0)*sj3);
IkReal x9338=(r11*sj3);
IkReal x9339=(r10*sj3);
IkReal x9340=(gconst1*gconst2*r00);
IkReal x9341=(gconst1*gconst2*r01);
IkReal x9342=(r00*x9334);
IkReal x9343=(r01*x9335);
CheckValue<IkReal> x9344 = IKatan2WithCheck(IkReal((((gconst2*r02*x9338))+((gconst1*r02*x9339)))),IkReal((((x9339*x9343))+((x9338*x9341))+(((-1.0)*r11*x9337*x9342))+(((-1.0)*r10*x9337*x9340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9344.valid){
continue;
}
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign((((cj3*r11*x9340))+(((-1.0)*r02*r12*x9336))+((cj3*r10*x9341))+(((-1.0)*r10*x9336*x9342))+(((-1.0)*r11*x9336*x9343)))),-1);
if(!x9345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9344.value)+(((1.5707963267949)*(x9345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9346=IKsin(j4);
IkReal x9347=IKcos(j4);
IkReal x9348=(cj2*sj1);
IkReal x9349=(cj1*sj2);
IkReal x9350=(gconst1*sj3);
IkReal x9351=(cj3*gconst1);
IkReal x9352=(sj1*sj2);
IkReal x9353=(cj3*gconst2);
IkReal x9354=(cj1*cj2);
IkReal x9355=(gconst2*sj3);
IkReal x9356=((1.0)*x9347);
IkReal x9357=((1.0)*x9346);
IkReal x9358=(gconst1*x9346);
IkReal x9359=(cj3*x9346);
IkReal x9360=(x9348+x9349);
IkReal x9361=(x9347*x9355);
evalcond[0]=((((-1.0)*r22*x9356))+(((-1.0)*gconst2*r20*x9357))+((r21*x9358)));
evalcond[1]=((((-1.0)*r02*x9356))+((r01*x9358))+(((-1.0)*gconst2*r00*x9357)));
evalcond[2]=((-1.0)+((r11*x9358))+(((-1.0)*r12*x9356))+(((-1.0)*gconst2*r10*x9357)));
evalcond[3]=(((r11*x9355))+((r11*x9347*x9351))+((r10*x9350))+(((-1.0)*r10*x9353*x9356))+((r12*x9359)));
evalcond[4]=(((r11*x9353))+(((-1.0)*r12*sj3*x9357))+(((-1.0)*r11*x9350*x9356))+((r10*x9351))+((r10*x9361)));
evalcond[5]=(x9360+(((-1.0)*r20*x9353*x9356))+((r21*x9347*x9351))+((r20*x9350))+((r21*x9355))+((r22*x9359)));
evalcond[6]=(x9360+((r01*x9353))+((r00*x9351))+(((-1.0)*r01*x9350*x9356))+(((-1.0)*r02*sj3*x9357))+((r00*x9361)));
evalcond[7]=(((r01*x9347*x9351))+x9354+((r01*x9355))+((r00*x9350))+(((-1.0)*x9352))+((r02*x9359))+(((-1.0)*r00*x9353*x9356)));
evalcond[8]=((((-1.0)*r21*x9350*x9356))+x9352+(((-1.0)*r22*sj3*x9357))+(((-1.0)*x9354))+((r20*x9351))+((r21*x9353))+((r20*x9361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9362=gconst2*gconst2;
IkReal x9363=gconst1*gconst1;
IkReal x9364=(gconst2*r11);
IkReal x9365=(cj3*r02);
IkReal x9366=(gconst1*r01);
IkReal x9367=(cj3*r10);
IkReal x9368=(r10*sj3);
IkReal x9369=((1.0)*gconst1*r00);
IkReal x9370=(r01*x9363);
IkReal x9371=(r00*x9362);
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal((((x9364*x9365))+((gconst1*r10*x9365)))),IkReal((((cj3*x9364*x9366))+((x9367*x9370))+(((-1.0)*gconst2*x9367*x9369))+(((-1.0)*cj3*r11*x9371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
CheckValue<IkReal> x9373=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9370))+((x9368*x9371))+(((-1.0)*gconst2*x9366*x9368))+(((-1.0)*sj3*x9364*x9369)))),-1);
if(!x9373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9372.value)+(((1.5707963267949)*(x9373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9374=IKsin(j4);
IkReal x9375=IKcos(j4);
IkReal x9376=(cj2*sj1);
IkReal x9377=(cj1*sj2);
IkReal x9378=(gconst1*sj3);
IkReal x9379=(cj3*gconst1);
IkReal x9380=(sj1*sj2);
IkReal x9381=(cj3*gconst2);
IkReal x9382=(cj1*cj2);
IkReal x9383=(gconst2*sj3);
IkReal x9384=((1.0)*x9375);
IkReal x9385=((1.0)*x9374);
IkReal x9386=(gconst1*x9374);
IkReal x9387=(cj3*x9374);
IkReal x9388=(x9377+x9376);
IkReal x9389=(x9375*x9383);
evalcond[0]=(((r21*x9386))+(((-1.0)*gconst2*r20*x9385))+(((-1.0)*r22*x9384)));
evalcond[1]=((((-1.0)*r02*x9384))+(((-1.0)*gconst2*r00*x9385))+((r01*x9386)));
evalcond[2]=((-1.0)+((r11*x9386))+(((-1.0)*r12*x9384))+(((-1.0)*gconst2*r10*x9385)));
evalcond[3]=(((r11*x9383))+((r11*x9375*x9379))+((r12*x9387))+(((-1.0)*r10*x9381*x9384))+((r10*x9378)));
evalcond[4]=(((r10*x9389))+((r11*x9381))+(((-1.0)*r12*sj3*x9385))+(((-1.0)*r11*x9378*x9384))+((r10*x9379)));
evalcond[5]=(x9388+((r21*x9383))+(((-1.0)*r20*x9381*x9384))+((r21*x9375*x9379))+((r22*x9387))+((r20*x9378)));
evalcond[6]=(x9388+(((-1.0)*r01*x9378*x9384))+((r00*x9379))+((r01*x9381))+((r00*x9389))+(((-1.0)*r02*sj3*x9385)));
evalcond[7]=(((r02*x9387))+x9382+(((-1.0)*r00*x9381*x9384))+(((-1.0)*x9380))+((r01*x9375*x9379))+((r00*x9378))+((r01*x9383)));
evalcond[8]=((((-1.0)*r22*sj3*x9385))+x9380+((r21*x9381))+(((-1.0)*x9382))+(((-1.0)*r21*x9378*x9384))+((r20*x9389))+((r20*x9379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
CheckValue<IkReal> x9391=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9390.value)+(((1.5707963267949)*(x9391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9392=IKsin(j4);
IkReal x9393=IKcos(j4);
IkReal x9394=(cj2*sj1);
IkReal x9395=(cj1*sj2);
IkReal x9396=(gconst1*sj3);
IkReal x9397=(cj3*gconst1);
IkReal x9398=(sj1*sj2);
IkReal x9399=(cj3*gconst2);
IkReal x9400=(cj1*cj2);
IkReal x9401=(gconst2*sj3);
IkReal x9402=((1.0)*x9393);
IkReal x9403=((1.0)*x9392);
IkReal x9404=(gconst1*x9392);
IkReal x9405=(cj3*x9392);
IkReal x9406=(x9395+x9394);
IkReal x9407=(x9393*x9401);
evalcond[0]=((((-1.0)*r22*x9402))+((r21*x9404))+(((-1.0)*gconst2*r20*x9403)));
evalcond[1]=(((r01*x9404))+(((-1.0)*r02*x9402))+(((-1.0)*gconst2*r00*x9403)));
evalcond[2]=((-1.0)+((r11*x9404))+(((-1.0)*gconst2*r10*x9403))+(((-1.0)*r12*x9402)));
evalcond[3]=(((r12*x9405))+((r11*x9401))+((r10*x9396))+(((-1.0)*r10*x9399*x9402))+((r11*x9393*x9397)));
evalcond[4]=((((-1.0)*r12*sj3*x9403))+((r10*x9397))+((r11*x9399))+(((-1.0)*r11*x9396*x9402))+((r10*x9407)));
evalcond[5]=(((r22*x9405))+((r21*x9393*x9397))+((r20*x9396))+((r21*x9401))+x9406+(((-1.0)*r20*x9399*x9402)));
evalcond[6]=(((r01*x9399))+x9406+(((-1.0)*r02*sj3*x9403))+((r00*x9407))+((r00*x9397))+(((-1.0)*r01*x9396*x9402)));
evalcond[7]=(((r01*x9401))+(((-1.0)*r00*x9399*x9402))+((r02*x9405))+(((-1.0)*x9398))+x9400+((r01*x9393*x9397))+((r00*x9396)));
evalcond[8]=(x9398+(((-1.0)*x9400))+((r20*x9397))+(((-1.0)*r21*x9396*x9402))+((r20*x9407))+((r21*x9399))+(((-1.0)*r22*sj3*x9403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9408=((-1.0)*r20);
IkReal x9409=x8499;
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9408),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
IkReal x9410=((-1.0)*(x9411.value));
sj5=gconst1;
cj5=gconst2;
j5=x9410;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9410;
IkReal gconst1=(r21*x9409);
IkReal gconst2=(x9408*x9409);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9412=((-1.0)*r20);
IkReal x9413=x8499;
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9412),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
IkReal x9414=((-1.0)*(x9415.value));
sj5=gconst1;
cj5=gconst2;
j5=x9414;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9414;
IkReal gconst1=(r21*x9413);
IkReal gconst2=(x9412*x9413);
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9423.valid){
continue;
}
IkReal x9416=x9423.value;
IkReal x9417=(sj3*x9416);
IkReal x9418=(r11*x9417);
IkReal x9419=(r00*x9417);
IkReal x9420=(r01*x9417);
IkReal x9421=(r10*x9417);
IkReal x9422=(r20*r21*x9417);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9419*(r20*r20)))+((r00*r20*r21*x9418))+((r10*r20*r21*x9420))+((r01*x9418*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9424=gconst2*gconst2;
IkReal x9425=gconst1*gconst1;
IkReal x9426=((1.0)*cj3);
IkReal x9427=((1.0)*sj3);
IkReal x9428=(r11*sj3);
IkReal x9429=(r10*sj3);
IkReal x9430=(gconst1*gconst2*r00);
IkReal x9431=(gconst1*gconst2*r01);
IkReal x9432=(r00*x9424);
IkReal x9433=(r01*x9425);
CheckValue<IkReal> x9434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9426))+(((-1.0)*r11*x9426*x9433))+((cj3*r11*x9430))+(((-1.0)*r10*x9426*x9432))+((cj3*r10*x9431)))),-1);
if(!x9434.valid){
continue;
}
CheckValue<IkReal> x9435 = IKatan2WithCheck(IkReal((((gconst2*r02*x9428))+((gconst1*r02*x9429)))),IkReal((((x9429*x9433))+(((-1.0)*r11*x9427*x9432))+((x9428*x9431))+(((-1.0)*r10*x9427*x9430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9434.value)))+(x9435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9436=IKsin(j4);
IkReal x9437=IKcos(j4);
IkReal x9438=(sj1*sj2);
IkReal x9439=(gconst1*sj3);
IkReal x9440=(cj3*gconst1);
IkReal x9441=(cj3*gconst2);
IkReal x9442=((1.0)*cj2);
IkReal x9443=(cj1*sj2);
IkReal x9444=(gconst2*sj3);
IkReal x9445=(cj1*x9442);
IkReal x9446=((1.0)*x9437);
IkReal x9447=((1.0)*x9436);
IkReal x9448=(gconst1*x9436);
IkReal x9449=(cj3*x9436);
IkReal x9450=(x9437*x9444);
evalcond[0]=(((r21*x9448))+(((-1.0)*gconst2*r20*x9447))+(((-1.0)*r22*x9446)));
evalcond[1]=(((r01*x9448))+(((-1.0)*gconst2*r00*x9447))+(((-1.0)*r02*x9446)));
evalcond[2]=((1.0)+((r11*x9448))+(((-1.0)*gconst2*r10*x9447))+(((-1.0)*r12*x9446)));
evalcond[3]=(((r11*x9437*x9440))+((r12*x9449))+(((-1.0)*r10*x9441*x9446))+((r11*x9444))+((r10*x9439)));
evalcond[4]=(((r10*x9450))+((r10*x9440))+(((-1.0)*r12*sj3*x9447))+(((-1.0)*r11*x9439*x9446))+((r11*x9441)));
evalcond[5]=(((cj2*sj1))+((r22*x9449))+((r21*x9444))+((r20*x9439))+(((-1.0)*r20*x9441*x9446))+((r21*x9437*x9440))+x9443);
evalcond[6]=(((r01*x9444))+(((-1.0)*r00*x9441*x9446))+(((-1.0)*x9445))+x9438+((r01*x9437*x9440))+((r02*x9449))+((r00*x9439)));
evalcond[7]=((((-1.0)*r21*x9439*x9446))+(((-1.0)*r22*sj3*x9447))+(((-1.0)*x9445))+((r21*x9441))+x9438+((r20*x9440))+((r20*x9450)));
evalcond[8]=(((r00*x9440))+((r00*x9450))+((r01*x9441))+(((-1.0)*r02*sj3*x9447))+(((-1.0)*x9443))+(((-1.0)*sj1*x9442))+(((-1.0)*r01*x9439*x9446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9451=gconst2*gconst2;
IkReal x9452=gconst1*gconst1;
IkReal x9453=(gconst2*r11);
IkReal x9454=(cj3*r02);
IkReal x9455=(gconst1*r01);
IkReal x9456=(cj3*r10);
IkReal x9457=(r10*sj3);
IkReal x9458=((1.0)*gconst1*r00);
IkReal x9459=(r01*x9452);
IkReal x9460=(r00*x9451);
CheckValue<IkReal> x9461=IKPowWithIntegerCheck(IKsign((((x9457*x9460))+((r11*sj3*x9459))+((r02*r12*sj3))+(((-1.0)*gconst2*x9455*x9457))+(((-1.0)*sj3*x9453*x9458)))),-1);
if(!x9461.valid){
continue;
}
CheckValue<IkReal> x9462 = IKatan2WithCheck(IkReal((((x9453*x9454))+((gconst1*r10*x9454)))),IkReal(((((-1.0)*gconst2*x9456*x9458))+((cj3*x9453*x9455))+(((-1.0)*cj3*r11*x9460))+((x9456*x9459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9461.value)))+(x9462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9463=IKsin(j4);
IkReal x9464=IKcos(j4);
IkReal x9465=(sj1*sj2);
IkReal x9466=(gconst1*sj3);
IkReal x9467=(cj3*gconst1);
IkReal x9468=(cj3*gconst2);
IkReal x9469=((1.0)*cj2);
IkReal x9470=(cj1*sj2);
IkReal x9471=(gconst2*sj3);
IkReal x9472=(cj1*x9469);
IkReal x9473=((1.0)*x9464);
IkReal x9474=((1.0)*x9463);
IkReal x9475=(gconst1*x9463);
IkReal x9476=(cj3*x9463);
IkReal x9477=(x9464*x9471);
evalcond[0]=(((r21*x9475))+(((-1.0)*gconst2*r20*x9474))+(((-1.0)*r22*x9473)));
evalcond[1]=((((-1.0)*r02*x9473))+((r01*x9475))+(((-1.0)*gconst2*r00*x9474)));
evalcond[2]=((1.0)+((r11*x9475))+(((-1.0)*r12*x9473))+(((-1.0)*gconst2*r10*x9474)));
evalcond[3]=(((r10*x9466))+((r11*x9471))+((r11*x9464*x9467))+(((-1.0)*r10*x9468*x9473))+((r12*x9476)));
evalcond[4]=((((-1.0)*r11*x9466*x9473))+((r10*x9477))+((r10*x9467))+(((-1.0)*r12*sj3*x9474))+((r11*x9468)));
evalcond[5]=(((cj2*sj1))+((r22*x9476))+((r21*x9471))+((r20*x9466))+x9470+(((-1.0)*r20*x9468*x9473))+((r21*x9464*x9467)));
evalcond[6]=(((r01*x9464*x9467))+(((-1.0)*x9472))+((r00*x9466))+((r01*x9471))+x9465+((r02*x9476))+(((-1.0)*r00*x9468*x9473)));
evalcond[7]=((((-1.0)*r21*x9466*x9473))+(((-1.0)*x9472))+((r21*x9468))+(((-1.0)*r22*sj3*x9474))+((r20*x9467))+x9465+((r20*x9477)));
evalcond[8]=(((r00*x9477))+((r01*x9468))+((r00*x9467))+(((-1.0)*sj1*x9469))+(((-1.0)*r02*sj3*x9474))+(((-1.0)*x9470))+(((-1.0)*r01*x9466*x9473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9478=((1.0)*gconst2);
CheckValue<IkReal> x9479 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9479.valid){
continue;
}
CheckValue<IkReal> x9480=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9478)))),-1);
if(!x9480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9479.value)+(((1.5707963267949)*(x9480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9481=IKsin(j4);
IkReal x9482=IKcos(j4);
IkReal x9483=(sj1*sj2);
IkReal x9484=(gconst1*sj3);
IkReal x9485=(cj3*gconst1);
IkReal x9486=(cj3*gconst2);
IkReal x9487=((1.0)*cj2);
IkReal x9488=(cj1*sj2);
IkReal x9489=(gconst2*sj3);
IkReal x9490=(cj1*x9487);
IkReal x9491=((1.0)*x9482);
IkReal x9492=((1.0)*x9481);
IkReal x9493=(gconst1*x9481);
IkReal x9494=(cj3*x9481);
IkReal x9495=(x9482*x9489);
evalcond[0]=((((-1.0)*gconst2*r20*x9492))+(((-1.0)*r22*x9491))+((r21*x9493)));
evalcond[1]=((((-1.0)*r02*x9491))+(((-1.0)*gconst2*r00*x9492))+((r01*x9493)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9492))+(((-1.0)*r12*x9491))+((r11*x9493)));
evalcond[3]=(((r12*x9494))+((r11*x9482*x9485))+((r11*x9489))+((r10*x9484))+(((-1.0)*r10*x9486*x9491)));
evalcond[4]=((((-1.0)*r11*x9484*x9491))+(((-1.0)*r12*sj3*x9492))+((r10*x9495))+((r11*x9486))+((r10*x9485)));
evalcond[5]=(((cj2*sj1))+((r21*x9489))+((r22*x9494))+(((-1.0)*r20*x9486*x9491))+((r20*x9484))+((r21*x9482*x9485))+x9488);
evalcond[6]=(((r02*x9494))+((r01*x9489))+((r01*x9482*x9485))+((r00*x9484))+(((-1.0)*r00*x9486*x9491))+x9483+(((-1.0)*x9490)));
evalcond[7]=(((r21*x9486))+(((-1.0)*r21*x9484*x9491))+((r20*x9485))+(((-1.0)*r22*sj3*x9492))+x9483+((r20*x9495))+(((-1.0)*x9490)));
evalcond[8]=(((r01*x9486))+(((-1.0)*x9488))+((r00*x9485))+(((-1.0)*sj1*x9487))+((r00*x9495))+(((-1.0)*r01*x9484*x9491))+(((-1.0)*r02*sj3*x9492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9496=((-1.0)*r20);
IkReal x9497=((-1.0)*r21);
CheckValue<IkReal> x9499 = IKatan2WithCheck(IkReal(x9497),IkReal(x9496),IKFAST_ATAN2_MAGTHRESH);
if(!x9499.valid){
continue;
}
IkReal x9498=((-1.0)*(x9499.value));
sj5=gconst1;
cj5=gconst2;
j5=x9498;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9496);
rxp0_2=(py*r00);
rxp1_0=(py*x9497);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9498;
IkReal gconst1=r21;
IkReal gconst2=x9496;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9500=((-1.0)*r20);
IkReal x9501=((-1.0)*r21);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(x9501),IkReal(x9500),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
IkReal x9502=((-1.0)*(x9503.value));
sj5=gconst1;
cj5=gconst2;
j5=x9502;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9500);
rxp0_2=(py*r00);
rxp1_0=(py*x9501);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9502;
IkReal gconst1=r21;
IkReal gconst2=x9500;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9504=((-1.0)*r20);
IkReal x9505=((-1.0)*r21);
CheckValue<IkReal> x9507 = IKatan2WithCheck(IkReal(x9505),IkReal(x9504),IKFAST_ATAN2_MAGTHRESH);
if(!x9507.valid){
continue;
}
IkReal x9506=((-1.0)*(x9507.value));
sj5=gconst1;
cj5=gconst2;
j5=x9506;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9504);
rxp0_2=(py*r00);
rxp1_0=(py*x9505);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9506;
IkReal gconst1=r21;
IkReal gconst2=x9504;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9508=((-1.0)*r20);
IkReal x9509=((-1.0)*r21);
CheckValue<IkReal> x9511 = IKatan2WithCheck(IkReal(x9509),IkReal(x9508),IKFAST_ATAN2_MAGTHRESH);
if(!x9511.valid){
continue;
}
IkReal x9510=((-1.0)*(x9511.value));
sj5=gconst1;
cj5=gconst2;
j5=x9510;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9508);
rxp0_2=(py*r00);
rxp1_0=(py*x9509);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9510;
IkReal gconst1=r21;
IkReal gconst2=x9508;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9512=((-1.0)*r20);
IkReal x9513=((-1.0)*r21);
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal(x9513),IkReal(x9512),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
IkReal x9514=((-1.0)*(x9515.value));
sj5=gconst1;
cj5=gconst2;
j5=x9514;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9512);
rxp0_2=(py*r00);
rxp1_0=(py*x9513);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9514;
IkReal gconst1=r21;
IkReal gconst2=x9512;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9516=((-1.0)*r20);
IkReal x9517=((-1.0)*r21);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal(x9517),IkReal(x9516),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
IkReal x9518=((-1.0)*(x9519.value));
sj5=gconst1;
cj5=gconst2;
j5=x9518;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9516);
rxp0_2=(py*r00);
rxp1_0=(py*x9517);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9518;
IkReal gconst1=r21;
IkReal gconst2=x9516;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9522=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9522.valid){
continue;
}
IkReal x9520=x9522.value;
IkReal x9521=((1.0)*cj0*x9520);
cj4array[0]=((((-1.0)*cj2*sj1*x9521))+(((-1.0)*cj1*sj2*x9521)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9523=IKsin(j4);
IkReal x9524=IKcos(j4);
IkReal x9525=(gconst2*r20);
IkReal x9526=(gconst1*x9523);
IkReal x9527=((1.0)*x9524);
IkReal x9528=((1.0)*x9523);
evalcond[0]=((-1.0)*r12*x9523);
evalcond[1]=((((-1.0)*r12*x9527))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9525*x9528))+((r21*x9526)));
evalcond[3]=(((r01*x9526))+(((-1.0)*gconst2*r00*x9528)));
evalcond[4]=(((x9524*x9525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9530=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9530.valid){
continue;
}
IkReal x9529=x9530.value;
cj4array[0]=(((cj1*cj2*x9529))+(((-1.0)*sj1*sj2*x9529)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9531=IKsin(j4);
IkReal x9532=IKcos(j4);
IkReal x9533=(gconst2*r00);
IkReal x9534=(gconst1*r01);
IkReal x9535=((1.0)*x9532);
IkReal x9536=((1.0)*x9531);
evalcond[0]=((-1.0)*r12*x9531);
evalcond[1]=((((-1.0)*r12*x9535))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x9531))+(((-1.0)*gconst2*r20*x9536)));
evalcond[3]=((((-1.0)*x9533*x9536))+((x9531*x9534)));
evalcond[4]=(((x9532*x9533))+((cj0*cj2*sj1))+(((-1.0)*x9534*x9535))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9537=IKPowWithIntegerCheck(r12,-1);
if(!x9537.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9537.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9538=IKsin(j4);
IkReal x9539=IKcos(j4);
IkReal x9540=(gconst2*x9539);
IkReal x9541=(gconst1*x9538);
IkReal x9542=((1.0)*gconst1*x9539);
IkReal x9543=((1.0)*gconst2*x9538);
evalcond[0]=((-1.0)*r12*x9538);
evalcond[1]=(((r21*x9541))+(((-1.0)*r20*x9543)));
evalcond[2]=((((-1.0)*r00*x9543))+((r01*x9541)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9540))+(((-1.0)*r21*x9542)));
evalcond[4]=((((-1.0)*r01*x9542))+((cj0*cj2*sj1))+((r00*x9540))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9544=((-1.0)*r20);
IkReal x9545=((-1.0)*r21);
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal(x9545),IkReal(x9544),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
IkReal x9546=((-1.0)*(x9547.value));
sj5=gconst1;
cj5=gconst2;
j5=x9546;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9544);
rxp0_2=(py*r00);
rxp1_0=(py*x9545);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9546;
IkReal gconst1=r21;
IkReal gconst2=x9544;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9548=((-1.0)*r20);
IkReal x9549=((-1.0)*r21);
CheckValue<IkReal> x9551 = IKatan2WithCheck(IkReal(x9549),IkReal(x9548),IKFAST_ATAN2_MAGTHRESH);
if(!x9551.valid){
continue;
}
IkReal x9550=((-1.0)*(x9551.value));
sj5=gconst1;
cj5=gconst2;
j5=x9550;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9548);
rxp0_2=(py*r00);
rxp1_0=(py*x9549);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9550;
IkReal gconst1=r21;
IkReal gconst2=x9548;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9552=((-1.0)*r20);
IkReal x9553=((-1.0)*r21);
CheckValue<IkReal> x9555 = IKatan2WithCheck(IkReal(x9553),IkReal(x9552),IKFAST_ATAN2_MAGTHRESH);
if(!x9555.valid){
continue;
}
IkReal x9554=((-1.0)*(x9555.value));
sj5=gconst1;
cj5=gconst2;
j5=x9554;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9552);
rxp0_2=(py*r00);
rxp1_0=(py*x9553);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9554;
IkReal gconst1=r21;
IkReal gconst2=x9552;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9558=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9558.valid){
continue;
}
IkReal x9556=x9558.value;
IkReal x9557=((1.0)*cj0*x9556);
cj4array[0]=((((-1.0)*cj1*sj2*x9557))+(((-1.0)*cj2*sj1*x9557)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9559=IKsin(j4);
IkReal x9560=IKcos(j4);
IkReal x9561=(gconst1*r21);
IkReal x9562=(gconst2*r20);
IkReal x9563=((1.0)*x9560);
IkReal x9564=((1.0)*x9559);
evalcond[0]=(r12*x9559);
evalcond[1]=((((-1.0)*r12*x9563))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9562*x9564))+((x9559*x9561)));
evalcond[3]=((((-1.0)*gconst2*r00*x9564))+((gconst1*r01*x9559)));
evalcond[4]=(((x9560*x9561))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9562*x9563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9566=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9566.valid){
continue;
}
IkReal x9565=x9566.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9565))+((cj1*cj2*x9565)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9567=IKsin(j4);
IkReal x9568=IKcos(j4);
IkReal x9569=(gconst1*r01);
IkReal x9570=((1.0)*x9568);
IkReal x9571=((1.0)*gconst2*x9567);
evalcond[0]=(r12*x9567);
evalcond[1]=((((-1.0)*r12*x9570))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x9571))+((gconst1*r21*x9567)));
evalcond[3]=((((-1.0)*r00*x9571))+((x9567*x9569)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*gconst2*r00*x9570))+((cj0*cj1*sj2))+((x9568*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9572=IKPowWithIntegerCheck(r12,-1);
if(!x9572.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9572.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9573=IKsin(j4);
IkReal x9574=IKcos(j4);
IkReal x9575=(gconst1*x9574);
IkReal x9576=(gconst1*x9573);
IkReal x9577=((1.0)*gconst2*r20);
IkReal x9578=((1.0)*gconst2*r00);
evalcond[0]=(r12*x9573);
evalcond[1]=(((r21*x9576))+(((-1.0)*x9573*x9577)));
evalcond[2]=((((-1.0)*x9573*x9578))+((r01*x9576)));
evalcond[3]=(((r21*x9575))+(((-1.0)*x9574*x9577))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x9574*x9578))+((r01*x9575))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9580=IKPowWithIntegerCheck(r12,-1);
if(!x9580.valid){
continue;
}
IkReal x9579=x9580.value;
CheckValue<IkReal> x9581=IKPowWithIntegerCheck(sj3,-1);
if(!x9581.valid){
continue;
}
if( IKabs((x9579*(x9581.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9579)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9579*(x9581.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x9579))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9579*(x9581.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x9579));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9582=IKsin(j4);
IkReal x9583=IKcos(j4);
IkReal x9584=((1.0)*sj3);
IkReal x9585=(gconst1*sj3);
IkReal x9586=(gconst1*r01);
IkReal x9587=(cj2*sj0);
IkReal x9588=(sj1*sj2);
IkReal x9589=((1.0)*cj3);
IkReal x9590=(cj1*cj2);
IkReal x9591=(cj3*gconst1);
IkReal x9592=(cj2*sj1);
IkReal x9593=(gconst1*r21);
IkReal x9594=((1.0)*cj0);
IkReal x9595=(gconst2*r00);
IkReal x9596=(gconst2*r01);
IkReal x9597=(cj1*sj2);
IkReal x9598=(gconst2*r21);
IkReal x9599=(r12*x9582);
IkReal x9600=((1.0)*x9582);
IkReal x9601=(gconst2*r20*x9583);
evalcond[0]=((((-1.0)*r12*x9583))+(((-1.0)*x9594)));
evalcond[1]=(((x9582*x9593))+(((-1.0)*gconst2*r20*x9600)));
evalcond[2]=(((x9582*x9586))+sj0+(((-1.0)*x9595*x9600)));
evalcond[3]=(((sj1*x9587))+((sj0*x9597))+(((-1.0)*x9584*x9599)));
evalcond[4]=(((cj1*x9587))+(((-1.0)*sj0*x9588))+((cj3*x9599)));
evalcond[5]=(((r20*x9585))+(((-1.0)*x9589*x9601))+((sj3*x9598))+x9597+x9592+((r21*x9583*x9591)));
evalcond[6]=(((r20*x9591))+((sj3*x9601))+x9588+((cj3*x9598))+(((-1.0)*x9590))+(((-1.0)*x9583*x9584*x9593)));
evalcond[7]=(((r00*x9591))+((sj3*x9583*x9595))+((cj3*x9596))+((cj0*x9597))+((cj0*x9592))+(((-1.0)*x9583*x9584*x9586)));
evalcond[8]=((((-1.0)*x9588*x9594))+((r00*x9585))+(((-1.0)*x9583*x9589*x9595))+((sj3*x9596))+((cj0*x9590))+((cj3*x9583*x9586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9602=((1.0)*gconst2);
CheckValue<IkReal> x9603=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*r00*x9602))),-1);
if(!x9603.valid){
continue;
}
CheckValue<IkReal> x9604=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9602))),-1);
if(!x9604.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9603.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9604.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9603.value)))+IKsqr(((x9604.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9602))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9603.value)), ((x9604.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9602))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9605=IKsin(j4);
IkReal x9606=IKcos(j4);
IkReal x9607=((1.0)*sj3);
IkReal x9608=(gconst1*sj3);
IkReal x9609=(gconst1*r01);
IkReal x9610=(cj2*sj0);
IkReal x9611=(sj1*sj2);
IkReal x9612=((1.0)*cj3);
IkReal x9613=(cj1*cj2);
IkReal x9614=(cj3*gconst1);
IkReal x9615=(cj2*sj1);
IkReal x9616=(gconst1*r21);
IkReal x9617=((1.0)*cj0);
IkReal x9618=(gconst2*r00);
IkReal x9619=(gconst2*r01);
IkReal x9620=(cj1*sj2);
IkReal x9621=(gconst2*r21);
IkReal x9622=(r12*x9605);
IkReal x9623=((1.0)*x9605);
IkReal x9624=(gconst2*r20*x9606);
evalcond[0]=((((-1.0)*r12*x9606))+(((-1.0)*x9617)));
evalcond[1]=((((-1.0)*gconst2*r20*x9623))+((x9605*x9616)));
evalcond[2]=((((-1.0)*x9618*x9623))+sj0+((x9605*x9609)));
evalcond[3]=(((sj0*x9620))+((sj1*x9610))+(((-1.0)*x9607*x9622)));
evalcond[4]=(((cj1*x9610))+((cj3*x9622))+(((-1.0)*sj0*x9611)));
evalcond[5]=(((sj3*x9621))+(((-1.0)*x9612*x9624))+((r21*x9606*x9614))+((r20*x9608))+x9620+x9615);
evalcond[6]=(((sj3*x9624))+((r20*x9614))+(((-1.0)*x9606*x9607*x9616))+(((-1.0)*x9613))+((cj3*x9621))+x9611);
evalcond[7]=(((cj0*x9620))+((r00*x9614))+((cj0*x9615))+(((-1.0)*x9606*x9607*x9609))+((cj3*x9619))+((sj3*x9606*x9618)));
evalcond[8]=(((cj0*x9613))+(((-1.0)*x9606*x9612*x9618))+((r00*x9608))+((cj3*x9606*x9609))+(((-1.0)*x9611*x9617))+((sj3*x9619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9625=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9625.valid){
continue;
}
CheckValue<IkReal> x9626=IKPowWithIntegerCheck(r12,-1);
if(!x9626.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9625.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9625.value)))+IKsqr(((-1.0)*cj0*(x9626.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9625.value)), ((-1.0)*cj0*(x9626.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9627=IKsin(j4);
IkReal x9628=IKcos(j4);
IkReal x9629=((1.0)*sj3);
IkReal x9630=(gconst1*sj3);
IkReal x9631=(gconst1*r01);
IkReal x9632=(cj2*sj0);
IkReal x9633=(sj1*sj2);
IkReal x9634=((1.0)*cj3);
IkReal x9635=(cj1*cj2);
IkReal x9636=(cj3*gconst1);
IkReal x9637=(cj2*sj1);
IkReal x9638=(gconst1*r21);
IkReal x9639=((1.0)*cj0);
IkReal x9640=(gconst2*r00);
IkReal x9641=(gconst2*r01);
IkReal x9642=(cj1*sj2);
IkReal x9643=(gconst2*r21);
IkReal x9644=(r12*x9627);
IkReal x9645=((1.0)*x9627);
IkReal x9646=(gconst2*r20*x9628);
evalcond[0]=((((-1.0)*r12*x9628))+(((-1.0)*x9639)));
evalcond[1]=((((-1.0)*gconst2*r20*x9645))+((x9627*x9638)));
evalcond[2]=(sj0+((x9627*x9631))+(((-1.0)*x9640*x9645)));
evalcond[3]=(((sj1*x9632))+(((-1.0)*x9629*x9644))+((sj0*x9642)));
evalcond[4]=(((cj1*x9632))+(((-1.0)*sj0*x9633))+((cj3*x9644)));
evalcond[5]=(((r20*x9630))+((r21*x9628*x9636))+((sj3*x9643))+x9637+x9642+(((-1.0)*x9634*x9646)));
evalcond[6]=(((r20*x9636))+(((-1.0)*x9635))+((sj3*x9646))+x9633+(((-1.0)*x9628*x9629*x9638))+((cj3*x9643)));
evalcond[7]=(((r00*x9636))+((sj3*x9628*x9640))+((cj0*x9637))+((cj0*x9642))+(((-1.0)*x9628*x9629*x9631))+((cj3*x9641)));
evalcond[8]=(((r00*x9630))+((cj3*x9628*x9631))+((cj0*x9635))+(((-1.0)*x9633*x9639))+(((-1.0)*x9628*x9634*x9640))+((sj3*x9641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9647=gconst1*gconst1;
IkReal x9648=r21*r21;
IkReal x9649=gconst2*gconst2;
IkReal x9650=r20*r20;
IkReal x9651=(gconst2*r20);
IkReal x9652=(cj1*cj2);
IkReal x9653=(sj1*sj2);
IkReal x9654=(gconst1*r21);
IkReal x9655=(cj3*gconst2);
IkReal x9656=(cj3*r20);
CheckValue<IkReal> x9657=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x9649*x9650))+((sj3*x9647*x9648))+(((-2.0)*sj3*x9651*x9654)))),-1);
if(!x9657.valid){
continue;
}
CheckValue<IkReal> x9658 = IKatan2WithCheck(IkReal((((r22*x9653))+((gconst1*r22*x9656))+((r21*r22*x9655))+(((-1.0)*r22*x9652)))),IkReal(((((-1.0)*gconst1*x9650*x9655))+(((-1.0)*r21*x9649*x9656))+(((-1.0)*x9651*x9653))+((r21*x9647*x9656))+((gconst1*x9648*x9655))+((x9651*x9652))+(((-1.0)*x9652*x9654))+((x9653*x9654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9657.value)))+(x9658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9659=IKsin(j4);
IkReal x9660=IKcos(j4);
IkReal x9661=(gconst1*sj3);
IkReal x9662=(cj2*sj0);
IkReal x9663=(cj3*gconst1);
IkReal x9664=(sj1*sj2);
IkReal x9665=(cj3*gconst2);
IkReal x9666=(cj1*cj2);
IkReal x9667=(gconst2*sj3);
IkReal x9668=(cj2*sj1);
IkReal x9669=((1.0)*cj0);
IkReal x9670=(cj1*sj2);
IkReal x9671=((1.0)*x9660);
IkReal x9672=((1.0)*x9659);
IkReal x9673=(gconst1*x9659);
IkReal x9674=(cj3*x9659);
IkReal x9675=(x9660*x9667);
evalcond[0]=(((r21*x9673))+(((-1.0)*gconst2*r20*x9672))+(((-1.0)*r22*x9671)));
evalcond[1]=(sj0+((r01*x9673))+(((-1.0)*r02*x9671))+(((-1.0)*gconst2*r00*x9672)));
evalcond[2]=((((-1.0)*x9669))+((r11*x9673))+(((-1.0)*gconst2*r10*x9672))+(((-1.0)*r12*x9671)));
evalcond[3]=(((r21*x9660*x9663))+((r21*x9667))+((r20*x9661))+x9670+x9668+(((-1.0)*r20*x9665*x9671))+((r22*x9674)));
evalcond[4]=(((r21*x9665))+((r20*x9663))+((r20*x9675))+x9664+(((-1.0)*r22*sj3*x9672))+(((-1.0)*x9666))+(((-1.0)*r21*x9661*x9671)));
evalcond[5]=((((-1.0)*r02*sj3*x9672))+((cj0*x9670))+((r00*x9675))+((r00*x9663))+((r01*x9665))+((cj0*x9668))+(((-1.0)*r01*x9661*x9671)));
evalcond[6]=((((-1.0)*r00*x9665*x9671))+(((-1.0)*x9664*x9669))+((r00*x9661))+((r01*x9667))+((cj0*x9666))+((r02*x9674))+((r01*x9660*x9663)));
evalcond[7]=(((r11*x9665))+(((-1.0)*r11*x9661*x9671))+((r10*x9675))+((r10*x9663))+(((-1.0)*r12*sj3*x9672))+((sj0*x9670))+((sj1*x9662)));
evalcond[8]=(((r12*x9674))+((r11*x9667))+(((-1.0)*sj0*x9664))+(((-1.0)*r10*x9665*x9671))+((r10*x9661))+((cj1*x9662))+((r11*x9660*x9663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9676=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9676.valid){
continue;
}
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9676.value)))+(x9677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9678=IKsin(j4);
IkReal x9679=IKcos(j4);
IkReal x9680=(gconst1*sj3);
IkReal x9681=(cj2*sj0);
IkReal x9682=(cj3*gconst1);
IkReal x9683=(sj1*sj2);
IkReal x9684=(cj3*gconst2);
IkReal x9685=(cj1*cj2);
IkReal x9686=(gconst2*sj3);
IkReal x9687=(cj2*sj1);
IkReal x9688=((1.0)*cj0);
IkReal x9689=(cj1*sj2);
IkReal x9690=((1.0)*x9679);
IkReal x9691=((1.0)*x9678);
IkReal x9692=(gconst1*x9678);
IkReal x9693=(cj3*x9678);
IkReal x9694=(x9679*x9686);
evalcond[0]=(((r21*x9692))+(((-1.0)*r22*x9690))+(((-1.0)*gconst2*r20*x9691)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9691))+(((-1.0)*r02*x9690))+((r01*x9692)));
evalcond[2]=((((-1.0)*gconst2*r10*x9691))+(((-1.0)*r12*x9690))+(((-1.0)*x9688))+((r11*x9692)));
evalcond[3]=((((-1.0)*r20*x9684*x9690))+((r22*x9693))+((r21*x9686))+x9689+x9687+((r20*x9680))+((r21*x9679*x9682)));
evalcond[4]=((((-1.0)*x9685))+(((-1.0)*r22*sj3*x9691))+((r21*x9684))+x9683+(((-1.0)*r21*x9680*x9690))+((r20*x9682))+((r20*x9694)));
evalcond[5]=((((-1.0)*r01*x9680*x9690))+(((-1.0)*r02*sj3*x9691))+((r01*x9684))+((cj0*x9689))+((cj0*x9687))+((r00*x9694))+((r00*x9682)));
evalcond[6]=(((r02*x9693))+((r01*x9686))+((cj0*x9685))+(((-1.0)*x9683*x9688))+((r00*x9680))+((r01*x9679*x9682))+(((-1.0)*r00*x9684*x9690)));
evalcond[7]=((((-1.0)*r11*x9680*x9690))+((sj0*x9689))+((sj1*x9681))+((r10*x9694))+((r11*x9684))+(((-1.0)*r12*sj3*x9691))+((r10*x9682)));
evalcond[8]=((((-1.0)*r10*x9684*x9690))+((r11*x9679*x9682))+((cj1*x9681))+((r12*x9693))+(((-1.0)*sj0*x9683))+((r11*x9686))+((r10*x9680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9695=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9695.valid){
continue;
}
CheckValue<IkReal> x9696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9695.value)))+(x9696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9697=IKsin(j4);
IkReal x9698=IKcos(j4);
IkReal x9699=(gconst1*sj3);
IkReal x9700=(cj2*sj0);
IkReal x9701=(cj3*gconst1);
IkReal x9702=(sj1*sj2);
IkReal x9703=(cj3*gconst2);
IkReal x9704=(cj1*cj2);
IkReal x9705=(gconst2*sj3);
IkReal x9706=(cj2*sj1);
IkReal x9707=((1.0)*cj0);
IkReal x9708=(cj1*sj2);
IkReal x9709=((1.0)*x9698);
IkReal x9710=((1.0)*x9697);
IkReal x9711=(gconst1*x9697);
IkReal x9712=(cj3*x9697);
IkReal x9713=(x9698*x9705);
evalcond[0]=((((-1.0)*r22*x9709))+(((-1.0)*gconst2*r20*x9710))+((r21*x9711)));
evalcond[1]=((((-1.0)*r02*x9709))+sj0+(((-1.0)*gconst2*r00*x9710))+((r01*x9711)));
evalcond[2]=(((r11*x9711))+(((-1.0)*x9707))+(((-1.0)*gconst2*r10*x9710))+(((-1.0)*r12*x9709)));
evalcond[3]=(((r22*x9712))+((r21*x9705))+(((-1.0)*r20*x9703*x9709))+x9708+x9706+((r21*x9698*x9701))+((r20*x9699)));
evalcond[4]=((((-1.0)*x9704))+((r20*x9701))+(((-1.0)*r22*sj3*x9710))+((r21*x9703))+x9702+((r20*x9713))+(((-1.0)*r21*x9699*x9709)));
evalcond[5]=((((-1.0)*r01*x9699*x9709))+(((-1.0)*r02*sj3*x9710))+((r01*x9703))+((r00*x9701))+((cj0*x9708))+((cj0*x9706))+((r00*x9713)));
evalcond[6]=(((r02*x9712))+((r01*x9705))+(((-1.0)*x9702*x9707))+(((-1.0)*r00*x9703*x9709))+((cj0*x9704))+((r01*x9698*x9701))+((r00*x9699)));
evalcond[7]=(((r10*x9701))+(((-1.0)*r12*sj3*x9710))+((sj0*x9708))+((r11*x9703))+((sj1*x9700))+(((-1.0)*r11*x9699*x9709))+((r10*x9713)));
evalcond[8]=(((r12*x9712))+((r11*x9698*x9701))+((cj1*x9700))+((r11*x9705))+(((-1.0)*sj0*x9702))+((r10*x9699))+(((-1.0)*r10*x9703*x9709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9714=((-1.0)*r21);
IkReal x9716 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9716)==0){
continue;
}
IkReal x9715=pow(x9716,-0.5);
CheckValue<IkReal> x9717 = IKatan2WithCheck(IkReal(x9714),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9717.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9717.value))));
IkReal gconst4=(x9714*x9715);
IkReal gconst5=((1.0)*r20*x9715);
CheckValue<IkReal> x9718 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9718.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9718.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9719=((-1.0)*r21);
CheckValue<IkReal> x9722 = IKatan2WithCheck(IkReal(x9719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9722.valid){
continue;
}
IkReal x9720=((1.0)*(x9722.value));
IkReal x9721=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9720)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9720)));
IkReal gconst4=(x9719*x9721);
IkReal gconst5=((1.0)*r20*x9721);
IkReal x9723=r22*r22;
IkReal x9724=((1.0)*x9723);
CheckValue<IkReal> x9728=IKPowWithIntegerCheck(((-1.0)+x9723),-1);
if(!x9728.valid){
continue;
}
IkReal x9725=x9728.value;
if((((1.0)+(((-1.0)*x9724)))) < -0.00001)
continue;
IkReal x9726=IKsqrt(((1.0)+(((-1.0)*x9724))));
IkReal x9727=(sj0*x9725*x9726);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9724*x9727))+x9727))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9729=((-1.0)*r21);
CheckValue<IkReal> x9732 = IKatan2WithCheck(IkReal(x9729),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9732.valid){
continue;
}
IkReal x9730=((1.0)*(x9732.value));
IkReal x9731=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9730)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9730)));
IkReal gconst4=(x9729*x9731);
IkReal gconst5=((1.0)*r20*x9731);
IkReal x9733=r22*r22;
IkReal x9734=((1.0)*x9733);
CheckValue<IkReal> x9738=IKPowWithIntegerCheck(((-1.0)+x9733),-1);
if(!x9738.valid){
continue;
}
IkReal x9735=x9738.value;
if((((1.0)+(((-1.0)*x9734)))) < -0.00001)
continue;
IkReal x9736=IKsqrt(((1.0)+(((-1.0)*x9734))));
IkReal x9737=(cj0*x9735*x9736);
j4eval[0]=((IKabs(((((-1.0)*x9734*x9737))+x9737)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9739=((-1.0)*r21);
CheckValue<IkReal> x9742 = IKatan2WithCheck(IkReal(x9739),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9742.valid){
continue;
}
IkReal x9740=((1.0)*(x9742.value));
IkReal x9741=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9740)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9740)));
IkReal gconst4=(x9739*x9741);
IkReal gconst5=((1.0)*r20*x9741);
IkReal x9743=r22*r22;
IkReal x9744=(cj0*r02);
IkReal x9745=(r12*sj0);
CheckValue<IkReal> x9749=IKPowWithIntegerCheck(((-1.0)+x9743),-1);
if(!x9749.valid){
continue;
}
IkReal x9746=x9749.value;
if((((1.0)+(((-1.0)*x9743)))) < -0.00001)
continue;
IkReal x9747=IKsqrt(((1.0)+(((-1.0)*x9743))));
IkReal x9748=((1.0)*r22*x9746*x9747);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9744*x9748))+(((-1.0)*x9745*x9748)))))+(IKabs((x9744+x9745))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9750=((-1.0)*r21);
CheckValue<IkReal> x9753 = IKatan2WithCheck(IkReal(x9750),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9753.valid){
continue;
}
IkReal x9751=((1.0)*(x9753.value));
IkReal x9752=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9751)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9751)));
IkReal gconst4=(x9750*x9752);
IkReal gconst5=((1.0)*r20*x9752);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9754=((-1.0)*r21);
CheckValue<IkReal> x9757 = IKatan2WithCheck(IkReal(x9754),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9757.valid){
continue;
}
IkReal x9755=((1.0)*(x9757.value));
IkReal x9756=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9755)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9755)));
IkReal gconst4=(x9754*x9756);
IkReal gconst5=((1.0)*r20*x9756);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9758=((-1.0)*r21);
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(x9758),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
IkReal x9759=((1.0)*(x9761.value));
IkReal x9760=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9759)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9759)));
IkReal gconst4=(x9758*x9760);
IkReal gconst5=((1.0)*r20*x9760);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9762=((-1.0)*r21);
CheckValue<IkReal> x9765 = IKatan2WithCheck(IkReal(x9762),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9765.valid){
continue;
}
IkReal x9763=((1.0)*(x9765.value));
IkReal x9764=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9763)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9763)));
IkReal gconst4=(x9762*x9764);
IkReal gconst5=((1.0)*r20*x9764);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9766=((-1.0)*r21);
CheckValue<IkReal> x9769 = IKatan2WithCheck(IkReal(x9766),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9769.valid){
continue;
}
IkReal x9767=((1.0)*(x9769.value));
IkReal x9768=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9767)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9767)));
IkReal gconst4=(x9766*x9768);
IkReal gconst5=((1.0)*r20*x9768);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9770=((-1.0)*r21);
CheckValue<IkReal> x9773 = IKatan2WithCheck(IkReal(x9770),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9773.valid){
continue;
}
IkReal x9771=((1.0)*(x9773.value));
IkReal x9772=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9771)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9771)));
IkReal gconst4=(x9770*x9772);
IkReal gconst5=((1.0)*r20*x9772);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9774=(gconst5*r00);
IkReal x9775=(gconst4*r01);
CheckValue<IkReal> x9776 = IKatan2WithCheck(IkReal(((((-1.0)*x9775))+x9774)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9776.valid){
continue;
}
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(IKsign(((x9775*x9775)+(((-2.0)*x9774*x9775))+(x9774*x9774)+(r02*r02))),-1);
if(!x9777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9776.value)+(((1.5707963267949)*(x9777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9778=IKsin(j4);
IkReal x9779=IKcos(j4);
IkReal x9780=(gconst4*r11);
IkReal x9781=(gconst5*r10);
IkReal x9782=(gconst4*r01);
IkReal x9783=(gconst5*r00);
IkReal x9784=(gconst4*r21);
IkReal x9785=(gconst5*r20);
IkReal x9786=((1.0)*x9779);
IkReal x9787=((1.0)*x9778);
evalcond[0]=(((x9778*x9784))+(((-1.0)*x9785*x9787))+(((-1.0)*r22*x9786)));
evalcond[1]=((((-1.0)*r12*x9786))+(((-1.0)*x9781*x9787))+((x9778*x9780)));
evalcond[2]=(((x9779*x9783))+(((-1.0)*x9782*x9786))+(((-1.0)*r02*x9787)));
evalcond[3]=((1.0)+((x9778*x9782))+(((-1.0)*x9783*x9787))+(((-1.0)*r02*x9786)));
evalcond[4]=((((-1.0)*r12*x9787))+((cj2*sj1))+((cj1*sj2))+((x9779*x9781))+(((-1.0)*x9780*x9786)));
evalcond[5]=(((x9779*x9785))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9784*x9786))+(((-1.0)*r22*x9787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9788=((1.0)*gconst5);
CheckValue<IkReal> x9789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9788))+(((-1.0)*gconst4*r20)))),-1);
if(!x9789.valid){
continue;
}
CheckValue<IkReal> x9790 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9789.value)))+(x9790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9791=IKsin(j4);
IkReal x9792=IKcos(j4);
IkReal x9793=(gconst4*r11);
IkReal x9794=(gconst5*r10);
IkReal x9795=(gconst4*r01);
IkReal x9796=(gconst5*r00);
IkReal x9797=(gconst4*r21);
IkReal x9798=(gconst5*r20);
IkReal x9799=((1.0)*x9792);
IkReal x9800=((1.0)*x9791);
evalcond[0]=((((-1.0)*x9798*x9800))+((x9791*x9797))+(((-1.0)*r22*x9799)));
evalcond[1]=((((-1.0)*x9794*x9800))+(((-1.0)*r12*x9799))+((x9791*x9793)));
evalcond[2]=((((-1.0)*r02*x9800))+((x9792*x9796))+(((-1.0)*x9795*x9799)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9799))+((x9791*x9795))+(((-1.0)*x9796*x9800)));
evalcond[4]=(((cj2*sj1))+((x9792*x9794))+((cj1*sj2))+(((-1.0)*x9793*x9799))+(((-1.0)*r12*x9800)));
evalcond[5]=((((-1.0)*x9797*x9799))+((x9792*x9798))+(((-1.0)*r22*x9800))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9801=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9801.valid){
continue;
}
CheckValue<IkReal> x9802 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9801.value)))+(x9802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9803=IKsin(j4);
IkReal x9804=IKcos(j4);
IkReal x9805=(gconst4*r11);
IkReal x9806=(gconst5*r10);
IkReal x9807=(gconst4*r01);
IkReal x9808=(gconst5*r00);
IkReal x9809=(gconst4*r21);
IkReal x9810=(gconst5*r20);
IkReal x9811=((1.0)*x9804);
IkReal x9812=((1.0)*x9803);
evalcond[0]=((((-1.0)*r22*x9811))+((x9803*x9809))+(((-1.0)*x9810*x9812)));
evalcond[1]=(((x9803*x9805))+(((-1.0)*x9806*x9812))+(((-1.0)*r12*x9811)));
evalcond[2]=((((-1.0)*r02*x9812))+(((-1.0)*x9807*x9811))+((x9804*x9808)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9811))+(((-1.0)*x9808*x9812))+((x9803*x9807)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9804*x9806))+(((-1.0)*x9805*x9811))+(((-1.0)*r12*x9812)));
evalcond[5]=((((-1.0)*x9809*x9811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9812))+((x9804*x9810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9813=((-1.0)*r21);
CheckValue<IkReal> x9816 = IKatan2WithCheck(IkReal(x9813),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9816.valid){
continue;
}
IkReal x9814=((1.0)*(x9816.value));
IkReal x9815=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9814)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9814)));
IkReal gconst4=(x9813*x9815);
IkReal gconst5=((1.0)*r20*x9815);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9817=((-1.0)*r21);
CheckValue<IkReal> x9820 = IKatan2WithCheck(IkReal(x9817),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9820.valid){
continue;
}
IkReal x9818=((1.0)*(x9820.value));
IkReal x9819=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9818)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9818)));
IkReal gconst4=(x9817*x9819);
IkReal gconst5=((1.0)*r20*x9819);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9821=((-1.0)*r21);
CheckValue<IkReal> x9824 = IKatan2WithCheck(IkReal(x9821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9824.valid){
continue;
}
IkReal x9822=((1.0)*(x9824.value));
IkReal x9823=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9822)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9822)));
IkReal gconst4=(x9821*x9823);
IkReal gconst5=((1.0)*r20*x9823);
IkReal x9825=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9829=IKPowWithIntegerCheck(x9825,-1);
if(!x9829.valid){
continue;
}
IkReal x9826=x9829.value;
IkReal x9827=((1.0)*x9826);
IkReal x9828=((((-1.0)*x9827*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9827*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9826)));
j4eval[0]=x9828;
j4eval[1]=IKsign(x9828);
j4eval[2]=r02;
j4eval[3]=x9825;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9830=(gconst4*r01);
IkReal x9831=(gconst5*r00);
CheckValue<IkReal> x9832=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9831*x9831)))+(((-1.0)*(r02*r02)))+(((2.0)*x9830*x9831))+(((-1.0)*(x9830*x9830))))),-1);
if(!x9832.valid){
continue;
}
CheckValue<IkReal> x9833 = IKatan2WithCheck(IkReal(((((-1.0)*x9831))+x9830)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9832.value)))+(x9833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9834=IKcos(j4);
IkReal x9835=IKsin(j4);
IkReal x9836=(gconst4*r11);
IkReal x9837=(gconst5*r10);
IkReal x9838=(gconst5*r00);
IkReal x9839=(gconst5*r20);
IkReal x9840=((1.0)*x9834);
IkReal x9841=(gconst4*x9834);
IkReal x9842=((1.0)*x9835);
IkReal x9843=(gconst4*x9835);
evalcond[0]=(((r01*x9841))+((r02*x9835))+(((-1.0)*x9838*x9840)));
evalcond[1]=((((-1.0)*x9839*x9842))+(((-1.0)*r22*x9840))+((r21*x9843)));
evalcond[2]=((((-1.0)*r12*x9840))+((x9835*x9836))+(((-1.0)*x9837*x9842)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9840))+((r01*x9843))+(((-1.0)*x9838*x9842)));
evalcond[4]=(((cj2*sj1))+((x9834*x9836))+((cj1*sj2))+((r12*x9835))+(((-1.0)*x9837*x9840)));
evalcond[5]=((((-1.0)*x9839*x9840))+((r22*x9835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9844=((1.0)*gconst5);
CheckValue<IkReal> x9845 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9845.valid){
continue;
}
CheckValue<IkReal> x9846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9844))+(((-1.0)*gconst4*r20)))),-1);
if(!x9846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9845.value)+(((1.5707963267949)*(x9846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9847=IKcos(j4);
IkReal x9848=IKsin(j4);
IkReal x9849=(gconst4*r11);
IkReal x9850=(gconst5*r10);
IkReal x9851=(gconst5*r00);
IkReal x9852=(gconst5*r20);
IkReal x9853=((1.0)*x9847);
IkReal x9854=(gconst4*x9847);
IkReal x9855=((1.0)*x9848);
IkReal x9856=(gconst4*x9848);
evalcond[0]=(((r02*x9848))+(((-1.0)*x9851*x9853))+((r01*x9854)));
evalcond[1]=(((r21*x9856))+(((-1.0)*r22*x9853))+(((-1.0)*x9852*x9855)));
evalcond[2]=(((x9848*x9849))+(((-1.0)*x9850*x9855))+(((-1.0)*r12*x9853)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9853))+(((-1.0)*x9851*x9855))+((r01*x9856)));
evalcond[4]=(((cj2*sj1))+((x9847*x9849))+((cj1*sj2))+(((-1.0)*x9850*x9853))+((r12*x9848)));
evalcond[5]=(((r21*x9854))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9848))+(((-1.0)*x9852*x9853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9857=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9857.valid){
continue;
}
CheckValue<IkReal> x9858 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9857.value)))+(x9858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9859=IKcos(j4);
IkReal x9860=IKsin(j4);
IkReal x9861=(gconst4*r11);
IkReal x9862=(gconst5*r10);
IkReal x9863=(gconst5*r00);
IkReal x9864=(gconst5*r20);
IkReal x9865=((1.0)*x9859);
IkReal x9866=(gconst4*x9859);
IkReal x9867=((1.0)*x9860);
IkReal x9868=(gconst4*x9860);
evalcond[0]=(((r01*x9866))+((r02*x9860))+(((-1.0)*x9863*x9865)));
evalcond[1]=((((-1.0)*r22*x9865))+((r21*x9868))+(((-1.0)*x9864*x9867)));
evalcond[2]=(((x9860*x9861))+(((-1.0)*r12*x9865))+(((-1.0)*x9862*x9867)));
evalcond[3]=((1.0)+((r01*x9868))+(((-1.0)*x9863*x9867))+(((-1.0)*r02*x9865)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x9860))+((x9859*x9861))+(((-1.0)*x9862*x9865)));
evalcond[5]=(((r22*x9860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9866))+(((-1.0)*x9864*x9865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9869=((-1.0)*r21);
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal(x9869),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
IkReal x9870=((1.0)*(x9872.value));
IkReal x9871=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9870)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9870)));
IkReal gconst4=(x9869*x9871);
IkReal gconst5=((1.0)*r20*x9871);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9873=((-1.0)*r21);
CheckValue<IkReal> x9876 = IKatan2WithCheck(IkReal(x9873),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9876.valid){
continue;
}
IkReal x9874=((1.0)*(x9876.value));
IkReal x9875=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9874)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9874)));
IkReal gconst4=(x9873*x9875);
IkReal gconst5=((1.0)*r20*x9875);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9877=((-1.0)*r21);
CheckValue<IkReal> x9880 = IKatan2WithCheck(IkReal(x9877),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9880.valid){
continue;
}
IkReal x9878=((1.0)*(x9880.value));
IkReal x9879=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9878)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9878)));
IkReal gconst4=(x9877*x9879);
IkReal gconst5=((1.0)*r20*x9879);
IkReal x9881=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(x9881,-1);
if(!x9885.valid){
continue;
}
IkReal x9882=x9885.value;
IkReal x9883=((1.0)*x9882);
IkReal x9884=((((-1.0)*x9883*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9882))+(((-1.0)*x9883*(r00*r00)*(r20*r20))));
j4eval[0]=x9884;
j4eval[1]=IKsign(x9884);
j4eval[2]=r02;
j4eval[3]=x9881;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9886=(gconst4*r01);
IkReal x9887=(gconst5*r00);
CheckValue<IkReal> x9888 = IKatan2WithCheck(IkReal(((((-1.0)*x9887))+x9886)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9888.valid){
continue;
}
CheckValue<IkReal> x9889=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9887*x9887)))+(((-1.0)*(x9886*x9886)))+(((2.0)*x9886*x9887)))),-1);
if(!x9889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9888.value)+(((1.5707963267949)*(x9889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9890=IKcos(j4);
IkReal x9891=IKsin(j4);
IkReal x9892=(gconst5*r10);
IkReal x9893=(gconst5*r00);
IkReal x9894=(gconst5*r20);
IkReal x9895=((1.0)*x9890);
IkReal x9896=(gconst4*x9891);
IkReal x9897=(gconst4*x9890);
IkReal x9898=((1.0)*x9891);
evalcond[0]=(((r01*x9897))+((r02*x9891))+(((-1.0)*x9893*x9895)));
evalcond[1]=((((-1.0)*x9894*x9898))+((r21*x9896))+(((-1.0)*r22*x9895)));
evalcond[2]=((((-1.0)*r12*x9895))+((r11*x9896))+(((-1.0)*x9892*x9898)));
evalcond[3]=((1.0)+((r01*x9896))+(((-1.0)*x9893*x9898))+(((-1.0)*r02*x9895)));
evalcond[4]=(((cj2*sj1))+((r22*x9891))+((cj1*sj2))+(((-1.0)*x9894*x9895))+((r21*x9897)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x9897))+((r12*x9891))+(((-1.0)*x9892*x9895))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9899=((1.0)*gconst5);
CheckValue<IkReal> x9900 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9900.valid){
continue;
}
CheckValue<IkReal> x9901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9899))+(((-1.0)*gconst4*r20)))),-1);
if(!x9901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9900.value)+(((1.5707963267949)*(x9901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9902=IKcos(j4);
IkReal x9903=IKsin(j4);
IkReal x9904=(gconst5*r10);
IkReal x9905=(gconst5*r00);
IkReal x9906=(gconst5*r20);
IkReal x9907=((1.0)*x9902);
IkReal x9908=(gconst4*x9903);
IkReal x9909=(gconst4*x9902);
IkReal x9910=((1.0)*x9903);
evalcond[0]=(((r02*x9903))+(((-1.0)*x9905*x9907))+((r01*x9909)));
evalcond[1]=((((-1.0)*r22*x9907))+(((-1.0)*x9906*x9910))+((r21*x9908)));
evalcond[2]=((((-1.0)*r12*x9907))+((r11*x9908))+(((-1.0)*x9904*x9910)));
evalcond[3]=((1.0)+(((-1.0)*x9905*x9910))+((r01*x9908))+(((-1.0)*r02*x9907)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9903))+((r21*x9909))+(((-1.0)*x9906*x9907)));
evalcond[5]=(((r12*x9903))+(((-1.0)*sj1*sj2))+((r11*x9909))+(((-1.0)*x9904*x9907))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9911=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9911.valid){
continue;
}
CheckValue<IkReal> x9912 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9911.value)))+(x9912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9913=IKcos(j4);
IkReal x9914=IKsin(j4);
IkReal x9915=(gconst5*r10);
IkReal x9916=(gconst5*r00);
IkReal x9917=(gconst5*r20);
IkReal x9918=((1.0)*x9913);
IkReal x9919=(gconst4*x9914);
IkReal x9920=(gconst4*x9913);
IkReal x9921=((1.0)*x9914);
evalcond[0]=((((-1.0)*x9916*x9918))+((r01*x9920))+((r02*x9914)));
evalcond[1]=((((-1.0)*r22*x9918))+(((-1.0)*x9917*x9921))+((r21*x9919)));
evalcond[2]=((((-1.0)*r12*x9918))+((r11*x9919))+(((-1.0)*x9915*x9921)));
evalcond[3]=((1.0)+(((-1.0)*x9916*x9921))+((r01*x9919))+(((-1.0)*r02*x9918)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9917*x9918))+((r22*x9914))+((r21*x9920)));
evalcond[5]=(((r12*x9914))+(((-1.0)*sj1*sj2))+((r11*x9920))+(((-1.0)*x9915*x9918))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9922=((-1.0)*r21);
CheckValue<IkReal> x9925 = IKatan2WithCheck(IkReal(x9922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9925.valid){
continue;
}
IkReal x9923=((1.0)*(x9925.value));
IkReal x9924=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9923)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9923)));
IkReal gconst4=(x9922*x9924);
IkReal gconst5=((1.0)*r20*x9924);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9926=((-1.0)*r21);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(x9926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
IkReal x9927=((1.0)*(x9929.value));
IkReal x9928=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9927)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9927)));
IkReal gconst4=(x9926*x9928);
IkReal gconst5=((1.0)*r20*x9928);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9930=((-1.0)*r21);
CheckValue<IkReal> x9933 = IKatan2WithCheck(IkReal(x9930),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9933.valid){
continue;
}
IkReal x9931=((1.0)*(x9933.value));
IkReal x9932=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9931)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9931)));
IkReal gconst4=(x9930*x9932);
IkReal gconst5=((1.0)*r20*x9932);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9934=(gconst5*r00);
IkReal x9935=(gconst4*r01);
CheckValue<IkReal> x9936 = IKatan2WithCheck(IkReal(((((-1.0)*x9935))+x9934)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9936.valid){
continue;
}
CheckValue<IkReal> x9937=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9934*x9935))+(x9934*x9934)+(x9935*x9935)+(r02*r02))),-1);
if(!x9937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9936.value)+(((1.5707963267949)*(x9937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9938=IKsin(j4);
IkReal x9939=IKcos(j4);
IkReal x9940=(gconst4*r11);
IkReal x9941=(gconst5*r10);
IkReal x9942=(gconst5*r00);
IkReal x9943=(gconst5*r20);
IkReal x9944=((1.0)*x9939);
IkReal x9945=(gconst4*x9938);
IkReal x9946=((1.0)*x9938);
evalcond[0]=((((-1.0)*r22*x9944))+((r21*x9945))+(((-1.0)*x9943*x9946)));
evalcond[1]=((((-1.0)*x9941*x9946))+(((-1.0)*r12*x9944))+((x9938*x9940)));
evalcond[2]=((((-1.0)*gconst4*r01*x9944))+(((-1.0)*r02*x9946))+((x9939*x9942)));
evalcond[3]=((1.0)+((r01*x9945))+(((-1.0)*r02*x9944))+(((-1.0)*x9942*x9946)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9946))+(((-1.0)*gconst4*r21*x9944))+((x9939*x9943)));
evalcond[5]=((((-1.0)*x9940*x9944))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9946))+((cj1*cj2))+((x9939*x9941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9947=((1.0)*gconst5);
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9947))+(((-1.0)*gconst4*r20)))),-1);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9947))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9948.value)))+(x9949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9950=IKsin(j4);
IkReal x9951=IKcos(j4);
IkReal x9952=(gconst4*r11);
IkReal x9953=(gconst5*r10);
IkReal x9954=(gconst5*r00);
IkReal x9955=(gconst5*r20);
IkReal x9956=((1.0)*x9951);
IkReal x9957=(gconst4*x9950);
IkReal x9958=((1.0)*x9950);
evalcond[0]=((((-1.0)*x9955*x9958))+(((-1.0)*r22*x9956))+((r21*x9957)));
evalcond[1]=(((x9950*x9952))+(((-1.0)*x9953*x9958))+(((-1.0)*r12*x9956)));
evalcond[2]=(((x9951*x9954))+(((-1.0)*r02*x9958))+(((-1.0)*gconst4*r01*x9956)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9956))+(((-1.0)*x9954*x9958))+((r01*x9957)));
evalcond[4]=((((-1.0)*gconst4*r21*x9956))+((cj2*sj1))+((x9951*x9955))+((cj1*sj2))+(((-1.0)*r22*x9958)));
evalcond[5]=(((x9951*x9953))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9958))+((cj1*cj2))+(((-1.0)*x9952*x9956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9959=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9959.valid){
continue;
}
CheckValue<IkReal> x9960 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9959.value)))+(x9960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9961=IKsin(j4);
IkReal x9962=IKcos(j4);
IkReal x9963=(gconst4*r11);
IkReal x9964=(gconst5*r10);
IkReal x9965=(gconst5*r00);
IkReal x9966=(gconst5*r20);
IkReal x9967=((1.0)*x9962);
IkReal x9968=(gconst4*x9961);
IkReal x9969=((1.0)*x9961);
evalcond[0]=(((r21*x9968))+(((-1.0)*r22*x9967))+(((-1.0)*x9966*x9969)));
evalcond[1]=((((-1.0)*r12*x9967))+(((-1.0)*x9964*x9969))+((x9961*x9963)));
evalcond[2]=(((x9962*x9965))+(((-1.0)*gconst4*r01*x9967))+(((-1.0)*r02*x9969)));
evalcond[3]=((1.0)+((r01*x9968))+(((-1.0)*x9965*x9969))+(((-1.0)*r02*x9967)));
evalcond[4]=(((cj2*sj1))+((x9962*x9966))+(((-1.0)*gconst4*r21*x9967))+(((-1.0)*r22*x9969))+((cj1*sj2)));
evalcond[5]=(((x9962*x9964))+(((-1.0)*r12*x9969))+(((-1.0)*sj1*sj2))+(((-1.0)*x9963*x9967))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9970=((-1.0)*r21);
IkReal x9971=((-1.0)*r20);
CheckValue<IkReal> x9973 = IKatan2WithCheck(IkReal(x9970),IkReal(x9971),IKFAST_ATAN2_MAGTHRESH);
if(!x9973.valid){
continue;
}
IkReal x9972=((1.0)*(x9973.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9972)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9971);
rxp0_2=(py*r00);
rxp1_0=(py*x9970);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9972)));
IkReal gconst4=x9970;
IkReal gconst5=((1.0)*r20);
IkReal x9974=((1.0)*r01*r21);
IkReal x9975=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9975))+(((-1.0)*x9974)));
j4eval[1]=(((sj3*x9974))+((sj3*x9975)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9976=((-1.0)*r21);
IkReal x9977=((-1.0)*r20);
CheckValue<IkReal> x9979 = IKatan2WithCheck(IkReal(x9976),IkReal(x9977),IKFAST_ATAN2_MAGTHRESH);
if(!x9979.valid){
continue;
}
IkReal x9978=((1.0)*(x9979.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9978)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9977);
rxp0_2=(py*r00);
rxp1_0=(py*x9976);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9978)));
IkReal gconst4=x9976;
IkReal gconst5=((1.0)*r20);
IkReal x9980=((1.0)*r01*r21);
IkReal x9981=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9981))+(((-1.0)*x9980)));
j4eval[1]=((((-1.0)*cj3*x9980))+(((-1.0)*cj3*x9981)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9982=((-1.0)*r21);
IkReal x9983=((-1.0)*r20);
CheckValue<IkReal> x9985 = IKatan2WithCheck(IkReal(x9982),IkReal(x9983),IKFAST_ATAN2_MAGTHRESH);
if(!x9985.valid){
continue;
}
IkReal x9984=((1.0)*(x9985.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9984)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9983);
rxp0_2=(py*r00);
rxp1_0=(py*x9982);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9984)));
IkReal gconst4=x9982;
IkReal gconst5=((1.0)*r20);
IkReal x9986=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x9986))+((r00*r20*x9986)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9987=((1.0)*r01);
CheckValue<IkReal> x9988=IKPowWithIntegerCheck(r12,-1);
if(!x9988.valid){
continue;
}
CheckValue<IkReal> x9989=IKPowWithIntegerCheck(sj3,-1);
if(!x9989.valid){
continue;
}
CheckValue<IkReal> x9990=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x9987))),-1);
if(!x9990.valid){
continue;
}
if( IKabs(((x9988.value)*(x9989.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9990.value)*(((((-1.0)*cj3*gconst5*x9987))+(((-1.0)*cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9988.value)*(x9989.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9990.value)*(((((-1.0)*cj3*gconst5*x9987))+(((-1.0)*cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9988.value)*(x9989.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9990.value)*(((((-1.0)*cj3*gconst5*x9987))+(((-1.0)*cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9991=IKsin(j4);
IkReal x9992=IKcos(j4);
IkReal x9993=(cj2*sj1);
IkReal x9994=(cj1*sj2);
IkReal x9995=(sj1*sj2);
IkReal x9996=(gconst5*r00);
IkReal x9997=(gconst5*sj3);
IkReal x9998=(cj3*gconst5);
IkReal x9999=(gconst4*sj3);
IkReal x10000=(cj3*gconst4);
IkReal x10001=(cj1*cj2);
IkReal x10002=((1.0)*x9991);
IkReal x10003=(gconst4*x9991);
IkReal x10004=((1.0)*x9992);
IkReal x10005=(x9993+x9994);
IkReal x10006=(x9992*x9997);
IkReal x10007=(x10000*x9992);
evalcond[0]=((-1.0)*r12*x9992);
evalcond[1]=((((-1.0)*gconst5*r20*x10002))+((r21*x10003)));
evalcond[2]=((((-1.0)*r12*sj3*x10002))+x10005);
evalcond[3]=(((cj3*r12*x9991))+x10001+(((-1.0)*x9995)));
evalcond[4]=((1.0)+(((-1.0)*x10002*x9996))+((r01*x10003)));
evalcond[5]=(((sj3*x9992*x9996))+((r01*x9998))+(((-1.0)*r01*x10004*x9999))+((r00*x10000)));
evalcond[6]=(((r01*x9997))+((r00*x9999))+(((-1.0)*cj3*x10004*x9996))+((r01*x10007)));
evalcond[7]=(((r21*x9997))+x10005+((r20*x9999))+(((-1.0)*r20*x10004*x9998))+((r21*x10007)));
evalcond[8]=((((-1.0)*r21*x10004*x9999))+((r21*x9998))+(((-1.0)*x10001))+((r20*x10006))+((r20*x10000))+x9995);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10008=((1.0)*gconst5);
IkReal x10009=(gconst4*r01);
CheckValue<IkReal> x10010=IKPowWithIntegerCheck(((((-1.0)*r00*x10008))+x10009),-1);
if(!x10010.valid){
continue;
}
CheckValue<IkReal> x10011=IKPowWithIntegerCheck((((cj3*x10009))+(((-1.0)*cj3*r00*x10008))),-1);
if(!x10011.valid){
continue;
}
if( IKabs(((-1.0)*(x10010.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10011.value)*(((((-1.0)*r01*sj3*x10008))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10010.value)))+IKsqr(((x10011.value)*(((((-1.0)*r01*sj3*x10008))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10010.value)), ((x10011.value)*(((((-1.0)*r01*sj3*x10008))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10012=IKsin(j4);
IkReal x10013=IKcos(j4);
IkReal x10014=(cj2*sj1);
IkReal x10015=(cj1*sj2);
IkReal x10016=(sj1*sj2);
IkReal x10017=(gconst5*r00);
IkReal x10018=(gconst5*sj3);
IkReal x10019=(cj3*gconst5);
IkReal x10020=(gconst4*sj3);
IkReal x10021=(cj3*gconst4);
IkReal x10022=(cj1*cj2);
IkReal x10023=((1.0)*x10012);
IkReal x10024=(gconst4*x10012);
IkReal x10025=((1.0)*x10013);
IkReal x10026=(x10015+x10014);
IkReal x10027=(x10013*x10018);
IkReal x10028=(x10013*x10021);
evalcond[0]=((-1.0)*r12*x10013);
evalcond[1]=((((-1.0)*gconst5*r20*x10023))+((r21*x10024)));
evalcond[2]=(x10026+(((-1.0)*r12*sj3*x10023)));
evalcond[3]=(((cj3*r12*x10012))+(((-1.0)*x10016))+x10022);
evalcond[4]=((1.0)+(((-1.0)*x10017*x10023))+((r01*x10024)));
evalcond[5]=(((r00*x10021))+((r01*x10019))+(((-1.0)*r01*x10020*x10025))+((sj3*x10013*x10017)));
evalcond[6]=((((-1.0)*cj3*x10017*x10025))+((r01*x10028))+((r00*x10020))+((r01*x10018)));
evalcond[7]=(((r21*x10018))+((r21*x10028))+((r20*x10020))+x10026+(((-1.0)*r20*x10019*x10025)));
evalcond[8]=(((r21*x10019))+(((-1.0)*x10022))+((r20*x10027))+((r20*x10021))+x10016+(((-1.0)*r21*x10020*x10025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10029=((1.0)*gconst4);
IkReal x10030=(gconst5*r00);
CheckValue<IkReal> x10031=IKPowWithIntegerCheck(((((-1.0)*x10030))+((gconst4*r01))),-1);
if(!x10031.valid){
continue;
}
CheckValue<IkReal> x10032=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x10029))+((sj3*x10030))),-1);
if(!x10032.valid){
continue;
}
if( IKabs(((-1.0)*(x10031.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10032.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10029)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10031.value)))+IKsqr(((x10032.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10029))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10031.value)), ((x10032.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10029))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10033=IKsin(j4);
IkReal x10034=IKcos(j4);
IkReal x10035=(cj2*sj1);
IkReal x10036=(cj1*sj2);
IkReal x10037=(sj1*sj2);
IkReal x10038=(gconst5*r00);
IkReal x10039=(gconst5*sj3);
IkReal x10040=(cj3*gconst5);
IkReal x10041=(gconst4*sj3);
IkReal x10042=(cj3*gconst4);
IkReal x10043=(cj1*cj2);
IkReal x10044=((1.0)*x10033);
IkReal x10045=(gconst4*x10033);
IkReal x10046=((1.0)*x10034);
IkReal x10047=(x10036+x10035);
IkReal x10048=(x10034*x10039);
IkReal x10049=(x10034*x10042);
evalcond[0]=((-1.0)*r12*x10034);
evalcond[1]=((((-1.0)*gconst5*r20*x10044))+((r21*x10045)));
evalcond[2]=((((-1.0)*r12*sj3*x10044))+x10047);
evalcond[3]=((((-1.0)*x10037))+((cj3*r12*x10033))+x10043);
evalcond[4]=((1.0)+(((-1.0)*x10038*x10044))+((r01*x10045)));
evalcond[5]=(((r00*x10042))+(((-1.0)*r01*x10041*x10046))+((r01*x10040))+((sj3*x10034*x10038)));
evalcond[6]=(((r00*x10041))+((r01*x10049))+(((-1.0)*cj3*x10038*x10046))+((r01*x10039)));
evalcond[7]=(((r21*x10049))+((r21*x10039))+x10047+((r20*x10041))+(((-1.0)*r20*x10040*x10046)));
evalcond[8]=((((-1.0)*r21*x10041*x10046))+(((-1.0)*x10043))+((r21*x10040))+x10037+((r20*x10042))+((r20*x10048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10050=gconst4*gconst4;
IkReal x10051=gconst5*gconst5;
IkReal x10052=(r01*r20);
IkReal x10053=(gconst4*sj3);
IkReal x10054=(r01*r21);
IkReal x10055=((1.0)*cj3);
IkReal x10056=(r00*r21);
IkReal x10057=(r00*r20);
IkReal x10058=(cj3*gconst4*gconst5);
IkReal x10059=((1.0)*x10051);
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal((((r00*r22*x10053))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x10053*x10054))+(((-1.0)*gconst5*x10053*x10057))+((sj3*x10050*x10056))+(((-1.0)*sj3*x10052*x10059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
CheckValue<IkReal> x10061=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10050*x10054*x10055))+(((-1.0)*r02*r22*x10055))+(((-1.0)*x10051*x10055*x10057))+((x10052*x10058))+((x10056*x10058)))),-1);
if(!x10061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10060.value)+(((1.5707963267949)*(x10061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10062=IKsin(j4);
IkReal x10063=IKcos(j4);
IkReal x10064=(cj2*sj1);
IkReal x10065=(cj1*sj2);
IkReal x10066=(gconst4*r11);
IkReal x10067=(sj1*sj2);
IkReal x10068=(gconst5*r10);
IkReal x10069=(cj1*cj2);
IkReal x10070=(gconst4*r01);
IkReal x10071=(gconst5*sj3);
IkReal x10072=(gconst5*r00);
IkReal x10073=(gconst4*sj3);
IkReal x10074=(cj3*gconst5);
IkReal x10075=(cj3*gconst4);
IkReal x10076=(gconst4*r21);
IkReal x10077=((1.0)*x10063);
IkReal x10078=((1.0)*x10062);
IkReal x10079=(cj3*x10062);
IkReal x10080=(cj3*x10063);
IkReal x10081=(x10064+x10065);
IkReal x10082=(x10063*x10071);
evalcond[0]=((((-1.0)*gconst5*r20*x10078))+((x10062*x10076))+(((-1.0)*r22*x10077)));
evalcond[1]=((((-1.0)*x10068*x10078))+((x10062*x10066))+(((-1.0)*r12*x10077)));
evalcond[2]=((1.0)+(((-1.0)*x10072*x10078))+((x10062*x10070))+(((-1.0)*r02*x10077)));
evalcond[3]=(((x10070*x10080))+((r00*x10073))+((r01*x10071))+(((-1.0)*cj3*x10072*x10077))+((r02*x10079)));
evalcond[4]=(((r00*x10082))+((r00*x10075))+(((-1.0)*sj3*x10070*x10077))+((r01*x10074))+(((-1.0)*r02*sj3*x10078)));
evalcond[5]=(((r20*x10073))+(((-1.0)*r20*x10074*x10077))+((r21*x10063*x10075))+x10081+((r22*x10079))+((r21*x10071)));
evalcond[6]=(((r10*x10075))+(((-1.0)*r12*sj3*x10078))+((sj3*x10063*x10068))+x10081+(((-1.0)*sj3*x10066*x10077))+((r11*x10074)));
evalcond[7]=(((r10*x10073))+((r12*x10079))+(((-1.0)*cj3*x10068*x10077))+((x10066*x10080))+x10069+((r11*x10071))+(((-1.0)*x10067)));
evalcond[8]=((((-1.0)*r22*sj3*x10078))+((r20*x10075))+((r20*x10082))+x10067+((r21*x10074))+(((-1.0)*r21*x10073*x10077))+(((-1.0)*x10069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10083=((1.0)*gconst5);
CheckValue<IkReal> x10084 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10084.valid){
continue;
}
CheckValue<IkReal> x10085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10083))+(((-1.0)*gconst4*r20)))),-1);
if(!x10085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10084.value)+(((1.5707963267949)*(x10085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10086=IKsin(j4);
IkReal x10087=IKcos(j4);
IkReal x10088=(cj2*sj1);
IkReal x10089=(cj1*sj2);
IkReal x10090=(gconst4*r11);
IkReal x10091=(sj1*sj2);
IkReal x10092=(gconst5*r10);
IkReal x10093=(cj1*cj2);
IkReal x10094=(gconst4*r01);
IkReal x10095=(gconst5*sj3);
IkReal x10096=(gconst5*r00);
IkReal x10097=(gconst4*sj3);
IkReal x10098=(cj3*gconst5);
IkReal x10099=(cj3*gconst4);
IkReal x10100=(gconst4*r21);
IkReal x10101=((1.0)*x10087);
IkReal x10102=((1.0)*x10086);
IkReal x10103=(cj3*x10086);
IkReal x10104=(cj3*x10087);
IkReal x10105=(x10088+x10089);
IkReal x10106=(x10087*x10095);
evalcond[0]=((((-1.0)*r22*x10101))+(((-1.0)*gconst5*r20*x10102))+((x10086*x10100)));
evalcond[1]=((((-1.0)*r12*x10101))+((x10086*x10090))+(((-1.0)*x10092*x10102)));
evalcond[2]=((1.0)+((x10086*x10094))+(((-1.0)*r02*x10101))+(((-1.0)*x10096*x10102)));
evalcond[3]=(((x10094*x10104))+((r02*x10103))+(((-1.0)*cj3*x10096*x10101))+((r01*x10095))+((r00*x10097)));
evalcond[4]=(((r00*x10106))+(((-1.0)*sj3*x10094*x10101))+(((-1.0)*r02*sj3*x10102))+((r01*x10098))+((r00*x10099)));
evalcond[5]=(x10105+(((-1.0)*r20*x10098*x10101))+((r21*x10095))+((r20*x10097))+((r21*x10087*x10099))+((r22*x10103)));
evalcond[6]=((((-1.0)*r12*sj3*x10102))+((r11*x10098))+x10105+(((-1.0)*sj3*x10090*x10101))+((r10*x10099))+((sj3*x10087*x10092)));
evalcond[7]=(((r11*x10095))+x10093+((r10*x10097))+((r12*x10103))+((x10090*x10104))+(((-1.0)*cj3*x10092*x10101))+(((-1.0)*x10091)));
evalcond[8]=(((r20*x10106))+x10091+((r21*x10098))+(((-1.0)*r21*x10097*x10101))+(((-1.0)*r22*sj3*x10102))+((r20*x10099))+(((-1.0)*x10093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10107=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10107.valid){
continue;
}
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10107.value)))+(x10108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10109=IKsin(j4);
IkReal x10110=IKcos(j4);
IkReal x10111=(cj2*sj1);
IkReal x10112=(cj1*sj2);
IkReal x10113=(gconst4*r11);
IkReal x10114=(sj1*sj2);
IkReal x10115=(gconst5*r10);
IkReal x10116=(cj1*cj2);
IkReal x10117=(gconst4*r01);
IkReal x10118=(gconst5*sj3);
IkReal x10119=(gconst5*r00);
IkReal x10120=(gconst4*sj3);
IkReal x10121=(cj3*gconst5);
IkReal x10122=(cj3*gconst4);
IkReal x10123=(gconst4*r21);
IkReal x10124=((1.0)*x10110);
IkReal x10125=((1.0)*x10109);
IkReal x10126=(cj3*x10109);
IkReal x10127=(cj3*x10110);
IkReal x10128=(x10111+x10112);
IkReal x10129=(x10110*x10118);
evalcond[0]=((((-1.0)*gconst5*r20*x10125))+((x10109*x10123))+(((-1.0)*r22*x10124)));
evalcond[1]=((((-1.0)*x10115*x10125))+((x10109*x10113))+(((-1.0)*r12*x10124)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10124))+((x10109*x10117))+(((-1.0)*x10119*x10125)));
evalcond[3]=(((r01*x10118))+(((-1.0)*cj3*x10119*x10124))+((r02*x10126))+((x10117*x10127))+((r00*x10120)));
evalcond[4]=((((-1.0)*sj3*x10117*x10124))+((r00*x10122))+((r00*x10129))+((r01*x10121))+(((-1.0)*r02*sj3*x10125)));
evalcond[5]=(((r21*x10118))+((r20*x10120))+(((-1.0)*r20*x10121*x10124))+x10128+((r22*x10126))+((r21*x10110*x10122)));
evalcond[6]=(((r10*x10122))+(((-1.0)*sj3*x10113*x10124))+x10128+(((-1.0)*r12*sj3*x10125))+((sj3*x10110*x10115))+((r11*x10121)));
evalcond[7]=((((-1.0)*x10114))+((r10*x10120))+((x10113*x10127))+x10116+((r11*x10118))+(((-1.0)*cj3*x10115*x10124))+((r12*x10126)));
evalcond[8]=((((-1.0)*x10116))+((r20*x10129))+((r20*x10122))+((r21*x10121))+(((-1.0)*r22*sj3*x10125))+x10114+(((-1.0)*r21*x10120*x10124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10130=((-1.0)*r21);
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(x10130),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
IkReal x10131=((1.0)*(x10133.value));
IkReal x10132=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10131)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10131)));
IkReal gconst4=(x10130*x10132);
IkReal gconst5=((1.0)*r20*x10132);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10134=((-1.0)*r21);
CheckValue<IkReal> x10137 = IKatan2WithCheck(IkReal(x10134),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10137.valid){
continue;
}
IkReal x10135=((1.0)*(x10137.value));
IkReal x10136=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10135)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10135)));
IkReal gconst4=(x10134*x10136);
IkReal gconst5=((1.0)*r20*x10136);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10138=((-1.0)*r21);
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal(x10138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
IkReal x10139=((1.0)*(x10141.value));
IkReal x10140=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10139)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10139)));
IkReal gconst4=(x10138*x10140);
IkReal gconst5=((1.0)*r20*x10140);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10142=((-1.0)*r21);
CheckValue<IkReal> x10145 = IKatan2WithCheck(IkReal(x10142),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10145.valid){
continue;
}
IkReal x10143=((1.0)*(x10145.value));
IkReal x10144=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10143)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10143)));
IkReal gconst4=(x10142*x10144);
IkReal gconst5=((1.0)*r20*x10144);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10146=((-1.0)*r21);
CheckValue<IkReal> x10149 = IKatan2WithCheck(IkReal(x10146),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10149.valid){
continue;
}
IkReal x10147=((1.0)*(x10149.value));
IkReal x10148=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10147)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10147)));
IkReal gconst4=(x10146*x10148);
IkReal gconst5=((1.0)*r20*x10148);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10150=((-1.0)*r21);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10151=((1.0)*(x10153.value));
IkReal x10152=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10151)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10151)));
IkReal gconst4=(x10150*x10152);
IkReal gconst5=((1.0)*r20*x10152);
IkReal x10154=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10158=IKPowWithIntegerCheck(x10154,-1);
if(!x10158.valid){
continue;
}
IkReal x10155=x10158.value;
IkReal x10156=((1.0)*x10155);
IkReal x10157=((((-1.0)*x10156*(r00*r00)*(r20*r20)))+(((-1.0)*x10156*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10155)));
j4eval[0]=x10157;
j4eval[1]=r02;
j4eval[2]=x10154;
j4eval[3]=IKsign(x10157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10159=(gconst5*r00);
IkReal x10160=(gconst4*r01);
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(((((-1.0)*x10160))+x10159)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
CheckValue<IkReal> x10162=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10159*x10159)))+(((-1.0)*(x10160*x10160)))+(((2.0)*x10159*x10160)))),-1);
if(!x10162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10161.value)+(((1.5707963267949)*(x10162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10163=IKsin(j4);
IkReal x10164=IKcos(j4);
IkReal x10165=(gconst4*r11);
IkReal x10166=((1.0)*cj1);
IkReal x10167=(gconst5*r10);
IkReal x10168=(gconst4*r01);
IkReal x10169=(gconst5*r00);
IkReal x10170=(gconst4*r21);
IkReal x10171=(gconst5*r20);
IkReal x10172=((1.0)*x10164);
IkReal x10173=((1.0)*x10163);
evalcond[0]=((((-1.0)*r22*x10172))+((x10163*x10170))+(((-1.0)*x10171*x10173)));
evalcond[1]=((((-1.0)*r12*x10172))+(((-1.0)*x10167*x10173))+((x10163*x10165)));
evalcond[2]=(((x10164*x10169))+(((-1.0)*x10168*x10172))+(((-1.0)*r02*x10173)));
evalcond[3]=((-1.0)+(((-1.0)*x10169*x10173))+((x10163*x10168))+(((-1.0)*r02*x10172)));
evalcond[4]=((((-1.0)*r22*x10173))+((x10164*x10171))+((sj1*sj2))+(((-1.0)*cj2*x10166))+(((-1.0)*x10170*x10172)));
evalcond[5]=((((-1.0)*sj2*x10166))+(((-1.0)*x10165*x10172))+((x10164*x10167))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10174=((1.0)*gconst5);
CheckValue<IkReal> x10175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10174))+(((-1.0)*gconst4*r10)))),-1);
if(!x10175.valid){
continue;
}
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10174))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10175.value)))+(x10176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10177=IKsin(j4);
IkReal x10178=IKcos(j4);
IkReal x10179=(gconst4*r11);
IkReal x10180=((1.0)*cj1);
IkReal x10181=(gconst5*r10);
IkReal x10182=(gconst4*r01);
IkReal x10183=(gconst5*r00);
IkReal x10184=(gconst4*r21);
IkReal x10185=(gconst5*r20);
IkReal x10186=((1.0)*x10178);
IkReal x10187=((1.0)*x10177);
evalcond[0]=(((x10177*x10184))+(((-1.0)*x10185*x10187))+(((-1.0)*r22*x10186)));
evalcond[1]=((((-1.0)*r12*x10186))+((x10177*x10179))+(((-1.0)*x10181*x10187)));
evalcond[2]=(((x10178*x10183))+(((-1.0)*r02*x10187))+(((-1.0)*x10182*x10186)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10186))+(((-1.0)*x10183*x10187))+((x10177*x10182)));
evalcond[4]=(((x10178*x10185))+(((-1.0)*cj2*x10180))+((sj1*sj2))+(((-1.0)*x10184*x10186))+(((-1.0)*r22*x10187)));
evalcond[5]=((((-1.0)*x10179*x10186))+((x10178*x10181))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10180))+(((-1.0)*r12*x10187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10188.value)+(((1.5707963267949)*(x10189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10190=IKsin(j4);
IkReal x10191=IKcos(j4);
IkReal x10192=(gconst4*r11);
IkReal x10193=((1.0)*cj1);
IkReal x10194=(gconst5*r10);
IkReal x10195=(gconst4*r01);
IkReal x10196=(gconst5*r00);
IkReal x10197=(gconst4*r21);
IkReal x10198=(gconst5*r20);
IkReal x10199=((1.0)*x10191);
IkReal x10200=((1.0)*x10190);
evalcond[0]=((((-1.0)*x10198*x10200))+(((-1.0)*r22*x10199))+((x10190*x10197)));
evalcond[1]=((((-1.0)*x10194*x10200))+(((-1.0)*r12*x10199))+((x10190*x10192)));
evalcond[2]=((((-1.0)*r02*x10200))+(((-1.0)*x10195*x10199))+((x10191*x10196)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10199))+(((-1.0)*x10196*x10200))+((x10190*x10195)));
evalcond[4]=((((-1.0)*cj2*x10193))+(((-1.0)*r22*x10200))+((sj1*sj2))+(((-1.0)*x10197*x10199))+((x10191*x10198)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10193))+(((-1.0)*x10192*x10199))+((x10191*x10194))+(((-1.0)*r12*x10200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10201=((-1.0)*r21);
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(x10201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
IkReal x10202=((1.0)*(x10204.value));
IkReal x10203=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10202)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10202)));
IkReal gconst4=(x10201*x10203);
IkReal gconst5=((1.0)*r20*x10203);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10205=((-1.0)*r21);
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal(x10205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
IkReal x10206=((1.0)*(x10208.value));
IkReal x10207=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10206)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10206)));
IkReal gconst4=(x10205*x10207);
IkReal gconst5=((1.0)*r20*x10207);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10209=((-1.0)*r21);
CheckValue<IkReal> x10212 = IKatan2WithCheck(IkReal(x10209),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10212.valid){
continue;
}
IkReal x10210=((1.0)*(x10212.value));
IkReal x10211=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10210)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10210)));
IkReal gconst4=(x10209*x10211);
IkReal gconst5=((1.0)*r20*x10211);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10213=(gconst4*r01);
IkReal x10214=(gconst5*r00);
CheckValue<IkReal> x10215=IKPowWithIntegerCheck(IKsign(((x10213*x10213)+(x10214*x10214)+(r02*r02)+(((-2.0)*x10213*x10214)))),-1);
if(!x10215.valid){
continue;
}
CheckValue<IkReal> x10216 = IKatan2WithCheck(IkReal((x10213+(((-1.0)*x10214)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10215.value)))+(x10216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10217=IKcos(j4);
IkReal x10218=IKsin(j4);
IkReal x10219=(gconst4*r11);
IkReal x10220=(gconst5*r10);
IkReal x10221=((1.0)*cj1);
IkReal x10222=(gconst5*r00);
IkReal x10223=(gconst5*r20);
IkReal x10224=((1.0)*x10217);
IkReal x10225=(gconst4*x10217);
IkReal x10226=((1.0)*x10218);
IkReal x10227=(gconst4*x10218);
evalcond[0]=((((-1.0)*x10222*x10224))+((r02*x10218))+((r01*x10225)));
evalcond[1]=(((r21*x10227))+(((-1.0)*r22*x10224))+(((-1.0)*x10223*x10226)));
evalcond[2]=((((-1.0)*x10220*x10226))+((x10218*x10219))+(((-1.0)*r12*x10224)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10224))+(((-1.0)*x10222*x10226))+((r01*x10227)));
evalcond[4]=((((-1.0)*cj2*x10221))+((sj1*sj2))+((r21*x10225))+((r22*x10218))+(((-1.0)*x10223*x10224)));
evalcond[5]=((((-1.0)*x10220*x10224))+((r12*x10218))+((x10217*x10219))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10228=((1.0)*gconst5);
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10228))+(((-1.0)*gconst4*r10)))),-1);
if(!x10229.valid){
continue;
}
CheckValue<IkReal> x10230 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10228))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10229.value)))+(x10230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10231=IKcos(j4);
IkReal x10232=IKsin(j4);
IkReal x10233=(gconst4*r11);
IkReal x10234=(gconst5*r10);
IkReal x10235=((1.0)*cj1);
IkReal x10236=(gconst5*r00);
IkReal x10237=(gconst5*r20);
IkReal x10238=((1.0)*x10231);
IkReal x10239=(gconst4*x10231);
IkReal x10240=((1.0)*x10232);
IkReal x10241=(gconst4*x10232);
evalcond[0]=(((r02*x10232))+(((-1.0)*x10236*x10238))+((r01*x10239)));
evalcond[1]=((((-1.0)*x10237*x10240))+((r21*x10241))+(((-1.0)*r22*x10238)));
evalcond[2]=(((x10232*x10233))+(((-1.0)*x10234*x10240))+(((-1.0)*r12*x10238)));
evalcond[3]=((-1.0)+(((-1.0)*x10236*x10240))+((r01*x10241))+(((-1.0)*r02*x10238)));
evalcond[4]=((((-1.0)*x10237*x10238))+((r22*x10232))+((sj1*sj2))+((r21*x10239))+(((-1.0)*cj2*x10235)));
evalcond[5]=((((-1.0)*x10234*x10238))+(((-1.0)*cj2*sj1))+((x10231*x10233))+((r12*x10232))+(((-1.0)*sj2*x10235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10242 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10242.valid){
continue;
}
CheckValue<IkReal> x10243=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10242.value)+(((1.5707963267949)*(x10243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10244=IKcos(j4);
IkReal x10245=IKsin(j4);
IkReal x10246=(gconst4*r11);
IkReal x10247=(gconst5*r10);
IkReal x10248=((1.0)*cj1);
IkReal x10249=(gconst5*r00);
IkReal x10250=(gconst5*r20);
IkReal x10251=((1.0)*x10244);
IkReal x10252=(gconst4*x10244);
IkReal x10253=((1.0)*x10245);
IkReal x10254=(gconst4*x10245);
evalcond[0]=(((r02*x10245))+(((-1.0)*x10249*x10251))+((r01*x10252)));
evalcond[1]=(((r21*x10254))+(((-1.0)*r22*x10251))+(((-1.0)*x10250*x10253)));
evalcond[2]=((((-1.0)*x10247*x10253))+((x10245*x10246))+(((-1.0)*r12*x10251)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10251))+(((-1.0)*x10249*x10253))+((r01*x10254)));
evalcond[4]=(((r22*x10245))+(((-1.0)*cj2*x10248))+((sj1*sj2))+((r21*x10252))+(((-1.0)*x10250*x10251)));
evalcond[5]=((((-1.0)*x10247*x10251))+(((-1.0)*cj2*sj1))+((x10244*x10246))+(((-1.0)*sj2*x10248))+((r12*x10245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10255=((-1.0)*r21);
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal(x10255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
IkReal x10256=((1.0)*(x10258.value));
IkReal x10257=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10256)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10256)));
IkReal gconst4=(x10255*x10257);
IkReal gconst5=((1.0)*r20*x10257);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10259=((-1.0)*r21);
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(x10259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
IkReal x10260=((1.0)*(x10262.value));
IkReal x10261=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10260)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10260)));
IkReal gconst4=(x10259*x10261);
IkReal gconst5=((1.0)*r20*x10261);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10263=((-1.0)*r21);
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal(x10263),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
IkReal x10264=((1.0)*(x10266.value));
IkReal x10265=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10264)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10264)));
IkReal gconst4=(x10263*x10265);
IkReal gconst5=((1.0)*r20*x10265);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10267=(gconst4*r01);
IkReal x10268=(gconst5*r00);
CheckValue<IkReal> x10269=IKPowWithIntegerCheck(IKsign(((x10268*x10268)+(((-2.0)*x10267*x10268))+(r02*r02)+(x10267*x10267))),-1);
if(!x10269.valid){
continue;
}
CheckValue<IkReal> x10270 = IKatan2WithCheck(IkReal(((((-1.0)*x10268))+x10267)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10269.value)))+(x10270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10271=IKcos(j4);
IkReal x10272=IKsin(j4);
IkReal x10273=(gconst4*r11);
IkReal x10274=(gconst5*r10);
IkReal x10275=(gconst5*r00);
IkReal x10276=(gconst5*r20);
IkReal x10277=((1.0)*x10271);
IkReal x10278=(gconst4*x10271);
IkReal x10279=((1.0)*x10272);
IkReal x10280=(gconst4*x10272);
evalcond[0]=(((r01*x10278))+((r02*x10272))+(((-1.0)*x10275*x10277)));
evalcond[1]=((((-1.0)*r22*x10277))+((r21*x10280))+(((-1.0)*x10276*x10279)));
evalcond[2]=((((-1.0)*x10274*x10279))+(((-1.0)*r12*x10277))+((x10272*x10273)));
evalcond[3]=((-1.0)+((r01*x10280))+(((-1.0)*r02*x10277))+(((-1.0)*x10275*x10279)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10278))+(((-1.0)*x10276*x10277))+((r22*x10272)));
evalcond[5]=((((-1.0)*x10274*x10277))+((r12*x10272))+((x10271*x10273))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10281=((1.0)*gconst5);
CheckValue<IkReal> x10282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10281))+(((-1.0)*gconst4*r10)))),-1);
if(!x10282.valid){
continue;
}
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10282.value)))+(x10283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10284=IKcos(j4);
IkReal x10285=IKsin(j4);
IkReal x10286=(gconst4*r11);
IkReal x10287=(gconst5*r10);
IkReal x10288=(gconst5*r00);
IkReal x10289=(gconst5*r20);
IkReal x10290=((1.0)*x10284);
IkReal x10291=(gconst4*x10284);
IkReal x10292=((1.0)*x10285);
IkReal x10293=(gconst4*x10285);
evalcond[0]=(((r02*x10285))+(((-1.0)*x10288*x10290))+((r01*x10291)));
evalcond[1]=(((r21*x10293))+(((-1.0)*x10289*x10292))+(((-1.0)*r22*x10290)));
evalcond[2]=((((-1.0)*r12*x10290))+((x10285*x10286))+(((-1.0)*x10287*x10292)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10290))+(((-1.0)*x10288*x10292))+((r01*x10293)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10285))+((r21*x10291))+(((-1.0)*x10289*x10290)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10285))+((x10284*x10286))+(((-1.0)*x10287*x10290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
CheckValue<IkReal> x10295=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10294.value)+(((1.5707963267949)*(x10295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10296=IKcos(j4);
IkReal x10297=IKsin(j4);
IkReal x10298=(gconst4*r11);
IkReal x10299=(gconst5*r10);
IkReal x10300=(gconst5*r00);
IkReal x10301=(gconst5*r20);
IkReal x10302=((1.0)*x10296);
IkReal x10303=(gconst4*x10296);
IkReal x10304=((1.0)*x10297);
IkReal x10305=(gconst4*x10297);
evalcond[0]=((((-1.0)*x10300*x10302))+((r01*x10303))+((r02*x10297)));
evalcond[1]=((((-1.0)*x10301*x10304))+(((-1.0)*r22*x10302))+((r21*x10305)));
evalcond[2]=((((-1.0)*r12*x10302))+((x10297*x10298))+(((-1.0)*x10299*x10304)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10302))+(((-1.0)*x10300*x10304))+((r01*x10305)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10301*x10302))+((cj1*sj2))+((r21*x10303))+((r22*x10297)));
evalcond[5]=(((r12*x10297))+((x10296*x10298))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10299*x10302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10306=((-1.0)*r21);
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(x10306),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
IkReal x10307=((1.0)*(x10309.value));
IkReal x10308=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10307)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10307)));
IkReal gconst4=(x10306*x10308);
IkReal gconst5=((1.0)*r20*x10308);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10310=((-1.0)*r21);
CheckValue<IkReal> x10313 = IKatan2WithCheck(IkReal(x10310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10313.valid){
continue;
}
IkReal x10311=((1.0)*(x10313.value));
IkReal x10312=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10311)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10311)));
IkReal gconst4=(x10310*x10312);
IkReal gconst5=((1.0)*r20*x10312);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10314=((-1.0)*r21);
CheckValue<IkReal> x10317 = IKatan2WithCheck(IkReal(x10314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10317.valid){
continue;
}
IkReal x10315=((1.0)*(x10317.value));
IkReal x10316=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10315)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10315)));
IkReal gconst4=(x10314*x10316);
IkReal gconst5=((1.0)*r20*x10316);
IkReal x10318=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10322=IKPowWithIntegerCheck(x10318,-1);
if(!x10322.valid){
continue;
}
IkReal x10319=x10322.value;
IkReal x10320=((1.0)*x10319);
IkReal x10321=((((-1.0)*(r02*r02)))+(((-1.0)*x10320*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10319))+(((-1.0)*x10320*(r00*r00)*(r20*r20))));
j4eval[0]=x10321;
j4eval[1]=r02;
j4eval[2]=x10318;
j4eval[3]=IKsign(x10321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10323=(gconst5*r00);
IkReal x10324=(gconst4*r01);
CheckValue<IkReal> x10325 = IKatan2WithCheck(IkReal(((((-1.0)*x10324))+x10323)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10325.valid){
continue;
}
CheckValue<IkReal> x10326=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10324*x10324)))+(((-1.0)*(r02*r02)))+(((2.0)*x10323*x10324))+(((-1.0)*(x10323*x10323))))),-1);
if(!x10326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10325.value)+(((1.5707963267949)*(x10326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10327=IKsin(j4);
IkReal x10328=IKcos(j4);
IkReal x10329=(gconst4*r11);
IkReal x10330=(gconst5*r10);
IkReal x10331=(gconst4*r01);
IkReal x10332=(gconst5*r00);
IkReal x10333=(gconst4*r21);
IkReal x10334=(gconst5*r20);
IkReal x10335=((1.0)*x10328);
IkReal x10336=((1.0)*x10327);
evalcond[0]=((((-1.0)*x10334*x10336))+((x10327*x10333))+(((-1.0)*r22*x10335)));
evalcond[1]=(((x10327*x10329))+(((-1.0)*r12*x10335))+(((-1.0)*x10330*x10336)));
evalcond[2]=(((x10328*x10332))+(((-1.0)*x10331*x10335))+(((-1.0)*r02*x10336)));
evalcond[3]=((-1.0)+((x10327*x10331))+(((-1.0)*x10332*x10336))+(((-1.0)*r02*x10335)));
evalcond[4]=(((cj2*sj1))+((x10328*x10334))+(((-1.0)*x10333*x10335))+((cj1*sj2))+(((-1.0)*r22*x10336)));
evalcond[5]=(((x10328*x10330))+(((-1.0)*r12*x10336))+(((-1.0)*x10329*x10335))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10337=((1.0)*gconst5);
CheckValue<IkReal> x10338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10337))+(((-1.0)*gconst4*r10)))),-1);
if(!x10338.valid){
continue;
}
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10338.value)))+(x10339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10340=IKsin(j4);
IkReal x10341=IKcos(j4);
IkReal x10342=(gconst4*r11);
IkReal x10343=(gconst5*r10);
IkReal x10344=(gconst4*r01);
IkReal x10345=(gconst5*r00);
IkReal x10346=(gconst4*r21);
IkReal x10347=(gconst5*r20);
IkReal x10348=((1.0)*x10341);
IkReal x10349=((1.0)*x10340);
evalcond[0]=((((-1.0)*x10347*x10349))+((x10340*x10346))+(((-1.0)*r22*x10348)));
evalcond[1]=((((-1.0)*x10343*x10349))+(((-1.0)*r12*x10348))+((x10340*x10342)));
evalcond[2]=(((x10341*x10345))+(((-1.0)*x10344*x10348))+(((-1.0)*r02*x10349)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10348))+((x10340*x10344))+(((-1.0)*x10345*x10349)));
evalcond[4]=(((cj2*sj1))+((x10341*x10347))+((cj1*sj2))+(((-1.0)*x10346*x10348))+(((-1.0)*r22*x10349)));
evalcond[5]=(((x10341*x10343))+(((-1.0)*x10342*x10348))+(((-1.0)*r12*x10349))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10350 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10350.valid){
continue;
}
CheckValue<IkReal> x10351=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10350.value)+(((1.5707963267949)*(x10351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10352=IKsin(j4);
IkReal x10353=IKcos(j4);
IkReal x10354=(gconst4*r11);
IkReal x10355=(gconst5*r10);
IkReal x10356=(gconst4*r01);
IkReal x10357=(gconst5*r00);
IkReal x10358=(gconst4*r21);
IkReal x10359=(gconst5*r20);
IkReal x10360=((1.0)*x10353);
IkReal x10361=((1.0)*x10352);
evalcond[0]=((((-1.0)*x10359*x10361))+((x10352*x10358))+(((-1.0)*r22*x10360)));
evalcond[1]=((((-1.0)*x10355*x10361))+((x10352*x10354))+(((-1.0)*r12*x10360)));
evalcond[2]=((((-1.0)*x10356*x10360))+((x10353*x10357))+(((-1.0)*r02*x10361)));
evalcond[3]=((-1.0)+((x10352*x10356))+(((-1.0)*x10357*x10361))+(((-1.0)*r02*x10360)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10358*x10360))+((x10353*x10359))+(((-1.0)*r22*x10361)));
evalcond[5]=((((-1.0)*x10354*x10360))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10353*x10355))+(((-1.0)*r12*x10361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10362=gconst4*gconst4;
IkReal x10363=gconst5*gconst5;
IkReal x10364=(r01*r20);
IkReal x10365=(gconst4*sj3);
IkReal x10366=(r01*r21);
IkReal x10367=((1.0)*cj3);
IkReal x10368=(r00*r21);
IkReal x10369=(r00*r20);
IkReal x10370=(cj3*gconst4*gconst5);
IkReal x10371=((1.0)*x10363);
CheckValue<IkReal> x10372 = IKatan2WithCheck(IkReal((((r00*r22*x10365))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x10364*x10371))+((sj3*x10362*x10368))+(((-1.0)*gconst5*x10365*x10369))+((gconst5*x10365*x10366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10372.valid){
continue;
}
CheckValue<IkReal> x10373=IKPowWithIntegerCheck(IKsign((((x10364*x10370))+(((-1.0)*r02*r22*x10367))+(((-1.0)*x10362*x10366*x10367))+((x10368*x10370))+(((-1.0)*x10363*x10367*x10369)))),-1);
if(!x10373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10372.value)+(((1.5707963267949)*(x10373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10374=IKsin(j4);
IkReal x10375=IKcos(j4);
IkReal x10376=(sj1*sj2);
IkReal x10377=(gconst5*sj3);
IkReal x10378=(gconst4*r11);
IkReal x10379=(gconst5*r10);
IkReal x10380=((1.0)*cj1);
IkReal x10381=(gconst4*r01);
IkReal x10382=(cj2*sj1);
IkReal x10383=(gconst5*r00);
IkReal x10384=(gconst4*sj3);
IkReal x10385=(cj3*gconst5);
IkReal x10386=(cj3*gconst4);
IkReal x10387=(gconst4*r21);
IkReal x10388=(cj2*x10380);
IkReal x10389=((1.0)*x10375);
IkReal x10390=((1.0)*x10374);
IkReal x10391=(cj3*x10374);
IkReal x10392=(cj3*x10375);
evalcond[0]=((((-1.0)*gconst5*r20*x10390))+(((-1.0)*r22*x10389))+((x10374*x10387)));
evalcond[1]=((((-1.0)*x10379*x10390))+(((-1.0)*r12*x10389))+((x10374*x10378)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10389))+(((-1.0)*x10383*x10390))+((x10374*x10381)));
evalcond[3]=(((r01*x10377))+((r02*x10391))+((x10381*x10392))+(((-1.0)*cj3*x10383*x10389))+((r00*x10384)));
evalcond[4]=(((r00*x10375*x10377))+(((-1.0)*sj3*x10381*x10389))+((r00*x10386))+((r01*x10385))+(((-1.0)*r02*sj3*x10390)));
evalcond[5]=((((-1.0)*r20*x10385*x10389))+((r21*x10375*x10386))+((cj1*sj2))+((r22*x10391))+x10382+((r20*x10384))+((r21*x10377)));
evalcond[6]=((((-1.0)*cj3*x10379*x10389))+((r12*x10391))+(((-1.0)*x10388))+((r10*x10384))+x10376+((x10378*x10392))+((r11*x10377)));
evalcond[7]=(((r21*x10385))+((r20*x10375*x10377))+(((-1.0)*r21*x10384*x10389))+(((-1.0)*x10388))+(((-1.0)*r22*sj3*x10390))+x10376+((r20*x10386)));
evalcond[8]=(((r11*x10385))+(((-1.0)*sj3*x10378*x10389))+((r10*x10386))+(((-1.0)*x10382))+(((-1.0)*r12*sj3*x10390))+(((-1.0)*sj2*x10380))+((r10*x10375*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10393=((1.0)*gconst5);
CheckValue<IkReal> x10394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10393))+(((-1.0)*gconst4*r10)))),-1);
if(!x10394.valid){
continue;
}
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10393))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10394.value)))+(x10395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10396=IKsin(j4);
IkReal x10397=IKcos(j4);
IkReal x10398=(sj1*sj2);
IkReal x10399=(gconst5*sj3);
IkReal x10400=(gconst4*r11);
IkReal x10401=(gconst5*r10);
IkReal x10402=((1.0)*cj1);
IkReal x10403=(gconst4*r01);
IkReal x10404=(cj2*sj1);
IkReal x10405=(gconst5*r00);
IkReal x10406=(gconst4*sj3);
IkReal x10407=(cj3*gconst5);
IkReal x10408=(cj3*gconst4);
IkReal x10409=(gconst4*r21);
IkReal x10410=(cj2*x10402);
IkReal x10411=((1.0)*x10397);
IkReal x10412=((1.0)*x10396);
IkReal x10413=(cj3*x10396);
IkReal x10414=(cj3*x10397);
evalcond[0]=(((x10396*x10409))+(((-1.0)*gconst5*r20*x10412))+(((-1.0)*r22*x10411)));
evalcond[1]=(((x10396*x10400))+(((-1.0)*r12*x10411))+(((-1.0)*x10401*x10412)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10411))+((x10396*x10403))+(((-1.0)*x10405*x10412)));
evalcond[3]=(((r01*x10399))+((r00*x10406))+((r02*x10413))+(((-1.0)*cj3*x10405*x10411))+((x10403*x10414)));
evalcond[4]=(((r01*x10407))+((r00*x10408))+(((-1.0)*sj3*x10403*x10411))+((r00*x10397*x10399))+(((-1.0)*r02*sj3*x10412)));
evalcond[5]=(((r22*x10413))+((r21*x10397*x10408))+((r21*x10399))+((cj1*sj2))+((r20*x10406))+x10404+(((-1.0)*r20*x10407*x10411)));
evalcond[6]=(((x10400*x10414))+((r11*x10399))+(((-1.0)*cj3*x10401*x10411))+x10398+(((-1.0)*x10410))+((r12*x10413))+((r10*x10406)));
evalcond[7]=(((r21*x10407))+(((-1.0)*r22*sj3*x10412))+((r20*x10397*x10399))+x10398+(((-1.0)*r21*x10406*x10411))+(((-1.0)*x10410))+((r20*x10408)));
evalcond[8]=(((r10*x10397*x10399))+(((-1.0)*sj2*x10402))+(((-1.0)*r12*sj3*x10412))+((r11*x10407))+((r10*x10408))+(((-1.0)*sj3*x10400*x10411))+(((-1.0)*x10404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10415 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10415.valid){
continue;
}
CheckValue<IkReal> x10416=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10415.value)+(((1.5707963267949)*(x10416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10417=IKsin(j4);
IkReal x10418=IKcos(j4);
IkReal x10419=(sj1*sj2);
IkReal x10420=(gconst5*sj3);
IkReal x10421=(gconst4*r11);
IkReal x10422=(gconst5*r10);
IkReal x10423=((1.0)*cj1);
IkReal x10424=(gconst4*r01);
IkReal x10425=(cj2*sj1);
IkReal x10426=(gconst5*r00);
IkReal x10427=(gconst4*sj3);
IkReal x10428=(cj3*gconst5);
IkReal x10429=(cj3*gconst4);
IkReal x10430=(gconst4*r21);
IkReal x10431=(cj2*x10423);
IkReal x10432=((1.0)*x10418);
IkReal x10433=((1.0)*x10417);
IkReal x10434=(cj3*x10417);
IkReal x10435=(cj3*x10418);
evalcond[0]=(((x10417*x10430))+(((-1.0)*gconst5*r20*x10433))+(((-1.0)*r22*x10432)));
evalcond[1]=(((x10417*x10421))+(((-1.0)*x10422*x10433))+(((-1.0)*r12*x10432)));
evalcond[2]=((-1.0)+(((-1.0)*x10426*x10433))+((x10417*x10424))+(((-1.0)*r02*x10432)));
evalcond[3]=(((r01*x10420))+((r00*x10427))+((r02*x10434))+((x10424*x10435))+(((-1.0)*cj3*x10426*x10432)));
evalcond[4]=(((r01*x10428))+((r00*x10429))+(((-1.0)*sj3*x10424*x10432))+((r00*x10418*x10420))+(((-1.0)*r02*sj3*x10433)));
evalcond[5]=(((r22*x10434))+((cj1*sj2))+(((-1.0)*r20*x10428*x10432))+x10425+((r20*x10427))+((r21*x10418*x10429))+((r21*x10420)));
evalcond[6]=(((x10421*x10435))+(((-1.0)*cj3*x10422*x10432))+((r12*x10434))+((r10*x10427))+x10419+(((-1.0)*x10431))+((r11*x10420)));
evalcond[7]=((((-1.0)*r22*sj3*x10433))+(((-1.0)*r21*x10427*x10432))+((r20*x10418*x10420))+x10419+(((-1.0)*x10431))+((r20*x10429))+((r21*x10428)));
evalcond[8]=((((-1.0)*sj3*x10421*x10432))+(((-1.0)*r12*sj3*x10433))+((r10*x10418*x10420))+(((-1.0)*sj2*x10423))+((r10*x10429))+(((-1.0)*x10425))+((r11*x10428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10436=((-1.0)*r21);
CheckValue<IkReal> x10439 = IKatan2WithCheck(IkReal(x10436),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10439.valid){
continue;
}
IkReal x10437=((1.0)*(x10439.value));
IkReal x10438=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10437)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10437)));
IkReal gconst4=(x10436*x10438);
IkReal gconst5=((1.0)*r20*x10438);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10440=((-1.0)*r21);
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(x10440),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
IkReal x10441=((1.0)*(x10443.value));
IkReal x10442=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10441)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10441)));
IkReal gconst4=(x10440*x10442);
IkReal gconst5=((1.0)*r20*x10442);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10444=((-1.0)*r21);
CheckValue<IkReal> x10447 = IKatan2WithCheck(IkReal(x10444),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10447.valid){
continue;
}
IkReal x10445=((1.0)*(x10447.value));
IkReal x10446=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10445)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10445)));
IkReal gconst4=(x10444*x10446);
IkReal gconst5=((1.0)*r20*x10446);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10448=((-1.0)*r21);
CheckValue<IkReal> x10451 = IKatan2WithCheck(IkReal(x10448),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10451.valid){
continue;
}
IkReal x10449=((1.0)*(x10451.value));
IkReal x10450=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10449)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10449)));
IkReal gconst4=(x10448*x10450);
IkReal gconst5=((1.0)*r20*x10450);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10452=((-1.0)*r21);
CheckValue<IkReal> x10455 = IKatan2WithCheck(IkReal(x10452),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10455.valid){
continue;
}
IkReal x10453=((1.0)*(x10455.value));
IkReal x10454=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10453)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10453)));
IkReal gconst4=(x10452*x10454);
IkReal gconst5=((1.0)*r20*x10454);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10456=((-1.0)*r21);
CheckValue<IkReal> x10459 = IKatan2WithCheck(IkReal(x10456),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10459.valid){
continue;
}
IkReal x10457=((1.0)*(x10459.value));
IkReal x10458=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10457)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10457)));
IkReal gconst4=(x10456*x10458);
IkReal gconst5=((1.0)*r20*x10458);
IkReal x10460=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10464=IKPowWithIntegerCheck(x10460,-1);
if(!x10464.valid){
continue;
}
IkReal x10461=x10464.value;
IkReal x10462=((1.0)*x10461);
IkReal x10463=((((-1.0)*x10462*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10461))+(((-1.0)*x10462*(r10*r10)*(r20*r20))));
j4eval[0]=x10463;
j4eval[1]=r12;
j4eval[2]=x10460;
j4eval[3]=IKsign(x10463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10465=(gconst5*r10);
IkReal x10466=(gconst4*r11);
CheckValue<IkReal> x10467 = IKatan2WithCheck(IkReal(((((-1.0)*x10466))+x10465)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10467.valid){
continue;
}
CheckValue<IkReal> x10468=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10466*x10466)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10465*x10465)))+(((2.0)*x10465*x10466)))),-1);
if(!x10468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10467.value)+(((1.5707963267949)*(x10468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10469=IKsin(j4);
IkReal x10470=IKcos(j4);
IkReal x10471=(gconst4*r11);
IkReal x10472=(gconst5*r10);
IkReal x10473=(gconst4*r01);
IkReal x10474=(gconst5*r00);
IkReal x10475=(gconst4*r21);
IkReal x10476=(gconst5*r20);
IkReal x10477=((1.0)*x10470);
IkReal x10478=((1.0)*x10469);
evalcond[0]=((((-1.0)*x10476*x10478))+(((-1.0)*r22*x10477))+((x10469*x10475)));
evalcond[1]=((((-1.0)*r02*x10477))+(((-1.0)*x10474*x10478))+((x10469*x10473)));
evalcond[2]=(((x10470*x10472))+(((-1.0)*x10471*x10477))+(((-1.0)*r12*x10478)));
evalcond[3]=((-1.0)+(((-1.0)*x10472*x10478))+(((-1.0)*r12*x10477))+((x10469*x10471)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10478))+((cj1*sj2))+((x10470*x10474))+(((-1.0)*x10473*x10477)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10478))+((x10470*x10476))+(((-1.0)*x10475*x10477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10479=((1.0)*gconst5);
CheckValue<IkReal> x10480 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10479))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10480.valid){
continue;
}
CheckValue<IkReal> x10481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10479))+(((-1.0)*gconst4*r20)))),-1);
if(!x10481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10480.value)+(((1.5707963267949)*(x10481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10482=IKsin(j4);
IkReal x10483=IKcos(j4);
IkReal x10484=(gconst4*r11);
IkReal x10485=(gconst5*r10);
IkReal x10486=(gconst4*r01);
IkReal x10487=(gconst5*r00);
IkReal x10488=(gconst4*r21);
IkReal x10489=(gconst5*r20);
IkReal x10490=((1.0)*x10483);
IkReal x10491=((1.0)*x10482);
evalcond[0]=((((-1.0)*x10489*x10491))+(((-1.0)*r22*x10490))+((x10482*x10488)));
evalcond[1]=(((x10482*x10486))+(((-1.0)*r02*x10490))+(((-1.0)*x10487*x10491)));
evalcond[2]=((((-1.0)*r12*x10491))+(((-1.0)*x10484*x10490))+((x10483*x10485)));
evalcond[3]=((-1.0)+(((-1.0)*x10485*x10491))+((x10482*x10484))+(((-1.0)*r12*x10490)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10483*x10487))+(((-1.0)*r02*x10491))+(((-1.0)*x10486*x10490)));
evalcond[5]=((((-1.0)*x10488*x10490))+(((-1.0)*r22*x10491))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10483*x10489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10492=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10492.valid){
continue;
}
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10492.value)))+(x10493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10494=IKsin(j4);
IkReal x10495=IKcos(j4);
IkReal x10496=(gconst4*r11);
IkReal x10497=(gconst5*r10);
IkReal x10498=(gconst4*r01);
IkReal x10499=(gconst5*r00);
IkReal x10500=(gconst4*r21);
IkReal x10501=(gconst5*r20);
IkReal x10502=((1.0)*x10495);
IkReal x10503=((1.0)*x10494);
evalcond[0]=((((-1.0)*x10501*x10503))+(((-1.0)*r22*x10502))+((x10494*x10500)));
evalcond[1]=(((x10494*x10498))+(((-1.0)*r02*x10502))+(((-1.0)*x10499*x10503)));
evalcond[2]=((((-1.0)*x10496*x10502))+(((-1.0)*r12*x10503))+((x10495*x10497)));
evalcond[3]=((-1.0)+(((-1.0)*x10497*x10503))+((x10494*x10496))+(((-1.0)*r12*x10502)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10498*x10502))+((cj1*sj2))+((x10495*x10499))+(((-1.0)*r02*x10503)));
evalcond[5]=((((-1.0)*r22*x10503))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10495*x10501))+(((-1.0)*x10500*x10502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10504=((-1.0)*r21);
CheckValue<IkReal> x10507 = IKatan2WithCheck(IkReal(x10504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10507.valid){
continue;
}
IkReal x10505=((1.0)*(x10507.value));
IkReal x10506=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10505)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10505)));
IkReal gconst4=(x10504*x10506);
IkReal gconst5=((1.0)*r20*x10506);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10508=((-1.0)*r21);
CheckValue<IkReal> x10511 = IKatan2WithCheck(IkReal(x10508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10511.valid){
continue;
}
IkReal x10509=((1.0)*(x10511.value));
IkReal x10510=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10509)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10509)));
IkReal gconst4=(x10508*x10510);
IkReal gconst5=((1.0)*r20*x10510);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10512=((-1.0)*r21);
CheckValue<IkReal> x10515 = IKatan2WithCheck(IkReal(x10512),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10515.valid){
continue;
}
IkReal x10513=((1.0)*(x10515.value));
IkReal x10514=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10513)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10513)));
IkReal gconst4=(x10512*x10514);
IkReal gconst5=((1.0)*r20*x10514);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10516=(gconst5*r10);
IkReal x10517=(gconst4*r11);
CheckValue<IkReal> x10518 = IKatan2WithCheck(IkReal(((((-1.0)*x10516))+x10517)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10516*x10517))+(x10517*x10517)+(x10516*x10516))),-1);
if(!x10519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10518.value)+(((1.5707963267949)*(x10519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10520=IKcos(j4);
IkReal x10521=IKsin(j4);
IkReal x10522=(gconst4*r11);
IkReal x10523=(gconst5*r10);
IkReal x10524=(gconst5*r00);
IkReal x10525=(gconst5*r20);
IkReal x10526=((1.0)*x10520);
IkReal x10527=(gconst4*x10520);
IkReal x10528=((1.0)*x10521);
IkReal x10529=(gconst4*x10521);
evalcond[0]=((((-1.0)*x10523*x10526))+((x10520*x10522))+((r12*x10521)));
evalcond[1]=((((-1.0)*r22*x10526))+((r21*x10529))+(((-1.0)*x10525*x10528)));
evalcond[2]=((((-1.0)*r02*x10526))+((r01*x10529))+(((-1.0)*x10524*x10528)));
evalcond[3]=((-1.0)+((x10521*x10522))+(((-1.0)*x10523*x10528))+(((-1.0)*r12*x10526)));
evalcond[4]=(((cj2*sj1))+((r02*x10521))+((cj1*sj2))+((r01*x10527))+(((-1.0)*x10524*x10526)));
evalcond[5]=(((r22*x10521))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10527))+(((-1.0)*x10525*x10526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10530=((1.0)*gconst5);
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
CheckValue<IkReal> x10532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10530))+(((-1.0)*gconst4*r20)))),-1);
if(!x10532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10531.value)+(((1.5707963267949)*(x10532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10533=IKcos(j4);
IkReal x10534=IKsin(j4);
IkReal x10535=(gconst4*r11);
IkReal x10536=(gconst5*r10);
IkReal x10537=(gconst5*r00);
IkReal x10538=(gconst5*r20);
IkReal x10539=((1.0)*x10533);
IkReal x10540=(gconst4*x10533);
IkReal x10541=((1.0)*x10534);
IkReal x10542=(gconst4*x10534);
evalcond[0]=(((x10533*x10535))+(((-1.0)*x10536*x10539))+((r12*x10534)));
evalcond[1]=((((-1.0)*r22*x10539))+(((-1.0)*x10538*x10541))+((r21*x10542)));
evalcond[2]=((((-1.0)*r02*x10539))+(((-1.0)*x10537*x10541))+((r01*x10542)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10539))+((x10534*x10535))+(((-1.0)*x10536*x10541)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10537*x10539))+((r02*x10534))+((cj1*sj2))+((r01*x10540)));
evalcond[5]=(((r22*x10534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10538*x10539))+((r21*x10540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10543=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10543.valid){
continue;
}
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10543.value)))+(x10544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10545=IKcos(j4);
IkReal x10546=IKsin(j4);
IkReal x10547=(gconst4*r11);
IkReal x10548=(gconst5*r10);
IkReal x10549=(gconst5*r00);
IkReal x10550=(gconst5*r20);
IkReal x10551=((1.0)*x10545);
IkReal x10552=(gconst4*x10545);
IkReal x10553=((1.0)*x10546);
IkReal x10554=(gconst4*x10546);
evalcond[0]=(((r12*x10546))+(((-1.0)*x10548*x10551))+((x10545*x10547)));
evalcond[1]=((((-1.0)*x10550*x10553))+((r21*x10554))+(((-1.0)*r22*x10551)));
evalcond[2]=((((-1.0)*r02*x10551))+((r01*x10554))+(((-1.0)*x10549*x10553)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10551))+((x10546*x10547))+(((-1.0)*x10548*x10553)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10546))+((r01*x10552))+(((-1.0)*x10549*x10551)));
evalcond[5]=(((r22*x10546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10550*x10551))+((r21*x10552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10555=((-1.0)*r21);
CheckValue<IkReal> x10558 = IKatan2WithCheck(IkReal(x10555),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10558.valid){
continue;
}
IkReal x10556=((1.0)*(x10558.value));
IkReal x10557=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10556)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10556)));
IkReal gconst4=(x10555*x10557);
IkReal gconst5=((1.0)*r20*x10557);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10559=((-1.0)*r21);
CheckValue<IkReal> x10562 = IKatan2WithCheck(IkReal(x10559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10562.valid){
continue;
}
IkReal x10560=((1.0)*(x10562.value));
IkReal x10561=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10560)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10560)));
IkReal gconst4=(x10559*x10561);
IkReal gconst5=((1.0)*r20*x10561);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10563=((-1.0)*r21);
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal(x10563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
IkReal x10564=((1.0)*(x10566.value));
IkReal x10565=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10564)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10564)));
IkReal gconst4=(x10563*x10565);
IkReal gconst5=((1.0)*r20*x10565);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10567=(gconst5*r10);
IkReal x10568=(gconst4*r11);
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10567*x10568))+(x10567*x10567)+(x10568*x10568))),-1);
if(!x10569.valid){
continue;
}
CheckValue<IkReal> x10570 = IKatan2WithCheck(IkReal(((((-1.0)*x10567))+x10568)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10569.value)))+(x10570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10571=IKcos(j4);
IkReal x10572=IKsin(j4);
IkReal x10573=(gconst5*r10);
IkReal x10574=(gconst5*r00);
IkReal x10575=(gconst5*r20);
IkReal x10576=((1.0)*x10571);
IkReal x10577=(gconst4*x10572);
IkReal x10578=(gconst4*x10571);
IkReal x10579=((1.0)*x10572);
evalcond[0]=((((-1.0)*x10573*x10576))+((r11*x10578))+((r12*x10572)));
evalcond[1]=((((-1.0)*r22*x10576))+(((-1.0)*x10575*x10579))+((r21*x10577)));
evalcond[2]=(((r01*x10577))+(((-1.0)*x10574*x10579))+(((-1.0)*r02*x10576)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10576))+(((-1.0)*x10573*x10579))+((r11*x10577)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10575*x10576))+((r21*x10578))+((r22*x10572)));
evalcond[5]=(((r01*x10578))+(((-1.0)*sj1*sj2))+(((-1.0)*x10574*x10576))+((r02*x10572))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10580=((1.0)*gconst5);
CheckValue<IkReal> x10581 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10580))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10581.valid){
continue;
}
CheckValue<IkReal> x10582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10580))+(((-1.0)*gconst4*r20)))),-1);
if(!x10582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10581.value)+(((1.5707963267949)*(x10582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10583=IKcos(j4);
IkReal x10584=IKsin(j4);
IkReal x10585=(gconst5*r10);
IkReal x10586=(gconst5*r00);
IkReal x10587=(gconst5*r20);
IkReal x10588=((1.0)*x10583);
IkReal x10589=(gconst4*x10584);
IkReal x10590=(gconst4*x10583);
IkReal x10591=((1.0)*x10584);
evalcond[0]=(((r12*x10584))+((r11*x10590))+(((-1.0)*x10585*x10588)));
evalcond[1]=((((-1.0)*r22*x10588))+(((-1.0)*x10587*x10591))+((r21*x10589)));
evalcond[2]=((((-1.0)*r02*x10588))+(((-1.0)*x10586*x10591))+((r01*x10589)));
evalcond[3]=((-1.0)+(((-1.0)*x10585*x10591))+((r11*x10589))+(((-1.0)*r12*x10588)));
evalcond[4]=(((r21*x10590))+((cj2*sj1))+(((-1.0)*x10587*x10588))+((cj1*sj2))+((r22*x10584)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10590))+((r02*x10584))+((cj1*cj2))+(((-1.0)*x10586*x10588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10592=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10592.valid){
continue;
}
CheckValue<IkReal> x10593 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10592.value)))+(x10593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10594=IKcos(j4);
IkReal x10595=IKsin(j4);
IkReal x10596=(gconst5*r10);
IkReal x10597=(gconst5*r00);
IkReal x10598=(gconst5*r20);
IkReal x10599=((1.0)*x10594);
IkReal x10600=(gconst4*x10595);
IkReal x10601=(gconst4*x10594);
IkReal x10602=((1.0)*x10595);
evalcond[0]=(((r11*x10601))+((r12*x10595))+(((-1.0)*x10596*x10599)));
evalcond[1]=((((-1.0)*x10598*x10602))+((r21*x10600))+(((-1.0)*r22*x10599)));
evalcond[2]=(((r01*x10600))+(((-1.0)*r02*x10599))+(((-1.0)*x10597*x10602)));
evalcond[3]=((-1.0)+((r11*x10600))+(((-1.0)*r12*x10599))+(((-1.0)*x10596*x10602)));
evalcond[4]=(((cj2*sj1))+((r21*x10601))+((cj1*sj2))+((r22*x10595))+(((-1.0)*x10598*x10599)));
evalcond[5]=(((r01*x10601))+(((-1.0)*x10597*x10599))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10603=((-1.0)*r21);
CheckValue<IkReal> x10606 = IKatan2WithCheck(IkReal(x10603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10606.valid){
continue;
}
IkReal x10604=((1.0)*(x10606.value));
IkReal x10605=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10604)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10604)));
IkReal gconst4=(x10603*x10605);
IkReal gconst5=((1.0)*r20*x10605);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10607=((-1.0)*r21);
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(x10607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10608)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst4=(x10607*x10609);
IkReal gconst5=((1.0)*r20*x10609);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10611=((-1.0)*r21);
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(x10611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
IkReal x10612=((1.0)*(x10614.value));
IkReal x10613=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10612)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10612)));
IkReal gconst4=(x10611*x10613);
IkReal gconst5=((1.0)*r20*x10613);
IkReal x10615=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10619=IKPowWithIntegerCheck(x10615,-1);
if(!x10619.valid){
continue;
}
IkReal x10616=x10619.value;
IkReal x10617=((1.0)*x10616);
IkReal x10618=((((-1.0)*x10617*(r11*r11)*(r21*r21)))+(((-1.0)*x10617*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10616)));
j4eval[0]=x10618;
j4eval[1]=r12;
j4eval[2]=x10615;
j4eval[3]=IKsign(x10618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10620=(gconst5*r10);
IkReal x10621=(gconst4*r11);
CheckValue<IkReal> x10622 = IKatan2WithCheck(IkReal(((((-1.0)*x10621))+x10620)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10622.valid){
continue;
}
CheckValue<IkReal> x10623=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10620*x10620)))+(((2.0)*x10620*x10621))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10621*x10621))))),-1);
if(!x10623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10622.value)+(((1.5707963267949)*(x10623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10624=IKsin(j4);
IkReal x10625=IKcos(j4);
IkReal x10626=(gconst4*r11);
IkReal x10627=(gconst5*r10);
IkReal x10628=(gconst5*r00);
IkReal x10629=(gconst5*r20);
IkReal x10630=((1.0)*x10625);
IkReal x10631=(gconst4*x10624);
IkReal x10632=((1.0)*x10624);
evalcond[0]=((((-1.0)*x10629*x10632))+(((-1.0)*r22*x10630))+((r21*x10631)));
evalcond[1]=((((-1.0)*r02*x10630))+((r01*x10631))+(((-1.0)*x10628*x10632)));
evalcond[2]=(((x10625*x10627))+(((-1.0)*x10626*x10630))+(((-1.0)*r12*x10632)));
evalcond[3]=((-1.0)+(((-1.0)*x10627*x10632))+(((-1.0)*r12*x10630))+((x10624*x10626)));
evalcond[4]=(((cj2*sj1))+((x10625*x10629))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10630))+(((-1.0)*r22*x10632)));
evalcond[5]=((((-1.0)*r02*x10632))+((x10625*x10628))+(((-1.0)*gconst4*r01*x10630))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10633=((1.0)*gconst5);
CheckValue<IkReal> x10634 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10633))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10634.valid){
continue;
}
CheckValue<IkReal> x10635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10633))+(((-1.0)*gconst4*r20)))),-1);
if(!x10635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10634.value)+(((1.5707963267949)*(x10635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10636=IKsin(j4);
IkReal x10637=IKcos(j4);
IkReal x10638=(gconst4*r11);
IkReal x10639=(gconst5*r10);
IkReal x10640=(gconst5*r00);
IkReal x10641=(gconst5*r20);
IkReal x10642=((1.0)*x10637);
IkReal x10643=(gconst4*x10636);
IkReal x10644=((1.0)*x10636);
evalcond[0]=(((r21*x10643))+(((-1.0)*x10641*x10644))+(((-1.0)*r22*x10642)));
evalcond[1]=((((-1.0)*r02*x10642))+((r01*x10643))+(((-1.0)*x10640*x10644)));
evalcond[2]=((((-1.0)*x10638*x10642))+(((-1.0)*r12*x10644))+((x10637*x10639)));
evalcond[3]=((-1.0)+(((-1.0)*x10639*x10644))+(((-1.0)*r12*x10642))+((x10636*x10638)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10637*x10641))+(((-1.0)*r22*x10644))+(((-1.0)*gconst4*r21*x10642)));
evalcond[5]=((((-1.0)*r02*x10644))+(((-1.0)*sj1*sj2))+((x10637*x10640))+(((-1.0)*gconst4*r01*x10642))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10645=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10645.valid){
continue;
}
CheckValue<IkReal> x10646 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10645.value)))+(x10646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10647=IKsin(j4);
IkReal x10648=IKcos(j4);
IkReal x10649=(gconst4*r11);
IkReal x10650=(gconst5*r10);
IkReal x10651=(gconst5*r00);
IkReal x10652=(gconst5*r20);
IkReal x10653=((1.0)*x10648);
IkReal x10654=(gconst4*x10647);
IkReal x10655=((1.0)*x10647);
evalcond[0]=((((-1.0)*r22*x10653))+((r21*x10654))+(((-1.0)*x10652*x10655)));
evalcond[1]=((((-1.0)*r02*x10653))+(((-1.0)*x10651*x10655))+((r01*x10654)));
evalcond[2]=(((x10648*x10650))+(((-1.0)*r12*x10655))+(((-1.0)*x10649*x10653)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10653))+((x10647*x10649))+(((-1.0)*x10650*x10655)));
evalcond[4]=((((-1.0)*gconst4*r21*x10653))+((x10648*x10652))+((cj2*sj1))+(((-1.0)*r22*x10655))+((cj1*sj2)));
evalcond[5]=(((x10648*x10651))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10655))+(((-1.0)*gconst4*r01*x10653))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10656=((-1.0)*r21);
IkReal x10657=((-1.0)*px);
CheckValue<IkReal> x10659 = IKatan2WithCheck(IkReal(x10656),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10659.valid){
continue;
}
IkReal x10658=((1.0)*(x10659.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10658)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10657);
rxp1_1=(px*r21);
rxp1_2=(r11*x10657);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10658)));
IkReal gconst4=x10656;
IkReal gconst5=((1.0)*r20);
IkReal x10660=((1.0)*r11*r21);
IkReal x10661=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10661))+(((-1.0)*x10660)));
j4eval[1]=(((sj3*x10660))+((sj3*x10661)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10662=((-1.0)*r21);
IkReal x10663=((-1.0)*px);
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal(x10662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
IkReal x10664=((1.0)*(x10665.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10664)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10663);
rxp1_1=(px*r21);
rxp1_2=(r11*x10663);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10664)));
IkReal gconst4=x10662;
IkReal gconst5=((1.0)*r20);
IkReal x10666=((1.0)*cj3);
IkReal x10667=(r10*r20);
IkReal x10668=(r11*r21);
j4eval[0]=((((-1.0)*x10667))+(((-1.0)*x10668)));
j4eval[1]=((((-1.0)*x10666*x10668))+(((-1.0)*x10666*x10667)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10669=((-1.0)*r21);
IkReal x10670=((-1.0)*px);
CheckValue<IkReal> x10672 = IKatan2WithCheck(IkReal(x10669),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10672.valid){
continue;
}
IkReal x10671=((1.0)*(x10672.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10671)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10670);
rxp1_1=(px*r21);
rxp1_2=(r11*x10670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10671)));
IkReal gconst4=x10669;
IkReal gconst5=((1.0)*r20);
IkReal x10673=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10673))+((r10*r20*x10673)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10674=((1.0)*r11);
CheckValue<IkReal> x10675=IKPowWithIntegerCheck(r02,-1);
if(!x10675.valid){
continue;
}
CheckValue<IkReal> x10676=IKPowWithIntegerCheck(sj3,-1);
if(!x10676.valid){
continue;
}
CheckValue<IkReal> x10677=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10674))+((gconst5*r10*sj3))),-1);
if(!x10677.valid){
continue;
}
if( IKabs(((x10675.value)*(x10676.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10677.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10674)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10675.value)*(x10676.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10677.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10674))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10675.value)*(x10676.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10677.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10674))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10678=IKsin(j4);
IkReal x10679=IKcos(j4);
IkReal x10680=(cj2*sj1);
IkReal x10681=(cj1*sj2);
IkReal x10682=(gconst5*sj3);
IkReal x10683=(gconst4*r11);
IkReal x10684=(sj1*sj2);
IkReal x10685=((1.0)*gconst5);
IkReal x10686=(cj1*cj2);
IkReal x10687=(gconst4*r21);
IkReal x10688=(cj3*gconst4);
IkReal x10689=(gconst4*sj3);
IkReal x10690=(cj3*gconst5);
IkReal x10691=(r20*x10679);
IkReal x10692=(r10*x10679);
IkReal x10693=(cj3*x10679);
IkReal x10694=(r02*x10678);
IkReal x10695=(x10680+x10681);
IkReal x10696=((1.0)*sj3*x10679);
evalcond[0]=((-1.0)*r02*x10679);
evalcond[1]=((((-1.0)*r20*x10678*x10685))+((x10678*x10687)));
evalcond[2]=((((-1.0)*sj3*x10694))+x10695);
evalcond[3]=(((cj3*x10694))+(((-1.0)*x10684))+x10686);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10678*x10685))+((x10678*x10683)));
evalcond[5]=(((x10682*x10692))+((r11*x10690))+((r10*x10688))+(((-1.0)*x10683*x10696)));
evalcond[6]=(((x10683*x10693))+((r11*x10682))+((r10*x10689))+(((-1.0)*cj3*x10685*x10692)));
evalcond[7]=(((r20*x10689))+(((-1.0)*cj3*x10685*x10691))+((r21*x10682))+x10695+((x10687*x10693)));
evalcond[8]=(((r21*x10690))+((x10682*x10691))+((r20*x10688))+(((-1.0)*x10687*x10696))+(((-1.0)*x10686))+x10684);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10697=((1.0)*sj3);
IkReal x10698=(gconst4*r11);
IkReal x10699=((1.0)*gconst5*r10);
CheckValue<IkReal> x10700=IKPowWithIntegerCheck(((((-1.0)*x10699))+x10698),-1);
if(!x10700.valid){
continue;
}
CheckValue<IkReal> x10701=IKPowWithIntegerCheck((((cj3*x10698))+(((-1.0)*cj3*x10699))),-1);
if(!x10701.valid){
continue;
}
if( IKabs(x10700.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10701.value)*(((((-1.0)*gconst5*r11*x10697))+(((-1.0)*gconst4*r10*x10697)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10700.value)+IKsqr(((x10701.value)*(((((-1.0)*gconst5*r11*x10697))+(((-1.0)*gconst4*r10*x10697))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10700.value, ((x10701.value)*(((((-1.0)*gconst5*r11*x10697))+(((-1.0)*gconst4*r10*x10697))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10702=IKsin(j4);
IkReal x10703=IKcos(j4);
IkReal x10704=(cj2*sj1);
IkReal x10705=(cj1*sj2);
IkReal x10706=(gconst5*sj3);
IkReal x10707=(gconst4*r11);
IkReal x10708=(sj1*sj2);
IkReal x10709=((1.0)*gconst5);
IkReal x10710=(cj1*cj2);
IkReal x10711=(gconst4*r21);
IkReal x10712=(cj3*gconst4);
IkReal x10713=(gconst4*sj3);
IkReal x10714=(cj3*gconst5);
IkReal x10715=(r20*x10703);
IkReal x10716=(r10*x10703);
IkReal x10717=(cj3*x10703);
IkReal x10718=(r02*x10702);
IkReal x10719=(x10705+x10704);
IkReal x10720=((1.0)*sj3*x10703);
evalcond[0]=((-1.0)*r02*x10703);
evalcond[1]=(((x10702*x10711))+(((-1.0)*r20*x10702*x10709)));
evalcond[2]=((((-1.0)*sj3*x10718))+x10719);
evalcond[3]=(((cj3*x10718))+(((-1.0)*x10708))+x10710);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10702*x10709))+((x10702*x10707)));
evalcond[5]=(((r11*x10714))+(((-1.0)*x10707*x10720))+((r10*x10712))+((x10706*x10716)));
evalcond[6]=((((-1.0)*cj3*x10709*x10716))+((r11*x10706))+((r10*x10713))+((x10707*x10717)));
evalcond[7]=((((-1.0)*cj3*x10709*x10715))+((r20*x10713))+((r21*x10706))+x10719+((x10711*x10717)));
evalcond[8]=((((-1.0)*x10710))+((r20*x10712))+((r21*x10714))+x10708+(((-1.0)*x10711*x10720))+((x10706*x10715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10721=((1.0)*gconst5);
IkReal x10722=(gconst4*r11);
CheckValue<IkReal> x10723=IKPowWithIntegerCheck(((((-1.0)*r10*x10721))+x10722),-1);
if(!x10723.valid){
continue;
}
CheckValue<IkReal> x10724=IKPowWithIntegerCheck((((gconst5*r10*sj3))+(((-1.0)*sj3*x10722))),-1);
if(!x10724.valid){
continue;
}
if( IKabs(x10723.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10724.value)*(((((-1.0)*cj3*r11*x10721))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10723.value)+IKsqr(((x10724.value)*(((((-1.0)*cj3*r11*x10721))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10723.value, ((x10724.value)*(((((-1.0)*cj3*r11*x10721))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10725=IKsin(j4);
IkReal x10726=IKcos(j4);
IkReal x10727=(cj2*sj1);
IkReal x10728=(cj1*sj2);
IkReal x10729=(gconst5*sj3);
IkReal x10730=(gconst4*r11);
IkReal x10731=(sj1*sj2);
IkReal x10732=((1.0)*gconst5);
IkReal x10733=(cj1*cj2);
IkReal x10734=(gconst4*r21);
IkReal x10735=(cj3*gconst4);
IkReal x10736=(gconst4*sj3);
IkReal x10737=(cj3*gconst5);
IkReal x10738=(r20*x10726);
IkReal x10739=(r10*x10726);
IkReal x10740=(cj3*x10726);
IkReal x10741=(r02*x10725);
IkReal x10742=(x10728+x10727);
IkReal x10743=((1.0)*sj3*x10726);
evalcond[0]=((-1.0)*r02*x10726);
evalcond[1]=((((-1.0)*r20*x10725*x10732))+((x10725*x10734)));
evalcond[2]=((((-1.0)*sj3*x10741))+x10742);
evalcond[3]=(((cj3*x10741))+(((-1.0)*x10731))+x10733);
evalcond[4]=((-1.0)+((x10725*x10730))+(((-1.0)*r10*x10725*x10732)));
evalcond[5]=(((r10*x10735))+((x10729*x10739))+(((-1.0)*x10730*x10743))+((r11*x10737)));
evalcond[6]=(((r10*x10736))+((x10730*x10740))+(((-1.0)*cj3*x10732*x10739))+((r11*x10729)));
evalcond[7]=((((-1.0)*cj3*x10732*x10738))+((r21*x10729))+((x10734*x10740))+((r20*x10736))+x10742);
evalcond[8]=(((x10729*x10738))+((r21*x10737))+(((-1.0)*x10734*x10743))+((r20*x10735))+(((-1.0)*x10733))+x10731);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10744=gconst4*gconst4;
IkReal x10745=gconst5*gconst5;
IkReal x10746=(r10*r21);
IkReal x10747=((1.0)*cj3);
IkReal x10748=(r11*r21);
IkReal x10749=(r11*r20);
IkReal x10750=(r22*sj3);
IkReal x10751=(gconst4*r10);
IkReal x10752=((1.0)*sj3);
IkReal x10753=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10745*x10747))+((x10746*x10753))+(((-1.0)*x10744*x10747*x10748))+((x10749*x10753))+(((-1.0)*r12*r22*x10747)))),-1);
if(!x10754.valid){
continue;
}
CheckValue<IkReal> x10755 = IKatan2WithCheck(IkReal((((gconst5*r11*x10750))+((x10750*x10751)))),IkReal(((((-1.0)*x10745*x10749*x10752))+(((-1.0)*gconst5*r20*x10751*x10752))+((sj3*x10744*x10746))+((gconst4*gconst5*sj3*x10748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10754.value)))+(x10755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10756=IKsin(j4);
IkReal x10757=IKcos(j4);
IkReal x10758=(cj2*sj1);
IkReal x10759=(cj1*sj2);
IkReal x10760=(gconst5*sj3);
IkReal x10761=(gconst4*r11);
IkReal x10762=(sj1*sj2);
IkReal x10763=(gconst5*r10);
IkReal x10764=(cj1*cj2);
IkReal x10765=(gconst4*r01);
IkReal x10766=(gconst4*r21);
IkReal x10767=(gconst5*r00);
IkReal x10768=(cj3*gconst5);
IkReal x10769=(gconst4*sj3);
IkReal x10770=(cj3*gconst4);
IkReal x10771=((1.0)*x10757);
IkReal x10772=((1.0)*x10756);
IkReal x10773=(cj3*x10756);
IkReal x10774=(cj3*x10757);
IkReal x10775=(x10758+x10759);
evalcond[0]=((((-1.0)*gconst5*r20*x10772))+(((-1.0)*r22*x10771))+((x10756*x10766)));
evalcond[1]=((((-1.0)*r02*x10771))+(((-1.0)*x10767*x10772))+((x10756*x10765)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10771))+(((-1.0)*x10763*x10772))+((x10756*x10761)));
evalcond[3]=((((-1.0)*cj3*x10763*x10771))+((r12*x10773))+((r11*x10760))+((x10761*x10774))+((r10*x10769)));
evalcond[4]=(((r11*x10768))+((r10*x10757*x10760))+(((-1.0)*sj3*x10761*x10771))+(((-1.0)*r12*sj3*x10772))+((r10*x10770)));
evalcond[5]=((((-1.0)*r20*x10768*x10771))+((r20*x10769))+((r21*x10760))+((r22*x10773))+((x10766*x10774))+x10775);
evalcond[6]=(((r00*x10757*x10760))+((r01*x10768))+(((-1.0)*r02*sj3*x10772))+((r00*x10770))+(((-1.0)*sj3*x10765*x10771))+x10775);
evalcond[7]=((((-1.0)*x10762))+(((-1.0)*cj3*x10767*x10771))+((r01*x10760))+((r00*x10769))+((x10765*x10774))+x10764+((r02*x10773)));
evalcond[8]=((((-1.0)*sj3*x10766*x10771))+(((-1.0)*x10764))+((r20*x10770))+((r20*x10757*x10760))+((r21*x10768))+x10762+(((-1.0)*r22*sj3*x10772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10776=((1.0)*gconst5);
CheckValue<IkReal> x10777 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10777.valid){
continue;
}
CheckValue<IkReal> x10778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10776))+(((-1.0)*gconst4*r20)))),-1);
if(!x10778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10777.value)+(((1.5707963267949)*(x10778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10779=IKsin(j4);
IkReal x10780=IKcos(j4);
IkReal x10781=(cj2*sj1);
IkReal x10782=(cj1*sj2);
IkReal x10783=(gconst5*sj3);
IkReal x10784=(gconst4*r11);
IkReal x10785=(sj1*sj2);
IkReal x10786=(gconst5*r10);
IkReal x10787=(cj1*cj2);
IkReal x10788=(gconst4*r01);
IkReal x10789=(gconst4*r21);
IkReal x10790=(gconst5*r00);
IkReal x10791=(cj3*gconst5);
IkReal x10792=(gconst4*sj3);
IkReal x10793=(cj3*gconst4);
IkReal x10794=((1.0)*x10780);
IkReal x10795=((1.0)*x10779);
IkReal x10796=(cj3*x10779);
IkReal x10797=(cj3*x10780);
IkReal x10798=(x10781+x10782);
evalcond[0]=(((x10779*x10789))+(((-1.0)*gconst5*r20*x10795))+(((-1.0)*r22*x10794)));
evalcond[1]=(((x10779*x10788))+(((-1.0)*r02*x10794))+(((-1.0)*x10790*x10795)));
evalcond[2]=((-1.0)+((x10779*x10784))+(((-1.0)*r12*x10794))+(((-1.0)*x10786*x10795)));
evalcond[3]=(((r10*x10792))+((r11*x10783))+((r12*x10796))+((x10784*x10797))+(((-1.0)*cj3*x10786*x10794)));
evalcond[4]=(((r10*x10793))+(((-1.0)*sj3*x10784*x10794))+(((-1.0)*r12*sj3*x10795))+((r10*x10780*x10783))+((r11*x10791)));
evalcond[5]=(((r21*x10783))+(((-1.0)*r20*x10791*x10794))+((r20*x10792))+((x10789*x10797))+x10798+((r22*x10796)));
evalcond[6]=((((-1.0)*r02*sj3*x10795))+((r00*x10793))+x10798+((r01*x10791))+(((-1.0)*sj3*x10788*x10794))+((r00*x10780*x10783)));
evalcond[7]=(((r02*x10796))+((r01*x10783))+(((-1.0)*x10785))+((r00*x10792))+x10787+((x10788*x10797))+(((-1.0)*cj3*x10790*x10794)));
evalcond[8]=(((r21*x10791))+((r20*x10793))+(((-1.0)*r22*sj3*x10795))+(((-1.0)*x10787))+(((-1.0)*sj3*x10789*x10794))+((r20*x10780*x10783))+x10785);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10799=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10799.valid){
continue;
}
CheckValue<IkReal> x10800 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10799.value)))+(x10800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10801=IKsin(j4);
IkReal x10802=IKcos(j4);
IkReal x10803=(cj2*sj1);
IkReal x10804=(cj1*sj2);
IkReal x10805=(gconst5*sj3);
IkReal x10806=(gconst4*r11);
IkReal x10807=(sj1*sj2);
IkReal x10808=(gconst5*r10);
IkReal x10809=(cj1*cj2);
IkReal x10810=(gconst4*r01);
IkReal x10811=(gconst4*r21);
IkReal x10812=(gconst5*r00);
IkReal x10813=(cj3*gconst5);
IkReal x10814=(gconst4*sj3);
IkReal x10815=(cj3*gconst4);
IkReal x10816=((1.0)*x10802);
IkReal x10817=((1.0)*x10801);
IkReal x10818=(cj3*x10801);
IkReal x10819=(cj3*x10802);
IkReal x10820=(x10804+x10803);
evalcond[0]=((((-1.0)*gconst5*r20*x10817))+(((-1.0)*r22*x10816))+((x10801*x10811)));
evalcond[1]=((((-1.0)*r02*x10816))+(((-1.0)*x10812*x10817))+((x10801*x10810)));
evalcond[2]=((-1.0)+(((-1.0)*x10808*x10817))+((x10801*x10806))+(((-1.0)*r12*x10816)));
evalcond[3]=(((x10806*x10819))+((r11*x10805))+((r10*x10814))+(((-1.0)*cj3*x10808*x10816))+((r12*x10818)));
evalcond[4]=((((-1.0)*sj3*x10806*x10816))+((r10*x10815))+((r10*x10802*x10805))+(((-1.0)*r12*sj3*x10817))+((r11*x10813)));
evalcond[5]=(((r22*x10818))+((x10811*x10819))+((r20*x10814))+((r21*x10805))+(((-1.0)*r20*x10813*x10816))+x10820);
evalcond[6]=((((-1.0)*r02*sj3*x10817))+((r00*x10802*x10805))+(((-1.0)*sj3*x10810*x10816))+((r01*x10813))+((r00*x10815))+x10820);
evalcond[7]=(((r02*x10818))+((x10810*x10819))+((r01*x10805))+(((-1.0)*cj3*x10812*x10816))+(((-1.0)*x10807))+((r00*x10814))+x10809);
evalcond[8]=(((r20*x10802*x10805))+(((-1.0)*r22*sj3*x10817))+((r20*x10815))+(((-1.0)*x10809))+(((-1.0)*sj3*x10811*x10816))+((r21*x10813))+x10807);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10821=((-1.0)*r21);
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(x10821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
IkReal x10822=((1.0)*(x10824.value));
IkReal x10823=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10822)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10822)));
IkReal gconst4=(x10821*x10823);
IkReal gconst5=((1.0)*r20*x10823);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10825=((-1.0)*r21);
CheckValue<IkReal> x10828 = IKatan2WithCheck(IkReal(x10825),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10828.valid){
continue;
}
IkReal x10826=((1.0)*(x10828.value));
IkReal x10827=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10826)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10826)));
IkReal gconst4=(x10825*x10827);
IkReal gconst5=((1.0)*r20*x10827);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10829=((-1.0)*r21);
CheckValue<IkReal> x10832 = IKatan2WithCheck(IkReal(x10829),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10832.valid){
continue;
}
IkReal x10830=((1.0)*(x10832.value));
IkReal x10831=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10830)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10830)));
IkReal gconst4=(x10829*x10831);
IkReal gconst5=((1.0)*r20*x10831);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10833=((-1.0)*r21);
CheckValue<IkReal> x10836 = IKatan2WithCheck(IkReal(x10833),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10836.valid){
continue;
}
IkReal x10834=((1.0)*(x10836.value));
IkReal x10835=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10834)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10834)));
IkReal gconst4=(x10833*x10835);
IkReal gconst5=((1.0)*r20*x10835);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10837=((-1.0)*r21);
CheckValue<IkReal> x10840 = IKatan2WithCheck(IkReal(x10837),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10840.valid){
continue;
}
IkReal x10838=((1.0)*(x10840.value));
IkReal x10839=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10838)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10838)));
IkReal gconst4=(x10837*x10839);
IkReal gconst5=((1.0)*r20*x10839);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10841=((-1.0)*r21);
CheckValue<IkReal> x10844 = IKatan2WithCheck(IkReal(x10841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10844.valid){
continue;
}
IkReal x10842=((1.0)*(x10844.value));
IkReal x10843=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10842)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10842)));
IkReal gconst4=(x10841*x10843);
IkReal gconst5=((1.0)*r20*x10843);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10845=(gconst5*r10);
IkReal x10846=(gconst4*r11);
CheckValue<IkReal> x10847 = IKatan2WithCheck(IkReal(((((-1.0)*x10846))+x10845)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10847.valid){
continue;
}
CheckValue<IkReal> x10848=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10845*x10845)+(((-2.0)*x10845*x10846))+(x10846*x10846))),-1);
if(!x10848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10847.value)+(((1.5707963267949)*(x10848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10849=IKsin(j4);
IkReal x10850=IKcos(j4);
IkReal x10851=(gconst4*r11);
IkReal x10852=((1.0)*cj1);
IkReal x10853=(gconst5*r10);
IkReal x10854=(gconst4*r01);
IkReal x10855=(gconst5*r00);
IkReal x10856=(gconst4*r21);
IkReal x10857=(gconst5*r20);
IkReal x10858=((1.0)*x10850);
IkReal x10859=((1.0)*x10849);
evalcond[0]=(((x10849*x10856))+(((-1.0)*x10857*x10859))+(((-1.0)*r22*x10858)));
evalcond[1]=(((x10849*x10854))+(((-1.0)*x10855*x10859))+(((-1.0)*r02*x10858)));
evalcond[2]=((((-1.0)*r12*x10859))+((x10850*x10853))+(((-1.0)*x10851*x10858)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10858))+((x10849*x10851))+(((-1.0)*x10853*x10859)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10856*x10858))+((x10850*x10857))+(((-1.0)*cj2*x10852))+(((-1.0)*r22*x10859)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10852))+(((-1.0)*x10854*x10858))+((x10850*x10855))+(((-1.0)*r02*x10859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10860=((1.0)*gconst5);
CheckValue<IkReal> x10861 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10860))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10861.valid){
continue;
}
CheckValue<IkReal> x10862=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10860)))),-1);
if(!x10862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10861.value)+(((1.5707963267949)*(x10862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10863=IKsin(j4);
IkReal x10864=IKcos(j4);
IkReal x10865=(gconst4*r11);
IkReal x10866=((1.0)*cj1);
IkReal x10867=(gconst5*r10);
IkReal x10868=(gconst4*r01);
IkReal x10869=(gconst5*r00);
IkReal x10870=(gconst4*r21);
IkReal x10871=(gconst5*r20);
IkReal x10872=((1.0)*x10864);
IkReal x10873=((1.0)*x10863);
evalcond[0]=((((-1.0)*r22*x10872))+((x10863*x10870))+(((-1.0)*x10871*x10873)));
evalcond[1]=(((x10863*x10868))+(((-1.0)*r02*x10872))+(((-1.0)*x10869*x10873)));
evalcond[2]=((((-1.0)*r12*x10873))+((x10864*x10867))+(((-1.0)*x10865*x10872)));
evalcond[3]=((1.0)+((x10863*x10865))+(((-1.0)*r12*x10872))+(((-1.0)*x10867*x10873)));
evalcond[4]=((((-1.0)*r22*x10873))+(((-1.0)*x10870*x10872))+((x10864*x10871))+((sj1*sj2))+(((-1.0)*cj2*x10866)));
evalcond[5]=(((x10864*x10869))+(((-1.0)*cj2*sj1))+(((-1.0)*x10868*x10872))+(((-1.0)*sj2*x10866))+(((-1.0)*r02*x10873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
CheckValue<IkReal> x10875=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10874.value)+(((1.5707963267949)*(x10875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10876=IKsin(j4);
IkReal x10877=IKcos(j4);
IkReal x10878=(gconst4*r11);
IkReal x10879=((1.0)*cj1);
IkReal x10880=(gconst5*r10);
IkReal x10881=(gconst4*r01);
IkReal x10882=(gconst5*r00);
IkReal x10883=(gconst4*r21);
IkReal x10884=(gconst5*r20);
IkReal x10885=((1.0)*x10877);
IkReal x10886=((1.0)*x10876);
evalcond[0]=((((-1.0)*x10884*x10886))+((x10876*x10883))+(((-1.0)*r22*x10885)));
evalcond[1]=((((-1.0)*r02*x10885))+((x10876*x10881))+(((-1.0)*x10882*x10886)));
evalcond[2]=((((-1.0)*x10878*x10885))+((x10877*x10880))+(((-1.0)*r12*x10886)));
evalcond[3]=((1.0)+((x10876*x10878))+(((-1.0)*x10880*x10886))+(((-1.0)*r12*x10885)));
evalcond[4]=(((sj1*sj2))+((x10877*x10884))+(((-1.0)*x10883*x10885))+(((-1.0)*r22*x10886))+(((-1.0)*cj2*x10879)));
evalcond[5]=((((-1.0)*r02*x10886))+(((-1.0)*cj2*sj1))+((x10877*x10882))+(((-1.0)*x10881*x10885))+(((-1.0)*sj2*x10879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10887=((-1.0)*r21);
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(x10887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=(x10887*x10889);
IkReal gconst5=((1.0)*r20*x10889);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10891=((-1.0)*r21);
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(x10891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
IkReal x10892=((1.0)*(x10894.value));
IkReal x10893=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10892)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10892)));
IkReal gconst4=(x10891*x10893);
IkReal gconst5=((1.0)*r20*x10893);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10895=((-1.0)*r21);
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(x10895),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
IkReal x10896=((1.0)*(x10898.value));
IkReal x10897=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10896)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10896)));
IkReal gconst4=(x10895*x10897);
IkReal gconst5=((1.0)*r20*x10897);
IkReal x10899=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10903=IKPowWithIntegerCheck(x10899,-1);
if(!x10903.valid){
continue;
}
IkReal x10900=x10903.value;
IkReal x10901=((1.0)*x10900);
IkReal x10902=((((-1.0)*x10901*(r11*r11)*(r21*r21)))+(((-1.0)*x10901*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10900)));
j4eval[0]=x10902;
j4eval[1]=r12;
j4eval[2]=x10899;
j4eval[3]=IKsign(x10902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10904=(gconst5*r10);
IkReal x10905=(gconst4*r11);
CheckValue<IkReal> x10906=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10904*x10904)))+(((2.0)*x10904*x10905))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10905*x10905))))),-1);
if(!x10906.valid){
continue;
}
CheckValue<IkReal> x10907 = IKatan2WithCheck(IkReal(((((-1.0)*x10904))+x10905)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10906.value)))+(x10907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10908=IKcos(j4);
IkReal x10909=IKsin(j4);
IkReal x10910=(gconst4*r11);
IkReal x10911=(gconst5*r10);
IkReal x10912=((1.0)*cj1);
IkReal x10913=(gconst5*r00);
IkReal x10914=(gconst5*r20);
IkReal x10915=((1.0)*x10908);
IkReal x10916=(gconst4*x10908);
IkReal x10917=((1.0)*x10909);
IkReal x10918=(gconst4*x10909);
evalcond[0]=(((r12*x10909))+(((-1.0)*x10911*x10915))+((x10908*x10910)));
evalcond[1]=((((-1.0)*x10914*x10917))+(((-1.0)*r22*x10915))+((r21*x10918)));
evalcond[2]=((((-1.0)*r02*x10915))+((r01*x10918))+(((-1.0)*x10913*x10917)));
evalcond[3]=((1.0)+((x10909*x10910))+(((-1.0)*r12*x10915))+(((-1.0)*x10911*x10917)));
evalcond[4]=(((r22*x10909))+(((-1.0)*x10914*x10915))+((sj1*sj2))+((r21*x10916))+(((-1.0)*cj2*x10912)));
evalcond[5]=((((-1.0)*sj2*x10912))+(((-1.0)*cj2*sj1))+((r01*x10916))+((r02*x10909))+(((-1.0)*x10913*x10915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10919=((1.0)*gconst5);
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10919)))),-1);
if(!x10920.valid){
continue;
}
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10919))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10920.value)))+(x10921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10922=IKcos(j4);
IkReal x10923=IKsin(j4);
IkReal x10924=(gconst4*r11);
IkReal x10925=(gconst5*r10);
IkReal x10926=((1.0)*cj1);
IkReal x10927=(gconst5*r00);
IkReal x10928=(gconst5*r20);
IkReal x10929=((1.0)*x10922);
IkReal x10930=(gconst4*x10922);
IkReal x10931=((1.0)*x10923);
IkReal x10932=(gconst4*x10923);
evalcond[0]=(((r12*x10923))+(((-1.0)*x10925*x10929))+((x10922*x10924)));
evalcond[1]=((((-1.0)*r22*x10929))+((r21*x10932))+(((-1.0)*x10928*x10931)));
evalcond[2]=((((-1.0)*r02*x10929))+(((-1.0)*x10927*x10931))+((r01*x10932)));
evalcond[3]=((1.0)+(((-1.0)*x10925*x10931))+(((-1.0)*r12*x10929))+((x10923*x10924)));
evalcond[4]=(((sj1*sj2))+((r21*x10930))+((r22*x10923))+(((-1.0)*x10928*x10929))+(((-1.0)*cj2*x10926)));
evalcond[5]=((((-1.0)*sj2*x10926))+((r02*x10923))+(((-1.0)*cj2*sj1))+(((-1.0)*x10927*x10929))+((r01*x10930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
CheckValue<IkReal> x10934=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10933.value)+(((1.5707963267949)*(x10934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10935=IKcos(j4);
IkReal x10936=IKsin(j4);
IkReal x10937=(gconst4*r11);
IkReal x10938=(gconst5*r10);
IkReal x10939=((1.0)*cj1);
IkReal x10940=(gconst5*r00);
IkReal x10941=(gconst5*r20);
IkReal x10942=((1.0)*x10935);
IkReal x10943=(gconst4*x10935);
IkReal x10944=((1.0)*x10936);
IkReal x10945=(gconst4*x10936);
evalcond[0]=(((x10935*x10937))+(((-1.0)*x10938*x10942))+((r12*x10936)));
evalcond[1]=(((r21*x10945))+(((-1.0)*x10941*x10944))+(((-1.0)*r22*x10942)));
evalcond[2]=(((r01*x10945))+(((-1.0)*r02*x10942))+(((-1.0)*x10940*x10944)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10942))+(((-1.0)*x10938*x10944))+((x10936*x10937)));
evalcond[4]=(((r21*x10943))+(((-1.0)*x10941*x10942))+((sj1*sj2))+((r22*x10936))+(((-1.0)*cj2*x10939)));
evalcond[5]=(((r02*x10936))+((r01*x10943))+(((-1.0)*cj2*sj1))+(((-1.0)*x10940*x10942))+(((-1.0)*sj2*x10939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10946=((-1.0)*r21);
CheckValue<IkReal> x10949 = IKatan2WithCheck(IkReal(x10946),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10949.valid){
continue;
}
IkReal x10947=((1.0)*(x10949.value));
IkReal x10948=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10947)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10947)));
IkReal gconst4=(x10946*x10948);
IkReal gconst5=((1.0)*r20*x10948);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10950=((-1.0)*r21);
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(x10950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
IkReal x10951=((1.0)*(x10953.value));
IkReal x10952=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10951)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10951)));
IkReal gconst4=(x10950*x10952);
IkReal gconst5=((1.0)*r20*x10952);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10954=((-1.0)*r21);
CheckValue<IkReal> x10957 = IKatan2WithCheck(IkReal(x10954),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10957.valid){
continue;
}
IkReal x10955=((1.0)*(x10957.value));
IkReal x10956=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10955)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10955)));
IkReal gconst4=(x10954*x10956);
IkReal gconst5=((1.0)*r20*x10956);
IkReal x10958=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10962=IKPowWithIntegerCheck(x10958,-1);
if(!x10962.valid){
continue;
}
IkReal x10959=x10962.value;
IkReal x10960=((1.0)*x10959);
IkReal x10961=((((-1.0)*x10960*(r10*r10)*(r20*r20)))+(((-1.0)*x10960*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10959)));
j4eval[0]=x10961;
j4eval[1]=r12;
j4eval[2]=x10958;
j4eval[3]=IKsign(x10961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10963=(gconst5*r10);
IkReal x10964=(gconst4*r11);
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10964*x10964)))+(((2.0)*x10963*x10964))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10963*x10963))))),-1);
if(!x10965.valid){
continue;
}
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(((((-1.0)*x10963))+x10964)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10965.value)))+(x10966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10967=IKcos(j4);
IkReal x10968=IKsin(j4);
IkReal x10969=(gconst4*r11);
IkReal x10970=(gconst5*r10);
IkReal x10971=(gconst5*r00);
IkReal x10972=(gconst5*r20);
IkReal x10973=((1.0)*x10967);
IkReal x10974=(gconst4*x10967);
IkReal x10975=((1.0)*x10968);
IkReal x10976=(gconst4*x10968);
evalcond[0]=((((-1.0)*x10970*x10973))+((x10967*x10969))+((r12*x10968)));
evalcond[1]=((((-1.0)*x10972*x10975))+(((-1.0)*r22*x10973))+((r21*x10976)));
evalcond[2]=((((-1.0)*x10971*x10975))+((r01*x10976))+(((-1.0)*r02*x10973)));
evalcond[3]=((1.0)+(((-1.0)*x10970*x10975))+((x10968*x10969))+(((-1.0)*r12*x10973)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10968))+(((-1.0)*x10972*x10973))+((r21*x10974)));
evalcond[5]=((((-1.0)*x10971*x10973))+((r02*x10968))+((r01*x10974))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10977=((1.0)*gconst5);
CheckValue<IkReal> x10978 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10977))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10978.valid){
continue;
}
CheckValue<IkReal> x10979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10977)))),-1);
if(!x10979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10978.value)+(((1.5707963267949)*(x10979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10980=IKcos(j4);
IkReal x10981=IKsin(j4);
IkReal x10982=(gconst4*r11);
IkReal x10983=(gconst5*r10);
IkReal x10984=(gconst5*r00);
IkReal x10985=(gconst5*r20);
IkReal x10986=((1.0)*x10980);
IkReal x10987=(gconst4*x10980);
IkReal x10988=((1.0)*x10981);
IkReal x10989=(gconst4*x10981);
evalcond[0]=((((-1.0)*x10983*x10986))+((r12*x10981))+((x10980*x10982)));
evalcond[1]=(((r21*x10989))+(((-1.0)*r22*x10986))+(((-1.0)*x10985*x10988)));
evalcond[2]=(((r01*x10989))+(((-1.0)*x10984*x10988))+(((-1.0)*r02*x10986)));
evalcond[3]=((1.0)+(((-1.0)*x10983*x10988))+(((-1.0)*r12*x10986))+((x10981*x10982)));
evalcond[4]=(((r22*x10981))+((cj2*sj1))+((r21*x10987))+((cj1*sj2))+(((-1.0)*x10985*x10986)));
evalcond[5]=(((r01*x10987))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10984*x10986))+((r02*x10981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10990 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10990.valid){
continue;
}
CheckValue<IkReal> x10991=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10990.value)+(((1.5707963267949)*(x10991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10992=IKcos(j4);
IkReal x10993=IKsin(j4);
IkReal x10994=(gconst4*r11);
IkReal x10995=(gconst5*r10);
IkReal x10996=(gconst5*r00);
IkReal x10997=(gconst5*r20);
IkReal x10998=((1.0)*x10992);
IkReal x10999=(gconst4*x10992);
IkReal x11000=((1.0)*x10993);
IkReal x11001=(gconst4*x10993);
evalcond[0]=(((r12*x10993))+(((-1.0)*x10995*x10998))+((x10992*x10994)));
evalcond[1]=((((-1.0)*r22*x10998))+((r21*x11001))+(((-1.0)*x10997*x11000)));
evalcond[2]=(((r01*x11001))+(((-1.0)*x10996*x11000))+(((-1.0)*r02*x10998)));
evalcond[3]=((1.0)+(((-1.0)*x10995*x11000))+((x10993*x10994))+(((-1.0)*r12*x10998)));
evalcond[4]=(((cj2*sj1))+((r22*x10993))+(((-1.0)*x10997*x10998))+((r21*x10999))+((cj1*sj2)));
evalcond[5]=(((r01*x10999))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10993))+(((-1.0)*x10996*x10998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11002=((-1.0)*r21);
CheckValue<IkReal> x11005 = IKatan2WithCheck(IkReal(x11002),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11005.valid){
continue;
}
IkReal x11003=((1.0)*(x11005.value));
IkReal x11004=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11003)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11003)));
IkReal gconst4=(x11002*x11004);
IkReal gconst5=((1.0)*r20*x11004);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11006=((-1.0)*r21);
CheckValue<IkReal> x11009 = IKatan2WithCheck(IkReal(x11006),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11009.valid){
continue;
}
IkReal x11007=((1.0)*(x11009.value));
IkReal x11008=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11007)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11007)));
IkReal gconst4=(x11006*x11008);
IkReal gconst5=((1.0)*r20*x11008);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11010=((-1.0)*r21);
CheckValue<IkReal> x11013 = IKatan2WithCheck(IkReal(x11010),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11013.valid){
continue;
}
IkReal x11011=((1.0)*(x11013.value));
IkReal x11012=x9715;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11011)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11011)));
IkReal gconst4=(x11010*x11012);
IkReal gconst5=((1.0)*r20*x11012);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11014=(gconst5*r10);
IkReal x11015=(gconst4*r11);
CheckValue<IkReal> x11016 = IKatan2WithCheck(IkReal((x11014+(((-1.0)*x11015)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11016.valid){
continue;
}
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(IKsign(((x11014*x11014)+(r12*r12)+(x11015*x11015)+(((-2.0)*x11014*x11015)))),-1);
if(!x11017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11016.value)+(((1.5707963267949)*(x11017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11018=IKsin(j4);
IkReal x11019=IKcos(j4);
IkReal x11020=(gconst4*r11);
IkReal x11021=(gconst5*r10);
IkReal x11022=(gconst4*r01);
IkReal x11023=(gconst5*r00);
IkReal x11024=(gconst4*r21);
IkReal x11025=(gconst5*r20);
IkReal x11026=((1.0)*x11019);
IkReal x11027=((1.0)*x11018);
evalcond[0]=(((x11018*x11024))+(((-1.0)*r22*x11026))+(((-1.0)*x11025*x11027)));
evalcond[1]=((((-1.0)*r02*x11026))+(((-1.0)*x11023*x11027))+((x11018*x11022)));
evalcond[2]=(((x11019*x11021))+(((-1.0)*r12*x11027))+(((-1.0)*x11020*x11026)));
evalcond[3]=((1.0)+((x11018*x11020))+(((-1.0)*x11021*x11027))+(((-1.0)*r12*x11026)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11019*x11025))+(((-1.0)*r22*x11027))+(((-1.0)*x11024*x11026)));
evalcond[5]=((((-1.0)*r02*x11027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11019*x11023))+(((-1.0)*x11022*x11026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11028=((1.0)*gconst5);
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11028)))),-1);
if(!x11029.valid){
continue;
}
CheckValue<IkReal> x11030 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11028))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11029.value)))+(x11030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11031=IKsin(j4);
IkReal x11032=IKcos(j4);
IkReal x11033=(gconst4*r11);
IkReal x11034=(gconst5*r10);
IkReal x11035=(gconst4*r01);
IkReal x11036=(gconst5*r00);
IkReal x11037=(gconst4*r21);
IkReal x11038=(gconst5*r20);
IkReal x11039=((1.0)*x11032);
IkReal x11040=((1.0)*x11031);
evalcond[0]=((((-1.0)*r22*x11039))+((x11031*x11037))+(((-1.0)*x11038*x11040)));
evalcond[1]=((((-1.0)*r02*x11039))+(((-1.0)*x11036*x11040))+((x11031*x11035)));
evalcond[2]=((((-1.0)*r12*x11040))+(((-1.0)*x11033*x11039))+((x11032*x11034)));
evalcond[3]=((1.0)+(((-1.0)*x11034*x11040))+(((-1.0)*r12*x11039))+((x11031*x11033)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11040))+((cj1*sj2))+(((-1.0)*x11037*x11039))+((x11032*x11038)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11035*x11039))+(((-1.0)*r02*x11040))+((x11032*x11036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11041 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11041.valid){
continue;
}
CheckValue<IkReal> x11042=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11041.value)+(((1.5707963267949)*(x11042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11043=IKsin(j4);
IkReal x11044=IKcos(j4);
IkReal x11045=(gconst4*r11);
IkReal x11046=(gconst5*r10);
IkReal x11047=(gconst4*r01);
IkReal x11048=(gconst5*r00);
IkReal x11049=(gconst4*r21);
IkReal x11050=(gconst5*r20);
IkReal x11051=((1.0)*x11044);
IkReal x11052=((1.0)*x11043);
evalcond[0]=((((-1.0)*r22*x11051))+((x11043*x11049))+(((-1.0)*x11050*x11052)));
evalcond[1]=(((x11043*x11047))+(((-1.0)*r02*x11051))+(((-1.0)*x11048*x11052)));
evalcond[2]=(((x11044*x11046))+(((-1.0)*x11045*x11051))+(((-1.0)*r12*x11052)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11051))+(((-1.0)*x11046*x11052))+((x11043*x11045)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11052))+((x11044*x11050))+(((-1.0)*x11049*x11051))+((cj1*sj2)));
evalcond[5]=(((x11044*x11048))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11047*x11051))+(((-1.0)*r02*x11052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11053=gconst4*gconst4;
IkReal x11054=gconst5*gconst5;
IkReal x11055=(r10*r21);
IkReal x11056=((1.0)*cj3);
IkReal x11057=(r11*r21);
IkReal x11058=(r11*r20);
IkReal x11059=(r22*sj3);
IkReal x11060=(gconst4*r10);
IkReal x11061=((1.0)*sj3);
IkReal x11062=(cj3*gconst4*gconst5);
CheckValue<IkReal> x11063 = IKatan2WithCheck(IkReal((((gconst5*r11*x11059))+((x11059*x11060)))),IkReal(((((-1.0)*gconst5*r20*x11060*x11061))+((sj3*x11053*x11055))+((gconst4*gconst5*sj3*x11057))+(((-1.0)*x11054*x11058*x11061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11063.valid){
continue;
}
CheckValue<IkReal> x11064=IKPowWithIntegerCheck(IKsign((((x11058*x11062))+(((-1.0)*r12*r22*x11056))+((x11055*x11062))+(((-1.0)*r10*r20*x11054*x11056))+(((-1.0)*x11053*x11056*x11057)))),-1);
if(!x11064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11063.value)+(((1.5707963267949)*(x11064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11065=IKsin(j4);
IkReal x11066=IKcos(j4);
IkReal x11067=(sj1*sj2);
IkReal x11068=(gconst5*sj3);
IkReal x11069=(cj3*gconst5);
IkReal x11070=(gconst4*r11);
IkReal x11071=((1.0)*cj1);
IkReal x11072=(gconst4*r01);
IkReal x11073=(cj2*sj1);
IkReal x11074=(gconst4*r21);
IkReal x11075=(gconst4*sj3);
IkReal x11076=(cj3*gconst4);
IkReal x11077=(cj2*x11071);
IkReal x11078=((1.0)*x11066);
IkReal x11079=((1.0)*x11065);
IkReal x11080=(cj3*x11065);
IkReal x11081=(cj3*x11066);
evalcond[0]=(((x11065*x11074))+(((-1.0)*gconst5*r20*x11079))+(((-1.0)*r22*x11078)));
evalcond[1]=((((-1.0)*gconst5*r00*x11079))+(((-1.0)*r02*x11078))+((x11065*x11072)));
evalcond[2]=((1.0)+((x11065*x11070))+(((-1.0)*gconst5*r10*x11079))+(((-1.0)*r12*x11078)));
evalcond[3]=(((x11070*x11081))+((r10*x11075))+((r11*x11068))+((r12*x11080))+(((-1.0)*r10*x11069*x11078)));
evalcond[4]=(((r10*x11066*x11068))+(((-1.0)*r12*sj3*x11079))+(((-1.0)*sj3*x11070*x11078))+((r10*x11076))+((r11*x11069)));
evalcond[5]=((((-1.0)*r20*x11069*x11078))+((cj1*sj2))+((x11074*x11081))+x11073+((r22*x11080))+((r21*x11068))+((r20*x11075)));
evalcond[6]=(((x11072*x11081))+x11067+(((-1.0)*x11077))+((r01*x11068))+((r02*x11080))+((r00*x11075))+(((-1.0)*r00*x11069*x11078)));
evalcond[7]=(x11067+(((-1.0)*r22*sj3*x11079))+((r20*x11066*x11068))+((r21*x11069))+(((-1.0)*x11077))+((r20*x11076))+(((-1.0)*sj3*x11074*x11078)));
evalcond[8]=(((r01*x11069))+((r00*x11076))+(((-1.0)*sj3*x11072*x11078))+((r00*x11066*x11068))+(((-1.0)*r02*sj3*x11079))+(((-1.0)*sj2*x11071))+(((-1.0)*x11073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11082=((1.0)*gconst5);
CheckValue<IkReal> x11083 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11082))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11083.valid){
continue;
}
CheckValue<IkReal> x11084=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11082)))),-1);
if(!x11084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11083.value)+(((1.5707963267949)*(x11084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11085=IKsin(j4);
IkReal x11086=IKcos(j4);
IkReal x11087=(sj1*sj2);
IkReal x11088=(gconst5*sj3);
IkReal x11089=(cj3*gconst5);
IkReal x11090=(gconst4*r11);
IkReal x11091=((1.0)*cj1);
IkReal x11092=(gconst4*r01);
IkReal x11093=(cj2*sj1);
IkReal x11094=(gconst4*r21);
IkReal x11095=(gconst4*sj3);
IkReal x11096=(cj3*gconst4);
IkReal x11097=(cj2*x11091);
IkReal x11098=((1.0)*x11086);
IkReal x11099=((1.0)*x11085);
IkReal x11100=(cj3*x11085);
IkReal x11101=(cj3*x11086);
evalcond[0]=((((-1.0)*r22*x11098))+(((-1.0)*gconst5*r20*x11099))+((x11085*x11094)));
evalcond[1]=((((-1.0)*r02*x11098))+(((-1.0)*gconst5*r00*x11099))+((x11085*x11092)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11098))+(((-1.0)*gconst5*r10*x11099))+((x11085*x11090)));
evalcond[3]=(((x11090*x11101))+((r11*x11088))+((r10*x11095))+(((-1.0)*r10*x11089*x11098))+((r12*x11100)));
evalcond[4]=((((-1.0)*r12*sj3*x11099))+((r10*x11086*x11088))+((r11*x11089))+((r10*x11096))+(((-1.0)*sj3*x11090*x11098)));
evalcond[5]=(((r21*x11088))+((cj1*sj2))+((r20*x11095))+x11093+((x11094*x11101))+((r22*x11100))+(((-1.0)*r20*x11089*x11098)));
evalcond[6]=(((x11092*x11101))+((r02*x11100))+((r01*x11088))+(((-1.0)*x11097))+x11087+((r00*x11095))+(((-1.0)*r00*x11089*x11098)));
evalcond[7]=(((r20*x11086*x11088))+((r21*x11089))+(((-1.0)*x11097))+((r20*x11096))+x11087+(((-1.0)*r22*sj3*x11099))+(((-1.0)*sj3*x11094*x11098)));
evalcond[8]=(((r00*x11086*x11088))+(((-1.0)*r02*sj3*x11099))+((r01*x11089))+(((-1.0)*x11093))+((r00*x11096))+(((-1.0)*sj2*x11091))+(((-1.0)*sj3*x11092*x11098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11102 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11102.valid){
continue;
}
CheckValue<IkReal> x11103=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11102.value)+(((1.5707963267949)*(x11103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11104=IKsin(j4);
IkReal x11105=IKcos(j4);
IkReal x11106=(sj1*sj2);
IkReal x11107=(gconst5*sj3);
IkReal x11108=(cj3*gconst5);
IkReal x11109=(gconst4*r11);
IkReal x11110=((1.0)*cj1);
IkReal x11111=(gconst4*r01);
IkReal x11112=(cj2*sj1);
IkReal x11113=(gconst4*r21);
IkReal x11114=(gconst4*sj3);
IkReal x11115=(cj3*gconst4);
IkReal x11116=(cj2*x11110);
IkReal x11117=((1.0)*x11105);
IkReal x11118=((1.0)*x11104);
IkReal x11119=(cj3*x11104);
IkReal x11120=(cj3*x11105);
evalcond[0]=((((-1.0)*gconst5*r20*x11118))+((x11104*x11113))+(((-1.0)*r22*x11117)));
evalcond[1]=(((x11104*x11111))+(((-1.0)*gconst5*r00*x11118))+(((-1.0)*r02*x11117)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11118))+((x11104*x11109))+(((-1.0)*r12*x11117)));
evalcond[3]=(((r10*x11114))+((x11109*x11120))+(((-1.0)*r10*x11108*x11117))+((r11*x11107))+((r12*x11119)));
evalcond[4]=((((-1.0)*sj3*x11109*x11117))+(((-1.0)*r12*sj3*x11118))+((r10*x11115))+((r10*x11105*x11107))+((r11*x11108)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x11108*x11117))+x11112+((r21*x11107))+((x11113*x11120))+((r20*x11114))+((r22*x11119)));
evalcond[6]=(((r02*x11119))+x11106+(((-1.0)*r00*x11108*x11117))+(((-1.0)*x11116))+((x11111*x11120))+((r00*x11114))+((r01*x11107)));
evalcond[7]=(x11106+((r21*x11108))+(((-1.0)*r22*sj3*x11118))+(((-1.0)*sj3*x11113*x11117))+((r20*x11115))+(((-1.0)*x11116))+((r20*x11105*x11107)));
evalcond[8]=((((-1.0)*x11112))+(((-1.0)*r02*sj3*x11118))+(((-1.0)*sj3*x11111*x11117))+(((-1.0)*sj2*x11110))+((r00*x11115))+((r00*x11105*x11107))+((r01*x11108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11121=((-1.0)*r21);
IkReal x11122=((-1.0)*r20);
CheckValue<IkReal> x11124 = IKatan2WithCheck(IkReal(x11121),IkReal(x11122),IKFAST_ATAN2_MAGTHRESH);
if(!x11124.valid){
continue;
}
IkReal x11123=((1.0)*(x11124.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11123)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11122);
rxp0_2=(py*r00);
rxp1_0=(py*x11121);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11123)));
IkReal gconst4=x11121;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11125=((-1.0)*r21);
IkReal x11126=((-1.0)*r20);
CheckValue<IkReal> x11128 = IKatan2WithCheck(IkReal(x11125),IkReal(x11126),IKFAST_ATAN2_MAGTHRESH);
if(!x11128.valid){
continue;
}
IkReal x11127=((1.0)*(x11128.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11127)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11126);
rxp0_2=(py*r00);
rxp1_0=(py*x11125);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11127)));
IkReal gconst4=x11125;
IkReal gconst5=((1.0)*r20);
IkReal x11129=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=((((-1.0)*x11129))+((x11129*(r00*r00)))+(((-1.0)*x11129*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11130=((-1.0)*r21);
IkReal x11131=((-1.0)*r20);
CheckValue<IkReal> x11133 = IKatan2WithCheck(IkReal(x11130),IkReal(x11131),IKFAST_ATAN2_MAGTHRESH);
if(!x11133.valid){
continue;
}
IkReal x11132=((1.0)*(x11133.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11132)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11131);
rxp0_2=(py*r00);
rxp1_0=(py*x11130);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11132)));
IkReal gconst4=x11130;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11134=((-1.0)*r21);
IkReal x11135=((-1.0)*r20);
CheckValue<IkReal> x11137 = IKatan2WithCheck(IkReal(x11134),IkReal(x11135),IKFAST_ATAN2_MAGTHRESH);
if(!x11137.valid){
continue;
}
IkReal x11136=((1.0)*(x11137.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11136)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11135);
rxp0_2=(py*r00);
rxp1_0=(py*x11134);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11136)));
IkReal gconst4=x11134;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11138=((-1.0)*r21);
IkReal x11139=((-1.0)*r20);
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(x11138),IkReal(x11139),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
IkReal x11140=((1.0)*(x11141.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11140)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11139);
rxp0_2=(py*r00);
rxp1_0=(py*x11138);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11140)));
IkReal gconst4=x11138;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11142=((-1.0)*r21);
IkReal x11143=((-1.0)*r20);
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(x11142),IkReal(x11143),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
IkReal x11144=((1.0)*(x11145.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11144)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11143);
rxp0_2=(py*r00);
rxp1_0=(py*x11142);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11144)));
IkReal gconst4=x11142;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11148=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11148.valid){
continue;
}
IkReal x11146=x11148.value;
IkReal x11147=(cj0*x11146);
cj4array[0]=((((-1.0)*cj1*cj2*x11147))+((sj1*sj2*x11147)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11149=IKsin(j4);
IkReal x11150=IKcos(j4);
IkReal x11151=(gconst4*x11149);
IkReal x11152=((1.0)*x11150);
IkReal x11153=((1.0)*gconst5*x11149);
evalcond[0]=(r12*x11149);
evalcond[1]=((((-1.0)*r12*x11152))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11151))+(((-1.0)*r20*x11153)));
evalcond[3]=(((r01*x11151))+(((-1.0)*r00*x11153)));
evalcond[4]=((((-1.0)*gconst5*r20*x11152))+((cj2*sj1))+((cj1*sj2))+((gconst4*r21*x11150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11156=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11156.valid){
continue;
}
IkReal x11154=x11156.value;
IkReal x11155=((1.0)*x11154);
cj4array[0]=((((-1.0)*cj1*sj2*x11155))+(((-1.0)*cj2*sj1*x11155)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11157=IKsin(j4);
IkReal x11158=IKcos(j4);
IkReal x11159=(gconst4*r01);
IkReal x11160=((1.0)*cj0);
IkReal x11161=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11157);
evalcond[1]=((((-1.0)*x11160))+(((-1.0)*r12*x11158)));
evalcond[2]=((((-1.0)*gconst5*r20*x11157))+((gconst4*r21*x11157)));
evalcond[3]=((((-1.0)*x11157*x11161))+((x11157*x11159)));
evalcond[4]=((((-1.0)*x11158*x11161))+(((-1.0)*sj1*sj2*x11160))+((x11158*x11159))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(r12,-1);
if(!x11162.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11162.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11163=IKsin(j4);
IkReal x11164=IKcos(j4);
IkReal x11165=(gconst4*r01);
IkReal x11166=(gconst4*r21);
IkReal x11167=((1.0)*gconst5*r00);
IkReal x11168=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11163);
evalcond[1]=((((-1.0)*x11163*x11168))+((x11163*x11166)));
evalcond[2]=((((-1.0)*x11163*x11167))+((x11163*x11165)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x11164*x11166))+(((-1.0)*x11164*x11168)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+((x11164*x11165))+(((-1.0)*x11164*x11167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11169=((-1.0)*r21);
IkReal x11170=((-1.0)*r20);
CheckValue<IkReal> x11172 = IKatan2WithCheck(IkReal(x11169),IkReal(x11170),IKFAST_ATAN2_MAGTHRESH);
if(!x11172.valid){
continue;
}
IkReal x11171=((1.0)*(x11172.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11171)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11170);
rxp0_2=(py*r00);
rxp1_0=(py*x11169);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11171)));
IkReal gconst4=x11169;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11173=((-1.0)*r21);
IkReal x11174=((-1.0)*r20);
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal(x11173),IkReal(x11174),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
IkReal x11175=((1.0)*(x11176.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11175)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11174);
rxp0_2=(py*r00);
rxp1_0=(py*x11173);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11175)));
IkReal gconst4=x11173;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11177=((-1.0)*r21);
IkReal x11178=((-1.0)*r20);
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(x11177),IkReal(x11178),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11179=((1.0)*(x11180.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11179)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11178);
rxp0_2=(py*r00);
rxp1_0=(py*x11177);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11179)));
IkReal gconst4=x11177;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11183=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11183.valid){
continue;
}
IkReal x11181=x11183.value;
IkReal x11182=(cj0*x11181);
cj4array[0]=(((sj1*sj2*x11182))+(((-1.0)*cj1*cj2*x11182)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11184=IKsin(j4);
IkReal x11185=IKcos(j4);
IkReal x11186=(gconst4*x11184);
IkReal x11187=((1.0)*x11185);
IkReal x11188=((1.0)*gconst5*x11184);
evalcond[0]=((-1.0)*r12*x11184);
evalcond[1]=((((-1.0)*r12*x11187))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11188))+((r21*x11186)));
evalcond[3]=((((-1.0)*r00*x11188))+((r01*x11186)));
evalcond[4]=(((cj2*sj1))+((gconst5*r20*x11185))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11191=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11191.valid){
continue;
}
IkReal x11189=x11191.value;
IkReal x11190=((1.0)*x11189);
cj4array[0]=((((-1.0)*cj1*sj2*x11190))+(((-1.0)*cj2*sj1*x11190)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11192=IKsin(j4);
IkReal x11193=IKcos(j4);
IkReal x11194=(gconst5*r00);
IkReal x11195=(gconst4*r01);
IkReal x11196=((1.0)*cj0);
IkReal x11197=((1.0)*x11192);
IkReal x11198=((1.0)*x11193);
evalcond[0]=((-1.0)*r12*x11192);
evalcond[1]=((((-1.0)*r12*x11198))+(((-1.0)*x11196)));
evalcond[2]=(((gconst4*r21*x11192))+(((-1.0)*gconst5*r20*x11197)));
evalcond[3]=(((x11192*x11195))+(((-1.0)*x11194*x11197)));
evalcond[4]=((((-1.0)*x11195*x11198))+(((-1.0)*sj1*sj2*x11196))+((x11193*x11194))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11199=IKPowWithIntegerCheck(r12,-1);
if(!x11199.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11199.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11200=IKsin(j4);
IkReal x11201=IKcos(j4);
IkReal x11202=(gconst5*r00);
IkReal x11203=(gconst5*r20);
IkReal x11204=(gconst4*r01);
IkReal x11205=(gconst4*r21);
IkReal x11206=((1.0)*x11200);
IkReal x11207=((1.0)*x11201);
evalcond[0]=((-1.0)*r12*x11200);
evalcond[1]=((((-1.0)*x11203*x11206))+((x11200*x11205)));
evalcond[2]=(((x11200*x11204))+(((-1.0)*x11202*x11206)));
evalcond[3]=(((cj2*sj1))+((x11201*x11203))+((cj1*sj2))+(((-1.0)*x11205*x11207)));
evalcond[4]=(((x11201*x11202))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x11204*x11207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11208=((-1.0)*r21);
IkReal x11209=((-1.0)*r20);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(x11208),IkReal(x11209),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11210=((1.0)*(x11211.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11210)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11209);
rxp0_2=(py*r00);
rxp1_0=(py*x11208);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11210)));
IkReal gconst4=x11208;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11212=((-1.0)*r21);
IkReal x11213=((-1.0)*r20);
CheckValue<IkReal> x11215 = IKatan2WithCheck(IkReal(x11212),IkReal(x11213),IKFAST_ATAN2_MAGTHRESH);
if(!x11215.valid){
continue;
}
IkReal x11214=((1.0)*(x11215.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11214)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11213);
rxp0_2=(py*r00);
rxp1_0=(py*x11212);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11214)));
IkReal gconst4=x11212;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11216=((-1.0)*r21);
IkReal x11217=((-1.0)*r20);
CheckValue<IkReal> x11219 = IKatan2WithCheck(IkReal(x11216),IkReal(x11217),IKFAST_ATAN2_MAGTHRESH);
if(!x11219.valid){
continue;
}
IkReal x11218=((1.0)*(x11219.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11218)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11217);
rxp0_2=(py*r00);
rxp1_0=(py*x11216);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11218)));
IkReal gconst4=x11216;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11222=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11222.valid){
continue;
}
IkReal x11220=x11222.value;
IkReal x11221=((1.0)*cj0*x11220);
cj4array[0]=((((-1.0)*cj1*sj2*x11221))+(((-1.0)*cj2*sj1*x11221)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11223=IKsin(j4);
IkReal x11224=IKcos(j4);
IkReal x11225=(gconst4*x11223);
IkReal x11226=((1.0)*x11224);
IkReal x11227=((1.0)*gconst5*x11223);
evalcond[0]=((-1.0)*r12*x11223);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x11226)));
evalcond[2]=((((-1.0)*r20*x11227))+((r21*x11225)));
evalcond[3]=((((-1.0)*r00*x11227))+((r01*x11225)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst5*r20*x11224))+(((-1.0)*gconst4*r21*x11226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11229=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11229.valid){
continue;
}
IkReal x11228=x11229.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11228))+((cj1*cj2*x11228)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11230=IKsin(j4);
IkReal x11231=IKcos(j4);
IkReal x11232=(gconst5*r00);
IkReal x11233=(gconst4*r01);
IkReal x11234=((1.0)*x11230);
IkReal x11235=((1.0)*x11231);
evalcond[0]=((-1.0)*r12*x11230);
evalcond[1]=((((-1.0)*r12*x11235))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11234))+((gconst4*r21*x11230)));
evalcond[3]=((((-1.0)*x11232*x11234))+((x11230*x11233)));
evalcond[4]=((((-1.0)*x11233*x11235))+((cj0*cj2*sj1))+((x11231*x11232))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11236=IKPowWithIntegerCheck(r12,-1);
if(!x11236.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11236.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11237=IKsin(j4);
IkReal x11238=IKcos(j4);
IkReal x11239=(gconst5*r00);
IkReal x11240=(gconst5*r20);
IkReal x11241=((1.0)*x11237);
IkReal x11242=(gconst4*x11237);
IkReal x11243=((1.0)*gconst4*x11238);
evalcond[0]=((-1.0)*r12*x11237);
evalcond[1]=(((r21*x11242))+(((-1.0)*x11240*x11241)));
evalcond[2]=((((-1.0)*x11239*x11241))+((r01*x11242)));
evalcond[3]=(((x11238*x11240))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11243)));
evalcond[4]=(((x11238*x11239))+(((-1.0)*r01*x11243))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11244=((-1.0)*r21);
IkReal x11245=((-1.0)*r20);
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(x11244),IkReal(x11245),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
IkReal x11246=((1.0)*(x11247.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11246)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11245);
rxp0_2=(py*r00);
rxp1_0=(py*x11244);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11246)));
IkReal gconst4=x11244;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11248=((-1.0)*r21);
IkReal x11249=((-1.0)*r20);
CheckValue<IkReal> x11251 = IKatan2WithCheck(IkReal(x11248),IkReal(x11249),IKFAST_ATAN2_MAGTHRESH);
if(!x11251.valid){
continue;
}
IkReal x11250=((1.0)*(x11251.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11250)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11249);
rxp0_2=(py*r00);
rxp1_0=(py*x11248);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11250)));
IkReal gconst4=x11248;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11252=((-1.0)*r21);
IkReal x11253=((-1.0)*r20);
CheckValue<IkReal> x11255 = IKatan2WithCheck(IkReal(x11252),IkReal(x11253),IKFAST_ATAN2_MAGTHRESH);
if(!x11255.valid){
continue;
}
IkReal x11254=((1.0)*(x11255.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11254)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11253);
rxp0_2=(py*r00);
rxp1_0=(py*x11252);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11254)));
IkReal gconst4=x11252;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11258=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11258.valid){
continue;
}
IkReal x11256=x11258.value;
IkReal x11257=((1.0)*cj0*x11256);
cj4array[0]=((((-1.0)*cj1*sj2*x11257))+(((-1.0)*cj2*sj1*x11257)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11259=IKsin(j4);
IkReal x11260=IKcos(j4);
IkReal x11261=(gconst4*x11259);
IkReal x11262=((1.0)*x11260);
IkReal x11263=((1.0)*gconst5*x11259);
evalcond[0]=(r12*x11259);
evalcond[1]=((((-1.0)*r12*x11262))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11261))+(((-1.0)*r20*x11263)));
evalcond[3]=(((r01*x11261))+(((-1.0)*r00*x11263)));
evalcond[4]=(((gconst4*r21*x11260))+(((-1.0)*gconst5*r20*x11262))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11265=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11265.valid){
continue;
}
IkReal x11264=x11265.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11264))+((cj1*cj2*x11264)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11266=IKsin(j4);
IkReal x11267=IKcos(j4);
IkReal x11268=(gconst4*r01);
IkReal x11269=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11266);
evalcond[1]=((((-1.0)*r12*x11267))+(((-1.0)*cj0)));
evalcond[2]=(((gconst4*r21*x11266))+(((-1.0)*gconst5*r20*x11266)));
evalcond[3]=(((x11266*x11268))+(((-1.0)*x11266*x11269)));
evalcond[4]=(((x11267*x11268))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x11267*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11270=IKPowWithIntegerCheck(r12,-1);
if(!x11270.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11270.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11271=IKsin(j4);
IkReal x11272=IKcos(j4);
IkReal x11273=((1.0)*gconst5*r00);
IkReal x11274=(gconst4*x11271);
IkReal x11275=(gconst4*x11272);
IkReal x11276=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11271);
evalcond[1]=(((r21*x11274))+(((-1.0)*x11271*x11276)));
evalcond[2]=(((r01*x11274))+(((-1.0)*x11271*x11273)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11275))+(((-1.0)*x11272*x11276)));
evalcond[4]=(((r01*x11275))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x11272*x11273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11278=IKPowWithIntegerCheck(r12,-1);
if(!x11278.valid){
continue;
}
IkReal x11277=x11278.value;
CheckValue<IkReal> x11279=IKPowWithIntegerCheck(sj3,-1);
if(!x11279.valid){
continue;
}
if( IKabs((x11277*(x11279.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11277)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11277*(x11279.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11277))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11277*(x11279.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11277));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11280=IKsin(j4);
IkReal x11281=IKcos(j4);
IkReal x11282=((1.0)*r12);
IkReal x11283=(cj2*sj0);
IkReal x11284=(sj1*sj2);
IkReal x11285=(gconst4*sj3);
IkReal x11286=(cj1*cj2);
IkReal x11287=(gconst4*r01);
IkReal x11288=(cj2*sj1);
IkReal x11289=(gconst4*r21);
IkReal x11290=((1.0)*gconst5);
IkReal x11291=(gconst5*sj3);
IkReal x11292=(cj3*gconst5);
IkReal x11293=(cj3*gconst4);
IkReal x11294=(cj1*sj2);
IkReal x11295=((1.0)*cj0);
IkReal x11296=(cj3*x11281);
IkReal x11297=((1.0)*x11281);
IkReal x11298=(x11281*x11291);
evalcond[0]=((((-1.0)*x11295))+(((-1.0)*x11281*x11282)));
evalcond[1]=(((x11280*x11289))+(((-1.0)*r20*x11280*x11290)));
evalcond[2]=(((x11280*x11287))+sj0+(((-1.0)*r00*x11280*x11290)));
evalcond[3]=((((-1.0)*sj3*x11280*x11282))+((sj1*x11283))+((sj0*x11294)));
evalcond[4]=((((-1.0)*sj0*x11284))+((cj1*x11283))+((cj3*r12*x11280)));
evalcond[5]=((((-1.0)*r20*x11290*x11296))+x11288+x11294+((r21*x11291))+((x11289*x11296))+((r20*x11285)));
evalcond[6]=(x11284+(((-1.0)*x11286))+((r21*x11292))+((r20*x11293))+((r20*x11298))+(((-1.0)*r21*x11285*x11297)));
evalcond[7]=(((r01*x11292))+((cj0*x11288))+(((-1.0)*r01*x11285*x11297))+((cj0*x11294))+((r00*x11293))+((r00*x11298)));
evalcond[8]=(((r01*x11291))+((cj0*x11286))+(((-1.0)*r00*x11290*x11296))+((x11287*x11296))+(((-1.0)*x11284*x11295))+((r00*x11285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11299=((1.0)*gconst5);
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(((((-1.0)*r00*x11299))+((gconst4*r01))),-1);
if(!x11300.valid){
continue;
}
CheckValue<IkReal> x11301=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11299))),-1);
if(!x11301.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11300.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11301.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11299)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11300.value)))+IKsqr(((x11301.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11299))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11300.value)), ((x11301.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11299))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11302=IKsin(j4);
IkReal x11303=IKcos(j4);
IkReal x11304=((1.0)*r12);
IkReal x11305=(cj2*sj0);
IkReal x11306=(sj1*sj2);
IkReal x11307=(gconst4*sj3);
IkReal x11308=(cj1*cj2);
IkReal x11309=(gconst4*r01);
IkReal x11310=(cj2*sj1);
IkReal x11311=(gconst4*r21);
IkReal x11312=((1.0)*gconst5);
IkReal x11313=(gconst5*sj3);
IkReal x11314=(cj3*gconst5);
IkReal x11315=(cj3*gconst4);
IkReal x11316=(cj1*sj2);
IkReal x11317=((1.0)*cj0);
IkReal x11318=(cj3*x11303);
IkReal x11319=((1.0)*x11303);
IkReal x11320=(x11303*x11313);
evalcond[0]=((((-1.0)*x11303*x11304))+(((-1.0)*x11317)));
evalcond[1]=(((x11302*x11311))+(((-1.0)*r20*x11302*x11312)));
evalcond[2]=(sj0+(((-1.0)*r00*x11302*x11312))+((x11302*x11309)));
evalcond[3]=(((sj0*x11316))+((sj1*x11305))+(((-1.0)*sj3*x11302*x11304)));
evalcond[4]=((((-1.0)*sj0*x11306))+((cj3*r12*x11302))+((cj1*x11305)));
evalcond[5]=(((x11311*x11318))+((r20*x11307))+(((-1.0)*r20*x11312*x11318))+((r21*x11313))+x11316+x11310);
evalcond[6]=(((r21*x11314))+x11306+(((-1.0)*x11308))+(((-1.0)*r21*x11307*x11319))+((r20*x11315))+((r20*x11320)));
evalcond[7]=((((-1.0)*r01*x11307*x11319))+((cj0*x11310))+((cj0*x11316))+((r00*x11320))+((r01*x11314))+((r00*x11315)));
evalcond[8]=((((-1.0)*x11306*x11317))+((r00*x11307))+((x11309*x11318))+(((-1.0)*r00*x11312*x11318))+((r01*x11313))+((cj0*x11308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11321=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11321.valid){
continue;
}
CheckValue<IkReal> x11322=IKPowWithIntegerCheck(r12,-1);
if(!x11322.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11321.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11322.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11321.value)))+IKsqr(((-1.0)*cj0*(x11322.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11321.value)), ((-1.0)*cj0*(x11322.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11323=IKsin(j4);
IkReal x11324=IKcos(j4);
IkReal x11325=((1.0)*r12);
IkReal x11326=(cj2*sj0);
IkReal x11327=(sj1*sj2);
IkReal x11328=(gconst4*sj3);
IkReal x11329=(cj1*cj2);
IkReal x11330=(gconst4*r01);
IkReal x11331=(cj2*sj1);
IkReal x11332=(gconst4*r21);
IkReal x11333=((1.0)*gconst5);
IkReal x11334=(gconst5*sj3);
IkReal x11335=(cj3*gconst5);
IkReal x11336=(cj3*gconst4);
IkReal x11337=(cj1*sj2);
IkReal x11338=((1.0)*cj0);
IkReal x11339=(cj3*x11324);
IkReal x11340=((1.0)*x11324);
IkReal x11341=(x11324*x11334);
evalcond[0]=((((-1.0)*x11338))+(((-1.0)*x11324*x11325)));
evalcond[1]=(((x11323*x11332))+(((-1.0)*r20*x11323*x11333)));
evalcond[2]=(sj0+(((-1.0)*r00*x11323*x11333))+((x11323*x11330)));
evalcond[3]=(((sj1*x11326))+((sj0*x11337))+(((-1.0)*sj3*x11323*x11325)));
evalcond[4]=((((-1.0)*sj0*x11327))+((cj3*r12*x11323))+((cj1*x11326)));
evalcond[5]=(((x11332*x11339))+(((-1.0)*r20*x11333*x11339))+x11331+x11337+((r21*x11334))+((r20*x11328)));
evalcond[6]=(x11327+((r20*x11336))+((r20*x11341))+((r21*x11335))+(((-1.0)*x11329))+(((-1.0)*r21*x11328*x11340)));
evalcond[7]=(((cj0*x11337))+((cj0*x11331))+((r00*x11341))+((r01*x11335))+((r00*x11336))+(((-1.0)*r01*x11328*x11340)));
evalcond[8]=((((-1.0)*r00*x11333*x11339))+((cj0*x11329))+((x11330*x11339))+((r01*x11334))+(((-1.0)*x11327*x11338))+((r00*x11328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11342=((1.0)*gconst5);
CheckValue<IkReal> x11343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11342))+(((-1.0)*gconst4*r20)))),-1);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11342))+(((-1.0)*cj0*r00*x11342))+((cj0*gconst4*r01))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11343.value)))+(x11344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11345=IKsin(j4);
IkReal x11346=IKcos(j4);
IkReal x11347=(gconst4*r11);
IkReal x11348=(cj2*sj0);
IkReal x11349=(sj1*sj2);
IkReal x11350=(gconst4*sj3);
IkReal x11351=(gconst5*r10);
IkReal x11352=(cj1*cj2);
IkReal x11353=(gconst4*r01);
IkReal x11354=(cj2*sj1);
IkReal x11355=(gconst4*r21);
IkReal x11356=(gconst5*r00);
IkReal x11357=(gconst5*sj3);
IkReal x11358=(cj3*gconst5);
IkReal x11359=(cj3*gconst4);
IkReal x11360=(cj1*sj2);
IkReal x11361=((1.0)*cj0);
IkReal x11362=((1.0)*x11346);
IkReal x11363=((1.0)*x11345);
IkReal x11364=(cj3*x11345);
IkReal x11365=(cj3*x11346);
IkReal x11366=(x11346*x11357);
evalcond[0]=((((-1.0)*r22*x11362))+(((-1.0)*gconst5*r20*x11363))+((x11345*x11355)));
evalcond[1]=(sj0+(((-1.0)*x11356*x11363))+(((-1.0)*r02*x11362))+((x11345*x11353)));
evalcond[2]=((((-1.0)*x11361))+((x11345*x11347))+(((-1.0)*r12*x11362))+(((-1.0)*x11351*x11363)));
evalcond[3]=(x11354+x11360+((r22*x11364))+((r20*x11350))+((r21*x11357))+(((-1.0)*r20*x11358*x11362))+((x11355*x11365)));
evalcond[4]=((((-1.0)*r22*sj3*x11363))+x11349+(((-1.0)*r21*x11350*x11362))+((r20*x11359))+(((-1.0)*x11352))+((r21*x11358))+((r20*x11366)));
evalcond[5]=((((-1.0)*r01*x11350*x11362))+(((-1.0)*r02*sj3*x11363))+((cj0*x11354))+((r01*x11358))+((r00*x11359))+((sj3*x11346*x11356))+((cj0*x11360)));
evalcond[6]=(((cj0*x11352))+((r01*x11357))+((r02*x11364))+((r00*x11350))+((x11353*x11365))+(((-1.0)*x11349*x11361))+(((-1.0)*cj3*x11356*x11362)));
evalcond[7]=(((r10*x11359))+(((-1.0)*r12*sj3*x11363))+((r11*x11358))+(((-1.0)*sj3*x11347*x11362))+((sj1*x11348))+((sj3*x11346*x11351))+((sj0*x11360)));
evalcond[8]=(((r10*x11350))+(((-1.0)*cj3*x11351*x11362))+((x11347*x11365))+((r11*x11357))+((r12*x11364))+(((-1.0)*sj0*x11349))+((cj1*x11348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11367=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11367.valid){
continue;
}
CheckValue<IkReal> x11368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11367.value)))+(x11368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11369=IKsin(j4);
IkReal x11370=IKcos(j4);
IkReal x11371=(gconst4*r11);
IkReal x11372=(cj2*sj0);
IkReal x11373=(sj1*sj2);
IkReal x11374=(gconst4*sj3);
IkReal x11375=(gconst5*r10);
IkReal x11376=(cj1*cj2);
IkReal x11377=(gconst4*r01);
IkReal x11378=(cj2*sj1);
IkReal x11379=(gconst4*r21);
IkReal x11380=(gconst5*r00);
IkReal x11381=(gconst5*sj3);
IkReal x11382=(cj3*gconst5);
IkReal x11383=(cj3*gconst4);
IkReal x11384=(cj1*sj2);
IkReal x11385=((1.0)*cj0);
IkReal x11386=((1.0)*x11370);
IkReal x11387=((1.0)*x11369);
IkReal x11388=(cj3*x11369);
IkReal x11389=(cj3*x11370);
IkReal x11390=(x11370*x11381);
evalcond[0]=((((-1.0)*gconst5*r20*x11387))+(((-1.0)*r22*x11386))+((x11369*x11379)));
evalcond[1]=(sj0+(((-1.0)*x11380*x11387))+((x11369*x11377))+(((-1.0)*r02*x11386)));
evalcond[2]=((((-1.0)*x11375*x11387))+(((-1.0)*x11385))+((x11369*x11371))+(((-1.0)*r12*x11386)));
evalcond[3]=(((r20*x11374))+((x11379*x11389))+x11378+x11384+(((-1.0)*r20*x11382*x11386))+((r21*x11381))+((r22*x11388)));
evalcond[4]=((((-1.0)*x11376))+((r20*x11390))+((r20*x11383))+x11373+((r21*x11382))+(((-1.0)*r22*sj3*x11387))+(((-1.0)*r21*x11374*x11386)));
evalcond[5]=(((cj0*x11384))+(((-1.0)*r02*sj3*x11387))+((sj3*x11370*x11380))+((r01*x11382))+((r00*x11383))+(((-1.0)*r01*x11374*x11386))+((cj0*x11378)));
evalcond[6]=(((r02*x11388))+((r00*x11374))+(((-1.0)*x11373*x11385))+((r01*x11381))+(((-1.0)*cj3*x11380*x11386))+((x11377*x11389))+((cj0*x11376)));
evalcond[7]=(((r11*x11382))+((r10*x11383))+(((-1.0)*r12*sj3*x11387))+(((-1.0)*sj3*x11371*x11386))+((sj3*x11370*x11375))+((sj0*x11384))+((sj1*x11372)));
evalcond[8]=(((r11*x11381))+(((-1.0)*sj0*x11373))+((r12*x11388))+((cj1*x11372))+((r10*x11374))+(((-1.0)*cj3*x11375*x11386))+((x11371*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11391=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11391.valid){
continue;
}
CheckValue<IkReal> x11392 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11391.value)))+(x11392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11393=IKsin(j4);
IkReal x11394=IKcos(j4);
IkReal x11395=(gconst4*r11);
IkReal x11396=(cj2*sj0);
IkReal x11397=(sj1*sj2);
IkReal x11398=(gconst4*sj3);
IkReal x11399=(gconst5*r10);
IkReal x11400=(cj1*cj2);
IkReal x11401=(gconst4*r01);
IkReal x11402=(cj2*sj1);
IkReal x11403=(gconst4*r21);
IkReal x11404=(gconst5*r00);
IkReal x11405=(gconst5*sj3);
IkReal x11406=(cj3*gconst5);
IkReal x11407=(cj3*gconst4);
IkReal x11408=(cj1*sj2);
IkReal x11409=((1.0)*cj0);
IkReal x11410=((1.0)*x11394);
IkReal x11411=((1.0)*x11393);
IkReal x11412=(cj3*x11393);
IkReal x11413=(cj3*x11394);
IkReal x11414=(x11394*x11405);
evalcond[0]=((((-1.0)*gconst5*r20*x11411))+(((-1.0)*r22*x11410))+((x11393*x11403)));
evalcond[1]=((((-1.0)*x11404*x11411))+sj0+(((-1.0)*r02*x11410))+((x11393*x11401)));
evalcond[2]=((((-1.0)*x11409))+(((-1.0)*r12*x11410))+(((-1.0)*x11399*x11411))+((x11393*x11395)));
evalcond[3]=(((r21*x11405))+x11402+x11408+((r20*x11398))+((r22*x11412))+(((-1.0)*r20*x11406*x11410))+((x11403*x11413)));
evalcond[4]=((((-1.0)*r22*sj3*x11411))+((r21*x11406))+(((-1.0)*r21*x11398*x11410))+x11397+((r20*x11407))+(((-1.0)*x11400))+((r20*x11414)));
evalcond[5]=((((-1.0)*r02*sj3*x11411))+((sj3*x11394*x11404))+(((-1.0)*r01*x11398*x11410))+((cj0*x11402))+((cj0*x11408))+((r01*x11406))+((r00*x11407)));
evalcond[6]=(((r00*x11398))+(((-1.0)*cj3*x11404*x11410))+((cj0*x11400))+(((-1.0)*x11397*x11409))+((r02*x11412))+((x11401*x11413))+((r01*x11405)));
evalcond[7]=((((-1.0)*sj3*x11395*x11410))+((r10*x11407))+((r11*x11406))+((sj1*x11396))+(((-1.0)*r12*sj3*x11411))+((sj3*x11394*x11399))+((sj0*x11408)));
evalcond[8]=(((x11395*x11413))+((r12*x11412))+((r11*x11405))+((cj1*x11396))+((r10*x11398))+(((-1.0)*cj3*x11399*x11410))+(((-1.0)*sj0*x11397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11416 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11416)==0){
continue;
}
IkReal x11415=pow(x11416,-0.5);
CheckValue<IkReal> x11417 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11417.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11417.value));
IkReal gconst7=((-1.0)*r01*x11415);
IkReal gconst8=(r00*x11415);
CheckValue<IkReal> x11418 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11418.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11418.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11421 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11421.valid){
continue;
}
IkReal x11419=((-1.0)*(x11421.value));
IkReal x11420=x11415;
sj5=gconst7;
cj5=gconst8;
j5=x11419;
IkReal gconst6=x11419;
IkReal gconst7=((-1.0)*r01*x11420);
IkReal gconst8=(r00*x11420);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11422=((1.0)*gconst8);
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x11422))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x11422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
CheckValue<IkReal> x11424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x11422)))),-1);
if(!x11424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11423.value)+(((1.5707963267949)*(x11424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11425=IKsin(j4);
IkReal x11426=IKcos(j4);
IkReal x11427=(gconst7*sj3);
IkReal x11428=(cj3*gconst8);
IkReal x11429=(cj2*sj0);
IkReal x11430=(cj3*gconst7);
IkReal x11431=(sj1*sj2);
IkReal x11432=(cj1*cj2);
IkReal x11433=(cj2*sj1);
IkReal x11434=((1.0)*cj0);
IkReal x11435=(gconst8*sj3);
IkReal x11436=(cj1*sj2);
IkReal x11437=((1.0)*x11426);
IkReal x11438=((1.0)*x11425);
IkReal x11439=(cj3*x11425);
IkReal x11440=(gconst7*x11425);
IkReal x11441=(x11426*x11435);
evalcond[0]=(((r21*x11440))+(((-1.0)*r22*x11437))+(((-1.0)*gconst8*r20*x11438)));
evalcond[1]=(sj0+(((-1.0)*r02*x11437))+(((-1.0)*gconst8*r00*x11438))+((r01*x11440)));
evalcond[2]=(((r11*x11440))+(((-1.0)*gconst8*r10*x11438))+(((-1.0)*r12*x11437))+(((-1.0)*x11434)));
evalcond[3]=(((r20*x11427))+x11433+x11436+((r21*x11435))+((r21*x11426*x11430))+(((-1.0)*r20*x11428*x11437))+((r22*x11439)));
evalcond[4]=(((r20*x11430))+x11431+((r21*x11428))+(((-1.0)*x11432))+((r20*x11441))+(((-1.0)*r21*x11427*x11437))+(((-1.0)*r22*sj3*x11438)));
evalcond[5]=(((r00*x11441))+((cj0*x11433))+((cj0*x11436))+((r01*x11428))+((r00*x11430))+(((-1.0)*r01*x11427*x11437))+(((-1.0)*r02*sj3*x11438)));
evalcond[6]=(((r02*x11439))+((r01*x11426*x11430))+((cj0*x11432))+((r01*x11435))+((r00*x11427))+(((-1.0)*x11431*x11434))+(((-1.0)*r00*x11428*x11437)));
evalcond[7]=(((r10*x11430))+((sj0*x11436))+((sj1*x11429))+(((-1.0)*r12*sj3*x11438))+((r10*x11441))+((r11*x11428))+(((-1.0)*r11*x11427*x11437)));
evalcond[8]=((((-1.0)*r10*x11428*x11437))+((r10*x11427))+((r11*x11426*x11430))+(((-1.0)*sj0*x11431))+((r11*x11435))+((r12*x11439))+((cj1*x11429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11442 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11442.valid){
continue;
}
CheckValue<IkReal> x11443=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x11443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11442.value)+(((1.5707963267949)*(x11443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11444=IKsin(j4);
IkReal x11445=IKcos(j4);
IkReal x11446=(gconst7*sj3);
IkReal x11447=(cj3*gconst8);
IkReal x11448=(cj2*sj0);
IkReal x11449=(cj3*gconst7);
IkReal x11450=(sj1*sj2);
IkReal x11451=(cj1*cj2);
IkReal x11452=(cj2*sj1);
IkReal x11453=((1.0)*cj0);
IkReal x11454=(gconst8*sj3);
IkReal x11455=(cj1*sj2);
IkReal x11456=((1.0)*x11445);
IkReal x11457=((1.0)*x11444);
IkReal x11458=(cj3*x11444);
IkReal x11459=(gconst7*x11444);
IkReal x11460=(x11445*x11454);
evalcond[0]=(((r21*x11459))+(((-1.0)*gconst8*r20*x11457))+(((-1.0)*r22*x11456)));
evalcond[1]=(sj0+(((-1.0)*r02*x11456))+((r01*x11459))+(((-1.0)*gconst8*r00*x11457)));
evalcond[2]=((((-1.0)*gconst8*r10*x11457))+(((-1.0)*r12*x11456))+((r11*x11459))+(((-1.0)*x11453)));
evalcond[3]=(x11455+x11452+((r21*x11454))+(((-1.0)*r20*x11447*x11456))+((r21*x11445*x11449))+((r20*x11446))+((r22*x11458)));
evalcond[4]=(x11450+(((-1.0)*x11451))+((r20*x11449))+((r20*x11460))+(((-1.0)*r22*sj3*x11457))+((r21*x11447))+(((-1.0)*r21*x11446*x11456)));
evalcond[5]=(((r00*x11449))+((cj0*x11452))+((cj0*x11455))+(((-1.0)*r01*x11446*x11456))+(((-1.0)*r02*sj3*x11457))+((r01*x11447))+((r00*x11460)));
evalcond[6]=(((r00*x11446))+((cj0*x11451))+((r02*x11458))+((r01*x11445*x11449))+((r01*x11454))+(((-1.0)*x11450*x11453))+(((-1.0)*r00*x11447*x11456)));
evalcond[7]=((((-1.0)*r11*x11446*x11456))+((sj0*x11455))+(((-1.0)*r12*sj3*x11457))+((r11*x11447))+((r10*x11460))+((r10*x11449))+((sj1*x11448)));
evalcond[8]=((((-1.0)*r10*x11447*x11456))+((cj1*x11448))+((r11*x11445*x11449))+(((-1.0)*sj0*x11450))+((r10*x11446))+((r12*x11458))+((r11*x11454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11462 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11462)==0){
continue;
}
IkReal x11461=pow(x11462,-0.5);
CheckValue<IkReal> x11463 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11463.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11463.value))));
IkReal gconst10=((1.0)*r01*x11461);
IkReal gconst11=((-1.0)*r00*x11461);
CheckValue<IkReal> x11464 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11464.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11464.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11467 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11467.valid){
continue;
}
IkReal x11465=((1.0)*(x11467.value));
IkReal x11466=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11465)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11465)));
IkReal gconst10=((1.0)*r01*x11466);
IkReal gconst11=((-1.0)*r00*x11466);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x11470 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11470.valid){
continue;
}
IkReal x11468=((1.0)*(x11470.value));
IkReal x11469=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11468)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11468)));
IkReal gconst10=((1.0)*r01*x11469);
IkReal gconst11=((-1.0)*r00*x11469);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11473 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11473.valid){
continue;
}
IkReal x11471=((1.0)*(x11473.value));
IkReal x11472=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11471)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11471)));
IkReal gconst10=((1.0)*r01*x11472);
IkReal gconst11=((-1.0)*r00*x11472);
IkReal x11474=r02*r02;
IkReal x11475=(r12*sj0);
IkReal x11476=x11461;
IkReal x11477=(cj0*x11476);
j4eval[0]=((IKabs(((((-1.0)*x11477))+((r02*x11475*x11476))+((x11474*x11477)))))+(IKabs((x11475+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11480 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11480.valid){
continue;
}
IkReal x11478=((1.0)*(x11480.value));
IkReal x11479=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11478)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11478)));
IkReal gconst10=((1.0)*r01*x11479);
IkReal gconst11=((-1.0)*r00*x11479);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
IkReal x11481=((1.0)*(x11483.value));
IkReal x11482=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11481)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11481)));
IkReal gconst10=((1.0)*r01*x11482);
IkReal gconst11=((-1.0)*r00*x11482);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11484=gconst10*gconst10;
IkReal x11485=gconst11*gconst11;
IkReal x11486=(r11*sj3);
IkReal x11487=((1.0)*cj3);
IkReal x11488=(cj3*r10);
IkReal x11489=(gconst10*gconst11);
IkReal x11490=(r10*sj3);
IkReal x11491=(r21*x11484);
IkReal x11492=((1.0)*r20*x11485);
CheckValue<IkReal> x11493=IKPowWithIntegerCheck(IKsign((((r21*x11488*x11489))+(((-1.0)*r12*r22*x11487))+((cj3*r11*r20*x11489))+(((-1.0)*r11*x11487*x11491))+(((-1.0)*r10*r20*x11485*x11487)))),-1);
if(!x11493.valid){
continue;
}
CheckValue<IkReal> x11494 = IKatan2WithCheck(IkReal((((gconst11*r22*x11486))+((gconst10*r22*x11490)))),IkReal((((x11490*x11491))+((r21*x11486*x11489))+(((-1.0)*x11486*x11492))+(((-1.0)*r20*x11489*x11490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11493.value)))+(x11494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11495=IKsin(j4);
IkReal x11496=IKcos(j4);
IkReal x11497=(cj2*sj1);
IkReal x11498=(cj1*sj2);
IkReal x11499=(cj3*r10);
IkReal x11500=(gconst11*r20);
IkReal x11501=(gconst11*r21);
IkReal x11502=(cj3*gconst11);
IkReal x11503=(sj1*sj2);
IkReal x11504=(r10*sj3);
IkReal x11505=(cj1*cj2);
IkReal x11506=(gconst10*sj3);
IkReal x11507=(gconst11*sj3);
IkReal x11508=(cj3*gconst10);
IkReal x11509=((1.0)*x11496);
IkReal x11510=((1.0)*x11495);
IkReal x11511=(cj3*x11495);
IkReal x11512=(gconst10*x11495);
IkReal x11513=(gconst11*x11496);
IkReal x11514=(x11498+x11497);
IkReal x11515=(x11496*x11508);
evalcond[0]=((((-1.0)*x11500*x11510))+(((-1.0)*r22*x11509))+((r21*x11512)));
evalcond[1]=(((r01*x11512))+(((-1.0)*r02*x11509))+(((-1.0)*gconst11*r00*x11510)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x11509))+(((-1.0)*gconst11*r10*x11510))+((r11*x11512)));
evalcond[3]=(((gconst10*x11504))+((r11*x11507))+(((-1.0)*gconst11*x11499*x11509))+((r12*x11511))+((r11*x11515)));
evalcond[4]=(((x11504*x11513))+((r11*x11502))+(((-1.0)*r12*sj3*x11510))+((gconst10*x11499))+(((-1.0)*r11*x11506*x11509)));
evalcond[5]=(x11514+((sj3*x11501))+(((-1.0)*cj3*x11500*x11509))+((r22*x11511))+((r20*x11506))+((r21*x11515)));
evalcond[6]=(x11514+((r00*x11508))+((r00*x11496*x11507))+((r01*x11502))+(((-1.0)*r02*sj3*x11510))+(((-1.0)*r01*x11506*x11509)));
evalcond[7]=(((r01*x11515))+x11505+(((-1.0)*r00*x11502*x11509))+((r00*x11506))+((r01*x11507))+((r02*x11511))+(((-1.0)*x11503)));
evalcond[8]=(x11503+(((-1.0)*r21*x11506*x11509))+(((-1.0)*r22*sj3*x11510))+((cj3*x11501))+(((-1.0)*x11505))+((r20*x11508))+((sj3*x11496*x11500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11516=((1.0)*gconst11);
CheckValue<IkReal> x11517=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11516)))),-1);
if(!x11517.valid){
continue;
}
CheckValue<IkReal> x11518 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*r00*x11516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11517.value)))+(x11518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11519=IKsin(j4);
IkReal x11520=IKcos(j4);
IkReal x11521=(cj2*sj1);
IkReal x11522=(cj1*sj2);
IkReal x11523=(cj3*r10);
IkReal x11524=(gconst11*r20);
IkReal x11525=(gconst11*r21);
IkReal x11526=(cj3*gconst11);
IkReal x11527=(sj1*sj2);
IkReal x11528=(r10*sj3);
IkReal x11529=(cj1*cj2);
IkReal x11530=(gconst10*sj3);
IkReal x11531=(gconst11*sj3);
IkReal x11532=(cj3*gconst10);
IkReal x11533=((1.0)*x11520);
IkReal x11534=((1.0)*x11519);
IkReal x11535=(cj3*x11519);
IkReal x11536=(gconst10*x11519);
IkReal x11537=(gconst11*x11520);
IkReal x11538=(x11522+x11521);
IkReal x11539=(x11520*x11532);
evalcond[0]=(((r21*x11536))+(((-1.0)*r22*x11533))+(((-1.0)*x11524*x11534)));
evalcond[1]=(((r01*x11536))+(((-1.0)*gconst11*r00*x11534))+(((-1.0)*r02*x11533)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x11533))+(((-1.0)*gconst11*r10*x11534))+((r11*x11536)));
evalcond[3]=((((-1.0)*gconst11*x11523*x11533))+((r12*x11535))+((r11*x11531))+((r11*x11539))+((gconst10*x11528)));
evalcond[4]=((((-1.0)*r12*sj3*x11534))+(((-1.0)*r11*x11530*x11533))+((r11*x11526))+((x11528*x11537))+((gconst10*x11523)));
evalcond[5]=(((r22*x11535))+x11538+((sj3*x11525))+((r21*x11539))+((r20*x11530))+(((-1.0)*cj3*x11524*x11533)));
evalcond[6]=(x11538+(((-1.0)*r02*sj3*x11534))+((r00*x11532))+((r01*x11526))+(((-1.0)*r01*x11530*x11533))+((r00*x11520*x11531)));
evalcond[7]=(x11529+((r01*x11539))+((r01*x11531))+((r00*x11530))+(((-1.0)*r00*x11526*x11533))+(((-1.0)*x11527))+((r02*x11535)));
evalcond[8]=(x11527+((sj3*x11520*x11524))+((cj3*x11525))+((r20*x11532))+(((-1.0)*r22*sj3*x11534))+(((-1.0)*r21*x11530*x11533))+(((-1.0)*x11529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11540 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11540.valid){
continue;
}
CheckValue<IkReal> x11541=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11540.value)+(((1.5707963267949)*(x11541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11542=IKsin(j4);
IkReal x11543=IKcos(j4);
IkReal x11544=(cj2*sj1);
IkReal x11545=(cj1*sj2);
IkReal x11546=(cj3*r10);
IkReal x11547=(gconst11*r20);
IkReal x11548=(gconst11*r21);
IkReal x11549=(cj3*gconst11);
IkReal x11550=(sj1*sj2);
IkReal x11551=(r10*sj3);
IkReal x11552=(cj1*cj2);
IkReal x11553=(gconst10*sj3);
IkReal x11554=(gconst11*sj3);
IkReal x11555=(cj3*gconst10);
IkReal x11556=((1.0)*x11543);
IkReal x11557=((1.0)*x11542);
IkReal x11558=(cj3*x11542);
IkReal x11559=(gconst10*x11542);
IkReal x11560=(gconst11*x11543);
IkReal x11561=(x11544+x11545);
IkReal x11562=(x11543*x11555);
evalcond[0]=(((r21*x11559))+(((-1.0)*x11547*x11557))+(((-1.0)*r22*x11556)));
evalcond[1]=((((-1.0)*r02*x11556))+((r01*x11559))+(((-1.0)*gconst11*r00*x11557)));
evalcond[2]=((-1.0)+((r11*x11559))+(((-1.0)*gconst11*r10*x11557))+(((-1.0)*r12*x11556)));
evalcond[3]=(((r12*x11558))+((r11*x11554))+(((-1.0)*gconst11*x11546*x11556))+((r11*x11562))+((gconst10*x11551)));
evalcond[4]=((((-1.0)*r11*x11553*x11556))+(((-1.0)*r12*sj3*x11557))+((gconst10*x11546))+((r11*x11549))+((x11551*x11560)));
evalcond[5]=(((sj3*x11548))+x11561+((r22*x11558))+(((-1.0)*cj3*x11547*x11556))+((r21*x11562))+((r20*x11553)));
evalcond[6]=((((-1.0)*r01*x11553*x11556))+x11561+((r01*x11549))+((r00*x11543*x11554))+((r00*x11555))+(((-1.0)*r02*sj3*x11557)));
evalcond[7]=(x11552+(((-1.0)*r00*x11549*x11556))+((r02*x11558))+((r01*x11562))+((r00*x11553))+((r01*x11554))+(((-1.0)*x11550)));
evalcond[8]=(((sj3*x11543*x11547))+(((-1.0)*r22*sj3*x11557))+x11550+(((-1.0)*r21*x11553*x11556))+((r20*x11555))+((cj3*x11548))+(((-1.0)*x11552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11565 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11565.valid){
continue;
}
IkReal x11563=((1.0)*(x11565.value));
IkReal x11564=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11563)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11563)));
IkReal gconst10=((1.0)*r01*x11564);
IkReal gconst11=((-1.0)*r00*x11564);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11566=((1.0)*(x11568.value));
IkReal x11567=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11566)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11566)));
IkReal gconst10=((1.0)*r01*x11567);
IkReal gconst11=((-1.0)*r00*x11567);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11569=gconst10*gconst10;
IkReal x11570=gconst11*gconst11;
IkReal x11571=(r11*sj3);
IkReal x11572=((1.0)*cj3);
IkReal x11573=(cj3*r10);
IkReal x11574=(gconst10*gconst11);
IkReal x11575=(r10*sj3);
IkReal x11576=(r21*x11569);
IkReal x11577=((1.0)*r20*x11570);
CheckValue<IkReal> x11578=IKPowWithIntegerCheck(IKsign((((r21*x11573*x11574))+(((-1.0)*r10*r20*x11570*x11572))+(((-1.0)*r11*x11572*x11576))+(((-1.0)*r12*r22*x11572))+((cj3*r11*r20*x11574)))),-1);
if(!x11578.valid){
continue;
}
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal((((gconst10*r22*x11575))+((gconst11*r22*x11571)))),IkReal(((((-1.0)*x11571*x11577))+((r21*x11571*x11574))+(((-1.0)*r20*x11574*x11575))+((x11575*x11576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11578.value)))+(x11579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11580=IKsin(j4);
IkReal x11581=IKcos(j4);
IkReal x11582=(sj1*sj2);
IkReal x11583=(cj3*r10);
IkReal x11584=(gconst11*r20);
IkReal x11585=(gconst11*r21);
IkReal x11586=(cj3*gconst11);
IkReal x11587=(r10*sj3);
IkReal x11588=((1.0)*cj1);
IkReal x11589=(gconst10*sj3);
IkReal x11590=(cj2*sj1);
IkReal x11591=(gconst11*sj3);
IkReal x11592=(cj3*gconst10);
IkReal x11593=(cj2*x11588);
IkReal x11594=((1.0)*x11581);
IkReal x11595=((1.0)*x11580);
IkReal x11596=(cj3*x11580);
IkReal x11597=(gconst10*x11580);
IkReal x11598=(gconst11*x11581);
IkReal x11599=(x11581*x11592);
evalcond[0]=((((-1.0)*x11584*x11595))+((r21*x11597))+(((-1.0)*r22*x11594)));
evalcond[1]=(((r01*x11597))+(((-1.0)*gconst11*r00*x11595))+(((-1.0)*r02*x11594)));
evalcond[2]=((1.0)+(((-1.0)*gconst11*r10*x11595))+((r11*x11597))+(((-1.0)*r12*x11594)));
evalcond[3]=(((r11*x11599))+((r11*x11591))+((r12*x11596))+((gconst10*x11587))+(((-1.0)*gconst11*x11583*x11594)));
evalcond[4]=(((x11587*x11598))+((gconst10*x11583))+(((-1.0)*r11*x11589*x11594))+(((-1.0)*r12*sj3*x11595))+((r11*x11586)));
evalcond[5]=(((r20*x11589))+x11590+((cj1*sj2))+((sj3*x11585))+((r21*x11599))+((r22*x11596))+(((-1.0)*cj3*x11584*x11594)));
evalcond[6]=(x11582+((r01*x11599))+((r01*x11591))+(((-1.0)*x11593))+((r02*x11596))+((r00*x11589))+(((-1.0)*r00*x11586*x11594)));
evalcond[7]=((((-1.0)*r21*x11589*x11594))+x11582+((r20*x11592))+(((-1.0)*r22*sj3*x11595))+(((-1.0)*x11593))+((sj3*x11581*x11584))+((cj3*x11585)));
evalcond[8]=(((r01*x11586))+((r00*x11581*x11591))+((r00*x11592))+(((-1.0)*x11590))+(((-1.0)*r01*x11589*x11594))+(((-1.0)*r02*sj3*x11595))+(((-1.0)*sj2*x11588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11600=((1.0)*gconst11);
CheckValue<IkReal> x11601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11600)))),-1);
if(!x11601.valid){
continue;
}
CheckValue<IkReal> x11602 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11600))+((gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11601.value)))+(x11602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11603=IKsin(j4);
IkReal x11604=IKcos(j4);
IkReal x11605=(sj1*sj2);
IkReal x11606=(cj3*r10);
IkReal x11607=(gconst11*r20);
IkReal x11608=(gconst11*r21);
IkReal x11609=(cj3*gconst11);
IkReal x11610=(r10*sj3);
IkReal x11611=((1.0)*cj1);
IkReal x11612=(gconst10*sj3);
IkReal x11613=(cj2*sj1);
IkReal x11614=(gconst11*sj3);
IkReal x11615=(cj3*gconst10);
IkReal x11616=(cj2*x11611);
IkReal x11617=((1.0)*x11604);
IkReal x11618=((1.0)*x11603);
IkReal x11619=(cj3*x11603);
IkReal x11620=(gconst10*x11603);
IkReal x11621=(gconst11*x11604);
IkReal x11622=(x11604*x11615);
evalcond[0]=((((-1.0)*x11607*x11618))+((r21*x11620))+(((-1.0)*r22*x11617)));
evalcond[1]=((((-1.0)*gconst11*r00*x11618))+((r01*x11620))+(((-1.0)*r02*x11617)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11617))+((r11*x11620))+(((-1.0)*gconst11*r10*x11618)));
evalcond[3]=(((r12*x11619))+((r11*x11622))+((r11*x11614))+((gconst10*x11610))+(((-1.0)*gconst11*x11606*x11617)));
evalcond[4]=(((x11610*x11621))+((gconst10*x11606))+(((-1.0)*r11*x11612*x11617))+((r11*x11609))+(((-1.0)*r12*sj3*x11618)));
evalcond[5]=(x11613+((cj1*sj2))+((r21*x11622))+((r22*x11619))+(((-1.0)*cj3*x11607*x11617))+((r20*x11612))+((sj3*x11608)));
evalcond[6]=(x11605+(((-1.0)*x11616))+((r02*x11619))+((r00*x11612))+((r01*x11622))+((r01*x11614))+(((-1.0)*r00*x11609*x11617)));
evalcond[7]=(x11605+(((-1.0)*r21*x11612*x11617))+((cj3*x11608))+(((-1.0)*x11616))+(((-1.0)*r22*sj3*x11618))+((r20*x11615))+((sj3*x11604*x11607)));
evalcond[8]=((((-1.0)*sj2*x11611))+(((-1.0)*x11613))+((r00*x11604*x11614))+((r01*x11609))+(((-1.0)*r02*sj3*x11618))+((r00*x11615))+(((-1.0)*r01*x11612*x11617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11623.value)+(((1.5707963267949)*(x11624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11625=IKsin(j4);
IkReal x11626=IKcos(j4);
IkReal x11627=(sj1*sj2);
IkReal x11628=(cj3*r10);
IkReal x11629=(gconst11*r20);
IkReal x11630=(gconst11*r21);
IkReal x11631=(cj3*gconst11);
IkReal x11632=(r10*sj3);
IkReal x11633=((1.0)*cj1);
IkReal x11634=(gconst10*sj3);
IkReal x11635=(cj2*sj1);
IkReal x11636=(gconst11*sj3);
IkReal x11637=(cj3*gconst10);
IkReal x11638=(cj2*x11633);
IkReal x11639=((1.0)*x11626);
IkReal x11640=((1.0)*x11625);
IkReal x11641=(cj3*x11625);
IkReal x11642=(gconst10*x11625);
IkReal x11643=(gconst11*x11626);
IkReal x11644=(x11626*x11637);
evalcond[0]=((((-1.0)*x11629*x11640))+(((-1.0)*r22*x11639))+((r21*x11642)));
evalcond[1]=((((-1.0)*r02*x11639))+(((-1.0)*gconst11*r00*x11640))+((r01*x11642)));
evalcond[2]=((1.0)+((r11*x11642))+(((-1.0)*gconst11*r10*x11640))+(((-1.0)*r12*x11639)));
evalcond[3]=(((r11*x11636))+((r11*x11644))+((r12*x11641))+((gconst10*x11632))+(((-1.0)*gconst11*x11628*x11639)));
evalcond[4]=(((r11*x11631))+(((-1.0)*r12*sj3*x11640))+(((-1.0)*r11*x11634*x11639))+((x11632*x11643))+((gconst10*x11628)));
evalcond[5]=((((-1.0)*cj3*x11629*x11639))+x11635+((cj1*sj2))+((r22*x11641))+((r21*x11644))+((sj3*x11630))+((r20*x11634)));
evalcond[6]=((((-1.0)*x11638))+x11627+(((-1.0)*r00*x11631*x11639))+((r02*x11641))+((r00*x11634))+((r01*x11644))+((r01*x11636)));
evalcond[7]=((((-1.0)*x11638))+x11627+((cj3*x11630))+(((-1.0)*r21*x11634*x11639))+((r20*x11637))+(((-1.0)*r22*sj3*x11640))+((sj3*x11626*x11629)));
evalcond[8]=((((-1.0)*r01*x11634*x11639))+(((-1.0)*x11635))+((r00*x11626*x11636))+(((-1.0)*r02*sj3*x11640))+((r00*x11637))+(((-1.0)*sj2*x11633))+((r01*x11631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
IkReal x11645=((1.0)*(x11647.value));
IkReal x11646=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11645)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11646);
rxp0_2=(py*r00);
rxp1_0=(r21*x11646);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11645)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11650 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11650.valid){
continue;
}
IkReal x11648=((1.0)*(x11650.value));
IkReal x11649=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11648)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11649);
rxp0_2=(py*r00);
rxp1_0=(r21*x11649);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11648)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
IkReal x11651=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r01*r21*x11651))+((r00*r20*x11651)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11654 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11654.valid){
continue;
}
IkReal x11652=((1.0)*(x11654.value));
IkReal x11653=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11652)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11653);
rxp0_2=(py*r00);
rxp1_0=(r21*x11653);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11652)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11657 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11657.valid){
continue;
}
IkReal x11655=((1.0)*(x11657.value));
IkReal x11656=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11655)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11656);
rxp0_2=(py*r00);
rxp1_0=(r21*x11656);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11655)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11660 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11660.valid){
continue;
}
IkReal x11658=((1.0)*(x11660.value));
IkReal x11659=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11658)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11659);
rxp0_2=(py*r00);
rxp1_0=(r21*x11659);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11658)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11663 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11663.valid){
continue;
}
IkReal x11661=((1.0)*(x11663.value));
IkReal x11662=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11661)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11662);
rxp0_2=(py*r00);
rxp1_0=(r21*x11662);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11661)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11666=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11666.valid){
continue;
}
IkReal x11664=x11666.value;
IkReal x11665=(cj0*x11664);
cj4array[0]=((((-1.0)*cj1*cj2*x11665))+((sj1*sj2*x11665)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11667=IKsin(j4);
IkReal x11668=IKcos(j4);
IkReal x11669=(gconst10*r21);
IkReal x11670=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11667);
evalcond[1]=((((-1.0)*r12*x11668))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11667*x11670))+((x11667*x11669)));
evalcond[3]=((((-1.0)*gconst11*r00*x11667))+((gconst10*r01*x11667)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11668*x11670))+((x11668*x11669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11673=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11673.valid){
continue;
}
IkReal x11671=x11673.value;
IkReal x11672=((1.0)*x11671);
cj4array[0]=((((-1.0)*cj1*sj2*x11672))+(((-1.0)*cj2*sj1*x11672)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=(gconst10*r01);
IkReal x11677=((1.0)*cj0);
IkReal x11678=((1.0)*x11675);
IkReal x11679=((1.0)*gconst11*x11674);
evalcond[0]=(r12*x11674);
evalcond[1]=((((-1.0)*r12*x11678))+(((-1.0)*x11677)));
evalcond[2]=(((gconst10*r21*x11674))+(((-1.0)*r20*x11679)));
evalcond[3]=(((x11674*x11676))+(((-1.0)*r00*x11679)));
evalcond[4]=((((-1.0)*sj1*sj2*x11677))+(((-1.0)*gconst11*r00*x11678))+((cj0*cj1*cj2))+((x11675*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11680=IKPowWithIntegerCheck(r12,-1);
if(!x11680.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11680.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11681=IKsin(j4);
IkReal x11682=IKcos(j4);
IkReal x11683=(gconst10*x11682);
IkReal x11684=(gconst10*x11681);
IkReal x11685=((1.0)*gconst11*r20);
IkReal x11686=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11681);
evalcond[1]=((((-1.0)*x11681*x11685))+((r21*x11684)));
evalcond[2]=((((-1.0)*x11681*x11686))+((r01*x11684)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x11683))+(((-1.0)*x11682*x11685)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x11682*x11686))+((r01*x11683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11689 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11689.valid){
continue;
}
IkReal x11687=((1.0)*(x11689.value));
IkReal x11688=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11687)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11688);
rxp0_2=(py*r00);
rxp1_0=(r21*x11688);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11687)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11692 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11692.valid){
continue;
}
IkReal x11690=((1.0)*(x11692.value));
IkReal x11691=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11690)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11691);
rxp0_2=(py*r00);
rxp1_0=(r21*x11691);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11690)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11695 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11695.valid){
continue;
}
IkReal x11693=((1.0)*(x11695.value));
IkReal x11694=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11693)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11694);
rxp0_2=(py*r00);
rxp1_0=(r21*x11694);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11693)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11698=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11698.valid){
continue;
}
IkReal x11696=x11698.value;
IkReal x11697=(cj0*x11696);
cj4array[0]=((((-1.0)*cj1*cj2*x11697))+((sj1*sj2*x11697)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11699=IKsin(j4);
IkReal x11700=IKcos(j4);
IkReal x11701=(gconst10*x11699);
IkReal x11702=((1.0)*x11700);
IkReal x11703=((1.0)*gconst11*x11699);
evalcond[0]=((-1.0)*r12*x11699);
evalcond[1]=((((-1.0)*r12*x11702))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11701))+(((-1.0)*r20*x11703)));
evalcond[3]=(((r01*x11701))+(((-1.0)*r00*x11703)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r21*x11702))+((cj1*sj2))+((gconst11*r20*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11706=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11706.valid){
continue;
}
IkReal x11704=x11706.value;
IkReal x11705=((1.0)*x11704);
cj4array[0]=((((-1.0)*cj1*sj2*x11705))+(((-1.0)*cj2*sj1*x11705)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11707=IKsin(j4);
IkReal x11708=IKcos(j4);
IkReal x11709=((1.0)*cj0);
IkReal x11710=(gconst10*x11707);
IkReal x11711=((1.0)*x11708);
IkReal x11712=((1.0)*gconst11*x11707);
evalcond[0]=((-1.0)*r12*x11707);
evalcond[1]=((((-1.0)*r12*x11711))+(((-1.0)*x11709)));
evalcond[2]=((((-1.0)*r20*x11712))+((r21*x11710)));
evalcond[3]=(((r01*x11710))+(((-1.0)*r00*x11712)));
evalcond[4]=((((-1.0)*gconst10*r01*x11711))+((gconst11*r00*x11708))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11713=IKPowWithIntegerCheck(r12,-1);
if(!x11713.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11713.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11714=IKsin(j4);
IkReal x11715=IKcos(j4);
IkReal x11716=(gconst10*x11714);
IkReal x11717=(gconst11*x11715);
IkReal x11718=((1.0)*gconst11*x11714);
IkReal x11719=((1.0)*gconst10*x11715);
evalcond[0]=((-1.0)*r12*x11714);
evalcond[1]=((((-1.0)*r20*x11718))+((r21*x11716)));
evalcond[2]=(((r01*x11716))+(((-1.0)*r00*x11718)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x11719))+((cj1*sj2))+((r20*x11717)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r00*x11717))+(((-1.0)*r01*x11719))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11722 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11722.valid){
continue;
}
IkReal x11720=((1.0)*(x11722.value));
IkReal x11721=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11720)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11721);
rxp0_2=(py*r00);
rxp1_0=(r21*x11721);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11720)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11725 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11725.valid){
continue;
}
IkReal x11723=((1.0)*(x11725.value));
IkReal x11724=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11723)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11724);
rxp0_2=(py*r00);
rxp1_0=(r21*x11724);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11723)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11728 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11728.valid){
continue;
}
IkReal x11726=((1.0)*(x11728.value));
IkReal x11727=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11726)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11727);
rxp0_2=(py*r00);
rxp1_0=(r21*x11727);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11726)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11731=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11731.valid){
continue;
}
IkReal x11729=x11731.value;
IkReal x11730=((1.0)*cj0*x11729);
cj4array[0]=((((-1.0)*cj2*sj1*x11730))+(((-1.0)*cj1*sj2*x11730)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11732=IKsin(j4);
IkReal x11733=IKcos(j4);
IkReal x11734=(gconst10*x11732);
IkReal x11735=((1.0)*x11733);
IkReal x11736=((1.0)*gconst11*x11732);
evalcond[0]=((-1.0)*r12*x11732);
evalcond[1]=((((-1.0)*r12*x11735))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11736))+((r21*x11734)));
evalcond[3]=(((r01*x11734))+(((-1.0)*r00*x11736)));
evalcond[4]=(((gconst11*r20*x11733))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11738=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11738.valid){
continue;
}
IkReal x11737=x11738.value;
cj4array[0]=(((cj1*cj2*x11737))+(((-1.0)*sj1*sj2*x11737)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11739=IKsin(j4);
IkReal x11740=IKcos(j4);
IkReal x11741=(gconst10*x11739);
IkReal x11742=((1.0)*x11740);
IkReal x11743=((1.0)*gconst11*x11739);
evalcond[0]=((-1.0)*r12*x11739);
evalcond[1]=((((-1.0)*r12*x11742))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11743))+((r21*x11741)));
evalcond[3]=(((r01*x11741))+(((-1.0)*r00*x11743)));
evalcond[4]=(((gconst11*r00*x11740))+(((-1.0)*gconst10*r01*x11742))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11744=IKPowWithIntegerCheck(r12,-1);
if(!x11744.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11744.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11745=IKsin(j4);
IkReal x11746=IKcos(j4);
IkReal x11747=(gconst10*x11745);
IkReal x11748=(gconst11*x11746);
IkReal x11749=((1.0)*gconst11*x11745);
IkReal x11750=((1.0)*gconst10*x11746);
evalcond[0]=((-1.0)*r12*x11745);
evalcond[1]=((((-1.0)*r20*x11749))+((r21*x11747)));
evalcond[2]=(((r01*x11747))+(((-1.0)*r00*x11749)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11748))+(((-1.0)*r21*x11750)));
evalcond[4]=(((r00*x11748))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*x11750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
IkReal x11751=((1.0)*(x11753.value));
IkReal x11752=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11751)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11752);
rxp0_2=(py*r00);
rxp1_0=(r21*x11752);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11751)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11756 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11756.valid){
continue;
}
IkReal x11754=((1.0)*(x11756.value));
IkReal x11755=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11754)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11755);
rxp0_2=(py*r00);
rxp1_0=(r21*x11755);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11754)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11759 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11759.valid){
continue;
}
IkReal x11757=((1.0)*(x11759.value));
IkReal x11758=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11757)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11758);
rxp0_2=(py*r00);
rxp1_0=(r21*x11758);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11757)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11762=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11762.valid){
continue;
}
IkReal x11760=x11762.value;
IkReal x11761=((1.0)*cj0*x11760);
cj4array[0]=((((-1.0)*cj1*sj2*x11761))+(((-1.0)*cj2*sj1*x11761)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11763=IKsin(j4);
IkReal x11764=IKcos(j4);
IkReal x11765=(gconst10*r21);
IkReal x11766=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11763);
evalcond[1]=((((-1.0)*r12*x11764))+(((-1.0)*cj0)));
evalcond[2]=(((x11763*x11765))+(((-1.0)*x11763*x11766)));
evalcond[3]=(((gconst10*r01*x11763))+(((-1.0)*gconst11*r00*x11763)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11764*x11766))+((x11764*x11765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11768=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11768.valid){
continue;
}
IkReal x11767=x11768.value;
cj4array[0]=(((cj1*cj2*x11767))+(((-1.0)*sj1*sj2*x11767)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11769=IKsin(j4);
IkReal x11770=IKcos(j4);
IkReal x11771=(gconst10*r01);
IkReal x11772=((1.0)*x11770);
IkReal x11773=((1.0)*gconst11*x11769);
evalcond[0]=(r12*x11769);
evalcond[1]=((((-1.0)*r12*x11772))+(((-1.0)*cj0)));
evalcond[2]=(((gconst10*r21*x11769))+(((-1.0)*r20*x11773)));
evalcond[3]=(((x11769*x11771))+(((-1.0)*r00*x11773)));
evalcond[4]=(((x11770*x11771))+(((-1.0)*gconst11*r00*x11772))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11774=IKPowWithIntegerCheck(r12,-1);
if(!x11774.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11774.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11775=IKsin(j4);
IkReal x11776=IKcos(j4);
IkReal x11777=(gconst10*x11776);
IkReal x11778=(gconst10*x11775);
IkReal x11779=((1.0)*gconst11*r20);
IkReal x11780=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11775);
evalcond[1]=((((-1.0)*x11775*x11779))+((r21*x11778)));
evalcond[2]=(((r01*x11778))+(((-1.0)*x11775*x11780)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11777))+(((-1.0)*x11776*x11779)));
evalcond[4]=(((cj0*cj2*sj1))+((r01*x11777))+(((-1.0)*x11776*x11780))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11782=IKPowWithIntegerCheck(r12,-1);
if(!x11782.valid){
continue;
}
IkReal x11781=x11782.value;
CheckValue<IkReal> x11783=IKPowWithIntegerCheck(sj3,-1);
if(!x11783.valid){
continue;
}
if( IKabs((x11781*(x11783.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11781)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11781*(x11783.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11781))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11781*(x11783.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11781));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11784=IKsin(j4);
IkReal x11785=IKcos(j4);
IkReal x11786=(cj2*sj0);
IkReal x11787=(gconst11*r20);
IkReal x11788=(cj3*gconst11);
IkReal x11789=(sj1*sj2);
IkReal x11790=(gconst11*r00);
IkReal x11791=(cj2*sj1);
IkReal x11792=(cj1*cj2);
IkReal x11793=(gconst10*sj3);
IkReal x11794=(cj3*gconst10);
IkReal x11795=(gconst11*sj3);
IkReal x11796=(cj1*sj2);
IkReal x11797=((1.0)*cj0);
IkReal x11798=((1.0)*x11784);
IkReal x11799=((1.0)*x11785);
IkReal x11800=(gconst10*x11784);
IkReal x11801=(sj3*x11785);
evalcond[0]=((((-1.0)*r12*x11799))+(((-1.0)*x11797)));
evalcond[1]=(((r21*x11800))+(((-1.0)*x11787*x11798)));
evalcond[2]=(sj0+((r01*x11800))+(((-1.0)*x11790*x11798)));
evalcond[3]=(((sj0*x11796))+((sj1*x11786))+(((-1.0)*r12*sj3*x11798)));
evalcond[4]=((((-1.0)*sj0*x11789))+((cj1*x11786))+((cj3*r12*x11784)));
evalcond[5]=(x11791+x11796+((r20*x11793))+((r21*x11785*x11794))+((r21*x11795))+(((-1.0)*cj3*x11787*x11799)));
evalcond[6]=(((r21*x11788))+x11789+((x11787*x11801))+(((-1.0)*x11792))+((r20*x11794))+(((-1.0)*r21*x11793*x11799)));
evalcond[7]=((((-1.0)*r01*x11793*x11799))+((x11790*x11801))+((r00*x11794))+((cj0*x11791))+((cj0*x11796))+((r01*x11788)));
evalcond[8]=((((-1.0)*r00*x11788*x11799))+(((-1.0)*x11789*x11797))+((r01*x11795))+((r01*x11785*x11794))+((r00*x11793))+((cj0*x11792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11802=((1.0)*gconst11);
CheckValue<IkReal> x11803=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*r00*x11802))),-1);
if(!x11803.valid){
continue;
}
CheckValue<IkReal> x11804=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11802))+((cj3*gconst10*r21))),-1);
if(!x11804.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11803.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11804.value)*(((((-1.0)*r21*sj3*x11802))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11803.value)))+IKsqr(((x11804.value)*(((((-1.0)*r21*sj3*x11802))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11803.value)), ((x11804.value)*(((((-1.0)*r21*sj3*x11802))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11805=IKsin(j4);
IkReal x11806=IKcos(j4);
IkReal x11807=(cj2*sj0);
IkReal x11808=(gconst11*r20);
IkReal x11809=(cj3*gconst11);
IkReal x11810=(sj1*sj2);
IkReal x11811=(gconst11*r00);
IkReal x11812=(cj2*sj1);
IkReal x11813=(cj1*cj2);
IkReal x11814=(gconst10*sj3);
IkReal x11815=(cj3*gconst10);
IkReal x11816=(gconst11*sj3);
IkReal x11817=(cj1*sj2);
IkReal x11818=((1.0)*cj0);
IkReal x11819=((1.0)*x11805);
IkReal x11820=((1.0)*x11806);
IkReal x11821=(gconst10*x11805);
IkReal x11822=(sj3*x11806);
evalcond[0]=((((-1.0)*r12*x11820))+(((-1.0)*x11818)));
evalcond[1]=((((-1.0)*x11808*x11819))+((r21*x11821)));
evalcond[2]=(sj0+((r01*x11821))+(((-1.0)*x11811*x11819)));
evalcond[3]=(((sj0*x11817))+(((-1.0)*r12*sj3*x11819))+((sj1*x11807)));
evalcond[4]=(((cj1*x11807))+(((-1.0)*sj0*x11810))+((cj3*r12*x11805)));
evalcond[5]=(((r21*x11806*x11815))+((r21*x11816))+(((-1.0)*cj3*x11808*x11820))+((r20*x11814))+x11817+x11812);
evalcond[6]=(((r21*x11809))+(((-1.0)*x11813))+((x11808*x11822))+(((-1.0)*r21*x11814*x11820))+((r20*x11815))+x11810);
evalcond[7]=(((r00*x11815))+((x11811*x11822))+(((-1.0)*r01*x11814*x11820))+((cj0*x11817))+((cj0*x11812))+((r01*x11809)));
evalcond[8]=(((r01*x11806*x11815))+(((-1.0)*x11810*x11818))+((r01*x11816))+((r00*x11814))+(((-1.0)*r00*x11809*x11820))+((cj0*x11813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11823=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11823.valid){
continue;
}
CheckValue<IkReal> x11824=IKPowWithIntegerCheck(r12,-1);
if(!x11824.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11824.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11823.value)))+IKsqr(((-1.0)*cj0*(x11824.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11823.value)), ((-1.0)*cj0*(x11824.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11825=IKsin(j4);
IkReal x11826=IKcos(j4);
IkReal x11827=(cj2*sj0);
IkReal x11828=(gconst11*r20);
IkReal x11829=(cj3*gconst11);
IkReal x11830=(sj1*sj2);
IkReal x11831=(gconst11*r00);
IkReal x11832=(cj2*sj1);
IkReal x11833=(cj1*cj2);
IkReal x11834=(gconst10*sj3);
IkReal x11835=(cj3*gconst10);
IkReal x11836=(gconst11*sj3);
IkReal x11837=(cj1*sj2);
IkReal x11838=((1.0)*cj0);
IkReal x11839=((1.0)*x11825);
IkReal x11840=((1.0)*x11826);
IkReal x11841=(gconst10*x11825);
IkReal x11842=(sj3*x11826);
evalcond[0]=((((-1.0)*r12*x11840))+(((-1.0)*x11838)));
evalcond[1]=(((r21*x11841))+(((-1.0)*x11828*x11839)));
evalcond[2]=(sj0+(((-1.0)*x11831*x11839))+((r01*x11841)));
evalcond[3]=(((sj1*x11827))+(((-1.0)*r12*sj3*x11839))+((sj0*x11837)));
evalcond[4]=(((cj3*r12*x11825))+((cj1*x11827))+(((-1.0)*sj0*x11830)));
evalcond[5]=(((r21*x11826*x11835))+((r21*x11836))+(((-1.0)*cj3*x11828*x11840))+((r20*x11834))+x11837+x11832);
evalcond[6]=(((x11828*x11842))+(((-1.0)*r21*x11834*x11840))+(((-1.0)*x11833))+((r20*x11835))+((r21*x11829))+x11830);
evalcond[7]=(((x11831*x11842))+((cj0*x11832))+((cj0*x11837))+((r01*x11829))+((r00*x11835))+(((-1.0)*r01*x11834*x11840)));
evalcond[8]=((((-1.0)*x11830*x11838))+((r01*x11826*x11835))+(((-1.0)*r00*x11829*x11840))+((cj0*x11833))+((r00*x11834))+((r01*x11836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
IkReal x11843=((1.0)*(x11845.value));
IkReal x11844=x11461;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11843)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11843)));
IkReal gconst10=((1.0)*r01*x11844);
IkReal gconst11=((-1.0)*r00*x11844);
IkReal x11846=r02*r02;
IkReal x11847=(r12*sj0);
IkReal x11848=x11461;
IkReal x11849=(cj0*x11848);
j4eval[0]=((IKabs((x11847+((cj0*r02)))))+(IKabs(((((-1.0)*x11849))+((r02*x11847*x11848))+((x11846*x11849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11850=((1.0)*r02);
IkReal x11851=(sj1*sj2);
IkReal x11852=(cj1*cj2);
IkReal x11853=((1.0)*sj3);
IkReal x11854=(gconst10*r21*sj3);
IkReal x11855=(gconst11*r20*sj3);
IkReal x11856=(cj3*gconst11*r21);
IkReal x11857=(cj3*gconst10*r20);
CheckValue<IkReal> x11858=IKPowWithIntegerCheck(((((-1.0)*r01*r21*x11853*(gconst10*gconst10)))+((gconst11*r00*x11854))+(((-1.0)*r00*r20*x11853*(gconst11*gconst11)))+((gconst10*r01*x11855))),-1);
if(!x11858.valid){
continue;
}
CheckValue<IkReal> x11859=IKPowWithIntegerCheck(((((-1.0)*gconst10*r21*x11853))+x11855),-1);
if(!x11859.valid){
continue;
}
if( IKabs(((x11858.value)*(((((-1.0)*x11850*x11851))+(((-1.0)*x11850*x11857))+(((-1.0)*x11850*x11856))+((sj0*x11854))+((r02*x11852))+(((-1.0)*gconst11*r20*sj0*x11853)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11859.value)*(((((-1.0)*x11851))+(((-1.0)*x11856))+(((-1.0)*x11857))+x11852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11858.value)*(((((-1.0)*x11850*x11851))+(((-1.0)*x11850*x11857))+(((-1.0)*x11850*x11856))+((sj0*x11854))+((r02*x11852))+(((-1.0)*gconst11*r20*sj0*x11853))))))+IKsqr(((x11859.value)*(((((-1.0)*x11851))+(((-1.0)*x11856))+(((-1.0)*x11857))+x11852))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11858.value)*(((((-1.0)*x11850*x11851))+(((-1.0)*x11850*x11857))+(((-1.0)*x11850*x11856))+((sj0*x11854))+((r02*x11852))+(((-1.0)*gconst11*r20*sj0*x11853))))), ((x11859.value)*(((((-1.0)*x11851))+(((-1.0)*x11856))+(((-1.0)*x11857))+x11852))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11860=IKsin(j4);
IkReal x11861=IKcos(j4);
IkReal x11862=(gconst10*sj3);
IkReal x11863=(cj3*r10);
IkReal x11864=(gconst11*r20);
IkReal x11865=(gconst11*sj3);
IkReal x11866=(cj3*r00);
IkReal x11867=(sj1*sj2);
IkReal x11868=(cj3*gconst11);
IkReal x11869=(cj1*cj2);
IkReal x11870=(cj2*sj1);
IkReal x11871=(cj1*sj2);
IkReal x11872=((1.0)*cj0);
IkReal x11873=((1.0)*x11860);
IkReal x11874=(gconst10*x11860);
IkReal x11875=((1.0)*x11861);
IkReal x11876=(cj3*x11860);
IkReal x11877=(gconst11*x11875);
IkReal x11878=(cj3*gconst10*x11861);
evalcond[0]=(((r21*x11874))+(((-1.0)*x11864*x11873)));
evalcond[1]=(sj0+((r01*x11874))+(((-1.0)*r02*x11875))+(((-1.0)*gconst11*r00*x11873)));
evalcond[2]=((((-1.0)*x11872))+((r11*x11874))+(((-1.0)*r12*x11875))+(((-1.0)*gconst11*r10*x11873)));
evalcond[3]=(((r20*x11862))+(((-1.0)*cj3*x11864*x11875))+((r21*x11878))+x11870+x11871+((r21*x11865)));
evalcond[4]=((((-1.0)*r21*x11862*x11875))+(((-1.0)*x11869))+((sj3*x11861*x11864))+((cj3*gconst10*r20))+x11867+((r21*x11868)));
evalcond[5]=(((r00*x11861*x11865))+((r01*x11868))+(((-1.0)*r02*sj3*x11873))+(((-1.0)*r01*x11862*x11875))+((gconst10*x11866))+((cj0*x11870))+((cj0*x11871)));
evalcond[6]=((((-1.0)*x11866*x11877))+(((-1.0)*x11867*x11872))+((r00*x11862))+((r01*x11878))+((r01*x11865))+((cj0*x11869))+((r02*x11876)));
evalcond[7]=((((-1.0)*r11*x11862*x11875))+((sj0*x11870))+((sj0*x11871))+((r11*x11868))+((r10*x11861*x11865))+((gconst10*x11863))+(((-1.0)*r12*sj3*x11873)));
evalcond[8]=(((r12*x11876))+(((-1.0)*x11863*x11877))+((r11*x11865))+((r10*x11862))+((sj0*x11869))+((r11*x11878))+(((-1.0)*sj0*x11867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11879=((1.0)*gconst11);
CheckValue<IkReal> x11880 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11879))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11880.valid){
continue;
}
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11879))+(((-1.0)*gconst10*r20)))),-1);
if(!x11881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11880.value)+(((1.5707963267949)*(x11881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11882=IKsin(j4);
IkReal x11883=IKcos(j4);
IkReal x11884=(gconst10*sj3);
IkReal x11885=(cj3*r10);
IkReal x11886=(gconst11*r20);
IkReal x11887=(gconst11*sj3);
IkReal x11888=(cj3*r00);
IkReal x11889=(sj1*sj2);
IkReal x11890=(cj3*gconst11);
IkReal x11891=(cj1*cj2);
IkReal x11892=(cj2*sj1);
IkReal x11893=(cj1*sj2);
IkReal x11894=((1.0)*cj0);
IkReal x11895=((1.0)*x11882);
IkReal x11896=(gconst10*x11882);
IkReal x11897=((1.0)*x11883);
IkReal x11898=(cj3*x11882);
IkReal x11899=(gconst11*x11897);
IkReal x11900=(cj3*gconst10*x11883);
evalcond[0]=((((-1.0)*x11886*x11895))+((r21*x11896)));
evalcond[1]=(sj0+((r01*x11896))+(((-1.0)*gconst11*r00*x11895))+(((-1.0)*r02*x11897)));
evalcond[2]=((((-1.0)*r12*x11897))+(((-1.0)*x11894))+(((-1.0)*gconst11*r10*x11895))+((r11*x11896)));
evalcond[3]=(((r21*x11887))+((r21*x11900))+(((-1.0)*cj3*x11886*x11897))+x11892+x11893+((r20*x11884)));
evalcond[4]=((((-1.0)*x11891))+((r21*x11890))+(((-1.0)*r21*x11884*x11897))+((cj3*gconst10*r20))+((sj3*x11883*x11886))+x11889);
evalcond[5]=(((gconst10*x11888))+(((-1.0)*r01*x11884*x11897))+((r00*x11883*x11887))+((r01*x11890))+((cj0*x11893))+((cj0*x11892))+(((-1.0)*r02*sj3*x11895)));
evalcond[6]=(((r01*x11887))+((r00*x11884))+((r01*x11900))+((r02*x11898))+(((-1.0)*x11888*x11899))+(((-1.0)*x11889*x11894))+((cj0*x11891)));
evalcond[7]=(((sj0*x11893))+((sj0*x11892))+((gconst10*x11885))+(((-1.0)*r11*x11884*x11897))+((r10*x11883*x11887))+(((-1.0)*r12*sj3*x11895))+((r11*x11890)));
evalcond[8]=(((sj0*x11891))+(((-1.0)*sj0*x11889))+((r10*x11884))+(((-1.0)*x11885*x11899))+((r11*x11900))+((r12*x11898))+((r11*x11887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11901=((1.0)*gconst11);
CheckValue<IkReal> x11902 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x11901))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11902.valid){
continue;
}
CheckValue<IkReal> x11903=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11901)))),-1);
if(!x11903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11902.value)+(((1.5707963267949)*(x11903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11904=IKsin(j4);
IkReal x11905=IKcos(j4);
IkReal x11906=(gconst10*sj3);
IkReal x11907=(cj3*r10);
IkReal x11908=(gconst11*r20);
IkReal x11909=(gconst11*sj3);
IkReal x11910=(cj3*gconst11);
IkReal x11911=(sj1*sj2);
IkReal x11912=(cj1*cj2);
IkReal x11913=(cj2*sj1);
IkReal x11914=(cj1*sj2);
IkReal x11915=(cj3*gconst10);
IkReal x11916=((1.0)*cj0);
IkReal x11917=((1.0)*x11905);
IkReal x11918=((1.0)*x11904);
IkReal x11919=(cj3*x11904);
IkReal x11920=(gconst10*x11904);
IkReal x11921=(x11905*x11915);
evalcond[0]=((((-1.0)*x11908*x11918))+((r21*x11920))+(((-1.0)*r22*x11917)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11918))+((r01*x11920))+(((-1.0)*r02*x11917)));
evalcond[2]=(((r11*x11920))+(((-1.0)*r12*x11917))+(((-1.0)*gconst11*r10*x11918))+(((-1.0)*x11916)));
evalcond[3]=(x11913+x11914+((r21*x11921))+(((-1.0)*cj3*x11908*x11917))+((r22*x11919))+((r21*x11909))+((r20*x11906)));
evalcond[4]=(x11911+(((-1.0)*r21*x11906*x11917))+(((-1.0)*x11912))+((r21*x11910))+((sj3*x11905*x11908))+(((-1.0)*r22*sj3*x11918))+((r20*x11915)));
evalcond[5]=(((r00*x11905*x11909))+(((-1.0)*r01*x11906*x11917))+((r00*x11915))+(((-1.0)*r02*sj3*x11918))+((r01*x11910))+((cj0*x11913))+((cj0*x11914)));
evalcond[6]=((((-1.0)*r00*x11910*x11917))+((r00*x11906))+((r01*x11909))+((cj0*x11912))+(((-1.0)*x11911*x11916))+((r02*x11919))+((r01*x11921)));
evalcond[7]=(((r11*x11910))+((sj0*x11913))+((sj0*x11914))+(((-1.0)*r12*sj3*x11918))+((r10*x11905*x11909))+((gconst10*x11907))+(((-1.0)*r11*x11906*x11917)));
evalcond[8]=(((sj0*x11912))+(((-1.0)*sj0*x11911))+((r11*x11921))+((r10*x11906))+(((-1.0)*gconst11*x11907*x11917))+((r11*x11909))+((r12*x11919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
CheckValue<IkReal> x11923=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11922.value)+(((1.5707963267949)*(x11923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11924=IKsin(j4);
IkReal x11925=IKcos(j4);
IkReal x11926=(gconst10*sj3);
IkReal x11927=(cj3*r10);
IkReal x11928=(gconst11*r20);
IkReal x11929=(gconst11*sj3);
IkReal x11930=(cj3*gconst11);
IkReal x11931=(sj1*sj2);
IkReal x11932=(cj1*cj2);
IkReal x11933=(cj2*sj1);
IkReal x11934=(cj1*sj2);
IkReal x11935=(cj3*gconst10);
IkReal x11936=((1.0)*cj0);
IkReal x11937=((1.0)*x11925);
IkReal x11938=((1.0)*x11924);
IkReal x11939=(cj3*x11924);
IkReal x11940=(gconst10*x11924);
IkReal x11941=(x11925*x11935);
evalcond[0]=(((r21*x11940))+(((-1.0)*r22*x11937))+(((-1.0)*x11928*x11938)));
evalcond[1]=(sj0+(((-1.0)*r02*x11937))+((r01*x11940))+(((-1.0)*gconst11*r00*x11938)));
evalcond[2]=(((r11*x11940))+(((-1.0)*x11936))+(((-1.0)*gconst11*r10*x11938))+(((-1.0)*r12*x11937)));
evalcond[3]=(x11934+x11933+((r21*x11929))+((r20*x11926))+((r21*x11941))+((r22*x11939))+(((-1.0)*cj3*x11928*x11937)));
evalcond[4]=(x11931+(((-1.0)*r21*x11926*x11937))+((r21*x11930))+(((-1.0)*r22*sj3*x11938))+((r20*x11935))+((sj3*x11925*x11928))+(((-1.0)*x11932)));
evalcond[5]=((((-1.0)*r02*sj3*x11938))+((r00*x11925*x11929))+((cj0*x11934))+((cj0*x11933))+(((-1.0)*r01*x11926*x11937))+((r00*x11935))+((r01*x11930)));
evalcond[6]=(((cj0*x11932))+((r02*x11939))+(((-1.0)*x11931*x11936))+((r01*x11941))+(((-1.0)*r00*x11930*x11937))+((r01*x11929))+((r00*x11926)));
evalcond[7]=(((gconst10*x11927))+(((-1.0)*r12*sj3*x11938))+((r11*x11930))+((sj0*x11934))+((sj0*x11933))+(((-1.0)*r11*x11926*x11937))+((r10*x11925*x11929)));
evalcond[8]=((((-1.0)*sj0*x11931))+((r11*x11941))+((r10*x11926))+((r11*x11929))+(((-1.0)*gconst11*x11927*x11937))+((r12*x11939))+((sj0*x11932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11942=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11942.valid){
continue;
}
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11942.value)))+(x11943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11944=IKsin(j4);
IkReal x11945=IKcos(j4);
IkReal x11946=(gconst10*sj3);
IkReal x11947=(cj3*r10);
IkReal x11948=(gconst11*r20);
IkReal x11949=(gconst11*sj3);
IkReal x11950=(cj3*gconst11);
IkReal x11951=(sj1*sj2);
IkReal x11952=(cj1*cj2);
IkReal x11953=(cj2*sj1);
IkReal x11954=(cj1*sj2);
IkReal x11955=(cj3*gconst10);
IkReal x11956=((1.0)*cj0);
IkReal x11957=((1.0)*x11945);
IkReal x11958=((1.0)*x11944);
IkReal x11959=(cj3*x11944);
IkReal x11960=(gconst10*x11944);
IkReal x11961=(x11945*x11955);
evalcond[0]=((((-1.0)*r22*x11957))+(((-1.0)*x11948*x11958))+((r21*x11960)));
evalcond[1]=(((r01*x11960))+(((-1.0)*r02*x11957))+sj0+(((-1.0)*gconst11*r00*x11958)));
evalcond[2]=((((-1.0)*r12*x11957))+(((-1.0)*x11956))+((r11*x11960))+(((-1.0)*gconst11*r10*x11958)));
evalcond[3]=(x11954+x11953+((r20*x11946))+((r21*x11949))+((r21*x11961))+((r22*x11959))+(((-1.0)*cj3*x11948*x11957)));
evalcond[4]=(x11951+((r20*x11955))+((r21*x11950))+(((-1.0)*x11952))+(((-1.0)*r22*sj3*x11958))+(((-1.0)*r21*x11946*x11957))+((sj3*x11945*x11948)));
evalcond[5]=((((-1.0)*r02*sj3*x11958))+((cj0*x11953))+((cj0*x11954))+((r01*x11950))+((r00*x11955))+(((-1.0)*r01*x11946*x11957))+((r00*x11945*x11949)));
evalcond[6]=(((r01*x11961))+((r02*x11959))+((cj0*x11952))+(((-1.0)*x11951*x11956))+((r00*x11946))+((r01*x11949))+(((-1.0)*r00*x11950*x11957)));
evalcond[7]=((((-1.0)*r11*x11946*x11957))+(((-1.0)*r12*sj3*x11958))+((r11*x11950))+((r10*x11945*x11949))+((sj0*x11953))+((sj0*x11954))+((gconst10*x11947)));
evalcond[8]=(((r11*x11949))+((r12*x11959))+((r11*x11961))+(((-1.0)*gconst11*x11947*x11957))+((r10*x11946))+(((-1.0)*sj0*x11951))+((sj0*x11952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11962=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11962;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11963=((1.0)*cj5);
IkReal x11964=((((-1.0)*r21*x11963))+(((-1.0)*r20*sj5)));
j4eval[0]=x11964;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11963))+((r11*sj5))))));
j4eval[2]=IKsign(x11964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11965=cj5*cj5;
IkReal x11966=(cj3*r01);
IkReal x11967=(cj5*sj5);
IkReal x11968=((1.0)*cj3);
IkReal x11969=(((r20*x11966*x11967))+((r21*x11965*x11966))+(((-1.0)*r02*r22*x11968))+(((-1.0)*r21*x11966))+(((-1.0)*r00*r20*x11965*x11968))+((cj3*r00*r21*x11967)));
j4eval[0]=x11969;
j4eval[1]=IKsign(x11969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11970=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11970;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11971=((1.0)*cj5);
IkReal x11972=((((-1.0)*r21*x11971))+(((-1.0)*r20*sj5)));
j4eval[0]=x11972;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11971))+((r11*sj5))))));
j4eval[2]=IKsign(x11972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11973=cj5*cj5;
IkReal x11974=r01*r01;
IkReal x11975=(cj5*r00);
IkReal x11976=(r01*sj5);
IkReal x11977=(x11974+(((-1.0)*x11973*x11974))+((x11973*(r00*r00)))+(((-2.0)*x11975*x11976))+(r02*r02));
j4eval[0]=x11977;
j4eval[1]=((IKabs(r02))+(IKabs((x11975+(((-1.0)*x11976))))));
j4eval[2]=IKsign(x11977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11978=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11978);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11978);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11979=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11979);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11979);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11980=((1.0)*cj2);
CheckValue<IkReal> x11981=IKPowWithIntegerCheck(r22,-1);
if(!x11981.valid){
continue;
}
CheckValue<IkReal> x11982=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11982.valid){
continue;
}
if( IKabs(((x11981.value)*((((sj1*sj2))+(((-1.0)*cj1*x11980)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11982.value)*(((((-1.0)*sj1*x11980))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11981.value)*((((sj1*sj2))+(((-1.0)*cj1*x11980))))))+IKsqr(((x11982.value)*(((((-1.0)*sj1*x11980))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11981.value)*((((sj1*sj2))+(((-1.0)*cj1*x11980))))), ((x11982.value)*(((((-1.0)*sj1*x11980))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11983=IKsin(j4);
IkReal x11984=IKcos(j4);
IkReal x11985=(cj5*x11984);
IkReal x11986=(sj5*x11983);
IkReal x11987=((1.0)*cj5*x11983);
IkReal x11988=((1.0)*sj5*x11984);
evalcond[0]=((-1.0)*r22*x11984);
evalcond[1]=((((-1.0)*r10*x11987))+((r11*x11986)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11983)));
evalcond[3]=((((-1.0)*r01*x11988))+((r00*x11985)));
evalcond[4]=((1.0)+(((-1.0)*r00*x11987))+((r01*x11986)));
evalcond[5]=(((cj2*sj1))+((r10*x11985))+(((-1.0)*r11*x11988))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11989=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11989.valid){
continue;
}
CheckValue<IkReal> x11990=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11990.valid){
continue;
}
if( IKabs(((-1.0)*(x11989.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11990.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11989.value)))+IKsqr(((x11990.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11989.value)), ((x11990.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11991=IKsin(j4);
IkReal x11992=IKcos(j4);
IkReal x11993=(cj5*x11992);
IkReal x11994=(sj5*x11991);
IkReal x11995=((1.0)*cj5*x11991);
IkReal x11996=((1.0)*sj5*x11992);
evalcond[0]=((-1.0)*r22*x11992);
evalcond[1]=((((-1.0)*r10*x11995))+((r11*x11994)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11991)));
evalcond[3]=(((r00*x11993))+(((-1.0)*r01*x11996)));
evalcond[4]=((1.0)+((r01*x11994))+(((-1.0)*r00*x11995)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x11996))+((r10*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11997=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11997);
rxp0_2=(py*r00);
rxp1_0=(r21*x11997);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11998=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11998);
rxp0_2=(py*r00);
rxp1_0=(r21*x11998);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11999=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11999.valid){
continue;
}
CheckValue<IkReal> x12000=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12000.valid){
continue;
}
if( IKabs(((-1.0)*(x11999.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12000.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11999.value)))+IKsqr(((x12000.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11999.value)), ((x12000.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12001=IKsin(j4);
IkReal x12002=IKcos(j4);
IkReal x12003=(cj5*r00);
IkReal x12004=(cj5*r20);
IkReal x12005=(r21*sj5);
IkReal x12006=(r01*sj5);
IkReal x12007=((1.0)*x12001);
IkReal x12008=((1.0)*x12002);
evalcond[0]=((-1.0)*r12*x12002);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12007)));
evalcond[2]=((((-1.0)*x12004*x12007))+((x12001*x12005)));
evalcond[3]=((((-1.0)*x12006*x12008))+((x12002*x12003)));
evalcond[4]=((1.0)+((x12001*x12006))+(((-1.0)*x12003*x12007)));
evalcond[5]=((((-1.0)*x12005*x12008))+((x12002*x12004))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12009=IKPowWithIntegerCheck(r12,-1);
if(!x12009.valid){
continue;
}
CheckValue<IkReal> x12010=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12010.valid){
continue;
}
if( IKabs(((x12009.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12010.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12009.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12010.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12009.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12010.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12011=IKsin(j4);
IkReal x12012=IKcos(j4);
IkReal x12013=(cj5*r00);
IkReal x12014=(cj5*r20);
IkReal x12015=(r21*sj5);
IkReal x12016=(r01*sj5);
IkReal x12017=((1.0)*x12011);
IkReal x12018=((1.0)*x12012);
evalcond[0]=((-1.0)*r12*x12012);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12017)));
evalcond[2]=(((x12011*x12015))+(((-1.0)*x12014*x12017)));
evalcond[3]=((((-1.0)*x12016*x12018))+((x12012*x12013)));
evalcond[4]=((1.0)+((x12011*x12016))+(((-1.0)*x12013*x12017)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12015*x12018))+((x12012*x12014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12019=cj5*cj5;
IkReal x12020=r01*r01;
IkReal x12021=(r01*sj5);
IkReal x12022=(cj5*r00);
CheckValue<IkReal> x12023=IKPowWithIntegerCheck(IKsign((((x12019*(r00*r00)))+x12020+(((-1.0)*x12019*x12020))+(r02*r02)+(((-2.0)*x12021*x12022)))),-1);
if(!x12023.valid){
continue;
}
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(((((-1.0)*x12021))+x12022)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12023.value)))+(x12024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12025=IKsin(j4);
IkReal x12026=IKcos(j4);
IkReal x12027=(cj5*r10);
IkReal x12028=(r01*sj5);
IkReal x12029=(cj5*r00);
IkReal x12030=(cj5*r20);
IkReal x12031=((1.0)*x12026);
IkReal x12032=((1.0)*x12025);
IkReal x12033=(sj5*x12025);
evalcond[0]=((((-1.0)*x12030*x12032))+((r21*x12033))+(((-1.0)*r22*x12031)));
evalcond[1]=((((-1.0)*x12027*x12032))+(((-1.0)*r12*x12031))+((r11*x12033)));
evalcond[2]=((((-1.0)*x12028*x12031))+(((-1.0)*r02*x12032))+((x12026*x12029)));
evalcond[3]=((1.0)+(((-1.0)*x12029*x12032))+(((-1.0)*r02*x12031))+((x12025*x12028)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12026*x12027))+(((-1.0)*r11*sj5*x12031))+(((-1.0)*r12*x12032)));
evalcond[5]=((((-1.0)*r21*sj5*x12031))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12026*x12030))+(((-1.0)*r22*x12032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12034=((1.0)*cj5);
CheckValue<IkReal> x12035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12034))+(((-1.0)*r20*sj5)))),-1);
if(!x12035.valid){
continue;
}
CheckValue<IkReal> x12036 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12035.value)))+(x12036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12037=IKsin(j4);
IkReal x12038=IKcos(j4);
IkReal x12039=(cj5*r10);
IkReal x12040=(r01*sj5);
IkReal x12041=(cj5*r00);
IkReal x12042=(cj5*r20);
IkReal x12043=((1.0)*x12038);
IkReal x12044=((1.0)*x12037);
IkReal x12045=(sj5*x12037);
evalcond[0]=(((r21*x12045))+(((-1.0)*x12042*x12044))+(((-1.0)*r22*x12043)));
evalcond[1]=((((-1.0)*r12*x12043))+((r11*x12045))+(((-1.0)*x12039*x12044)));
evalcond[2]=((((-1.0)*x12040*x12043))+((x12038*x12041))+(((-1.0)*r02*x12044)));
evalcond[3]=((1.0)+((x12037*x12040))+(((-1.0)*x12041*x12044))+(((-1.0)*r02*x12043)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12044))+(((-1.0)*r11*sj5*x12043))+((x12038*x12039))+((cj1*sj2)));
evalcond[5]=(((x12038*x12042))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x12043))+(((-1.0)*r22*x12044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12046 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12046.valid){
continue;
}
CheckValue<IkReal> x12047=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12046.value)+(((1.5707963267949)*(x12047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12048=IKsin(j4);
IkReal x12049=IKcos(j4);
IkReal x12050=(cj5*r10);
IkReal x12051=(r01*sj5);
IkReal x12052=(cj5*r00);
IkReal x12053=(cj5*r20);
IkReal x12054=((1.0)*x12049);
IkReal x12055=((1.0)*x12048);
IkReal x12056=(sj5*x12048);
evalcond[0]=((((-1.0)*r22*x12054))+(((-1.0)*x12053*x12055))+((r21*x12056)));
evalcond[1]=((((-1.0)*r12*x12054))+((r11*x12056))+(((-1.0)*x12050*x12055)));
evalcond[2]=((((-1.0)*r02*x12055))+((x12049*x12052))+(((-1.0)*x12051*x12054)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12054))+(((-1.0)*x12052*x12055))+((x12048*x12051)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x12054))+(((-1.0)*r12*x12055))+((x12049*x12050)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12055))+((x12049*x12053))+(((-1.0)*r21*sj5*x12054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12057=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12057;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12058=((1.0)*cj5);
IkReal x12059=((((-1.0)*r21*x12058))+(((-1.0)*r20*sj5)));
j4eval[0]=x12059;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12058))+((r11*sj5))))));
j4eval[2]=IKsign(x12059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12060=cj5*cj5;
IkReal x12061=r01*r01;
IkReal x12062=(r01*sj5);
IkReal x12063=(cj5*r00);
IkReal x12064=((((-1.0)*x12061))+((x12060*x12061))+(((-1.0)*x12060*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x12062*x12063)));
j4eval[0]=x12064;
j4eval[1]=IKsign(x12064);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12063))+x12062))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12065=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12065);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12065);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12066=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12066);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12066);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12067=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12067)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12067)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12068=((1.0)*cj5);
CheckValue<IkReal> x12069=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12068))),-1);
if(!x12069.valid){
continue;
}
CheckValue<IkReal> x12070=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12068))),-1);
if(!x12070.valid){
continue;
}
if( IKabs(((-1.0)*(x12069.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12070.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12069.value)))+IKsqr(((x12070.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12069.value)), ((x12070.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12071=IKsin(j4);
IkReal x12072=IKcos(j4);
IkReal x12073=((1.0)*cj5);
IkReal x12074=(sj5*x12072);
IkReal x12075=(sj5*x12071);
evalcond[0]=((-1.0)*r22*x12072);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12071)));
evalcond[2]=(((r11*x12075))+(((-1.0)*r10*x12071*x12073)));
evalcond[3]=((((-1.0)*r00*x12072*x12073))+((r01*x12074)));
evalcond[4]=((1.0)+(((-1.0)*r00*x12071*x12073))+((r01*x12075)));
evalcond[5]=(((cj2*sj1))+((r11*x12074))+((cj1*sj2))+(((-1.0)*r10*x12072*x12073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12076=((1.0)*sj1);
CheckValue<IkReal> x12077=IKPowWithIntegerCheck(r22,-1);
if(!x12077.valid){
continue;
}
CheckValue<IkReal> x12078=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12078.valid){
continue;
}
if( IKabs(((x12077.value)*(((((-1.0)*sj2*x12076))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12078.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12076)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12077.value)*(((((-1.0)*sj2*x12076))+((cj1*cj2))))))+IKsqr(((x12078.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12076))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12077.value)*(((((-1.0)*sj2*x12076))+((cj1*cj2))))), ((x12078.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12076))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12079=IKsin(j4);
IkReal x12080=IKcos(j4);
IkReal x12081=((1.0)*cj5);
IkReal x12082=(sj5*x12080);
IkReal x12083=(sj5*x12079);
evalcond[0]=((-1.0)*r22*x12080);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12079)));
evalcond[2]=(((r11*x12083))+(((-1.0)*r10*x12079*x12081)));
evalcond[3]=(((r01*x12082))+(((-1.0)*r00*x12080*x12081)));
evalcond[4]=((1.0)+((r01*x12083))+(((-1.0)*r00*x12079*x12081)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12080*x12081))+((r11*x12082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12084=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12084);
rxp0_2=(py*r00);
rxp1_0=(r21*x12084);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12085=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12085)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12085)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12086=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12086);
rxp0_2=(py*r00);
rxp1_0=(r21*x12086);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12087=((1.0)*sj1);
CheckValue<IkReal> x12088=IKPowWithIntegerCheck(r12,-1);
if(!x12088.valid){
continue;
}
CheckValue<IkReal> x12089=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12089.valid){
continue;
}
if( IKabs(((x12088.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12087)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12089.value)*((((cj1*cj2))+(((-1.0)*sj2*x12087)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12088.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12087))))))+IKsqr(((x12089.value)*((((cj1*cj2))+(((-1.0)*sj2*x12087))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12088.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12087))))), ((x12089.value)*((((cj1*cj2))+(((-1.0)*sj2*x12087))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12090=IKsin(j4);
IkReal x12091=IKcos(j4);
IkReal x12092=((1.0)*cj5*r00);
IkReal x12093=(sj5*x12091);
IkReal x12094=(sj5*x12090);
IkReal x12095=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12091);
evalcond[1]=(((cj2*sj1))+((r12*x12090))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12090*x12095))+((r21*x12094)));
evalcond[3]=(((r01*x12093))+(((-1.0)*x12091*x12092)));
evalcond[4]=((1.0)+((r01*x12094))+(((-1.0)*x12090*x12092)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12091*x12095))+((r21*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12096=((1.0)*cj5);
CheckValue<IkReal> x12097=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12096))),-1);
if(!x12097.valid){
continue;
}
CheckValue<IkReal> x12098=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12096))),-1);
if(!x12098.valid){
continue;
}
if( IKabs(((-1.0)*(x12097.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12098.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12097.value)))+IKsqr(((x12098.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12097.value)), ((x12098.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12099=IKsin(j4);
IkReal x12100=IKcos(j4);
IkReal x12101=((1.0)*cj5*r00);
IkReal x12102=(sj5*x12100);
IkReal x12103=(sj5*x12099);
IkReal x12104=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12100);
evalcond[1]=(((cj2*sj1))+((r12*x12099))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12099*x12104))+((r21*x12103)));
evalcond[3]=((((-1.0)*x12100*x12101))+((r01*x12102)));
evalcond[4]=((1.0)+((r01*x12103))+(((-1.0)*x12099*x12101)));
evalcond[5]=((((-1.0)*x12100*x12104))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12105=cj5*cj5;
IkReal x12106=r01*r01;
IkReal x12107=(r01*sj5);
IkReal x12108=(cj5*r00);
CheckValue<IkReal> x12109 = IKatan2WithCheck(IkReal((x12107+(((-1.0)*x12108)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12109.valid){
continue;
}
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(IKsign((((x12105*x12106))+(((-1.0)*(r02*r02)))+(((2.0)*x12107*x12108))+(((-1.0)*x12105*(r00*r00)))+(((-1.0)*x12106)))),-1);
if(!x12110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12109.value)+(((1.5707963267949)*(x12110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12111=IKcos(j4);
IkReal x12112=IKsin(j4);
IkReal x12113=(cj5*r00);
IkReal x12114=(cj5*r10);
IkReal x12115=(r21*sj5);
IkReal x12116=(cj5*r20);
IkReal x12117=((1.0)*x12111);
IkReal x12118=((1.0)*x12112);
IkReal x12119=(sj5*x12112);
IkReal x12120=(sj5*x12111);
evalcond[0]=(((r02*x12112))+((r01*x12120))+(((-1.0)*x12113*x12117)));
evalcond[1]=((((-1.0)*x12116*x12118))+(((-1.0)*r22*x12117))+((x12112*x12115)));
evalcond[2]=((((-1.0)*r12*x12117))+(((-1.0)*x12114*x12118))+((r11*x12119)));
evalcond[3]=((1.0)+((r01*x12119))+(((-1.0)*r02*x12117))+(((-1.0)*x12113*x12118)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12114*x12117))+((cj1*sj2))+((r12*x12112))+((r11*x12120)));
evalcond[5]=((((-1.0)*x12116*x12117))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12111*x12115))+((r22*x12112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12121=((1.0)*cj5);
CheckValue<IkReal> x12122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12121))+(((-1.0)*r20*sj5)))),-1);
if(!x12122.valid){
continue;
}
CheckValue<IkReal> x12123 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12122.value)))+(x12123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12124=IKcos(j4);
IkReal x12125=IKsin(j4);
IkReal x12126=(cj5*r00);
IkReal x12127=(cj5*r10);
IkReal x12128=(r21*sj5);
IkReal x12129=(cj5*r20);
IkReal x12130=((1.0)*x12124);
IkReal x12131=((1.0)*x12125);
IkReal x12132=(sj5*x12125);
IkReal x12133=(sj5*x12124);
evalcond[0]=((((-1.0)*x12126*x12130))+((r01*x12133))+((r02*x12125)));
evalcond[1]=((((-1.0)*x12129*x12131))+((x12125*x12128))+(((-1.0)*r22*x12130)));
evalcond[2]=((((-1.0)*x12127*x12131))+(((-1.0)*r12*x12130))+((r11*x12132)));
evalcond[3]=((1.0)+(((-1.0)*x12126*x12131))+((r01*x12132))+(((-1.0)*r02*x12130)));
evalcond[4]=(((cj2*sj1))+((r12*x12125))+((cj1*sj2))+(((-1.0)*x12127*x12130))+((r11*x12133)));
evalcond[5]=((((-1.0)*x12129*x12130))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12124*x12128))+((r22*x12125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12134 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12134.valid){
continue;
}
CheckValue<IkReal> x12135=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12134.value)+(((1.5707963267949)*(x12135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12136=IKcos(j4);
IkReal x12137=IKsin(j4);
IkReal x12138=(cj5*r00);
IkReal x12139=(cj5*r10);
IkReal x12140=(r21*sj5);
IkReal x12141=(cj5*r20);
IkReal x12142=((1.0)*x12136);
IkReal x12143=((1.0)*x12137);
IkReal x12144=(sj5*x12137);
IkReal x12145=(sj5*x12136);
evalcond[0]=(((r01*x12145))+((r02*x12137))+(((-1.0)*x12138*x12142)));
evalcond[1]=((((-1.0)*x12141*x12143))+(((-1.0)*r22*x12142))+((x12137*x12140)));
evalcond[2]=((((-1.0)*r12*x12142))+((r11*x12144))+(((-1.0)*x12139*x12143)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12142))+((r01*x12144))+(((-1.0)*x12138*x12143)));
evalcond[4]=(((cj2*sj1))+((r12*x12137))+((cj1*sj2))+((r11*x12145))+(((-1.0)*x12139*x12142)));
evalcond[5]=((((-1.0)*x12141*x12142))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12137))+((x12136*x12140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12147 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12147)==0){
continue;
}
IkReal x12146=pow(x12147,-0.5);
CheckValue<IkReal> x12148 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12148.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12148.value));
IkReal gconst25=((-1.0)*r11*x12146);
IkReal gconst26=(r10*x12146);
CheckValue<IkReal> x12149 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12149.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12149.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12152 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12152.valid){
continue;
}
IkReal x12150=((-1.0)*(x12152.value));
IkReal x12151=x12146;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12150;
IkReal gconst24=x12150;
IkReal gconst25=((-1.0)*r11*x12151);
IkReal gconst26=(r10*x12151);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12155 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12155.valid){
continue;
}
IkReal x12153=((-1.0)*(x12155.value));
IkReal x12154=x12146;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12153;
IkReal gconst24=x12153;
IkReal gconst25=((-1.0)*r11*x12154);
IkReal gconst26=(r10*x12154);
CheckValue<IkReal> x12163=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12163.valid){
continue;
}
IkReal x12156=x12163.value;
IkReal x12157=(sj3*x12156);
IkReal x12158=(r20*x12157);
IkReal x12159=(r00*x12157);
IkReal x12160=(r01*x12157);
IkReal x12161=(r21*x12157);
IkReal x12162=(r10*r11*x12157);
j4eval[0]=IKsign((((r21*x12160*(r11*r11)))+((r00*x12158*(r10*r10)))+((r01*r10*r11*x12158))+((r02*r22*sj3))+((r10*r11*r21*x12159))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12164=gconst25*gconst25;
IkReal x12165=gconst26*gconst26;
IkReal x12166=(cj3*r20);
IkReal x12167=(gconst26*r01);
IkReal x12168=(r22*sj3);
IkReal x12169=(r20*sj3);
IkReal x12170=(r21*sj3);
IkReal x12171=((1.0)*cj3);
IkReal x12172=((1.0)*x12165);
IkReal x12173=(gconst25*gconst26*r00);
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal((((gconst25*r00*x12168))+((x12167*x12168)))),IkReal((((gconst25*x12167*x12170))+(((-1.0)*x12169*x12173))+(((-1.0)*r01*x12169*x12172))+((r00*x12164*x12170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
CheckValue<IkReal> x12175=IKPowWithIntegerCheck(IKsign((((gconst25*x12166*x12167))+(((-1.0)*r01*r21*x12164*x12171))+(((-1.0)*r02*r22*x12171))+(((-1.0)*r00*x12166*x12172))+((cj3*r21*x12173)))),-1);
if(!x12175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12174.value)+(((1.5707963267949)*(x12175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12176=IKsin(j4);
IkReal x12177=IKcos(j4);
IkReal x12178=(cj2*sj1);
IkReal x12179=(cj1*sj2);
IkReal x12180=(gconst26*sj3);
IkReal x12181=(gconst25*sj3);
IkReal x12182=(gconst26*r10);
IkReal x12183=(gconst25*r11);
IkReal x12184=(sj1*sj2);
IkReal x12185=(cj3*gconst25);
IkReal x12186=(cj1*cj2);
IkReal x12187=(gconst26*r00);
IkReal x12188=(gconst26*r20);
IkReal x12189=(cj3*gconst26);
IkReal x12190=((1.0)*x12177);
IkReal x12191=((1.0)*x12176);
IkReal x12192=(cj3*x12176);
IkReal x12193=(gconst25*x12176);
IkReal x12194=(x12178+x12179);
evalcond[0]=(((r21*x12193))+(((-1.0)*x12188*x12191))+(((-1.0)*r22*x12190)));
evalcond[1]=((((-1.0)*x12182*x12191))+(((-1.0)*r12*x12190))+((x12176*x12183)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12190))+(((-1.0)*x12187*x12191))+((r01*x12193)));
evalcond[3]=((((-1.0)*cj3*x12187*x12190))+((r02*x12192))+((r00*x12181))+((r01*x12177*x12185))+((r01*x12180)));
evalcond[4]=(((r00*x12177*x12180))+(((-1.0)*r02*sj3*x12191))+(((-1.0)*r01*x12181*x12190))+((r00*x12185))+((r01*x12189)));
evalcond[5]=((((-1.0)*cj3*x12188*x12190))+((r21*x12180))+x12194+((r22*x12192))+((r21*x12177*x12185))+((r20*x12181)));
evalcond[6]=(((r11*x12189))+((r10*x12177*x12180))+(((-1.0)*r12*sj3*x12191))+(((-1.0)*r11*x12181*x12190))+x12194+((r10*x12185)));
evalcond[7]=(((r12*x12192))+((r11*x12180))+((cj3*x12177*x12183))+(((-1.0)*cj3*x12182*x12190))+x12186+((r10*x12181))+(((-1.0)*x12184)));
evalcond[8]=(((r20*x12177*x12180))+((r21*x12189))+x12184+(((-1.0)*x12186))+((r20*x12185))+(((-1.0)*r21*x12181*x12190))+(((-1.0)*r22*sj3*x12191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12195=gconst25*gconst25;
IkReal x12196=gconst26*gconst26;
IkReal x12197=(r01*sj3);
IkReal x12198=(gconst25*gconst26);
IkReal x12199=(cj3*r00);
IkReal x12200=(cj3*r01);
IkReal x12201=(r00*sj3);
IkReal x12202=(r21*x12195);
IkReal x12203=((1.0)*cj3*r20);
CheckValue<IkReal> x12204 = IKatan2WithCheck(IkReal((((gconst26*r22*x12200))+((gconst25*r22*x12199)))),IkReal(((((-1.0)*r20*x12196*x12200))+((r21*x12198*x12200))+(((-1.0)*r20*x12198*x12199))+((x12199*x12202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12204.valid){
continue;
}
CheckValue<IkReal> x12205=IKPowWithIntegerCheck(IKsign((((r20*x12196*x12201))+(((-1.0)*r20*x12197*x12198))+((x12197*x12202))+(((-1.0)*r21*x12198*x12201))+((r02*r22*sj3)))),-1);
if(!x12205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12204.value)+(((1.5707963267949)*(x12205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12206=IKsin(j4);
IkReal x12207=IKcos(j4);
IkReal x12208=(cj2*sj1);
IkReal x12209=(cj1*sj2);
IkReal x12210=(gconst26*sj3);
IkReal x12211=(gconst25*sj3);
IkReal x12212=(gconst26*r10);
IkReal x12213=(gconst25*r11);
IkReal x12214=(sj1*sj2);
IkReal x12215=(cj3*gconst25);
IkReal x12216=(cj1*cj2);
IkReal x12217=(gconst26*r00);
IkReal x12218=(gconst26*r20);
IkReal x12219=(cj3*gconst26);
IkReal x12220=((1.0)*x12207);
IkReal x12221=((1.0)*x12206);
IkReal x12222=(cj3*x12206);
IkReal x12223=(gconst25*x12206);
IkReal x12224=(x12208+x12209);
evalcond[0]=((((-1.0)*r22*x12220))+((r21*x12223))+(((-1.0)*x12218*x12221)));
evalcond[1]=((((-1.0)*r12*x12220))+(((-1.0)*x12212*x12221))+((x12206*x12213)));
evalcond[2]=((1.0)+(((-1.0)*x12217*x12221))+((r01*x12223))+(((-1.0)*r02*x12220)));
evalcond[3]=(((r01*x12207*x12215))+((r02*x12222))+(((-1.0)*cj3*x12217*x12220))+((r00*x12211))+((r01*x12210)));
evalcond[4]=((((-1.0)*r02*sj3*x12221))+((r00*x12215))+((r01*x12219))+((r00*x12207*x12210))+(((-1.0)*r01*x12211*x12220)));
evalcond[5]=((((-1.0)*cj3*x12218*x12220))+((r22*x12222))+x12224+((r21*x12210))+((r21*x12207*x12215))+((r20*x12211)));
evalcond[6]=((((-1.0)*r12*sj3*x12221))+x12224+((r10*x12207*x12210))+((r10*x12215))+(((-1.0)*r11*x12211*x12220))+((r11*x12219)));
evalcond[7]=(((cj3*x12207*x12213))+x12216+((r10*x12211))+((r12*x12222))+((r11*x12210))+(((-1.0)*cj3*x12212*x12220))+(((-1.0)*x12214)));
evalcond[8]=((((-1.0)*r21*x12211*x12220))+(((-1.0)*r22*sj3*x12221))+x12214+((r21*x12219))+((r20*x12215))+((r20*x12207*x12210))+(((-1.0)*x12216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12225=((1.0)*gconst26);
CheckValue<IkReal> x12226=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst25*r20))+(((-1.0)*r21*x12225)))),-1);
if(!x12226.valid){
continue;
}
CheckValue<IkReal> x12227 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst25*r11))+(((-1.0)*r10*x12225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12226.value)))+(x12227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12228=IKsin(j4);
IkReal x12229=IKcos(j4);
IkReal x12230=(cj2*sj1);
IkReal x12231=(cj1*sj2);
IkReal x12232=(gconst26*sj3);
IkReal x12233=(gconst25*sj3);
IkReal x12234=(gconst26*r10);
IkReal x12235=(gconst25*r11);
IkReal x12236=(sj1*sj2);
IkReal x12237=(cj3*gconst25);
IkReal x12238=(cj1*cj2);
IkReal x12239=(gconst26*r00);
IkReal x12240=(gconst26*r20);
IkReal x12241=(cj3*gconst26);
IkReal x12242=((1.0)*x12229);
IkReal x12243=((1.0)*x12228);
IkReal x12244=(cj3*x12228);
IkReal x12245=(gconst25*x12228);
IkReal x12246=(x12231+x12230);
evalcond[0]=((((-1.0)*r22*x12242))+((r21*x12245))+(((-1.0)*x12240*x12243)));
evalcond[1]=((((-1.0)*r12*x12242))+(((-1.0)*x12234*x12243))+((x12228*x12235)));
evalcond[2]=((1.0)+(((-1.0)*x12239*x12243))+((r01*x12245))+(((-1.0)*r02*x12242)));
evalcond[3]=(((r01*x12232))+((r01*x12229*x12237))+((r00*x12233))+((r02*x12244))+(((-1.0)*cj3*x12239*x12242)));
evalcond[4]=(((r00*x12229*x12232))+(((-1.0)*r01*x12233*x12242))+(((-1.0)*r02*sj3*x12243))+((r00*x12237))+((r01*x12241)));
evalcond[5]=(((r20*x12233))+x12246+((r22*x12244))+(((-1.0)*cj3*x12240*x12242))+((r21*x12232))+((r21*x12229*x12237)));
evalcond[6]=(((r10*x12237))+((r11*x12241))+x12246+(((-1.0)*r11*x12233*x12242))+((r10*x12229*x12232))+(((-1.0)*r12*sj3*x12243)));
evalcond[7]=(((r10*x12233))+((r12*x12244))+((cj3*x12229*x12235))+x12238+(((-1.0)*cj3*x12234*x12242))+(((-1.0)*x12236))+((r11*x12232)));
evalcond[8]=(((r20*x12229*x12232))+(((-1.0)*r22*sj3*x12243))+((r20*x12237))+x12236+(((-1.0)*x12238))+(((-1.0)*r21*x12233*x12242))+((r21*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12248 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12248)==0){
continue;
}
IkReal x12247=pow(x12248,-0.5);
CheckValue<IkReal> x12249 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12249.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12249.value))));
IkReal gconst28=((1.0)*r11*x12247);
IkReal gconst29=((-1.0)*r10*x12247);
CheckValue<IkReal> x12250 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12253.valid){
continue;
}
IkReal x12251=((1.0)*(x12253.value));
IkReal x12252=x12247;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12251)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12251)));
IkReal gconst28=((1.0)*r11*x12252);
IkReal gconst29=((-1.0)*r10*x12252);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12254=gconst29*gconst29;
IkReal x12255=gconst28*gconst28;
IkReal x12256=(cj3*r01);
IkReal x12257=(cj3*r00);
IkReal x12258=(r00*sj3);
IkReal x12259=(r01*sj3);
IkReal x12260=(gconst28*gconst29);
IkReal x12261=((1.0)*r20);
IkReal x12262=(r20*x12254);
IkReal x12263=(r21*x12255);
CheckValue<IkReal> x12264 = IKatan2WithCheck(IkReal((((gconst29*r22*x12256))+((gconst28*r22*x12257)))),IkReal((((r21*x12256*x12260))+((x12257*x12263))+(((-1.0)*x12257*x12260*x12261))+(((-1.0)*x12254*x12256*x12261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12264.valid){
continue;
}
CheckValue<IkReal> x12265=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12259*x12260*x12261))+(((-1.0)*r21*x12258*x12260))+((x12258*x12262))+((r02*r22*sj3))+((x12259*x12263)))),-1);
if(!x12265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12264.value)+(((1.5707963267949)*(x12265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12266=IKsin(j4);
IkReal x12267=IKcos(j4);
IkReal x12268=(cj2*sj1);
IkReal x12269=(cj1*sj2);
IkReal x12270=(gconst29*r20);
IkReal x12271=(gconst28*r20);
IkReal x12272=(sj1*sj2);
IkReal x12273=(cj1*cj2);
IkReal x12274=(r11*sj3);
IkReal x12275=(gconst29*r01);
IkReal x12276=(gconst29*r10);
IkReal x12277=(cj3*gconst28);
IkReal x12278=(cj3*gconst29);
IkReal x12279=(gconst28*sj3);
IkReal x12280=(gconst29*r00);
IkReal x12281=((1.0)*x12267);
IkReal x12282=((1.0)*x12266);
IkReal x12283=(gconst28*x12266);
IkReal x12284=(cj3*x12266);
IkReal x12285=(sj3*x12267);
IkReal x12286=(x12268+x12269);
evalcond[0]=((((-1.0)*x12270*x12282))+(((-1.0)*r22*x12281))+((r21*x12283)));
evalcond[1]=((((-1.0)*x12276*x12282))+(((-1.0)*r12*x12281))+((r11*x12283)));
evalcond[2]=((1.0)+(((-1.0)*x12280*x12282))+((r01*x12283))+(((-1.0)*r02*x12281)));
evalcond[3]=(((r01*x12267*x12277))+((r02*x12284))+((sj3*x12275))+((r00*x12279))+(((-1.0)*r00*x12278*x12281)));
evalcond[4]=(((x12280*x12285))+(((-1.0)*r01*x12279*x12281))+((cj3*x12275))+(((-1.0)*r02*sj3*x12282))+((r00*x12277)));
evalcond[5]=(((gconst29*r21*sj3))+((r22*x12284))+(((-1.0)*cj3*x12270*x12281))+x12286+((sj3*x12271))+((r21*x12267*x12277)));
evalcond[6]=((((-1.0)*r12*sj3*x12282))+((x12276*x12285))+(((-1.0)*gconst28*x12274*x12281))+x12286+((r10*x12277))+((r11*x12278)));
evalcond[7]=((((-1.0)*x12272))+x12273+((r12*x12284))+((r10*x12279))+((r11*x12267*x12277))+((gconst29*x12274))+(((-1.0)*cj3*x12276*x12281)));
evalcond[8]=((((-1.0)*x12273))+((r21*x12278))+((x12270*x12285))+x12272+((cj3*x12271))+(((-1.0)*r21*x12279*x12281))+(((-1.0)*r22*sj3*x12282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12287=((1.0)*gconst29);
CheckValue<IkReal> x12288 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12287))+((gconst28*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12288.valid){
continue;
}
CheckValue<IkReal> x12289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x12287)))),-1);
if(!x12289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12288.value)+(((1.5707963267949)*(x12289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12290=IKsin(j4);
IkReal x12291=IKcos(j4);
IkReal x12292=(cj2*sj1);
IkReal x12293=(cj1*sj2);
IkReal x12294=(gconst29*r20);
IkReal x12295=(gconst28*r20);
IkReal x12296=(sj1*sj2);
IkReal x12297=(cj1*cj2);
IkReal x12298=(r11*sj3);
IkReal x12299=(gconst29*r01);
IkReal x12300=(gconst29*r10);
IkReal x12301=(cj3*gconst28);
IkReal x12302=(cj3*gconst29);
IkReal x12303=(gconst28*sj3);
IkReal x12304=(gconst29*r00);
IkReal x12305=((1.0)*x12291);
IkReal x12306=((1.0)*x12290);
IkReal x12307=(gconst28*x12290);
IkReal x12308=(cj3*x12290);
IkReal x12309=(sj3*x12291);
IkReal x12310=(x12293+x12292);
evalcond[0]=(((r21*x12307))+(((-1.0)*x12294*x12306))+(((-1.0)*r22*x12305)));
evalcond[1]=(((r11*x12307))+(((-1.0)*x12300*x12306))+(((-1.0)*r12*x12305)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12305))+((r01*x12307))+(((-1.0)*x12304*x12306)));
evalcond[3]=(((sj3*x12299))+((r00*x12303))+((r01*x12291*x12301))+(((-1.0)*r00*x12302*x12305))+((r02*x12308)));
evalcond[4]=((((-1.0)*r01*x12303*x12305))+((cj3*x12299))+((x12304*x12309))+(((-1.0)*r02*sj3*x12306))+((r00*x12301)));
evalcond[5]=(((gconst29*r21*sj3))+x12310+((r21*x12291*x12301))+((sj3*x12295))+((r22*x12308))+(((-1.0)*cj3*x12294*x12305)));
evalcond[6]=(((r10*x12301))+((x12300*x12309))+(((-1.0)*r12*sj3*x12306))+((r11*x12302))+x12310+(((-1.0)*gconst28*x12298*x12305)));
evalcond[7]=(((r10*x12303))+((gconst29*x12298))+x12297+((r12*x12308))+(((-1.0)*cj3*x12300*x12305))+(((-1.0)*x12296))+((r11*x12291*x12301)));
evalcond[8]=((((-1.0)*r22*sj3*x12306))+((cj3*x12295))+((r21*x12302))+x12296+((x12294*x12309))+(((-1.0)*r21*x12303*x12305))+(((-1.0)*x12297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12311=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12311);
rxp0_2=(py*r00);
rxp1_0=(r21*x12311);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12312=(cj5*r00);
IkReal x12313=(r01*sj5);
j4eval[0]=(x12313+(((-1.0)*x12312)));
j4eval[1]=(((sj3*x12312))+(((-1.0)*sj3*x12313)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12314=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12314);
rxp0_2=(py*r00);
rxp1_0=(r21*x12314);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12315=(r01*sj5);
IkReal x12316=((1.0)*cj5*r00);
j4eval[0]=(x12315+(((-1.0)*x12316)));
j4eval[1]=((((-1.0)*cj3*x12316))+((cj3*x12315)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12317=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12317);
rxp0_2=(py*r00);
rxp1_0=(r21*x12317);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12318=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12318);
rxp0_2=(py*r00);
rxp1_0=(r21*x12318);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12319=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12319);
rxp0_2=(py*r00);
rxp1_0=(r21*x12319);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal x12320=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12320)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12320)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12321=((1.0)*cj5);
CheckValue<IkReal> x12322=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12321))),-1);
if(!x12322.valid){
continue;
}
CheckValue<IkReal> x12323=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12321))),-1);
if(!x12323.valid){
continue;
}
if( IKabs(((-1.0)*(x12322.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12323.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12322.value)))+IKsqr(((x12323.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12322.value)), ((x12323.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12324=IKsin(j4);
IkReal x12325=IKcos(j4);
IkReal x12326=((1.0)*cj5*r00);
IkReal x12327=(sj5*x12325);
IkReal x12328=(sj5*x12324);
IkReal x12329=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12325);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x12324))+((cj1*cj2)));
evalcond[2]=(((r21*x12328))+(((-1.0)*x12324*x12329)));
evalcond[3]=(((r01*x12327))+(((-1.0)*x12325*x12326)));
evalcond[4]=((1.0)+((r01*x12328))+(((-1.0)*x12324*x12326)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x12327))+(((-1.0)*x12325*x12329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12330=((1.0)*cj2);
CheckValue<IkReal> x12331=IKPowWithIntegerCheck(r12,-1);
if(!x12331.valid){
continue;
}
CheckValue<IkReal> x12332=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12332.valid){
continue;
}
if( IKabs(((x12331.value)*((((sj1*sj2))+(((-1.0)*cj1*x12330)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12332.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12330)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12331.value)*((((sj1*sj2))+(((-1.0)*cj1*x12330))))))+IKsqr(((x12332.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12330))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12331.value)*((((sj1*sj2))+(((-1.0)*cj1*x12330))))), ((x12332.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12330))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12333=IKsin(j4);
IkReal x12334=IKcos(j4);
IkReal x12335=((1.0)*cj5*r00);
IkReal x12336=(sj5*x12334);
IkReal x12337=(sj5*x12333);
IkReal x12338=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12334);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x12333))+((cj1*cj2)));
evalcond[2]=(((r21*x12337))+(((-1.0)*x12333*x12338)));
evalcond[3]=((((-1.0)*x12334*x12335))+((r01*x12336)));
evalcond[4]=((1.0)+((r01*x12337))+(((-1.0)*x12333*x12335)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12334*x12338))+((cj1*sj2))+((r21*x12336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12339=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12339);
rxp0_2=(py*r00);
rxp1_0=(r21*x12339);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12340=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12340);
rxp0_2=(py*r00);
rxp1_0=(r21*x12340);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12341=((1.0)*sj1);
CheckValue<IkReal> x12342=IKPowWithIntegerCheck(r12,-1);
if(!x12342.valid){
continue;
}
CheckValue<IkReal> x12343=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12343.valid){
continue;
}
if( IKabs(((x12342.value)*(((((-1.0)*sj2*x12341))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12343.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12341)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12342.value)*(((((-1.0)*sj2*x12341))+((cj1*cj2))))))+IKsqr(((x12343.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12341))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12342.value)*(((((-1.0)*sj2*x12341))+((cj1*cj2))))), ((x12343.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12341))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12344=IKsin(j4);
IkReal x12345=IKcos(j4);
IkReal x12346=(cj5*r00);
IkReal x12347=(cj5*r20);
IkReal x12348=(r21*sj5);
IkReal x12349=(r01*sj5);
IkReal x12350=((1.0)*x12344);
IkReal x12351=((1.0)*x12345);
evalcond[0]=((-1.0)*r12*x12345);
evalcond[1]=(((x12344*x12348))+(((-1.0)*x12347*x12350)));
evalcond[2]=((((-1.0)*x12349*x12351))+((x12345*x12346)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12350))+((cj1*cj2)));
evalcond[4]=((1.0)+((x12344*x12349))+(((-1.0)*x12346*x12350)));
evalcond[5]=((((-1.0)*x12348*x12351))+((cj2*sj1))+((x12345*x12347))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12352=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12352.valid){
continue;
}
CheckValue<IkReal> x12353=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12353.valid){
continue;
}
if( IKabs(((-1.0)*(x12352.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12353.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12352.value)))+IKsqr(((x12353.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12352.value)), ((x12353.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12354=IKsin(j4);
IkReal x12355=IKcos(j4);
IkReal x12356=(cj5*r00);
IkReal x12357=(cj5*r20);
IkReal x12358=(r21*sj5);
IkReal x12359=(r01*sj5);
IkReal x12360=((1.0)*x12354);
IkReal x12361=((1.0)*x12355);
evalcond[0]=((-1.0)*r12*x12355);
evalcond[1]=((((-1.0)*x12357*x12360))+((x12354*x12358)));
evalcond[2]=(((x12355*x12356))+(((-1.0)*x12359*x12361)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12360))+((cj1*cj2)));
evalcond[4]=((1.0)+((x12354*x12359))+(((-1.0)*x12356*x12360)));
evalcond[5]=(((x12355*x12357))+((cj2*sj1))+(((-1.0)*x12358*x12361))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12362=((1.0)*r01);
CheckValue<IkReal> x12363=IKPowWithIntegerCheck(r12,-1);
if(!x12363.valid){
continue;
}
CheckValue<IkReal> x12364=IKPowWithIntegerCheck(sj3,-1);
if(!x12364.valid){
continue;
}
CheckValue<IkReal> x12365=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x12362))),-1);
if(!x12365.valid){
continue;
}
if( IKabs(((x12363.value)*(x12364.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12365.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12362)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12363.value)*(x12364.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12365.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12362))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12363.value)*(x12364.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12365.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12362))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12366=IKsin(j4);
IkReal x12367=IKcos(j4);
IkReal x12368=(cj2*sj1);
IkReal x12369=(cj1*sj2);
IkReal x12370=(sj1*sj2);
IkReal x12371=(cj5*sj3);
IkReal x12372=(cj3*cj5);
IkReal x12373=(r21*sj5);
IkReal x12374=(cj1*cj2);
IkReal x12375=(r00*sj5);
IkReal x12376=(r01*sj5);
IkReal x12377=(r20*sj5);
IkReal x12378=((1.0)*x12366);
IkReal x12379=(r20*x12367);
IkReal x12380=(r00*x12367);
IkReal x12381=(cj3*x12367);
IkReal x12382=(x12369+x12368);
IkReal x12383=((1.0)*sj3*x12367);
evalcond[0]=((-1.0)*r12*x12367);
evalcond[1]=(((x12366*x12373))+(((-1.0)*cj5*r20*x12378)));
evalcond[2]=((((-1.0)*r12*sj3*x12378))+x12382);
evalcond[3]=(((cj3*r12*x12366))+x12374+(((-1.0)*x12370)));
evalcond[4]=((1.0)+((x12366*x12376))+(((-1.0)*cj5*r00*x12378)));
evalcond[5]=(((x12371*x12380))+(((-1.0)*x12376*x12383))+((cj3*x12375))+((r01*x12372)));
evalcond[6]=(((x12376*x12381))+((sj3*x12375))+(((-1.0)*x12372*x12380))+((r01*x12371)));
evalcond[7]=(x12382+((x12373*x12381))+((r21*x12371))+((sj3*x12377))+(((-1.0)*x12372*x12379)));
evalcond[8]=(x12370+(((-1.0)*x12373*x12383))+((r21*x12372))+((cj3*x12377))+((x12371*x12379))+(((-1.0)*x12374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12384=((1.0)*r00);
IkReal x12385=(r01*sj5);
CheckValue<IkReal> x12386=IKPowWithIntegerCheck((x12385+(((-1.0)*cj5*x12384))),-1);
if(!x12386.valid){
continue;
}
CheckValue<IkReal> x12387=IKPowWithIntegerCheck((((cj3*x12385))+(((-1.0)*cj3*cj5*x12384))),-1);
if(!x12387.valid){
continue;
}
if( IKabs(((-1.0)*(x12386.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12387.value)*(((((-1.0)*sj3*sj5*x12384))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12386.value)))+IKsqr(((x12387.value)*(((((-1.0)*sj3*sj5*x12384))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12386.value)), ((x12387.value)*(((((-1.0)*sj3*sj5*x12384))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12388=IKsin(j4);
IkReal x12389=IKcos(j4);
IkReal x12390=(cj2*sj1);
IkReal x12391=(cj1*sj2);
IkReal x12392=(sj1*sj2);
IkReal x12393=(cj5*sj3);
IkReal x12394=(cj3*cj5);
IkReal x12395=(r21*sj5);
IkReal x12396=(cj1*cj2);
IkReal x12397=(r00*sj5);
IkReal x12398=(r01*sj5);
IkReal x12399=(r20*sj5);
IkReal x12400=((1.0)*x12388);
IkReal x12401=(r20*x12389);
IkReal x12402=(r00*x12389);
IkReal x12403=(cj3*x12389);
IkReal x12404=(x12390+x12391);
IkReal x12405=((1.0)*sj3*x12389);
evalcond[0]=((-1.0)*r12*x12389);
evalcond[1]=(((x12388*x12395))+(((-1.0)*cj5*r20*x12400)));
evalcond[2]=((((-1.0)*r12*sj3*x12400))+x12404);
evalcond[3]=(x12396+(((-1.0)*x12392))+((cj3*r12*x12388)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12400))+((x12388*x12398)));
evalcond[5]=(((cj3*x12397))+(((-1.0)*x12398*x12405))+((r01*x12394))+((x12393*x12402)));
evalcond[6]=(((r01*x12393))+((sj3*x12397))+(((-1.0)*x12394*x12402))+((x12398*x12403)));
evalcond[7]=(((x12395*x12403))+((r21*x12393))+((sj3*x12399))+x12404+(((-1.0)*x12394*x12401)));
evalcond[8]=((((-1.0)*x12395*x12405))+((cj3*x12399))+x12392+((r21*x12394))+((x12393*x12401))+(((-1.0)*x12396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12406=((1.0)*r01);
IkReal x12407=(cj5*r00);
CheckValue<IkReal> x12408=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x12407))),-1);
if(!x12408.valid){
continue;
}
CheckValue<IkReal> x12409=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x12406))+((sj3*x12407))),-1);
if(!x12409.valid){
continue;
}
if( IKabs(((-1.0)*(x12408.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12409.value)*(((((-1.0)*cj3*cj5*x12406))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12408.value)))+IKsqr(((x12409.value)*(((((-1.0)*cj3*cj5*x12406))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12408.value)), ((x12409.value)*(((((-1.0)*cj3*cj5*x12406))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12410=IKsin(j4);
IkReal x12411=IKcos(j4);
IkReal x12412=(cj2*sj1);
IkReal x12413=(cj1*sj2);
IkReal x12414=(sj1*sj2);
IkReal x12415=(cj5*sj3);
IkReal x12416=(cj3*cj5);
IkReal x12417=(r21*sj5);
IkReal x12418=(cj1*cj2);
IkReal x12419=(r00*sj5);
IkReal x12420=(r01*sj5);
IkReal x12421=(r20*sj5);
IkReal x12422=((1.0)*x12410);
IkReal x12423=(r20*x12411);
IkReal x12424=(r00*x12411);
IkReal x12425=(cj3*x12411);
IkReal x12426=(x12413+x12412);
IkReal x12427=((1.0)*sj3*x12411);
evalcond[0]=((-1.0)*r12*x12411);
evalcond[1]=(((x12410*x12417))+(((-1.0)*cj5*r20*x12422)));
evalcond[2]=((((-1.0)*r12*sj3*x12422))+x12426);
evalcond[3]=((((-1.0)*x12414))+((cj3*r12*x12410))+x12418);
evalcond[4]=((1.0)+((x12410*x12420))+(((-1.0)*cj5*r00*x12422)));
evalcond[5]=(((cj3*x12419))+((r01*x12416))+(((-1.0)*x12420*x12427))+((x12415*x12424)));
evalcond[6]=(((sj3*x12419))+((x12420*x12425))+((r01*x12415))+(((-1.0)*x12416*x12424)));
evalcond[7]=(((r21*x12415))+((x12417*x12425))+x12426+(((-1.0)*x12416*x12423))+((sj3*x12421)));
evalcond[8]=(((r21*x12416))+(((-1.0)*x12418))+((cj3*x12421))+(((-1.0)*x12417*x12427))+x12414+((x12415*x12423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12428=cj5*cj5;
IkReal x12429=(cj3*r20);
IkReal x12430=(r21*sj3);
IkReal x12431=((1.0)*cj3);
IkReal x12432=(r01*r21);
IkReal x12433=(r01*sj3);
IkReal x12434=(r00*sj5);
IkReal x12435=(cj5*r01*sj5);
IkReal x12436=((1.0)*x12428);
CheckValue<IkReal> x12437 = IKatan2WithCheck(IkReal((((cj5*r22*x12433))+((r22*sj3*x12434)))),IkReal((((x12430*x12435))+(((-1.0)*r20*x12433*x12436))+((r00*x12430))+(((-1.0)*cj5*r20*sj3*x12434))+(((-1.0)*r00*x12430*x12436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12437.valid){
continue;
}
CheckValue<IkReal> x12438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x12431))+((cj3*x12428*x12432))+(((-1.0)*x12431*x12432))+(((-1.0)*r00*x12429*x12436))+((x12429*x12435))+((cj3*cj5*r21*x12434)))),-1);
if(!x12438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12437.value)+(((1.5707963267949)*(x12438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12439=IKsin(j4);
IkReal x12440=IKcos(j4);
IkReal x12441=(cj2*sj1);
IkReal x12442=(cj1*sj2);
IkReal x12443=(r11*sj5);
IkReal x12444=(cj5*r10);
IkReal x12445=(sj1*sj2);
IkReal x12446=(cj5*r01);
IkReal x12447=(cj5*r00);
IkReal x12448=(cj3*sj5);
IkReal x12449=(r21*sj5);
IkReal x12450=(cj1*cj2);
IkReal x12451=(cj5*sj3);
IkReal x12452=(sj3*sj5);
IkReal x12453=(r01*sj5);
IkReal x12454=(cj3*cj5);
IkReal x12455=(cj5*r20);
IkReal x12456=((1.0)*x12440);
IkReal x12457=((1.0)*x12439);
IkReal x12458=(cj3*x12440);
IkReal x12459=(sj3*x12440);
IkReal x12460=(cj3*x12439);
IkReal x12461=(x12441+x12442);
evalcond[0]=((((-1.0)*r22*x12456))+((x12439*x12449))+(((-1.0)*x12455*x12457)));
evalcond[1]=((((-1.0)*r12*x12456))+((x12439*x12443))+(((-1.0)*x12444*x12457)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12456))+((x12439*x12453))+(((-1.0)*x12447*x12457)));
evalcond[3]=((((-1.0)*cj3*x12447*x12456))+((r02*x12460))+((r00*x12452))+((sj3*x12446))+((r01*x12440*x12448)));
evalcond[4]=(((r00*x12448))+((cj3*x12446))+(((-1.0)*r01*x12452*x12456))+((x12447*x12459))+(((-1.0)*r02*sj3*x12457)));
evalcond[5]=(((r20*x12452))+(((-1.0)*r20*x12454*x12456))+x12461+((r22*x12460))+((r21*x12451))+((r21*x12440*x12448)));
evalcond[6]=(((x12444*x12459))+(((-1.0)*r12*sj3*x12457))+((r11*x12454))+(((-1.0)*sj3*x12443*x12456))+((r10*x12448))+x12461);
evalcond[7]=((((-1.0)*cj3*x12444*x12456))+(((-1.0)*x12445))+((r12*x12460))+((r11*x12451))+((x12443*x12458))+x12450+((r10*x12452)));
evalcond[8]=(((r20*x12440*x12451))+(((-1.0)*r22*sj3*x12457))+(((-1.0)*x12450))+x12445+(((-1.0)*sj3*x12449*x12456))+((r20*x12448))+((r21*x12454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12462=((1.0)*cj5);
CheckValue<IkReal> x12463 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12463.valid){
continue;
}
CheckValue<IkReal> x12464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12462))+(((-1.0)*r20*sj5)))),-1);
if(!x12464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12463.value)+(((1.5707963267949)*(x12464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12465=IKsin(j4);
IkReal x12466=IKcos(j4);
IkReal x12467=(cj2*sj1);
IkReal x12468=(cj1*sj2);
IkReal x12469=(r11*sj5);
IkReal x12470=(cj5*r10);
IkReal x12471=(sj1*sj2);
IkReal x12472=(cj5*r01);
IkReal x12473=(cj5*r00);
IkReal x12474=(cj3*sj5);
IkReal x12475=(r21*sj5);
IkReal x12476=(cj1*cj2);
IkReal x12477=(cj5*sj3);
IkReal x12478=(sj3*sj5);
IkReal x12479=(r01*sj5);
IkReal x12480=(cj3*cj5);
IkReal x12481=(cj5*r20);
IkReal x12482=((1.0)*x12466);
IkReal x12483=((1.0)*x12465);
IkReal x12484=(cj3*x12466);
IkReal x12485=(sj3*x12466);
IkReal x12486=(cj3*x12465);
IkReal x12487=(x12468+x12467);
evalcond[0]=(((x12465*x12475))+(((-1.0)*r22*x12482))+(((-1.0)*x12481*x12483)));
evalcond[1]=(((x12465*x12469))+(((-1.0)*r12*x12482))+(((-1.0)*x12470*x12483)));
evalcond[2]=((1.0)+((x12465*x12479))+(((-1.0)*x12473*x12483))+(((-1.0)*r02*x12482)));
evalcond[3]=(((r00*x12478))+((sj3*x12472))+(((-1.0)*cj3*x12473*x12482))+((r02*x12486))+((r01*x12466*x12474)));
evalcond[4]=(((x12473*x12485))+((cj3*x12472))+((r00*x12474))+(((-1.0)*r01*x12478*x12482))+(((-1.0)*r02*sj3*x12483)));
evalcond[5]=(((r22*x12486))+(((-1.0)*r20*x12480*x12482))+((r21*x12466*x12474))+((r20*x12478))+x12487+((r21*x12477)));
evalcond[6]=((((-1.0)*r12*sj3*x12483))+(((-1.0)*sj3*x12469*x12482))+((r11*x12480))+x12487+((r10*x12474))+((x12470*x12485)));
evalcond[7]=((((-1.0)*x12471))+(((-1.0)*cj3*x12470*x12482))+((r11*x12477))+((r12*x12486))+((x12469*x12484))+x12476+((r10*x12478)));
evalcond[8]=((((-1.0)*sj3*x12475*x12482))+(((-1.0)*x12476))+(((-1.0)*r22*sj3*x12483))+((r20*x12474))+((r20*x12466*x12477))+x12471+((r21*x12480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12488 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12488.valid){
continue;
}
CheckValue<IkReal> x12489=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12488.value)+(((1.5707963267949)*(x12489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12490=IKsin(j4);
IkReal x12491=IKcos(j4);
IkReal x12492=(cj2*sj1);
IkReal x12493=(cj1*sj2);
IkReal x12494=(r11*sj5);
IkReal x12495=(cj5*r10);
IkReal x12496=(sj1*sj2);
IkReal x12497=(cj5*r01);
IkReal x12498=(cj5*r00);
IkReal x12499=(cj3*sj5);
IkReal x12500=(r21*sj5);
IkReal x12501=(cj1*cj2);
IkReal x12502=(cj5*sj3);
IkReal x12503=(sj3*sj5);
IkReal x12504=(r01*sj5);
IkReal x12505=(cj3*cj5);
IkReal x12506=(cj5*r20);
IkReal x12507=((1.0)*x12491);
IkReal x12508=((1.0)*x12490);
IkReal x12509=(cj3*x12491);
IkReal x12510=(sj3*x12491);
IkReal x12511=(cj3*x12490);
IkReal x12512=(x12493+x12492);
evalcond[0]=((((-1.0)*r22*x12507))+(((-1.0)*x12506*x12508))+((x12490*x12500)));
evalcond[1]=((((-1.0)*x12495*x12508))+(((-1.0)*r12*x12507))+((x12490*x12494)));
evalcond[2]=((1.0)+(((-1.0)*x12498*x12508))+(((-1.0)*r02*x12507))+((x12490*x12504)));
evalcond[3]=(((r01*x12491*x12499))+((r00*x12503))+(((-1.0)*cj3*x12498*x12507))+((r02*x12511))+((sj3*x12497)));
evalcond[4]=(((r00*x12499))+((cj3*x12497))+(((-1.0)*r02*sj3*x12508))+((x12498*x12510))+(((-1.0)*r01*x12503*x12507)));
evalcond[5]=((((-1.0)*r20*x12505*x12507))+((r20*x12503))+((r21*x12502))+((r22*x12511))+x12512+((r21*x12491*x12499)));
evalcond[6]=(((r11*x12505))+((r10*x12499))+((x12495*x12510))+(((-1.0)*r12*sj3*x12508))+x12512+(((-1.0)*sj3*x12494*x12507)));
evalcond[7]=((((-1.0)*cj3*x12495*x12507))+((r12*x12511))+((r11*x12502))+((r10*x12503))+((x12494*x12509))+x12501+(((-1.0)*x12496)));
evalcond[8]=((((-1.0)*r22*sj3*x12508))+((r20*x12499))+(((-1.0)*x12501))+((r20*x12491*x12502))+((r21*x12505))+x12496+(((-1.0)*sj3*x12500*x12507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12513=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12513;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12514=((1.0)*cj5);
IkReal x12515=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12514)));
j4eval[0]=x12515;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12514)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12516=cj5*cj5;
IkReal x12517=(cj3*r01);
IkReal x12518=(cj5*sj5);
IkReal x12519=((1.0)*cj3);
IkReal x12520=(((cj3*r00*r21*x12518))+((r21*x12516*x12517))+(((-1.0)*r21*x12517))+((r20*x12517*x12518))+(((-1.0)*r00*r20*x12516*x12519))+(((-1.0)*r02*r22*x12519)));
j4eval[0]=x12520;
j4eval[1]=IKsign(x12520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12521=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12521;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12522=((1.0)*cj5);
IkReal x12523=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12522)));
j4eval[0]=x12523;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12522))+((r21*sj5))))));
j4eval[2]=IKsign(x12523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12524=cj5*cj5;
IkReal x12525=r01*r01;
IkReal x12526=(r01*sj5);
IkReal x12527=(cj5*r00);
IkReal x12528=((((2.0)*x12526*x12527))+(((-1.0)*(r02*r02)))+((x12524*x12525))+(((-1.0)*x12524*(r00*r00)))+(((-1.0)*x12525)));
j4eval[0]=x12528;
j4eval[1]=IKsign(x12528);
j4eval[2]=((IKabs(r02))+(IKabs((x12527+(((-1.0)*x12526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12529=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12529);
rxp0_2=(py*r00);
rxp1_0=(r21*x12529);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12530=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12530);
rxp0_2=(py*r00);
rxp1_0=(r21*x12530);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12531=((1.0)*sj1);
CheckValue<IkReal> x12532=IKPowWithIntegerCheck(r12,-1);
if(!x12532.valid){
continue;
}
CheckValue<IkReal> x12533=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12533.valid){
continue;
}
if( IKabs(((x12532.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12533.value)*(((((-1.0)*sj2*x12531))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12532.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12531))))))+IKsqr(((x12533.value)*(((((-1.0)*sj2*x12531))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12532.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12531))))), ((x12533.value)*(((((-1.0)*sj2*x12531))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12534=IKsin(j4);
IkReal x12535=IKcos(j4);
IkReal x12536=((1.0)*cj1);
IkReal x12537=(r21*sj5);
IkReal x12538=(r01*sj5);
IkReal x12539=(cj5*x12535);
IkReal x12540=((1.0)*x12535);
IkReal x12541=((1.0)*cj5*x12534);
evalcond[0]=((-1.0)*r12*x12535);
evalcond[1]=(((x12534*x12537))+(((-1.0)*r20*x12541)));
evalcond[2]=((((-1.0)*x12538*x12540))+((r00*x12539)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12541))+((x12534*x12538)));
evalcond[4]=((((-1.0)*r12*x12534))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12536)));
evalcond[5]=(((r20*x12539))+(((-1.0)*x12537*x12540))+((sj1*sj2))+(((-1.0)*cj2*x12536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12542=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12542.valid){
continue;
}
CheckValue<IkReal> x12543=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12543.valid){
continue;
}
if( IKabs(x12542.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12543.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12542.value)+IKsqr(((x12543.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12542.value, ((x12543.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12544=IKsin(j4);
IkReal x12545=IKcos(j4);
IkReal x12546=((1.0)*cj1);
IkReal x12547=(r21*sj5);
IkReal x12548=(r01*sj5);
IkReal x12549=(cj5*x12545);
IkReal x12550=((1.0)*x12545);
IkReal x12551=((1.0)*cj5*x12544);
evalcond[0]=((-1.0)*r12*x12545);
evalcond[1]=((((-1.0)*r20*x12551))+((x12544*x12547)));
evalcond[2]=(((r00*x12549))+(((-1.0)*x12548*x12550)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12551))+((x12544*x12548)));
evalcond[4]=((((-1.0)*r12*x12544))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12546)));
evalcond[5]=((((-1.0)*x12547*x12550))+((r20*x12549))+((sj1*sj2))+(((-1.0)*cj2*x12546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12552=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12552);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12552);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12553=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12553);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12553);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12554=IKPowWithIntegerCheck(r22,-1);
if(!x12554.valid){
continue;
}
CheckValue<IkReal> x12555=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12555.valid){
continue;
}
if( IKabs(((x12554.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12555.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12554.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12555.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12554.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12555.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12556=IKsin(j4);
IkReal x12557=IKcos(j4);
IkReal x12558=((1.0)*cj2);
IkReal x12559=(cj5*x12557);
IkReal x12560=(sj5*x12556);
IkReal x12561=((1.0)*sj5*x12557);
IkReal x12562=((1.0)*cj5*x12556);
evalcond[0]=((-1.0)*r22*x12557);
evalcond[1]=(((r11*x12560))+(((-1.0)*r10*x12562)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12558))+(((-1.0)*r22*x12556)));
evalcond[3]=(((r00*x12559))+(((-1.0)*r01*x12561)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12562))+((r01*x12560)));
evalcond[5]=((((-1.0)*r11*x12561))+(((-1.0)*cj1*sj2))+((r10*x12559))+(((-1.0)*sj1*x12558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12563=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12563.valid){
continue;
}
CheckValue<IkReal> x12564=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12564.valid){
continue;
}
if( IKabs(x12563.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12564.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12563.value)+IKsqr(((x12564.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12563.value, ((x12564.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12565=IKsin(j4);
IkReal x12566=IKcos(j4);
IkReal x12567=((1.0)*cj2);
IkReal x12568=(cj5*x12566);
IkReal x12569=(sj5*x12565);
IkReal x12570=((1.0)*sj5*x12566);
IkReal x12571=((1.0)*cj5*x12565);
evalcond[0]=((-1.0)*r22*x12566);
evalcond[1]=(((r11*x12569))+(((-1.0)*r10*x12571)));
evalcond[2]=((((-1.0)*r22*x12565))+((sj1*sj2))+(((-1.0)*cj1*x12567)));
evalcond[3]=(((r00*x12568))+(((-1.0)*r01*x12570)));
evalcond[4]=((-1.0)+((r01*x12569))+(((-1.0)*r00*x12571)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12567))+(((-1.0)*r11*x12570))+((r10*x12568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12572=cj5*cj5;
IkReal x12573=r01*r01;
IkReal x12574=(r01*sj5);
IkReal x12575=(cj5*r00);
CheckValue<IkReal> x12576 = IKatan2WithCheck(IkReal(((((-1.0)*x12574))+x12575)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12576.valid){
continue;
}
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x12574*x12575))+(((-1.0)*x12573))+((x12572*x12573))+(((-1.0)*x12572*(r00*r00))))),-1);
if(!x12577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12576.value)+(((1.5707963267949)*(x12577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12578=IKsin(j4);
IkReal x12579=IKcos(j4);
IkReal x12580=(cj5*r10);
IkReal x12581=(r01*sj5);
IkReal x12582=((1.0)*cj2);
IkReal x12583=(cj5*r00);
IkReal x12584=(cj5*r20);
IkReal x12585=((1.0)*x12579);
IkReal x12586=((1.0)*x12578);
IkReal x12587=(sj5*x12578);
evalcond[0]=((((-1.0)*r22*x12585))+((r21*x12587))+(((-1.0)*x12584*x12586)));
evalcond[1]=((((-1.0)*x12580*x12586))+(((-1.0)*r12*x12585))+((r11*x12587)));
evalcond[2]=((((-1.0)*r02*x12586))+(((-1.0)*x12581*x12585))+((x12579*x12583)));
evalcond[3]=((-1.0)+((x12578*x12581))+(((-1.0)*r02*x12585))+(((-1.0)*x12583*x12586)));
evalcond[4]=((((-1.0)*r21*sj5*x12585))+((sj1*sj2))+(((-1.0)*r22*x12586))+(((-1.0)*cj1*x12582))+((x12579*x12584)));
evalcond[5]=((((-1.0)*r12*x12586))+(((-1.0)*sj1*x12582))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x12585))+((x12579*x12580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12588=((1.0)*cj5);
CheckValue<IkReal> x12589 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12588))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12589.valid){
continue;
}
CheckValue<IkReal> x12590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12588)))),-1);
if(!x12590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12589.value)+(((1.5707963267949)*(x12590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12591=IKsin(j4);
IkReal x12592=IKcos(j4);
IkReal x12593=(cj5*r10);
IkReal x12594=(r01*sj5);
IkReal x12595=((1.0)*cj2);
IkReal x12596=(cj5*r00);
IkReal x12597=(cj5*r20);
IkReal x12598=((1.0)*x12592);
IkReal x12599=((1.0)*x12591);
IkReal x12600=(sj5*x12591);
evalcond[0]=((((-1.0)*x12597*x12599))+(((-1.0)*r22*x12598))+((r21*x12600)));
evalcond[1]=(((r11*x12600))+(((-1.0)*r12*x12598))+(((-1.0)*x12593*x12599)));
evalcond[2]=((((-1.0)*r02*x12599))+((x12592*x12596))+(((-1.0)*x12594*x12598)));
evalcond[3]=((-1.0)+(((-1.0)*x12596*x12599))+(((-1.0)*r02*x12598))+((x12591*x12594)));
evalcond[4]=((((-1.0)*r21*sj5*x12598))+(((-1.0)*r22*x12599))+((sj1*sj2))+((x12592*x12597))+(((-1.0)*cj1*x12595)));
evalcond[5]=((((-1.0)*sj1*x12595))+(((-1.0)*r12*x12599))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x12598))+((x12592*x12593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12601=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12601.valid){
continue;
}
CheckValue<IkReal> x12602 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12601.value)))+(x12602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12603=IKsin(j4);
IkReal x12604=IKcos(j4);
IkReal x12605=(cj5*r10);
IkReal x12606=(r01*sj5);
IkReal x12607=((1.0)*cj2);
IkReal x12608=(cj5*r00);
IkReal x12609=(cj5*r20);
IkReal x12610=((1.0)*x12604);
IkReal x12611=((1.0)*x12603);
IkReal x12612=(sj5*x12603);
evalcond[0]=((((-1.0)*r22*x12610))+((r21*x12612))+(((-1.0)*x12609*x12611)));
evalcond[1]=((((-1.0)*r12*x12610))+(((-1.0)*x12605*x12611))+((r11*x12612)));
evalcond[2]=(((x12604*x12608))+(((-1.0)*r02*x12611))+(((-1.0)*x12606*x12610)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12610))+(((-1.0)*x12608*x12611))+((x12603*x12606)));
evalcond[4]=((((-1.0)*r22*x12611))+((x12604*x12609))+(((-1.0)*cj1*x12607))+((sj1*sj2))+(((-1.0)*r21*sj5*x12610)));
evalcond[5]=((((-1.0)*r12*x12611))+((x12604*x12605))+(((-1.0)*sj1*x12607))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x12610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12613=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12613;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12614=((1.0)*cj5);
IkReal x12615=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12614)));
j4eval[0]=x12615;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12614))))));
j4eval[2]=IKsign(x12615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12616=cj5*cj5;
IkReal x12617=r01*r01;
IkReal x12618=(cj5*r00);
IkReal x12619=(r01*sj5);
IkReal x12620=((((-1.0)*x12616*x12617))+((x12616*(r00*r00)))+(((-2.0)*x12618*x12619))+x12617+(r02*r02));
j4eval[0]=x12620;
j4eval[1]=IKsign(x12620);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12618))+x12619))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12621=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12621);
rxp0_2=(py*r00);
rxp1_0=(r21*x12621);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12622=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12622)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12622)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12623=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12623);
rxp0_2=(py*r00);
rxp1_0=(r21*x12623);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12624=IKPowWithIntegerCheck(r12,-1);
if(!x12624.valid){
continue;
}
CheckValue<IkReal> x12625=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12625.valid){
continue;
}
if( IKabs(((x12624.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12625.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12624.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12625.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12624.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12625.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12626=IKsin(j4);
IkReal x12627=IKcos(j4);
IkReal x12628=((1.0)*cj2);
IkReal x12629=((1.0)*cj5*r00);
IkReal x12630=(sj5*x12627);
IkReal x12631=(sj5*x12626);
IkReal x12632=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12627);
evalcond[1]=((((-1.0)*x12626*x12632))+((r21*x12631)));
evalcond[2]=(((r01*x12630))+(((-1.0)*x12627*x12629)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r12*x12626))+(((-1.0)*sj1*x12628)));
evalcond[4]=((-1.0)+((r01*x12631))+(((-1.0)*x12626*x12629)));
evalcond[5]=((((-1.0)*x12627*x12632))+((sj1*sj2))+((r21*x12630))+(((-1.0)*cj1*x12628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12633=((1.0)*cj5);
CheckValue<IkReal> x12634=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12633))),-1);
if(!x12634.valid){
continue;
}
CheckValue<IkReal> x12635=IKPowWithIntegerCheck(((((-1.0)*r20*x12633))+((r21*sj5))),-1);
if(!x12635.valid){
continue;
}
if( IKabs(x12634.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12635.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12634.value)+IKsqr(((x12635.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12634.value, ((x12635.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12636=IKsin(j4);
IkReal x12637=IKcos(j4);
IkReal x12638=((1.0)*cj2);
IkReal x12639=((1.0)*cj5*r00);
IkReal x12640=(sj5*x12637);
IkReal x12641=(sj5*x12636);
IkReal x12642=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12637);
evalcond[1]=((((-1.0)*x12636*x12642))+((r21*x12641)));
evalcond[2]=((((-1.0)*x12637*x12639))+((r01*x12640)));
evalcond[3]=(((r12*x12636))+(((-1.0)*sj1*x12638))+(((-1.0)*cj1*sj2)));
evalcond[4]=((-1.0)+(((-1.0)*x12636*x12639))+((r01*x12641)));
evalcond[5]=((((-1.0)*x12637*x12642))+((sj1*sj2))+(((-1.0)*cj1*x12638))+((r21*x12640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12643=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12643);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12643);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12644=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12644)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12644)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12645=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12645);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12645);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12646=IKPowWithIntegerCheck(r22,-1);
if(!x12646.valid){
continue;
}
CheckValue<IkReal> x12647=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12647.valid){
continue;
}
if( IKabs(((x12646.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12647.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12646.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12647.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12646.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12647.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12648=IKsin(j4);
IkReal x12649=IKcos(j4);
IkReal x12650=((1.0)*cj5);
IkReal x12651=((1.0)*cj2);
IkReal x12652=(sj5*x12649);
IkReal x12653=(sj5*x12648);
evalcond[0]=((-1.0)*r22*x12649);
evalcond[1]=((((-1.0)*cj1*x12651))+((sj1*sj2))+((r22*x12648)));
evalcond[2]=(((r11*x12653))+(((-1.0)*r10*x12648*x12650)));
evalcond[3]=((((-1.0)*r00*x12649*x12650))+((r01*x12652)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12648*x12650))+((r01*x12653)));
evalcond[5]=((((-1.0)*r10*x12649*x12650))+((r11*x12652))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12654=((1.0)*cj5);
CheckValue<IkReal> x12655=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12654))),-1);
if(!x12655.valid){
continue;
}
CheckValue<IkReal> x12656=IKPowWithIntegerCheck(((((-1.0)*r10*x12654))+((r11*sj5))),-1);
if(!x12656.valid){
continue;
}
if( IKabs(x12655.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12656.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12655.value)+IKsqr(((x12656.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12655.value, ((x12656.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12657=IKsin(j4);
IkReal x12658=IKcos(j4);
IkReal x12659=((1.0)*cj5);
IkReal x12660=((1.0)*cj2);
IkReal x12661=(sj5*x12658);
IkReal x12662=(sj5*x12657);
evalcond[0]=((-1.0)*r22*x12658);
evalcond[1]=((((-1.0)*cj1*x12660))+((r22*x12657))+((sj1*sj2)));
evalcond[2]=((((-1.0)*r10*x12657*x12659))+((r11*x12662)));
evalcond[3]=((((-1.0)*r00*x12658*x12659))+((r01*x12661)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12657*x12659))+((r01*x12662)));
evalcond[5]=((((-1.0)*r10*x12658*x12659))+(((-1.0)*cj1*sj2))+((r11*x12661))+(((-1.0)*sj1*x12660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12663=cj5*cj5;
IkReal x12664=r01*r01;
IkReal x12665=(r01*sj5);
IkReal x12666=(cj5*r00);
CheckValue<IkReal> x12667 = IKatan2WithCheck(IkReal(((((-1.0)*x12666))+x12665)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12667.valid){
continue;
}
CheckValue<IkReal> x12668=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12665*x12666))+(((-1.0)*x12663*x12664))+x12664+(r02*r02)+((x12663*(r00*r00))))),-1);
if(!x12668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12667.value)+(((1.5707963267949)*(x12668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12669=IKcos(j4);
IkReal x12670=IKsin(j4);
IkReal x12671=(cj5*r00);
IkReal x12672=(cj5*r10);
IkReal x12673=(r21*sj5);
IkReal x12674=((1.0)*cj2);
IkReal x12675=(cj5*r20);
IkReal x12676=((1.0)*x12669);
IkReal x12677=((1.0)*x12670);
IkReal x12678=(sj5*x12670);
IkReal x12679=(sj5*x12669);
evalcond[0]=(((r02*x12670))+(((-1.0)*x12671*x12676))+((r01*x12679)));
evalcond[1]=((((-1.0)*r22*x12676))+(((-1.0)*x12675*x12677))+((x12670*x12673)));
evalcond[2]=((((-1.0)*r12*x12676))+((r11*x12678))+(((-1.0)*x12672*x12677)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12676))+(((-1.0)*x12671*x12677))+((r01*x12678)));
evalcond[4]=((((-1.0)*cj1*x12674))+(((-1.0)*x12675*x12676))+((x12669*x12673))+((r22*x12670))+((sj1*sj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x12670))+((r11*x12679))+(((-1.0)*x12672*x12676))+(((-1.0)*sj1*x12674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12680=((1.0)*cj5);
CheckValue<IkReal> x12681 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12680))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12681.valid){
continue;
}
CheckValue<IkReal> x12682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12680)))),-1);
if(!x12682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12681.value)+(((1.5707963267949)*(x12682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12683=IKcos(j4);
IkReal x12684=IKsin(j4);
IkReal x12685=(cj5*r00);
IkReal x12686=(cj5*r10);
IkReal x12687=(r21*sj5);
IkReal x12688=((1.0)*cj2);
IkReal x12689=(cj5*r20);
IkReal x12690=((1.0)*x12683);
IkReal x12691=((1.0)*x12684);
IkReal x12692=(sj5*x12684);
IkReal x12693=(sj5*x12683);
evalcond[0]=(((r02*x12684))+((r01*x12693))+(((-1.0)*x12685*x12690)));
evalcond[1]=((((-1.0)*r22*x12690))+((x12684*x12687))+(((-1.0)*x12689*x12691)));
evalcond[2]=((((-1.0)*r12*x12690))+((r11*x12692))+(((-1.0)*x12686*x12691)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12690))+((r01*x12692))+(((-1.0)*x12685*x12691)));
evalcond[4]=((((-1.0)*cj1*x12688))+((x12683*x12687))+((sj1*sj2))+(((-1.0)*x12689*x12690))+((r22*x12684)));
evalcond[5]=((((-1.0)*sj1*x12688))+((r12*x12684))+(((-1.0)*cj1*sj2))+((r11*x12693))+(((-1.0)*x12686*x12690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12694=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12694.valid){
continue;
}
CheckValue<IkReal> x12695 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12694.value)))+(x12695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12696=IKcos(j4);
IkReal x12697=IKsin(j4);
IkReal x12698=(cj5*r00);
IkReal x12699=(cj5*r10);
IkReal x12700=(r21*sj5);
IkReal x12701=((1.0)*cj2);
IkReal x12702=(cj5*r20);
IkReal x12703=((1.0)*x12696);
IkReal x12704=((1.0)*x12697);
IkReal x12705=(sj5*x12697);
IkReal x12706=(sj5*x12696);
evalcond[0]=(((r02*x12697))+(((-1.0)*x12698*x12703))+((r01*x12706)));
evalcond[1]=((((-1.0)*x12702*x12704))+((x12697*x12700))+(((-1.0)*r22*x12703)));
evalcond[2]=(((r11*x12705))+(((-1.0)*x12699*x12704))+(((-1.0)*r12*x12703)));
evalcond[3]=((-1.0)+(((-1.0)*x12698*x12704))+((r01*x12705))+(((-1.0)*r02*x12703)));
evalcond[4]=((((-1.0)*x12702*x12703))+((x12696*x12700))+((r22*x12697))+((sj1*sj2))+(((-1.0)*cj1*x12701)));
evalcond[5]=(((r11*x12706))+(((-1.0)*sj1*x12701))+(((-1.0)*cj1*sj2))+((r12*x12697))+(((-1.0)*x12699*x12703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12707=((-1.0)*r10);
IkReal x12709 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12709)==0){
continue;
}
IkReal x12708=pow(x12709,-0.5);
CheckValue<IkReal> x12710 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12707),IKFAST_ATAN2_MAGTHRESH);
if(!x12710.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12710.value));
IkReal gconst31=(r11*x12708);
IkReal gconst32=(x12707*x12708);
CheckValue<IkReal> x12711 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12711.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12711.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12712=((-1.0)*r10);
IkReal x12713=x12708;
CheckValue<IkReal> x12715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12712),IKFAST_ATAN2_MAGTHRESH);
if(!x12715.valid){
continue;
}
IkReal x12714=((-1.0)*(x12715.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12714;
IkReal gconst30=x12714;
IkReal gconst31=(r11*x12713);
IkReal gconst32=(x12712*x12713);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12716=((-1.0)*r10);
IkReal x12717=x12708;
CheckValue<IkReal> x12719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12716),IKFAST_ATAN2_MAGTHRESH);
if(!x12719.valid){
continue;
}
IkReal x12718=((-1.0)*(x12719.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12718;
IkReal gconst30=x12718;
IkReal gconst31=(r11*x12717);
IkReal gconst32=(x12716*x12717);
CheckValue<IkReal> x12727=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12727.valid){
continue;
}
IkReal x12720=x12727.value;
IkReal x12721=(sj3*x12720);
IkReal x12722=(r20*x12721);
IkReal x12723=(r00*x12721);
IkReal x12724=(r01*x12721);
IkReal x12725=(r21*x12721);
IkReal x12726=(r10*r11*x12721);
j4eval[0]=IKsign((((r01*r10*r11*x12722))+((r00*x12722*(r10*r10)))+((r21*x12724*(r11*r11)))+((r10*r11*r21*x12723))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12728=gconst31*gconst31;
IkReal x12729=gconst32*gconst32;
IkReal x12730=(r01*r20);
IkReal x12731=(r00*r21);
IkReal x12732=((1.0)*cj3);
IkReal x12733=(r01*r21);
IkReal x12734=(gconst32*sj3);
IkReal x12735=(cj3*gconst31*gconst32);
IkReal x12736=(gconst31*r00*sj3);
CheckValue<IkReal> x12737 = IKatan2WithCheck(IkReal((((r01*r22*x12734))+((r22*x12736)))),IkReal(((((-1.0)*sj3*x12729*x12730))+(((-1.0)*gconst31*r00*r20*x12734))+((sj3*x12728*x12731))+((gconst31*x12733*x12734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12737.valid){
continue;
}
CheckValue<IkReal> x12738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12728*x12732*x12733))+((x12730*x12735))+(((-1.0)*r00*r20*x12729*x12732))+((x12731*x12735))+(((-1.0)*r02*r22*x12732)))),-1);
if(!x12738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12737.value)+(((1.5707963267949)*(x12738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12739=IKsin(j4);
IkReal x12740=IKcos(j4);
IkReal x12741=(sj1*sj2);
IkReal x12742=(gconst31*r00);
IkReal x12743=(r21*sj3);
IkReal x12744=(cj3*gconst32);
IkReal x12745=(gconst31*r11);
IkReal x12746=(gconst31*sj3);
IkReal x12747=(gconst31*r01);
IkReal x12748=((1.0)*cj2);
IkReal x12749=(gconst32*r10);
IkReal x12750=(cj1*sj2);
IkReal x12751=(cj3*gconst31);
IkReal x12752=(gconst32*r00);
IkReal x12753=(gconst32*sj3);
IkReal x12754=(gconst32*r20);
IkReal x12755=(gconst31*r21);
IkReal x12756=(cj1*x12748);
IkReal x12757=((1.0)*x12740);
IkReal x12758=((1.0)*x12739);
IkReal x12759=(cj3*x12740);
IkReal x12760=(sj3*x12740);
IkReal x12761=(cj3*x12739);
evalcond[0]=((((-1.0)*r22*x12757))+(((-1.0)*x12754*x12758))+((x12739*x12755)));
evalcond[1]=((((-1.0)*r12*x12757))+(((-1.0)*x12749*x12758))+((x12739*x12745)));
evalcond[2]=((-1.0)+(((-1.0)*x12752*x12758))+(((-1.0)*r02*x12757))+((x12739*x12747)));
evalcond[3]=(((sj3*x12742))+((r02*x12761))+((r01*x12753))+(((-1.0)*r00*x12744*x12757))+((x12747*x12759)));
evalcond[4]=(((cj3*x12742))+(((-1.0)*r01*x12746*x12757))+((x12752*x12760))+(((-1.0)*r02*sj3*x12758))+((r01*x12744)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x12744*x12757))+((r22*x12761))+((r21*x12740*x12751))+x12750+((gconst32*x12743))+((r20*x12746)));
evalcond[6]=(((r12*x12761))+((r11*x12753))+(((-1.0)*x12756))+x12741+((r10*x12746))+(((-1.0)*r10*x12744*x12757))+((x12745*x12759)));
evalcond[7]=((((-1.0)*gconst31*x12743*x12757))+(((-1.0)*x12756))+x12741+((r20*x12751))+(((-1.0)*r22*sj3*x12758))+((r21*x12744))+((r20*x12740*x12753)));
evalcond[8]=(((r11*x12744))+(((-1.0)*x12750))+(((-1.0)*sj1*x12748))+(((-1.0)*sj3*x12745*x12757))+((r10*x12751))+((x12749*x12760))+(((-1.0)*r12*sj3*x12758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12762=gconst31*gconst31;
IkReal x12763=gconst32*gconst32;
IkReal x12764=(r00*r20);
IkReal x12765=(cj3*r22);
IkReal x12766=(gconst31*r00);
IkReal x12767=(gconst32*r01);
IkReal x12768=((1.0)*gconst32);
IkReal x12769=(cj3*gconst31);
IkReal x12770=((1.0)*r20);
IkReal x12771=(r21*x12762);
CheckValue<IkReal> x12772 = IKatan2WithCheck(IkReal((((x12765*x12767))+((x12765*x12766)))),IkReal((((cj3*r00*x12771))+(((-1.0)*cj3*r01*x12763*x12770))+((r21*x12767*x12769))+(((-1.0)*x12764*x12768*x12769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12772.valid){
continue;
}
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*sj3*x12767*x12770))+((sj3*x12763*x12764))+(((-1.0)*r21*sj3*x12766*x12768))+((r01*sj3*x12771))+((r02*r22*sj3)))),-1);
if(!x12773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12772.value)+(((1.5707963267949)*(x12773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12774=IKsin(j4);
IkReal x12775=IKcos(j4);
IkReal x12776=(sj1*sj2);
IkReal x12777=(gconst31*r00);
IkReal x12778=(r21*sj3);
IkReal x12779=(cj3*gconst32);
IkReal x12780=(gconst31*r11);
IkReal x12781=(gconst31*sj3);
IkReal x12782=(gconst31*r01);
IkReal x12783=((1.0)*cj2);
IkReal x12784=(gconst32*r10);
IkReal x12785=(cj1*sj2);
IkReal x12786=(cj3*gconst31);
IkReal x12787=(gconst32*r00);
IkReal x12788=(gconst32*sj3);
IkReal x12789=(gconst32*r20);
IkReal x12790=(gconst31*r21);
IkReal x12791=(cj1*x12783);
IkReal x12792=((1.0)*x12775);
IkReal x12793=((1.0)*x12774);
IkReal x12794=(cj3*x12775);
IkReal x12795=(sj3*x12775);
IkReal x12796=(cj3*x12774);
evalcond[0]=((((-1.0)*r22*x12792))+((x12774*x12790))+(((-1.0)*x12789*x12793)));
evalcond[1]=(((x12774*x12780))+(((-1.0)*r12*x12792))+(((-1.0)*x12784*x12793)));
evalcond[2]=((-1.0)+((x12774*x12782))+(((-1.0)*r02*x12792))+(((-1.0)*x12787*x12793)));
evalcond[3]=(((r02*x12796))+((r01*x12788))+(((-1.0)*r00*x12779*x12792))+((sj3*x12777))+((x12782*x12794)));
evalcond[4]=(((r01*x12779))+((cj3*x12777))+(((-1.0)*r02*sj3*x12793))+((x12787*x12795))+(((-1.0)*r01*x12781*x12792)));
evalcond[5]=(((r20*x12781))+((cj2*sj1))+(((-1.0)*r20*x12779*x12792))+((r21*x12775*x12786))+x12785+((r22*x12796))+((gconst32*x12778)));
evalcond[6]=((((-1.0)*x12791))+((x12780*x12794))+((r11*x12788))+((r10*x12781))+((r12*x12796))+x12776+(((-1.0)*r10*x12779*x12792)));
evalcond[7]=(((r20*x12786))+(((-1.0)*x12791))+(((-1.0)*r22*sj3*x12793))+((r20*x12775*x12788))+((r21*x12779))+x12776+(((-1.0)*gconst31*x12778*x12792)));
evalcond[8]=(((x12784*x12795))+(((-1.0)*sj3*x12780*x12792))+((r10*x12786))+((r11*x12779))+(((-1.0)*sj1*x12783))+(((-1.0)*r12*sj3*x12793))+(((-1.0)*x12785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12797.valid){
continue;
}
CheckValue<IkReal> x12798 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst31*r11))+(((-1.0)*gconst32*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12797.value)))+(x12798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12799=IKsin(j4);
IkReal x12800=IKcos(j4);
IkReal x12801=(sj1*sj2);
IkReal x12802=(gconst31*r00);
IkReal x12803=(r21*sj3);
IkReal x12804=(cj3*gconst32);
IkReal x12805=(gconst31*r11);
IkReal x12806=(gconst31*sj3);
IkReal x12807=(gconst31*r01);
IkReal x12808=((1.0)*cj2);
IkReal x12809=(gconst32*r10);
IkReal x12810=(cj1*sj2);
IkReal x12811=(cj3*gconst31);
IkReal x12812=(gconst32*r00);
IkReal x12813=(gconst32*sj3);
IkReal x12814=(gconst32*r20);
IkReal x12815=(gconst31*r21);
IkReal x12816=(cj1*x12808);
IkReal x12817=((1.0)*x12800);
IkReal x12818=((1.0)*x12799);
IkReal x12819=(cj3*x12800);
IkReal x12820=(sj3*x12800);
IkReal x12821=(cj3*x12799);
evalcond[0]=((((-1.0)*x12814*x12818))+((x12799*x12815))+(((-1.0)*r22*x12817)));
evalcond[1]=((((-1.0)*x12809*x12818))+((x12799*x12805))+(((-1.0)*r12*x12817)));
evalcond[2]=((-1.0)+((x12799*x12807))+(((-1.0)*x12812*x12818))+(((-1.0)*r02*x12817)));
evalcond[3]=(((x12807*x12819))+((r01*x12813))+(((-1.0)*r00*x12804*x12817))+((r02*x12821))+((sj3*x12802)));
evalcond[4]=(((cj3*x12802))+((x12812*x12820))+((r01*x12804))+(((-1.0)*r01*x12806*x12817))+(((-1.0)*r02*sj3*x12818)));
evalcond[5]=(((cj2*sj1))+x12810+((r20*x12806))+(((-1.0)*r20*x12804*x12817))+((r22*x12821))+((gconst32*x12803))+((r21*x12800*x12811)));
evalcond[6]=(((r10*x12806))+x12801+(((-1.0)*x12816))+(((-1.0)*r10*x12804*x12817))+((r12*x12821))+((r11*x12813))+((x12805*x12819)));
evalcond[7]=(x12801+(((-1.0)*x12816))+((r20*x12811))+(((-1.0)*r22*sj3*x12818))+((r20*x12800*x12813))+((r21*x12804))+(((-1.0)*gconst31*x12803*x12817)));
evalcond[8]=((((-1.0)*sj1*x12808))+(((-1.0)*sj3*x12805*x12817))+((r11*x12804))+(((-1.0)*x12810))+(((-1.0)*r12*sj3*x12818))+((x12809*x12820))+((r10*x12811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12822=((-1.0)*r11);
IkReal x12824 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12824)==0){
continue;
}
IkReal x12823=pow(x12824,-0.5);
CheckValue<IkReal> x12825 = IKatan2WithCheck(IkReal(x12822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12825.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12825.value))));
IkReal gconst34=(x12822*x12823);
IkReal gconst35=((1.0)*r10*x12823);
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12826.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12827=((-1.0)*r11);
CheckValue<IkReal> x12830 = IKatan2WithCheck(IkReal(x12827),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12830.valid){
continue;
}
IkReal x12828=((1.0)*(x12830.value));
IkReal x12829=x12823;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x12828)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12828)));
IkReal gconst34=(x12827*x12829);
IkReal gconst35=((1.0)*r10*x12829);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12831=gconst35*gconst35;
IkReal x12832=gconst34*gconst34;
IkReal x12833=((1.0)*gconst35);
IkReal x12834=(r21*sj3);
IkReal x12835=(cj3*r21);
IkReal x12836=(gconst35*r01);
IkReal x12837=(r01*r20);
IkReal x12838=(cj3*gconst34*r00);
CheckValue<IkReal> x12839 = IKatan2WithCheck(IkReal((((cj3*r22*x12836))+((r22*x12838)))),IkReal(((((-1.0)*r20*x12833*x12838))+((gconst34*x12835*x12836))+(((-1.0)*cj3*x12831*x12837))+((r00*x12832*x12835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12839.valid){
continue;
}
CheckValue<IkReal> x12840=IKPowWithIntegerCheck(IKsign((((r01*x12832*x12834))+(((-1.0)*gconst34*r00*x12833*x12834))+((r00*r20*sj3*x12831))+(((-1.0)*gconst34*sj3*x12833*x12837))+((r02*r22*sj3)))),-1);
if(!x12840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12839.value)+(((1.5707963267949)*(x12840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12841=IKsin(j4);
IkReal x12842=IKcos(j4);
IkReal x12843=(sj1*sj2);
IkReal x12844=(gconst35*r00);
IkReal x12845=(gconst35*sj3);
IkReal x12846=(gconst34*r20);
IkReal x12847=(cj3*gconst34);
IkReal x12848=(gconst34*r21);
IkReal x12849=((1.0)*cj1);
IkReal x12850=(cj2*sj1);
IkReal x12851=(gconst35*r10);
IkReal x12852=(gconst34*sj3);
IkReal x12853=(cj3*gconst35);
IkReal x12854=(cj2*x12849);
IkReal x12855=((1.0)*x12842);
IkReal x12856=((1.0)*x12841);
IkReal x12857=(cj3*x12841);
IkReal x12858=(gconst34*x12841);
evalcond[0]=((((-1.0)*r22*x12855))+((x12841*x12848))+(((-1.0)*gconst35*r20*x12856)));
evalcond[1]=((((-1.0)*x12851*x12856))+(((-1.0)*r12*x12855))+((r11*x12858)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12855))+((r01*x12858))+(((-1.0)*x12844*x12856)));
evalcond[3]=(((r01*x12842*x12847))+(((-1.0)*cj3*x12844*x12855))+((r00*x12852))+((r01*x12845))+((r02*x12857)));
evalcond[4]=((((-1.0)*r02*sj3*x12856))+(((-1.0)*r01*x12852*x12855))+((r00*x12847))+((r01*x12853))+((sj3*x12842*x12844)));
evalcond[5]=(x12850+((r22*x12857))+((cj1*sj2))+((r21*x12842*x12847))+(((-1.0)*r20*x12853*x12855))+((sj3*x12846))+((r21*x12845)));
evalcond[6]=((((-1.0)*cj3*x12851*x12855))+x12843+((r10*x12852))+((r11*x12845))+((r12*x12857))+(((-1.0)*x12854))+((r11*x12842*x12847)));
evalcond[7]=((((-1.0)*sj3*x12848*x12855))+x12843+((r21*x12853))+(((-1.0)*x12854))+(((-1.0)*r22*sj3*x12856))+((r20*x12842*x12845))+((cj3*x12846)));
evalcond[8]=(((r10*x12847))+(((-1.0)*x12850))+(((-1.0)*r11*x12852*x12855))+((r11*x12853))+((r10*x12842*x12845))+(((-1.0)*sj2*x12849))+(((-1.0)*r12*sj3*x12856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12859=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst35*r10))+((gconst34*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12859.value)))+(x12860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12861=IKsin(j4);
IkReal x12862=IKcos(j4);
IkReal x12863=(sj1*sj2);
IkReal x12864=(gconst35*r00);
IkReal x12865=(gconst35*sj3);
IkReal x12866=(gconst34*r20);
IkReal x12867=(cj3*gconst34);
IkReal x12868=(gconst34*r21);
IkReal x12869=((1.0)*cj1);
IkReal x12870=(cj2*sj1);
IkReal x12871=(gconst35*r10);
IkReal x12872=(gconst34*sj3);
IkReal x12873=(cj3*gconst35);
IkReal x12874=(cj2*x12869);
IkReal x12875=((1.0)*x12862);
IkReal x12876=((1.0)*x12861);
IkReal x12877=(cj3*x12861);
IkReal x12878=(gconst34*x12861);
evalcond[0]=((((-1.0)*r22*x12875))+((x12861*x12868))+(((-1.0)*gconst35*r20*x12876)));
evalcond[1]=((((-1.0)*x12871*x12876))+(((-1.0)*r12*x12875))+((r11*x12878)));
evalcond[2]=((-1.0)+(((-1.0)*x12864*x12876))+((r01*x12878))+(((-1.0)*r02*x12875)));
evalcond[3]=(((r00*x12872))+((r02*x12877))+(((-1.0)*cj3*x12864*x12875))+((r01*x12862*x12867))+((r01*x12865)));
evalcond[4]=((((-1.0)*r02*sj3*x12876))+((r01*x12873))+((sj3*x12862*x12864))+((r00*x12867))+(((-1.0)*r01*x12872*x12875)));
evalcond[5]=(x12870+((r21*x12865))+(((-1.0)*r20*x12873*x12875))+((r22*x12877))+((cj1*sj2))+((r21*x12862*x12867))+((sj3*x12866)));
evalcond[6]=(x12863+((r11*x12865))+((r10*x12872))+((r11*x12862*x12867))+((r12*x12877))+(((-1.0)*x12874))+(((-1.0)*cj3*x12871*x12875)));
evalcond[7]=(x12863+((r20*x12862*x12865))+((cj3*x12866))+((r21*x12873))+(((-1.0)*x12874))+(((-1.0)*sj3*x12868*x12875))+(((-1.0)*r22*sj3*x12876)));
evalcond[8]=((((-1.0)*sj2*x12869))+(((-1.0)*r11*x12872*x12875))+((r11*x12873))+(((-1.0)*x12870))+((r10*x12862*x12865))+((r10*x12867))+(((-1.0)*r12*sj3*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12880 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12880)==0){
continue;
}
IkReal x12879=pow(x12880,-0.5);
CheckValue<IkReal> x12881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12881.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12881.value));
IkReal gconst37=((-1.0)*r21*x12879);
IkReal gconst38=(r20*x12879);
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12882.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12885 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12885.valid){
continue;
}
IkReal x12883=((-1.0)*(x12885.value));
IkReal x12884=x12879;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12883;
IkReal gconst36=x12883;
IkReal gconst37=((-1.0)*r21*x12884);
IkReal gconst38=(r20*x12884);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
IkReal x12886=((-1.0)*(x12888.value));
IkReal x12887=x12879;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12886;
IkReal gconst36=x12886;
IkReal gconst37=((-1.0)*r21*x12887);
IkReal gconst38=(r20*x12887);
CheckValue<IkReal> x12896=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12896.valid){
continue;
}
IkReal x12889=x12896.value;
IkReal x12890=(sj3*x12889);
IkReal x12891=(r11*x12890);
IkReal x12892=(r00*x12890);
IkReal x12893=(r01*x12890);
IkReal x12894=(r10*x12890);
IkReal x12895=(r20*r21*x12890);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x12893))+((r01*x12891*(r21*r21)))+((r00*r20*r21*x12891))+((r10*x12892*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12897=gconst37*gconst37;
IkReal x12898=gconst38*gconst38;
IkReal x12899=((1.0)*cj3);
IkReal x12900=(gconst38*r01);
IkReal x12901=(cj3*gconst37);
IkReal x12902=(r12*sj3);
IkReal x12903=(gconst37*r00);
IkReal x12904=(r00*r11);
IkReal x12905=((1.0)*r10*sj3);
CheckValue<IkReal> x12906=IKPowWithIntegerCheck(IKsign((((r10*x12900*x12901))+((gconst38*x12901*x12904))+(((-1.0)*r02*r12*x12899))+(((-1.0)*r01*r11*x12897*x12899))+(((-1.0)*r00*r10*x12898*x12899)))),-1);
if(!x12906.valid){
continue;
}
CheckValue<IkReal> x12907 = IKatan2WithCheck(IkReal((((x12902*x12903))+((x12900*x12902)))),IkReal(((((-1.0)*gconst38*x12903*x12905))+((sj3*x12897*x12904))+(((-1.0)*r01*x12898*x12905))+((gconst37*r11*sj3*x12900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12906.value)))+(x12907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12908=IKsin(j4);
IkReal x12909=IKcos(j4);
IkReal x12910=(sj1*sj2);
IkReal x12911=(gconst38*sj3);
IkReal x12912=(cj3*gconst38);
IkReal x12913=(cj3*gconst37);
IkReal x12914=((1.0)*cj1);
IkReal x12915=(gconst37*sj3);
IkReal x12916=(cj2*sj1);
IkReal x12917=(cj2*x12914);
IkReal x12918=((1.0)*x12909);
IkReal x12919=((1.0)*x12908);
IkReal x12920=(cj3*x12908);
IkReal x12921=(gconst37*x12908);
evalcond[0]=((((-1.0)*r22*x12918))+((r21*x12921))+(((-1.0)*gconst38*r20*x12919)));
evalcond[1]=(((r11*x12921))+(((-1.0)*gconst38*r10*x12919))+(((-1.0)*r12*x12918)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12918))+((r01*x12921))+(((-1.0)*gconst38*r00*x12919)));
evalcond[3]=(((r00*x12915))+((r02*x12920))+(((-1.0)*r00*x12912*x12918))+((r01*x12909*x12913))+((r01*x12911)));
evalcond[4]=(((r00*x12913))+((r00*x12909*x12911))+(((-1.0)*r01*x12915*x12918))+(((-1.0)*r02*sj3*x12919))+((r01*x12912)));
evalcond[5]=(x12916+((cj1*sj2))+(((-1.0)*r20*x12912*x12918))+((r20*x12915))+((r21*x12911))+((r21*x12909*x12913))+((r22*x12920)));
evalcond[6]=(x12910+(((-1.0)*x12917))+((r11*x12909*x12913))+((r10*x12915))+(((-1.0)*r10*x12912*x12918))+((r11*x12911))+((r12*x12920)));
evalcond[7]=(x12910+(((-1.0)*x12917))+(((-1.0)*r21*x12915*x12918))+((r20*x12913))+((r21*x12912))+(((-1.0)*r22*sj3*x12919))+((r20*x12909*x12911)));
evalcond[8]=((((-1.0)*r11*x12915*x12918))+(((-1.0)*r12*sj3*x12919))+(((-1.0)*x12916))+((r10*x12909*x12911))+(((-1.0)*sj2*x12914))+((r10*x12913))+((r11*x12912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12922=gconst37*gconst37;
IkReal x12923=gconst38*gconst38;
IkReal x12924=(r10*sj3);
IkReal x12925=(r00*r11);
IkReal x12926=(r01*r11);
IkReal x12927=(cj3*gconst37);
IkReal x12928=(cj3*r10);
IkReal x12929=((1.0)*gconst37*gconst38);
CheckValue<IkReal> x12930 = IKatan2WithCheck(IkReal((((cj3*gconst38*r01*r12))+((r00*r12*x12927)))),IkReal(((((-1.0)*r01*x12923*x12928))+((gconst38*x12926*x12927))+(((-1.0)*gconst38*r00*r10*x12927))+((cj3*x12922*x12925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12930.valid){
continue;
}
CheckValue<IkReal> x12931=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x12925*x12929))+((r00*x12923*x12924))+((sj3*x12922*x12926))+(((-1.0)*r01*x12924*x12929)))),-1);
if(!x12931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12930.value)+(((1.5707963267949)*(x12931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12932=IKsin(j4);
IkReal x12933=IKcos(j4);
IkReal x12934=(sj1*sj2);
IkReal x12935=(gconst38*sj3);
IkReal x12936=(cj3*gconst38);
IkReal x12937=(cj3*gconst37);
IkReal x12938=((1.0)*cj1);
IkReal x12939=(gconst37*sj3);
IkReal x12940=(cj2*sj1);
IkReal x12941=(cj2*x12938);
IkReal x12942=((1.0)*x12933);
IkReal x12943=((1.0)*x12932);
IkReal x12944=(cj3*x12932);
IkReal x12945=(gconst37*x12932);
evalcond[0]=((((-1.0)*gconst38*r20*x12943))+((r21*x12945))+(((-1.0)*r22*x12942)));
evalcond[1]=((((-1.0)*gconst38*r10*x12943))+((r11*x12945))+(((-1.0)*r12*x12942)));
evalcond[2]=((-1.0)+((r01*x12945))+(((-1.0)*r02*x12942))+(((-1.0)*gconst38*r00*x12943)));
evalcond[3]=((((-1.0)*r00*x12936*x12942))+((r01*x12933*x12937))+((r01*x12935))+((r00*x12939))+((r02*x12944)));
evalcond[4]=((((-1.0)*r01*x12939*x12942))+((r00*x12933*x12935))+(((-1.0)*r02*sj3*x12943))+((r01*x12936))+((r00*x12937)));
evalcond[5]=(x12940+((r20*x12939))+((r22*x12944))+(((-1.0)*r20*x12936*x12942))+((r21*x12933*x12937))+((cj1*sj2))+((r21*x12935)));
evalcond[6]=(x12934+((r11*x12935))+((r11*x12933*x12937))+((r12*x12944))+((r10*x12939))+(((-1.0)*x12941))+(((-1.0)*r10*x12936*x12942)));
evalcond[7]=(x12934+((r20*x12937))+(((-1.0)*r22*sj3*x12943))+(((-1.0)*r21*x12939*x12942))+(((-1.0)*x12941))+((r21*x12936))+((r20*x12933*x12935)));
evalcond[8]=(((r11*x12936))+((r10*x12933*x12935))+(((-1.0)*r11*x12939*x12942))+(((-1.0)*sj2*x12938))+(((-1.0)*r12*sj3*x12943))+((r10*x12937))+(((-1.0)*x12940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12946=((1.0)*gconst38);
CheckValue<IkReal> x12947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12946))+(((-1.0)*gconst37*r10)))),-1);
if(!x12947.valid){
continue;
}
CheckValue<IkReal> x12948 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x12946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12947.value)))+(x12948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12949=IKsin(j4);
IkReal x12950=IKcos(j4);
IkReal x12951=(sj1*sj2);
IkReal x12952=(gconst38*sj3);
IkReal x12953=(cj3*gconst38);
IkReal x12954=(cj3*gconst37);
IkReal x12955=((1.0)*cj1);
IkReal x12956=(gconst37*sj3);
IkReal x12957=(cj2*sj1);
IkReal x12958=(cj2*x12955);
IkReal x12959=((1.0)*x12950);
IkReal x12960=((1.0)*x12949);
IkReal x12961=(cj3*x12949);
IkReal x12962=(gconst37*x12949);
evalcond[0]=((((-1.0)*gconst38*r20*x12960))+(((-1.0)*r22*x12959))+((r21*x12962)));
evalcond[1]=((((-1.0)*r12*x12959))+(((-1.0)*gconst38*r10*x12960))+((r11*x12962)));
evalcond[2]=((-1.0)+((r01*x12962))+(((-1.0)*gconst38*r00*x12960))+(((-1.0)*r02*x12959)));
evalcond[3]=(((r01*x12952))+((r00*x12956))+((r02*x12961))+((r01*x12950*x12954))+(((-1.0)*r00*x12953*x12959)));
evalcond[4]=((((-1.0)*r02*sj3*x12960))+((r01*x12953))+((r00*x12954))+(((-1.0)*r01*x12956*x12959))+((r00*x12950*x12952)));
evalcond[5]=(x12957+((r21*x12950*x12954))+(((-1.0)*r20*x12953*x12959))+((cj1*sj2))+((r21*x12952))+((r22*x12961))+((r20*x12956)));
evalcond[6]=(x12951+(((-1.0)*r10*x12953*x12959))+((r10*x12956))+(((-1.0)*x12958))+((r11*x12952))+((r11*x12950*x12954))+((r12*x12961)));
evalcond[7]=(x12951+((r20*x12950*x12952))+(((-1.0)*r21*x12956*x12959))+((r21*x12953))+(((-1.0)*x12958))+((r20*x12954))+(((-1.0)*r22*sj3*x12960)));
evalcond[8]=(((r10*x12954))+((r10*x12950*x12952))+(((-1.0)*r12*sj3*x12960))+((r11*x12953))+(((-1.0)*r11*x12956*x12959))+(((-1.0)*x12957))+(((-1.0)*sj2*x12955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12964 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12964)==0){
continue;
}
IkReal x12963=pow(x12964,-0.5);
CheckValue<IkReal> x12965 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12965.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12965.value))));
IkReal gconst40=((1.0)*r21*x12963);
IkReal gconst41=((-1.0)*r20*x12963);
CheckValue<IkReal> x12966 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12966.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12966.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12969 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12969.valid){
continue;
}
IkReal x12967=((1.0)*(x12969.value));
IkReal x12968=x12963;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12967)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12967)));
IkReal gconst40=((1.0)*r21*x12968);
IkReal gconst41=((-1.0)*r20*x12968);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12972 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12972.valid){
continue;
}
IkReal x12970=((1.0)*(x12972.value));
IkReal x12971=x12963;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12970)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12970)));
IkReal gconst40=((1.0)*r21*x12971);
IkReal gconst41=((-1.0)*r20*x12971);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
IkReal x12973=((1.0)*(x12975.value));
IkReal x12974=x12963;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12973)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12973)));
IkReal gconst40=((1.0)*r21*x12974);
IkReal gconst41=((-1.0)*r20*x12974);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12976=gconst40*gconst40;
IkReal x12977=gconst41*gconst41;
IkReal x12978=(gconst41*sj3);
IkReal x12979=((1.0)*cj3);
IkReal x12980=(gconst40*r00);
IkReal x12981=((1.0)*r20);
IkReal x12982=(gconst40*r01);
IkReal x12983=(cj3*gconst41);
IkReal x12984=(r21*x12976);
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal((((r22*sj3*x12980))+((r01*r22*x12978)))),IkReal((((r00*sj3*x12984))+(((-1.0)*r01*sj3*x12977*x12981))+(((-1.0)*x12978*x12980*x12981))+((r21*x12978*x12982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
CheckValue<IkReal> x12986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12977*x12979))+(((-1.0)*r02*r22*x12979))+(((-1.0)*r01*x12979*x12984))+((r20*x12982*x12983))+((r21*x12980*x12983)))),-1);
if(!x12986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12985.value)+(((1.5707963267949)*(x12986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12987=IKsin(j4);
IkReal x12988=IKcos(j4);
IkReal x12989=(sj1*sj2);
IkReal x12990=(gconst40*sj3);
IkReal x12991=(gconst41*sj3);
IkReal x12992=(gconst41*r20);
IkReal x12993=(cj3*gconst41);
IkReal x12994=((1.0)*cj2);
IkReal x12995=(cj1*sj2);
IkReal x12996=(cj3*gconst40);
IkReal x12997=(cj1*x12994);
IkReal x12998=((1.0)*x12988);
IkReal x12999=((1.0)*x12987);
IkReal x13000=(cj3*x12987);
IkReal x13001=(gconst40*x12987);
IkReal x13002=(x12988*x12996);
evalcond[0]=((((-1.0)*r22*x12998))+(((-1.0)*x12992*x12999))+((r21*x13001)));
evalcond[1]=((((-1.0)*gconst41*r10*x12999))+(((-1.0)*r12*x12998))+((r11*x13001)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12998))+(((-1.0)*gconst41*r00*x12999))+((r01*x13001)));
evalcond[3]=(((r01*x12991))+((r00*x12990))+((r02*x13000))+((r01*x13002))+(((-1.0)*r00*x12993*x12998)));
evalcond[4]=((((-1.0)*r02*sj3*x12999))+((r01*x12993))+((r00*x12996))+(((-1.0)*r01*x12990*x12998))+((r00*x12988*x12991)));
evalcond[5]=(x12995+((cj2*sj1))+(((-1.0)*cj3*x12992*x12998))+((r21*x12991))+((r20*x12990))+((r22*x13000))+((r21*x13002)));
evalcond[6]=(x12989+((r10*x12990))+(((-1.0)*x12997))+((r12*x13000))+((r11*x12991))+((r11*x13002))+(((-1.0)*r10*x12993*x12998)));
evalcond[7]=(x12989+(((-1.0)*x12997))+((r21*x12993))+(((-1.0)*r22*sj3*x12999))+(((-1.0)*r21*x12990*x12998))+((r20*x12996))+((r20*x12988*x12991)));
evalcond[8]=(((r10*x12996))+(((-1.0)*r12*sj3*x12999))+(((-1.0)*r11*x12990*x12998))+((r11*x12993))+((r10*x12988*x12991))+(((-1.0)*x12995))+(((-1.0)*sj1*x12994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13003=((1.0)*gconst41);
CheckValue<IkReal> x13004 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x13003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13004.valid){
continue;
}
CheckValue<IkReal> x13005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13003))+(((-1.0)*gconst40*r10)))),-1);
if(!x13005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13004.value)+(((1.5707963267949)*(x13005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13006=IKsin(j4);
IkReal x13007=IKcos(j4);
IkReal x13008=(sj1*sj2);
IkReal x13009=(gconst40*sj3);
IkReal x13010=(gconst41*sj3);
IkReal x13011=(gconst41*r20);
IkReal x13012=(cj3*gconst41);
IkReal x13013=((1.0)*cj2);
IkReal x13014=(cj1*sj2);
IkReal x13015=(cj3*gconst40);
IkReal x13016=(cj1*x13013);
IkReal x13017=((1.0)*x13007);
IkReal x13018=((1.0)*x13006);
IkReal x13019=(cj3*x13006);
IkReal x13020=(gconst40*x13006);
IkReal x13021=(x13007*x13015);
evalcond[0]=(((r21*x13020))+(((-1.0)*r22*x13017))+(((-1.0)*x13011*x13018)));
evalcond[1]=((((-1.0)*gconst41*r10*x13018))+((r11*x13020))+(((-1.0)*r12*x13017)));
evalcond[2]=((-1.0)+((r01*x13020))+(((-1.0)*gconst41*r00*x13018))+(((-1.0)*r02*x13017)));
evalcond[3]=(((r00*x13009))+((r01*x13021))+((r01*x13010))+(((-1.0)*r00*x13012*x13017))+((r02*x13019)));
evalcond[4]=(((r00*x13015))+(((-1.0)*r02*sj3*x13018))+((r01*x13012))+(((-1.0)*r01*x13009*x13017))+((r00*x13007*x13010)));
evalcond[5]=((((-1.0)*cj3*x13011*x13017))+((cj2*sj1))+((r21*x13021))+((r21*x13010))+((r20*x13009))+((r22*x13019))+x13014);
evalcond[6]=((((-1.0)*r10*x13012*x13017))+(((-1.0)*x13016))+((r11*x13010))+((r11*x13021))+x13008+((r12*x13019))+((r10*x13009)));
evalcond[7]=(((r21*x13012))+(((-1.0)*r21*x13009*x13017))+(((-1.0)*x13016))+(((-1.0)*r22*sj3*x13018))+((r20*x13015))+((r20*x13007*x13010))+x13008);
evalcond[8]=((((-1.0)*sj1*x13013))+(((-1.0)*x13014))+((r11*x13012))+(((-1.0)*r11*x13009*x13017))+(((-1.0)*r12*sj3*x13018))+((r10*x13007*x13010))+((r10*x13015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13022=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x13022.valid){
continue;
}
CheckValue<IkReal> x13023 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r10))+((gconst40*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13022.value)))+(x13023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13024=IKsin(j4);
IkReal x13025=IKcos(j4);
IkReal x13026=(sj1*sj2);
IkReal x13027=(gconst40*sj3);
IkReal x13028=(gconst41*sj3);
IkReal x13029=(gconst41*r20);
IkReal x13030=(cj3*gconst41);
IkReal x13031=((1.0)*cj2);
IkReal x13032=(cj1*sj2);
IkReal x13033=(cj3*gconst40);
IkReal x13034=(cj1*x13031);
IkReal x13035=((1.0)*x13025);
IkReal x13036=((1.0)*x13024);
IkReal x13037=(cj3*x13024);
IkReal x13038=(gconst40*x13024);
IkReal x13039=(x13025*x13033);
evalcond[0]=((((-1.0)*x13029*x13036))+(((-1.0)*r22*x13035))+((r21*x13038)));
evalcond[1]=(((r11*x13038))+(((-1.0)*r12*x13035))+(((-1.0)*gconst41*r10*x13036)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13035))+((r01*x13038))+(((-1.0)*gconst41*r00*x13036)));
evalcond[3]=(((r01*x13028))+((r00*x13027))+(((-1.0)*r00*x13030*x13035))+((r01*x13039))+((r02*x13037)));
evalcond[4]=(((r01*x13030))+((r00*x13033))+(((-1.0)*r02*sj3*x13036))+(((-1.0)*r01*x13027*x13035))+((r00*x13025*x13028)));
evalcond[5]=(((cj2*sj1))+((r21*x13028))+((r22*x13037))+((r20*x13027))+(((-1.0)*cj3*x13029*x13035))+((r21*x13039))+x13032);
evalcond[6]=(((r11*x13039))+((r12*x13037))+(((-1.0)*r10*x13030*x13035))+((r11*x13028))+x13026+(((-1.0)*x13034))+((r10*x13027)));
evalcond[7]=((((-1.0)*r21*x13027*x13035))+(((-1.0)*r22*sj3*x13036))+((r21*x13030))+x13026+(((-1.0)*x13034))+((r20*x13033))+((r20*x13025*x13028)));
evalcond[8]=((((-1.0)*x13032))+((r10*x13025*x13028))+((r11*x13030))+((r10*x13033))+(((-1.0)*r12*sj3*x13036))+(((-1.0)*r11*x13027*x13035))+(((-1.0)*sj1*x13031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13040=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13040);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13040);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13041=(cj5*r00);
IkReal x13042=(r01*sj5);
j4eval[0]=((((-1.0)*x13041))+x13042);
j4eval[1]=((((-1.0)*sj3*x13042))+((sj3*x13041)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13043=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13043);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13043);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13044=(r01*sj5);
IkReal x13045=((1.0)*cj5*r00);
j4eval[0]=(x13044+(((-1.0)*x13045)));
j4eval[1]=(((cj3*x13044))+(((-1.0)*cj3*x13045)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13046=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13046);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13046);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13047=((1.0)*cj3);
CheckValue<IkReal> x13048=IKPowWithIntegerCheck(cj3,-1);
if(!x13048.valid){
continue;
}
CheckValue<IkReal> x13049=IKPowWithIntegerCheck(r22,-1);
if(!x13049.valid){
continue;
}
CheckValue<IkReal> x13050=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x13050.valid){
continue;
}
if( IKabs(((x13048.value)*(x13049.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13050.value)*(((((-1.0)*cj5*r01*x13047))+(((-1.0)*r00*sj5*x13047)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13048.value)*(x13049.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13050.value)*(((((-1.0)*cj5*r01*x13047))+(((-1.0)*r00*sj5*x13047))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13048.value)*(x13049.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13050.value)*(((((-1.0)*cj5*r01*x13047))+(((-1.0)*r00*sj5*x13047))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13051=IKsin(j4);
IkReal x13052=IKcos(j4);
IkReal x13053=(sj1*sj2);
IkReal x13054=(cj5*sj3);
IkReal x13055=(r11*sj5);
IkReal x13056=(cj3*cj5);
IkReal x13057=((1.0)*cj1);
IkReal x13058=(cj3*sj5);
IkReal x13059=(sj3*sj5);
IkReal x13060=(cj2*sj1);
IkReal x13061=(r01*sj5);
IkReal x13062=((1.0)*sj3);
IkReal x13063=(cj2*x13057);
IkReal x13064=(r10*x13052);
IkReal x13065=(r22*x13051);
IkReal x13066=(cj3*x13052);
IkReal x13067=((1.0)*cj5*x13051);
evalcond[0]=((-1.0)*r22*x13052);
evalcond[1]=(((cj1*sj2))+((cj3*x13065))+x13060);
evalcond[2]=((((-1.0)*r10*x13067))+((x13051*x13055)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13067))+((x13051*x13061)));
evalcond[4]=((((-1.0)*x13062*x13065))+x13053+(((-1.0)*x13063)));
evalcond[5]=(((r00*x13052*x13054))+(((-1.0)*r01*x13052*x13059))+((r00*x13058))+((r01*x13056)));
evalcond[6]=(((r01*x13052*x13058))+((r00*x13059))+(((-1.0)*r00*x13052*x13056))+((r01*x13054)));
evalcond[7]=(((x13055*x13066))+((r10*x13059))+(((-1.0)*x13056*x13064))+x13053+((r11*x13054))+(((-1.0)*x13063)));
evalcond[8]=((((-1.0)*x13060))+((x13054*x13064))+((r10*x13058))+(((-1.0)*x13052*x13055*x13062))+((r11*x13056))+(((-1.0)*sj2*x13057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13068=((1.0)*sj3);
IkReal x13069=(r01*sj5);
IkReal x13070=((1.0)*cj5*r00);
CheckValue<IkReal> x13071=IKPowWithIntegerCheck(((((-1.0)*x13070))+x13069),-1);
if(!x13071.valid){
continue;
}
CheckValue<IkReal> x13072=IKPowWithIntegerCheck((((cj3*x13069))+(((-1.0)*cj3*x13070))),-1);
if(!x13072.valid){
continue;
}
if( IKabs(x13071.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13072.value)*(((((-1.0)*cj5*r01*x13068))+(((-1.0)*r00*sj5*x13068)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13071.value)+IKsqr(((x13072.value)*(((((-1.0)*cj5*r01*x13068))+(((-1.0)*r00*sj5*x13068))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13071.value, ((x13072.value)*(((((-1.0)*cj5*r01*x13068))+(((-1.0)*r00*sj5*x13068))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13073=IKsin(j4);
IkReal x13074=IKcos(j4);
IkReal x13075=(sj1*sj2);
IkReal x13076=(cj5*sj3);
IkReal x13077=(r11*sj5);
IkReal x13078=(cj3*cj5);
IkReal x13079=((1.0)*cj1);
IkReal x13080=(cj3*sj5);
IkReal x13081=(sj3*sj5);
IkReal x13082=(cj2*sj1);
IkReal x13083=(r01*sj5);
IkReal x13084=((1.0)*sj3);
IkReal x13085=(cj2*x13079);
IkReal x13086=(r10*x13074);
IkReal x13087=(r22*x13073);
IkReal x13088=(cj3*x13074);
IkReal x13089=((1.0)*cj5*x13073);
evalcond[0]=((-1.0)*r22*x13074);
evalcond[1]=(((cj3*x13087))+((cj1*sj2))+x13082);
evalcond[2]=(((x13073*x13077))+(((-1.0)*r10*x13089)));
evalcond[3]=((-1.0)+((x13073*x13083))+(((-1.0)*r00*x13089)));
evalcond[4]=((((-1.0)*x13085))+(((-1.0)*x13084*x13087))+x13075);
evalcond[5]=((((-1.0)*r01*x13074*x13081))+((r01*x13078))+((r00*x13080))+((r00*x13074*x13076)));
evalcond[6]=(((r01*x13074*x13080))+((r01*x13076))+(((-1.0)*r00*x13074*x13078))+((r00*x13081)));
evalcond[7]=((((-1.0)*x13085))+((x13077*x13088))+((r11*x13076))+x13075+((r10*x13081))+(((-1.0)*x13078*x13086)));
evalcond[8]=((((-1.0)*x13074*x13077*x13084))+((r11*x13078))+(((-1.0)*sj2*x13079))+(((-1.0)*x13082))+((x13076*x13086))+((r10*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13090=((1.0)*cj3);
IkReal x13091=(cj5*r00);
IkReal x13092=(r01*sj5);
CheckValue<IkReal> x13093=IKPowWithIntegerCheck((x13092+(((-1.0)*x13091))),-1);
if(!x13093.valid){
continue;
}
CheckValue<IkReal> x13094=IKPowWithIntegerCheck((((sj3*x13091))+(((-1.0)*sj3*x13092))),-1);
if(!x13094.valid){
continue;
}
if( IKabs(x13093.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13094.value)*(((((-1.0)*r00*sj5*x13090))+(((-1.0)*cj5*r01*x13090)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13093.value)+IKsqr(((x13094.value)*(((((-1.0)*r00*sj5*x13090))+(((-1.0)*cj5*r01*x13090))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13093.value, ((x13094.value)*(((((-1.0)*r00*sj5*x13090))+(((-1.0)*cj5*r01*x13090))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13095=IKsin(j4);
IkReal x13096=IKcos(j4);
IkReal x13097=(sj1*sj2);
IkReal x13098=(cj5*sj3);
IkReal x13099=(r11*sj5);
IkReal x13100=(cj3*cj5);
IkReal x13101=((1.0)*cj1);
IkReal x13102=(cj3*sj5);
IkReal x13103=(sj3*sj5);
IkReal x13104=(cj2*sj1);
IkReal x13105=(r01*sj5);
IkReal x13106=((1.0)*sj3);
IkReal x13107=(cj2*x13101);
IkReal x13108=(r10*x13096);
IkReal x13109=(r22*x13095);
IkReal x13110=(cj3*x13096);
IkReal x13111=((1.0)*cj5*x13095);
evalcond[0]=((-1.0)*r22*x13096);
evalcond[1]=(((cj1*sj2))+((cj3*x13109))+x13104);
evalcond[2]=((((-1.0)*r10*x13111))+((x13095*x13099)));
evalcond[3]=((-1.0)+((x13095*x13105))+(((-1.0)*r00*x13111)));
evalcond[4]=((((-1.0)*x13106*x13109))+(((-1.0)*x13107))+x13097);
evalcond[5]=(((r00*x13102))+((r01*x13100))+(((-1.0)*r01*x13096*x13103))+((r00*x13096*x13098)));
evalcond[6]=(((r00*x13103))+((r01*x13096*x13102))+((r01*x13098))+(((-1.0)*r00*x13096*x13100)));
evalcond[7]=(((r11*x13098))+(((-1.0)*x13100*x13108))+((x13099*x13110))+(((-1.0)*x13107))+x13097+((r10*x13103)));
evalcond[8]=(((x13098*x13108))+(((-1.0)*sj2*x13101))+(((-1.0)*x13104))+(((-1.0)*x13096*x13099*x13106))+((r11*x13100))+((r10*x13102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13112=cj5*cj5;
IkReal x13113=(cj3*r20);
IkReal x13114=(r21*sj3);
IkReal x13115=((1.0)*cj3);
IkReal x13116=(r01*r21);
IkReal x13117=(r01*sj3);
IkReal x13118=(r00*sj5);
IkReal x13119=(cj5*r01*sj5);
IkReal x13120=((1.0)*x13112);
CheckValue<IkReal> x13121 = IKatan2WithCheck(IkReal((((cj5*r22*x13117))+((r22*sj3*x13118)))),IkReal((((x13114*x13119))+(((-1.0)*cj5*r20*sj3*x13118))+(((-1.0)*r20*x13117*x13120))+(((-1.0)*r00*x13114*x13120))+((r00*x13114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13121.valid){
continue;
}
CheckValue<IkReal> x13122=IKPowWithIntegerCheck(IKsign((((cj3*x13112*x13116))+(((-1.0)*r00*x13113*x13120))+(((-1.0)*x13115*x13116))+(((-1.0)*r02*r22*x13115))+((cj3*cj5*r21*x13118))+((x13113*x13119)))),-1);
if(!x13122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13121.value)+(((1.5707963267949)*(x13122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13123=IKsin(j4);
IkReal x13124=IKcos(j4);
IkReal x13125=(sj1*sj2);
IkReal x13126=(r11*sj5);
IkReal x13127=(cj5*r10);
IkReal x13128=(cj5*r01);
IkReal x13129=(cj5*r00);
IkReal x13130=((1.0)*cj1);
IkReal x13131=(cj3*sj5);
IkReal x13132=(r21*sj5);
IkReal x13133=(cj5*sj3);
IkReal x13134=(sj3*sj5);
IkReal x13135=(cj2*sj1);
IkReal x13136=(r01*sj5);
IkReal x13137=(cj3*cj5);
IkReal x13138=(cj5*r20);
IkReal x13139=(cj2*x13130);
IkReal x13140=((1.0)*x13124);
IkReal x13141=((1.0)*x13123);
IkReal x13142=(cj3*x13124);
IkReal x13143=(sj3*x13124);
IkReal x13144=(cj3*x13123);
evalcond[0]=((((-1.0)*x13138*x13141))+((x13123*x13132))+(((-1.0)*r22*x13140)));
evalcond[1]=(((x13123*x13126))+(((-1.0)*r12*x13140))+(((-1.0)*x13127*x13141)));
evalcond[2]=((-1.0)+((x13123*x13136))+(((-1.0)*r02*x13140))+(((-1.0)*x13129*x13141)));
evalcond[3]=(((r00*x13134))+((r01*x13124*x13131))+((sj3*x13128))+((r02*x13144))+(((-1.0)*cj3*x13129*x13140)));
evalcond[4]=(((cj3*x13128))+(((-1.0)*r02*sj3*x13141))+((r00*x13131))+((x13129*x13143))+(((-1.0)*r01*x13134*x13140)));
evalcond[5]=((((-1.0)*r20*x13137*x13140))+((r22*x13144))+((r20*x13134))+((cj1*sj2))+((r21*x13124*x13131))+((r21*x13133))+x13135);
evalcond[6]=(((x13126*x13142))+((r10*x13134))+((r12*x13144))+((r11*x13133))+(((-1.0)*cj3*x13127*x13140))+(((-1.0)*x13139))+x13125);
evalcond[7]=(((r20*x13131))+((r21*x13137))+(((-1.0)*r22*sj3*x13141))+((r20*x13124*x13133))+(((-1.0)*x13139))+x13125+(((-1.0)*sj3*x13132*x13140)));
evalcond[8]=(((r10*x13131))+((x13127*x13143))+(((-1.0)*sj3*x13126*x13140))+(((-1.0)*sj2*x13130))+((r11*x13137))+(((-1.0)*r12*sj3*x13141))+(((-1.0)*x13135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13145=((1.0)*cj5);
CheckValue<IkReal> x13146 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13145))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13146.valid){
continue;
}
CheckValue<IkReal> x13147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13145)))),-1);
if(!x13147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13146.value)+(((1.5707963267949)*(x13147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13148=IKsin(j4);
IkReal x13149=IKcos(j4);
IkReal x13150=(sj1*sj2);
IkReal x13151=(r11*sj5);
IkReal x13152=(cj5*r10);
IkReal x13153=(cj5*r01);
IkReal x13154=(cj5*r00);
IkReal x13155=((1.0)*cj1);
IkReal x13156=(cj3*sj5);
IkReal x13157=(r21*sj5);
IkReal x13158=(cj5*sj3);
IkReal x13159=(sj3*sj5);
IkReal x13160=(cj2*sj1);
IkReal x13161=(r01*sj5);
IkReal x13162=(cj3*cj5);
IkReal x13163=(cj5*r20);
IkReal x13164=(cj2*x13155);
IkReal x13165=((1.0)*x13149);
IkReal x13166=((1.0)*x13148);
IkReal x13167=(cj3*x13149);
IkReal x13168=(sj3*x13149);
IkReal x13169=(cj3*x13148);
evalcond[0]=((((-1.0)*x13163*x13166))+(((-1.0)*r22*x13165))+((x13148*x13157)));
evalcond[1]=((((-1.0)*r12*x13165))+((x13148*x13151))+(((-1.0)*x13152*x13166)));
evalcond[2]=((-1.0)+(((-1.0)*x13154*x13166))+((x13148*x13161))+(((-1.0)*r02*x13165)));
evalcond[3]=(((r01*x13149*x13156))+((sj3*x13153))+((r02*x13169))+(((-1.0)*cj3*x13154*x13165))+((r00*x13159)));
evalcond[4]=(((x13154*x13168))+(((-1.0)*r01*x13159*x13165))+((cj3*x13153))+(((-1.0)*r02*sj3*x13166))+((r00*x13156)));
evalcond[5]=(((r21*x13158))+((r20*x13159))+((cj1*sj2))+((r21*x13149*x13156))+((r22*x13169))+x13160+(((-1.0)*r20*x13162*x13165)));
evalcond[6]=(((x13151*x13167))+(((-1.0)*x13164))+((r11*x13158))+((r10*x13159))+(((-1.0)*cj3*x13152*x13165))+x13150+((r12*x13169)));
evalcond[7]=((((-1.0)*r22*sj3*x13166))+((r20*x13156))+(((-1.0)*sj3*x13157*x13165))+((r20*x13149*x13158))+(((-1.0)*x13164))+x13150+((r21*x13162)));
evalcond[8]=((((-1.0)*sj2*x13155))+(((-1.0)*sj3*x13151*x13165))+((r11*x13162))+((x13152*x13168))+(((-1.0)*r12*sj3*x13166))+((r10*x13156))+(((-1.0)*x13160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13170=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13170.valid){
continue;
}
CheckValue<IkReal> x13171 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13170.value)))+(x13171.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13172=IKsin(j4);
IkReal x13173=IKcos(j4);
IkReal x13174=(sj1*sj2);
IkReal x13175=(r11*sj5);
IkReal x13176=(cj5*r10);
IkReal x13177=(cj5*r01);
IkReal x13178=(cj5*r00);
IkReal x13179=((1.0)*cj1);
IkReal x13180=(cj3*sj5);
IkReal x13181=(r21*sj5);
IkReal x13182=(cj5*sj3);
IkReal x13183=(sj3*sj5);
IkReal x13184=(cj2*sj1);
IkReal x13185=(r01*sj5);
IkReal x13186=(cj3*cj5);
IkReal x13187=(cj5*r20);
IkReal x13188=(cj2*x13179);
IkReal x13189=((1.0)*x13173);
IkReal x13190=((1.0)*x13172);
IkReal x13191=(cj3*x13173);
IkReal x13192=(sj3*x13173);
IkReal x13193=(cj3*x13172);
evalcond[0]=((((-1.0)*r22*x13189))+((x13172*x13181))+(((-1.0)*x13187*x13190)));
evalcond[1]=((((-1.0)*r12*x13189))+(((-1.0)*x13176*x13190))+((x13172*x13175)));
evalcond[2]=((-1.0)+(((-1.0)*x13178*x13190))+(((-1.0)*r02*x13189))+((x13172*x13185)));
evalcond[3]=(((r02*x13193))+((sj3*x13177))+((r00*x13183))+(((-1.0)*cj3*x13178*x13189))+((r01*x13173*x13180)));
evalcond[4]=(((r00*x13180))+((cj3*x13177))+((x13178*x13192))+(((-1.0)*r02*sj3*x13190))+(((-1.0)*r01*x13183*x13189)));
evalcond[5]=(((r21*x13182))+((cj1*sj2))+(((-1.0)*r20*x13186*x13189))+((r20*x13183))+((r21*x13173*x13180))+x13184+((r22*x13193)));
evalcond[6]=((((-1.0)*x13188))+((r12*x13193))+((r11*x13182))+((r10*x13183))+(((-1.0)*cj3*x13176*x13189))+x13174+((x13175*x13191)));
evalcond[7]=((((-1.0)*x13188))+((r21*x13186))+(((-1.0)*r22*sj3*x13190))+((r20*x13180))+((r20*x13173*x13182))+(((-1.0)*sj3*x13181*x13189))+x13174);
evalcond[8]=((((-1.0)*sj3*x13175*x13189))+(((-1.0)*x13184))+((r11*x13186))+((r10*x13180))+(((-1.0)*sj2*x13179))+((x13176*x13192))+(((-1.0)*r12*sj3*x13190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13195 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13195)==0){
continue;
}
IkReal x13194=pow(x13195,-0.5);
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13196.value));
IkReal gconst13=((-1.0)*r11*x13194);
IkReal gconst14=(r10*x13194);
CheckValue<IkReal> x13197 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13200 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13200.valid){
continue;
}
IkReal x13198=((-1.0)*(x13200.value));
IkReal x13199=x13194;
sj5=gconst13;
cj5=gconst14;
j5=x13198;
IkReal gconst12=x13198;
IkReal gconst13=((-1.0)*r11*x13199);
IkReal gconst14=(r10*x13199);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13201=((1.0)*gconst14);
CheckValue<IkReal> x13202 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*cj0*r00*x13201))+(((-1.0)*r10*sj0*x13201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13202.valid){
continue;
}
CheckValue<IkReal> x13203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13201))+(((-1.0)*gconst13*r20)))),-1);
if(!x13203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13202.value)+(((1.5707963267949)*(x13203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13204=IKsin(j4);
IkReal x13205=IKcos(j4);
IkReal x13206=((1.0)*r22);
IkReal x13207=((1.0)*r12);
IkReal x13208=(cj2*sj0);
IkReal x13209=(gconst13*sj3);
IkReal x13210=(gconst13*r01);
IkReal x13211=(sj1*sj2);
IkReal x13212=(gconst14*sj3);
IkReal x13213=(cj1*cj2);
IkReal x13214=((1.0)*gconst14);
IkReal x13215=(cj3*gconst13);
IkReal x13216=(cj3*gconst14);
IkReal x13217=(cj2*sj1);
IkReal x13218=((1.0)*r02);
IkReal x13219=(cj1*sj2);
IkReal x13220=((1.0)*cj0);
IkReal x13221=(sj3*x13204);
IkReal x13222=(cj3*x13205);
IkReal x13223=(cj3*x13204);
IkReal x13224=(gconst13*x13204);
IkReal x13225=((1.0)*x13205);
evalcond[0]=((((-1.0)*r20*x13204*x13214))+((r21*x13224))+(((-1.0)*x13205*x13206)));
evalcond[1]=(sj0+((x13204*x13210))+(((-1.0)*r00*x13204*x13214))+(((-1.0)*x13205*x13218)));
evalcond[2]=((((-1.0)*r10*x13204*x13214))+((r11*x13224))+(((-1.0)*x13220))+(((-1.0)*x13205*x13207)));
evalcond[3]=(((r21*x13212))+((r21*x13205*x13215))+((r22*x13223))+x13217+x13219+(((-1.0)*r20*x13214*x13222))+((r20*x13209)));
evalcond[4]=((((-1.0)*x13213))+((r21*x13216))+(((-1.0)*r21*x13209*x13225))+((r20*x13215))+(((-1.0)*x13206*x13221))+((r20*x13205*x13212))+x13211);
evalcond[5]=(((r00*x13215))+((r01*x13216))+((r00*x13205*x13212))+(((-1.0)*x13218*x13221))+(((-1.0)*r01*x13209*x13225))+((cj0*x13217))+((cj0*x13219)));
evalcond[6]=(((r00*x13209))+((x13210*x13222))+((r02*x13223))+((r01*x13212))+(((-1.0)*x13211*x13220))+((cj0*x13213))+(((-1.0)*r00*x13214*x13222)));
evalcond[7]=((((-1.0)*r11*x13209*x13225))+((r11*x13216))+((r10*x13215))+((sj0*x13219))+((r10*x13205*x13212))+((sj1*x13208))+(((-1.0)*x13207*x13221)));
evalcond[8]=(((cj1*x13208))+((r10*x13209))+(((-1.0)*r10*x13214*x13222))+((r11*x13212))+((r11*x13205*x13215))+(((-1.0)*sj0*x13211))+((r12*x13223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13226.valid){
continue;
}
CheckValue<IkReal> x13227=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x13227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13226.value)+(((1.5707963267949)*(x13227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13228=IKsin(j4);
IkReal x13229=IKcos(j4);
IkReal x13230=((1.0)*r22);
IkReal x13231=((1.0)*r12);
IkReal x13232=(cj2*sj0);
IkReal x13233=(gconst13*sj3);
IkReal x13234=(gconst13*r01);
IkReal x13235=(sj1*sj2);
IkReal x13236=(gconst14*sj3);
IkReal x13237=(cj1*cj2);
IkReal x13238=((1.0)*gconst14);
IkReal x13239=(cj3*gconst13);
IkReal x13240=(cj3*gconst14);
IkReal x13241=(cj2*sj1);
IkReal x13242=((1.0)*r02);
IkReal x13243=(cj1*sj2);
IkReal x13244=((1.0)*cj0);
IkReal x13245=(sj3*x13228);
IkReal x13246=(cj3*x13229);
IkReal x13247=(cj3*x13228);
IkReal x13248=(gconst13*x13228);
IkReal x13249=((1.0)*x13229);
evalcond[0]=(((r21*x13248))+(((-1.0)*r20*x13228*x13238))+(((-1.0)*x13229*x13230)));
evalcond[1]=(sj0+((x13228*x13234))+(((-1.0)*x13229*x13242))+(((-1.0)*r00*x13228*x13238)));
evalcond[2]=((((-1.0)*r10*x13228*x13238))+(((-1.0)*x13229*x13231))+((r11*x13248))+(((-1.0)*x13244)));
evalcond[3]=(((r20*x13233))+((r22*x13247))+((r21*x13229*x13239))+((r21*x13236))+(((-1.0)*r20*x13238*x13246))+x13241+x13243);
evalcond[4]=(((r20*x13239))+((r21*x13240))+(((-1.0)*r21*x13233*x13249))+(((-1.0)*x13230*x13245))+x13235+(((-1.0)*x13237))+((r20*x13229*x13236)));
evalcond[5]=((((-1.0)*x13242*x13245))+((r01*x13240))+((r00*x13229*x13236))+(((-1.0)*r01*x13233*x13249))+((cj0*x13241))+((cj0*x13243))+((r00*x13239)));
evalcond[6]=((((-1.0)*x13235*x13244))+((r01*x13236))+(((-1.0)*r00*x13238*x13246))+((r02*x13247))+((cj0*x13237))+((x13234*x13246))+((r00*x13233)));
evalcond[7]=((((-1.0)*r11*x13233*x13249))+((r10*x13239))+((sj0*x13243))+((r11*x13240))+((sj1*x13232))+(((-1.0)*x13231*x13245))+((r10*x13229*x13236)));
evalcond[8]=(((r10*x13233))+((cj1*x13232))+((r11*x13236))+((r12*x13247))+((r11*x13229*x13239))+(((-1.0)*r10*x13238*x13246))+(((-1.0)*sj0*x13235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13251 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13251)==0){
continue;
}
IkReal x13250=pow(x13251,-0.5);
CheckValue<IkReal> x13252 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13252.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13252.value))));
IkReal gconst16=((1.0)*r11*x13250);
IkReal gconst17=((-1.0)*r10*x13250);
CheckValue<IkReal> x13253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13253.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13253.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13256 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13256.valid){
continue;
}
IkReal x13254=((1.0)*(x13256.value));
IkReal x13255=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13254)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13254)));
IkReal gconst16=((1.0)*r11*x13255);
IkReal gconst17=((-1.0)*r10*x13255);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
IkReal x13257=((1.0)*(x13259.value));
IkReal x13258=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13257)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13257)));
IkReal gconst16=((1.0)*r11*x13258);
IkReal gconst17=((-1.0)*r10*x13258);
IkReal x13260=r12*r12;
IkReal x13261=(cj0*r02);
IkReal x13262=x13250;
IkReal x13263=(sj0*x13262);
j4eval[0]=((IKabs((((r12*sj0))+x13261)))+(IKabs((((x13260*x13263))+(((-1.0)*x13263))+((r12*x13261*x13262))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
IkReal x13264=((1.0)*(x13266.value));
IkReal x13265=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13264)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13264)));
IkReal gconst16=((1.0)*r11*x13265);
IkReal gconst17=((-1.0)*r10*x13265);
IkReal x13267=((1.0)*cj3);
CheckValue<IkReal> x13272=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13272.valid){
continue;
}
IkReal x13268=x13272.value;
IkReal x13269=(cj3*x13268);
IkReal x13270=(x13267*x13268);
IkReal x13271=((((-1.0)*x13270*(r11*r11)*(r21*r21)))+(((-1.0)*x13267*(r22*r22)))+(((-1.0)*x13270*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13269)));
j4eval[0]=x13271;
j4eval[1]=IKsign(x13271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13275 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13275.valid){
continue;
}
IkReal x13273=((1.0)*(x13275.value));
IkReal x13274=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13273)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13273)));
IkReal gconst16=((1.0)*r11*x13274);
IkReal gconst17=((-1.0)*r10*x13274);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13278 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13278.valid){
continue;
}
IkReal x13276=((1.0)*(x13278.value));
IkReal x13277=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13276)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13276)));
IkReal gconst16=((1.0)*r11*x13277);
IkReal gconst17=((-1.0)*r10*x13277);
IkReal x13279=r12*r12;
IkReal x13280=(cj0*r02);
IkReal x13281=x13250;
IkReal x13282=(sj0*x13281);
j4eval[0]=((IKabs((((r12*sj0))+x13280)))+(IKabs(((((-1.0)*x13282))+((r12*x13280*x13281))+((x13279*x13282))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13285 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13285.valid){
continue;
}
IkReal x13283=((1.0)*(x13285.value));
IkReal x13284=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13283)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13283)));
IkReal gconst16=((1.0)*r11*x13284);
IkReal gconst17=((-1.0)*r10*x13284);
IkReal x13286=r12*r12;
IkReal x13287=(sj1*sj2);
IkReal x13288=((1.0)*cj1*cj2);
CheckValue<IkReal> x13292=IKPowWithIntegerCheck(((-1.0)+x13286),-1);
if(!x13292.valid){
continue;
}
IkReal x13289=x13292.value;
if((((1.0)+(((-1.0)*x13286)))) < -0.00001)
continue;
IkReal x13290=IKsqrt(((1.0)+(((-1.0)*x13286))));
IkReal x13291=(r12*r22*x13289*x13290);
j4eval[0]=((IKabs((((x13287*x13291))+(((-1.0)*x13288*x13291)))))+(IKabs(((((-1.0)*r22*x13288))+((r22*x13287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13293=(gconst17*r20);
IkReal x13294=(cj1*cj2);
IkReal x13295=(sj1*sj2);
IkReal x13296=(gconst16*r21);
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13294))+((r22*x13295)))),IkReal((((x13295*x13296))+(((-1.0)*x13294*x13296))+((x13293*x13294))+(((-1.0)*x13293*x13295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
CheckValue<IkReal> x13298=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x13293*x13293)+(((-2.0)*x13293*x13296))+(x13296*x13296))),-1);
if(!x13298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13297.value)+(((1.5707963267949)*(x13298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13299=IKsin(j4);
IkReal x13300=IKcos(j4);
IkReal x13301=(gconst16*r01);
IkReal x13302=(cj2*sj1);
IkReal x13303=(gconst16*r21);
IkReal x13304=(gconst16*r11);
IkReal x13305=(cj1*sj2);
IkReal x13306=((1.0)*x13300);
IkReal x13307=(gconst17*x13300);
IkReal x13308=((1.0)*x13299);
evalcond[0]=((((-1.0)*gconst17*r20*x13308))+((x13299*x13303))+(((-1.0)*r22*x13306)));
evalcond[1]=(sj0+(((-1.0)*r02*x13306))+((x13299*x13301))+(((-1.0)*gconst17*r00*x13308)));
evalcond[2]=((((-1.0)*r12*x13306))+((x13299*x13304))+(((-1.0)*gconst17*r10*x13308))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x13307))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13308))+(((-1.0)*x13303*x13306)));
evalcond[4]=(((r00*x13307))+(((-1.0)*r02*x13308))+((cj0*x13305))+((cj0*x13302))+(((-1.0)*x13301*x13306)));
evalcond[5]=((((-1.0)*x13304*x13306))+((r10*x13307))+((sj0*x13305))+((sj0*x13302))+(((-1.0)*r12*x13308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13309=((1.0)*gconst17);
CheckValue<IkReal> x13310 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13309))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13310.valid){
continue;
}
CheckValue<IkReal> x13311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13309)))),-1);
if(!x13311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13310.value)+(((1.5707963267949)*(x13311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13312=IKsin(j4);
IkReal x13313=IKcos(j4);
IkReal x13314=(gconst16*r01);
IkReal x13315=(cj2*sj1);
IkReal x13316=(gconst16*r21);
IkReal x13317=(gconst16*r11);
IkReal x13318=(cj1*sj2);
IkReal x13319=((1.0)*x13313);
IkReal x13320=(gconst17*x13313);
IkReal x13321=((1.0)*x13312);
evalcond[0]=((((-1.0)*gconst17*r20*x13321))+((x13312*x13316))+(((-1.0)*r22*x13319)));
evalcond[1]=(sj0+((x13312*x13314))+(((-1.0)*r02*x13319))+(((-1.0)*gconst17*r00*x13321)));
evalcond[2]=((((-1.0)*gconst17*r10*x13321))+((x13312*x13317))+(((-1.0)*r12*x13319))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13321))+(((-1.0)*x13316*x13319))+(((-1.0)*cj1*cj2))+((r20*x13320))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r02*x13321))+((r00*x13320))+((cj0*x13318))+((cj0*x13315))+(((-1.0)*x13314*x13319)));
evalcond[5]=((((-1.0)*r12*x13321))+((sj0*x13318))+((sj0*x13315))+((r10*x13320))+(((-1.0)*x13317*x13319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13322=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13322.valid){
continue;
}
CheckValue<IkReal> x13323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13322.value)))+(x13323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13324=IKsin(j4);
IkReal x13325=IKcos(j4);
IkReal x13326=(gconst16*r01);
IkReal x13327=(cj2*sj1);
IkReal x13328=(gconst16*r21);
IkReal x13329=(gconst16*r11);
IkReal x13330=(cj1*sj2);
IkReal x13331=((1.0)*x13325);
IkReal x13332=(gconst17*x13325);
IkReal x13333=((1.0)*x13324);
evalcond[0]=((((-1.0)*r22*x13331))+(((-1.0)*gconst17*r20*x13333))+((x13324*x13328)));
evalcond[1]=(sj0+((x13324*x13326))+(((-1.0)*gconst17*r00*x13333))+(((-1.0)*r02*x13331)));
evalcond[2]=((((-1.0)*r12*x13331))+(((-1.0)*gconst17*r10*x13333))+((x13324*x13329))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13332))+(((-1.0)*x13328*x13331)));
evalcond[4]=(((cj0*x13327))+((r00*x13332))+(((-1.0)*x13326*x13331))+((cj0*x13330))+(((-1.0)*r02*x13333)));
evalcond[5]=(((r10*x13332))+(((-1.0)*r12*x13333))+(((-1.0)*x13329*x13331))+((sj0*x13330))+((sj0*x13327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13336 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13336.valid){
continue;
}
IkReal x13334=((1.0)*(x13336.value));
IkReal x13335=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13334)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13334)));
IkReal gconst16=((1.0)*r11*x13335);
IkReal gconst17=((-1.0)*r10*x13335);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
IkReal x13337=((1.0)*(x13339.value));
IkReal x13338=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13337)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13337)));
IkReal gconst16=((1.0)*r11*x13338);
IkReal gconst17=((-1.0)*r10*x13338);
IkReal x13340=r12*r12;
IkReal x13341=(cj0*r02);
IkReal x13342=x13250;
IkReal x13343=(sj0*x13342);
j4eval[0]=((IKabs((((r12*sj0))+x13341)))+(IKabs((((x13340*x13343))+(((-1.0)*x13343))+((r12*x13341*x13342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13346 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13346.valid){
continue;
}
IkReal x13344=((1.0)*(x13346.value));
IkReal x13345=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13344)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13344)));
IkReal gconst16=((1.0)*r11*x13345);
IkReal gconst17=((-1.0)*r10*x13345);
IkReal x13347=r12*r12;
IkReal x13348=(sj1*sj2);
IkReal x13349=((1.0)+(((-1.0)*x13347)));
IkReal x13350=((1.0)*cj1*cj2);
CheckValue<IkReal> x13357=IKPowWithIntegerCheck(x13349,-1);
if(!x13357.valid){
continue;
}
IkReal x13351=x13357.value;
CheckValue<IkReal> x13358=IKPowWithIntegerCheck(((-1.0)+x13347),-1);
if(!x13358.valid){
continue;
}
IkReal x13352=x13358.value;
IkReal x13353=((1.0)*x13351);
if((x13349) < -0.00001)
continue;
IkReal x13354=IKsqrt(x13349);
IkReal x13355=(r12*r22*x13352*x13354);
IkReal x13356=((((-1.0)*x13353*(r11*r11)*(r21*r21)))+(((-1.0)*x13353*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x13351)));
j4eval[0]=x13356;
j4eval[1]=((IKabs((((x13348*x13355))+(((-1.0)*x13350*x13355)))))+(IKabs(((((-1.0)*r22*x13350))+((r22*x13348))))));
j4eval[2]=IKsign(x13356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13359=(gconst17*r20);
IkReal x13360=(cj1*cj2);
IkReal x13361=(sj1*sj2);
IkReal x13362=(gconst16*r21);
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(IKsign(((((2.0)*x13359*x13362))+(((-1.0)*(r22*r22)))+(((-1.0)*(x13359*x13359)))+(((-1.0)*(x13362*x13362))))),-1);
if(!x13363.valid){
continue;
}
CheckValue<IkReal> x13364 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13360))+((r22*x13361)))),IkReal(((((-1.0)*x13360*x13362))+((x13361*x13362))+((x13359*x13360))+(((-1.0)*x13359*x13361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13363.value)))+(x13364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13365=IKsin(j4);
IkReal x13366=IKcos(j4);
IkReal x13367=(cj2*sj1);
IkReal x13368=(gconst17*r20);
IkReal x13369=(gconst17*r00);
IkReal x13370=(gconst17*r10);
IkReal x13371=(cj1*sj2);
IkReal x13372=((1.0)*x13366);
IkReal x13373=(gconst16*x13365);
IkReal x13374=((1.0)*x13365);
IkReal x13375=(gconst16*x13366);
evalcond[0]=((((-1.0)*r22*x13372))+(((-1.0)*x13368*x13374))+((r21*x13373)));
evalcond[1]=(sj0+((r01*x13373))+(((-1.0)*x13369*x13374))+(((-1.0)*r02*x13372)));
evalcond[2]=((((-1.0)*x13370*x13374))+((r11*x13373))+(((-1.0)*cj0))+(((-1.0)*r12*x13372)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13368*x13372))+((r22*x13365))+((r21*x13375)));
evalcond[4]=(((r01*x13375))+(((-1.0)*x13369*x13372))+((cj0*x13367))+((cj0*x13371))+((r02*x13365)));
evalcond[5]=(((sj0*x13367))+((r12*x13365))+(((-1.0)*x13370*x13372))+((sj0*x13371))+((r11*x13375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13376=((1.0)*gconst17);
CheckValue<IkReal> x13377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13376)))),-1);
if(!x13377.valid){
continue;
}
CheckValue<IkReal> x13378 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13376))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13377.value)))+(x13378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13379=IKsin(j4);
IkReal x13380=IKcos(j4);
IkReal x13381=(cj2*sj1);
IkReal x13382=(gconst17*r20);
IkReal x13383=(gconst17*r00);
IkReal x13384=(gconst17*r10);
IkReal x13385=(cj1*sj2);
IkReal x13386=((1.0)*x13380);
IkReal x13387=(gconst16*x13379);
IkReal x13388=((1.0)*x13379);
IkReal x13389=(gconst16*x13380);
evalcond[0]=((((-1.0)*r22*x13386))+(((-1.0)*x13382*x13388))+((r21*x13387)));
evalcond[1]=(sj0+((r01*x13387))+(((-1.0)*x13383*x13388))+(((-1.0)*r02*x13386)));
evalcond[2]=(((r11*x13387))+(((-1.0)*r12*x13386))+(((-1.0)*x13384*x13388))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13382*x13386))+((r22*x13379))+((r21*x13389)));
evalcond[4]=(((r02*x13379))+((r01*x13389))+(((-1.0)*x13383*x13386))+((cj0*x13385))+((cj0*x13381)));
evalcond[5]=(((r12*x13379))+((sj0*x13385))+((sj0*x13381))+((r11*x13389))+(((-1.0)*x13384*x13386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13390=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13390.valid){
continue;
}
CheckValue<IkReal> x13391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13390.value)))+(x13391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13392=IKsin(j4);
IkReal x13393=IKcos(j4);
IkReal x13394=(cj2*sj1);
IkReal x13395=(gconst17*r20);
IkReal x13396=(gconst17*r00);
IkReal x13397=(gconst17*r10);
IkReal x13398=(cj1*sj2);
IkReal x13399=((1.0)*x13393);
IkReal x13400=(gconst16*x13392);
IkReal x13401=((1.0)*x13392);
IkReal x13402=(gconst16*x13393);
evalcond[0]=((((-1.0)*x13395*x13401))+(((-1.0)*r22*x13399))+((r21*x13400)));
evalcond[1]=(((r01*x13400))+sj0+(((-1.0)*x13396*x13401))+(((-1.0)*r02*x13399)));
evalcond[2]=(((r11*x13400))+(((-1.0)*x13397*x13401))+(((-1.0)*r12*x13399))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x13402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13395*x13399))+((r22*x13392)));
evalcond[4]=(((r01*x13402))+(((-1.0)*x13396*x13399))+((r02*x13392))+((cj0*x13398))+((cj0*x13394)));
evalcond[5]=(((sj0*x13394))+((sj0*x13398))+((r11*x13402))+((r12*x13392))+(((-1.0)*x13397*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13405 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13405.valid){
continue;
}
IkReal x13403=((1.0)*(x13405.value));
IkReal x13404=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13403)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13403)));
IkReal gconst16=((1.0)*r11*x13404);
IkReal gconst17=((-1.0)*r10*x13404);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13406=gconst16*gconst16;
IkReal x13407=gconst17*gconst17;
IkReal x13408=(cj3*r00);
IkReal x13409=(cj3*r01);
IkReal x13410=((1.0)*r20);
IkReal x13411=(gconst16*gconst17);
IkReal x13412=(r00*sj3);
IkReal x13413=(r01*sj3);
IkReal x13414=(r21*x13406);
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(IKsign((((x13413*x13414))+(((-1.0)*x13410*x13411*x13413))+((r20*x13407*x13412))+(((-1.0)*r21*x13411*x13412))+((r02*r22*sj3)))),-1);
if(!x13415.valid){
continue;
}
CheckValue<IkReal> x13416 = IKatan2WithCheck(IkReal((((gconst17*r22*x13409))+((gconst16*r22*x13408)))),IkReal((((x13408*x13414))+(((-1.0)*x13407*x13409*x13410))+(((-1.0)*x13408*x13410*x13411))+((r21*x13409*x13411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13415.value)))+(x13416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13417=IKsin(j4);
IkReal x13418=IKcos(j4);
IkReal x13419=(sj1*sj2);
IkReal x13420=(cj3*gconst17);
IkReal x13421=(gconst16*r21);
IkReal x13422=(gconst16*r20);
IkReal x13423=(gconst17*r20);
IkReal x13424=(gconst17*sj3);
IkReal x13425=(cj3*gconst16);
IkReal x13426=(cj2*sj1);
IkReal x13427=((1.0)*cj1);
IkReal x13428=(gconst16*sj3);
IkReal x13429=(cj2*x13427);
IkReal x13430=((1.0)*x13418);
IkReal x13431=(gconst16*x13417);
IkReal x13432=((1.0)*x13417);
IkReal x13433=(cj3*x13418);
IkReal x13434=(cj3*x13417);
evalcond[0]=((((-1.0)*r22*x13430))+((x13417*x13421))+(((-1.0)*x13423*x13432)));
evalcond[1]=((((-1.0)*r12*x13430))+(((-1.0)*gconst17*r10*x13432))+((r11*x13431)));
evalcond[2]=((-1.0)+((r01*x13431))+(((-1.0)*gconst17*r00*x13432))+(((-1.0)*r02*x13430)));
evalcond[3]=(((r01*x13418*x13425))+((r02*x13434))+(((-1.0)*r00*x13420*x13430))+((r00*x13428))+((r01*x13424)));
evalcond[4]=((((-1.0)*r01*x13428*x13430))+(((-1.0)*r02*sj3*x13432))+((r00*x13418*x13424))+((r00*x13425))+((r01*x13420)));
evalcond[5]=(x13426+((cj1*sj2))+((r22*x13434))+((r21*x13424))+((x13421*x13433))+(((-1.0)*r20*x13420*x13430))+((sj3*x13422)));
evalcond[6]=(x13419+(((-1.0)*x13429))+((r11*x13424))+((r12*x13434))+((r11*x13418*x13425))+((r10*x13428))+(((-1.0)*r10*x13420*x13430)));
evalcond[7]=(x13419+((cj3*x13422))+(((-1.0)*sj3*x13421*x13430))+(((-1.0)*x13429))+((r21*x13420))+(((-1.0)*r22*sj3*x13432))+((sj3*x13418*x13423)));
evalcond[8]=(((r10*x13418*x13424))+(((-1.0)*x13426))+(((-1.0)*sj2*x13427))+((r11*x13420))+(((-1.0)*r12*sj3*x13432))+(((-1.0)*r11*x13428*x13430))+((r10*x13425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13435 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst17*r10))+((gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13435.valid){
continue;
}
CheckValue<IkReal> x13436=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13435.value)+(((1.5707963267949)*(x13436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13437=IKsin(j4);
IkReal x13438=IKcos(j4);
IkReal x13439=(sj1*sj2);
IkReal x13440=(cj3*gconst17);
IkReal x13441=(gconst16*r21);
IkReal x13442=(gconst16*r20);
IkReal x13443=(gconst17*r20);
IkReal x13444=(gconst17*sj3);
IkReal x13445=(cj3*gconst16);
IkReal x13446=(cj2*sj1);
IkReal x13447=((1.0)*cj1);
IkReal x13448=(gconst16*sj3);
IkReal x13449=(cj2*x13447);
IkReal x13450=((1.0)*x13438);
IkReal x13451=(gconst16*x13437);
IkReal x13452=((1.0)*x13437);
IkReal x13453=(cj3*x13438);
IkReal x13454=(cj3*x13437);
evalcond[0]=((((-1.0)*r22*x13450))+(((-1.0)*x13443*x13452))+((x13437*x13441)));
evalcond[1]=(((r11*x13451))+(((-1.0)*gconst17*r10*x13452))+(((-1.0)*r12*x13450)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13450))+((r01*x13451))+(((-1.0)*gconst17*r00*x13452)));
evalcond[3]=(((r00*x13448))+((r01*x13444))+((r02*x13454))+((r01*x13438*x13445))+(((-1.0)*r00*x13440*x13450)));
evalcond[4]=(((r00*x13438*x13444))+(((-1.0)*r02*sj3*x13452))+(((-1.0)*r01*x13448*x13450))+((r00*x13445))+((r01*x13440)));
evalcond[5]=(x13446+(((-1.0)*r20*x13440*x13450))+((x13441*x13453))+((cj1*sj2))+((sj3*x13442))+((r22*x13454))+((r21*x13444)));
evalcond[6]=(x13439+((r12*x13454))+(((-1.0)*r10*x13440*x13450))+(((-1.0)*x13449))+((r11*x13438*x13445))+((r10*x13448))+((r11*x13444)));
evalcond[7]=(x13439+((sj3*x13438*x13443))+(((-1.0)*x13449))+(((-1.0)*sj3*x13441*x13450))+((cj3*x13442))+((r21*x13440))+(((-1.0)*r22*sj3*x13452)));
evalcond[8]=((((-1.0)*r12*sj3*x13452))+((r10*x13445))+(((-1.0)*r11*x13448*x13450))+((r10*x13438*x13444))+((r11*x13440))+(((-1.0)*x13446))+(((-1.0)*sj2*x13447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13457 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13457.valid){
continue;
}
IkReal x13455=((1.0)*(x13457.value));
IkReal x13456=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13455)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13456);
rxp1_1=(px*r21);
rxp1_2=(r11*x13456);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13455)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
IkReal x13458=((1.0)*(x13460.value));
IkReal x13459=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13458)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13459);
rxp1_1=(px*r21);
rxp1_2=(r11*x13459);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13458)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
IkReal x13461=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r11*r21*x13461))+((r10*r20*x13461)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13464 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13464.valid){
continue;
}
IkReal x13462=((1.0)*(x13464.value));
IkReal x13463=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13462)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13463);
rxp1_1=(px*r21);
rxp1_2=(r11*x13463);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13462)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13466=IKPowWithIntegerCheck(r02,-1);
if(!x13466.valid){
continue;
}
IkReal x13465=x13466.value;
CheckValue<IkReal> x13467=IKPowWithIntegerCheck(sj3,-1);
if(!x13467.valid){
continue;
}
if( IKabs((x13465*(x13467.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13465)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13465*(x13467.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x13465))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13465*(x13467.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x13465));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13468=IKsin(j4);
IkReal x13469=IKcos(j4);
IkReal x13470=((1.0)*sj3);
IkReal x13471=(cj1*cj2);
IkReal x13472=(gconst16*r20);
IkReal x13473=(sj1*sj2);
IkReal x13474=((1.0)*gconst17);
IkReal x13475=(gconst17*sj3);
IkReal x13476=(gconst16*r11);
IkReal x13477=(cj3*r10);
IkReal x13478=(cj2*sj1);
IkReal x13479=(cj3*gconst17);
IkReal x13480=(cj1*sj2);
IkReal x13481=((1.0)*cj0);
IkReal x13482=(r02*x13468);
IkReal x13483=(r20*x13469);
IkReal x13484=(gconst16*r21*x13469);
evalcond[0]=(sj0+(((-1.0)*r02*x13469)));
evalcond[1]=(((gconst16*r21*x13468))+(((-1.0)*r20*x13468*x13474)));
evalcond[2]=(((cj0*x13480))+(((-1.0)*x13470*x13482))+((cj0*x13478)));
evalcond[3]=(((cj3*x13482))+(((-1.0)*x13473*x13481))+((cj0*x13471)));
evalcond[4]=((((-1.0)*x13481))+(((-1.0)*r10*x13468*x13474))+((x13468*x13476)));
evalcond[5]=(((sj3*x13472))+x13480+x13478+(((-1.0)*cj3*x13474*x13483))+((cj3*x13484))+((r21*x13475)));
evalcond[6]=(x13473+((r21*x13479))+((x13475*x13483))+(((-1.0)*x13470*x13484))+(((-1.0)*x13471))+((cj3*x13472)));
evalcond[7]=(((r10*x13469*x13475))+(((-1.0)*x13469*x13470*x13476))+((r11*x13479))+((sj0*x13478))+((sj0*x13480))+((gconst16*x13477)));
evalcond[8]=(((r11*x13475))+(((-1.0)*sj0*x13473))+((sj0*x13471))+(((-1.0)*x13469*x13474*x13477))+((cj3*x13469*x13476))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13485=((1.0)*gconst17);
CheckValue<IkReal> x13486=IKPowWithIntegerCheck(((((-1.0)*r10*x13485))+((gconst16*r11))),-1);
if(!x13486.valid){
continue;
}
CheckValue<IkReal> x13487=IKPowWithIntegerCheck((((cj3*gconst16*r21))+(((-1.0)*cj3*r20*x13485))),-1);
if(!x13487.valid){
continue;
}
if( IKabs((cj0*(x13486.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13487.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*r21*sj3*x13485))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13486.value)))+IKsqr(((x13487.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*r21*sj3*x13485))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13486.value)), ((x13487.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*r21*sj3*x13485))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13488=IKsin(j4);
IkReal x13489=IKcos(j4);
IkReal x13490=((1.0)*sj3);
IkReal x13491=(cj1*cj2);
IkReal x13492=(gconst16*r20);
IkReal x13493=(sj1*sj2);
IkReal x13494=((1.0)*gconst17);
IkReal x13495=(gconst17*sj3);
IkReal x13496=(gconst16*r11);
IkReal x13497=(cj3*r10);
IkReal x13498=(cj2*sj1);
IkReal x13499=(cj3*gconst17);
IkReal x13500=(cj1*sj2);
IkReal x13501=((1.0)*cj0);
IkReal x13502=(r02*x13488);
IkReal x13503=(r20*x13489);
IkReal x13504=(gconst16*r21*x13489);
evalcond[0]=(sj0+(((-1.0)*r02*x13489)));
evalcond[1]=((((-1.0)*r20*x13488*x13494))+((gconst16*r21*x13488)));
evalcond[2]=(((cj0*x13500))+((cj0*x13498))+(((-1.0)*x13490*x13502)));
evalcond[3]=(((cj0*x13491))+(((-1.0)*x13493*x13501))+((cj3*x13502)));
evalcond[4]=(((x13488*x13496))+(((-1.0)*r10*x13488*x13494))+(((-1.0)*x13501)));
evalcond[5]=(x13498+x13500+((sj3*x13492))+(((-1.0)*cj3*x13494*x13503))+((cj3*x13504))+((r21*x13495)));
evalcond[6]=(x13493+((x13495*x13503))+(((-1.0)*x13491))+((cj3*x13492))+(((-1.0)*x13490*x13504))+((r21*x13499)));
evalcond[7]=((((-1.0)*x13489*x13490*x13496))+((gconst16*x13497))+((sj0*x13500))+((sj0*x13498))+((r11*x13499))+((r10*x13489*x13495)));
evalcond[8]=(((cj3*x13489*x13496))+(((-1.0)*x13489*x13494*x13497))+(((-1.0)*sj0*x13493))+((sj0*x13491))+((r11*x13495))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13505=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10))+((gconst16*r11))),-1);
if(!x13505.valid){
continue;
}
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(r02,-1);
if(!x13506.valid){
continue;
}
if( IKabs((cj0*(x13505.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x13506.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13505.value)))+IKsqr((sj0*(x13506.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13505.value)), (sj0*(x13506.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13507=IKsin(j4);
IkReal x13508=IKcos(j4);
IkReal x13509=((1.0)*sj3);
IkReal x13510=(cj1*cj2);
IkReal x13511=(gconst16*r20);
IkReal x13512=(sj1*sj2);
IkReal x13513=((1.0)*gconst17);
IkReal x13514=(gconst17*sj3);
IkReal x13515=(gconst16*r11);
IkReal x13516=(cj3*r10);
IkReal x13517=(cj2*sj1);
IkReal x13518=(cj3*gconst17);
IkReal x13519=(cj1*sj2);
IkReal x13520=((1.0)*cj0);
IkReal x13521=(r02*x13507);
IkReal x13522=(r20*x13508);
IkReal x13523=(gconst16*r21*x13508);
evalcond[0]=(sj0+(((-1.0)*r02*x13508)));
evalcond[1]=((((-1.0)*r20*x13507*x13513))+((gconst16*r21*x13507)));
evalcond[2]=(((cj0*x13519))+((cj0*x13517))+(((-1.0)*x13509*x13521)));
evalcond[3]=(((cj0*x13510))+((cj3*x13521))+(((-1.0)*x13512*x13520)));
evalcond[4]=((((-1.0)*r10*x13507*x13513))+((x13507*x13515))+(((-1.0)*x13520)));
evalcond[5]=(((r21*x13514))+x13519+x13517+((cj3*x13523))+((sj3*x13511))+(((-1.0)*cj3*x13513*x13522)));
evalcond[6]=(((r21*x13518))+x13512+(((-1.0)*x13510))+((cj3*x13511))+((x13514*x13522))+(((-1.0)*x13509*x13523)));
evalcond[7]=(((gconst16*x13516))+((r10*x13508*x13514))+(((-1.0)*x13508*x13509*x13515))+((r11*x13518))+((sj0*x13517))+((sj0*x13519)));
evalcond[8]=((((-1.0)*sj0*x13512))+((r11*x13514))+((cj3*x13508*x13515))+((sj0*x13510))+((gconst16*r10*sj3))+(((-1.0)*x13508*x13513*x13516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13526 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13526.valid){
continue;
}
IkReal x13524=((1.0)*(x13526.value));
IkReal x13525=x13250;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13524)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13524)));
IkReal gconst16=((1.0)*r11*x13525);
IkReal gconst17=((-1.0)*r10*x13525);
IkReal x13527=r12*r12;
IkReal x13528=(cj0*r02);
IkReal x13529=x13250;
IkReal x13530=(sj0*x13529);
j4eval[0]=((IKabs((((r12*x13528*x13529))+(((-1.0)*x13530))+((x13527*x13530)))))+(IKabs((x13528+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1299.value)))+(x1300.value));
=======
IkReal x13531=((1.0)*r02);
IkReal x13532=(sj1*sj2);
IkReal x13533=(cj1*cj2);
IkReal x13534=(gconst16*sj3);
IkReal x13535=(gconst17*r20);
IkReal x13536=((1.0)*sj3);
IkReal x13537=((1.0)*r21);
IkReal x13538=(gconst17*r21);
IkReal x13539=(cj3*gconst16*r20);
CheckValue<IkReal> x13540=IKPowWithIntegerCheck((((r01*x13534*x13535))+((r00*x13534*x13538))+(((-1.0)*gconst17*r00*x13535*x13536))+(((-1.0)*gconst16*r01*x13534*x13537))),-1);
if(!x13540.valid){
continue;
}
CheckValue<IkReal> x13541=IKPowWithIntegerCheck((((sj3*x13535))+(((-1.0)*x13534*x13537))),-1);
if(!x13541.valid){
continue;
}
if( IKabs(((x13540.value)*(((((-1.0)*sj0*x13535*x13536))+((r21*sj0*x13534))+((r02*x13533))+(((-1.0)*cj3*x13531*x13538))+(((-1.0)*x13531*x13539))+(((-1.0)*x13531*x13532)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13541.value)*((x13533+(((-1.0)*x13532))+(((-1.0)*x13539))+(((-1.0)*cj3*gconst17*x13537)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13540.value)*(((((-1.0)*sj0*x13535*x13536))+((r21*sj0*x13534))+((r02*x13533))+(((-1.0)*cj3*x13531*x13538))+(((-1.0)*x13531*x13539))+(((-1.0)*x13531*x13532))))))+IKsqr(((x13541.value)*((x13533+(((-1.0)*x13532))+(((-1.0)*x13539))+(((-1.0)*cj3*gconst17*x13537))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13540.value)*(((((-1.0)*sj0*x13535*x13536))+((r21*sj0*x13534))+((r02*x13533))+(((-1.0)*cj3*x13531*x13538))+(((-1.0)*x13531*x13539))+(((-1.0)*x13531*x13532))))), ((x13541.value)*((x13533+(((-1.0)*x13532))+(((-1.0)*x13539))+(((-1.0)*cj3*gconst17*x13537))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1301=IKsin(j4);
IkReal x1302=IKcos(j4);
IkReal x1303=(cj5*r10);
IkReal x1304=(cj2*sj1);
IkReal x1305=(r01*sj5);
IkReal x1306=(cj5*r00);
IkReal x1307=(cj5*r20);
IkReal x1308=(cj1*sj2);
IkReal x1309=((1.0)*x1302);
IkReal x1310=((1.0)*x1301);
IkReal x1311=(sj5*x1301);
evalcond[0]=((((-1.0)*r22*x1309))+(((-1.0)*x1307*x1310))+((r21*x1311)));
evalcond[1]=(sj0+(((-1.0)*x1306*x1310))+(((-1.0)*r02*x1309))+((x1301*x1305)));
evalcond[2]=(((r11*x1311))+(((-1.0)*x1303*x1310))+(((-1.0)*r12*x1309))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1310))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1302*x1307))+(((-1.0)*r21*sj5*x1309)));
evalcond[4]=(((x1302*x1306))+(((-1.0)*r02*x1310))+(((-1.0)*x1305*x1309))+((cj0*x1304))+((cj0*x1308)));
evalcond[5]=((((-1.0)*r12*x1310))+((x1302*x1303))+(((-1.0)*r11*sj5*x1309))+((sj0*x1304))+((sj0*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13542=IKsin(j4);
IkReal x13543=IKcos(j4);
IkReal x13544=((1.0)*gconst17);
IkReal x13545=(gconst17*sj3);
IkReal x13546=(gconst16*r21);
IkReal x13547=(cj3*gconst17);
IkReal x13548=(sj1*sj2);
IkReal x13549=(cj1*cj2);
IkReal x13550=(gconst16*sj3);
IkReal x13551=(cj3*gconst16);
IkReal x13552=(cj2*sj1);
IkReal x13553=(cj1*sj2);
IkReal x13554=((1.0)*sj3);
IkReal x13555=((1.0)*cj0);
IkReal x13556=(cj3*x13543);
IkReal x13557=(gconst16*x13542);
IkReal x13558=((1.0)*x13543);
IkReal x13559=(r02*x13542);
IkReal x13560=(r12*x13542);
evalcond[0]=((((-1.0)*r20*x13542*x13544))+((x13542*x13546)));
evalcond[1]=(sj0+((r01*x13557))+(((-1.0)*r02*x13558))+(((-1.0)*r00*x13542*x13544)));
evalcond[2]=(((r11*x13557))+(((-1.0)*x13555))+(((-1.0)*r10*x13542*x13544))+(((-1.0)*r12*x13558)));
evalcond[3]=(x13553+x13552+((r21*x13545))+(((-1.0)*r20*x13544*x13556))+((r20*x13550))+((x13546*x13556)));
evalcond[4]=(x13548+((r21*x13547))+((r20*x13543*x13545))+((r20*x13551))+(((-1.0)*x13549))+(((-1.0)*x13543*x13546*x13554)));
evalcond[5]=(((r00*x13551))+((r01*x13547))+(((-1.0)*x13554*x13559))+((cj0*x13552))+((cj0*x13553))+((r00*x13543*x13545))+(((-1.0)*r01*x13550*x13558)));
evalcond[6]=(((r01*x13543*x13551))+((r00*x13550))+((r01*x13545))+((cj3*x13559))+(((-1.0)*x13548*x13555))+((cj0*x13549))+(((-1.0)*r00*x13544*x13556)));
evalcond[7]=((((-1.0)*x13554*x13560))+((r10*x13543*x13545))+((sj0*x13552))+((sj0*x13553))+((r10*x13551))+((r11*x13547))+(((-1.0)*r11*x13550*x13558)));
evalcond[8]=((((-1.0)*r10*x13544*x13556))+((sj0*x13549))+((r11*x13543*x13551))+((r10*x13550))+((r11*x13545))+((cj3*x13560))+(((-1.0)*sj0*x13548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1312=cj5*cj5;
IkReal x1313=r21*r21;
IkReal x1314=(sj1*sj2);
IkReal x1315=(r21*sj5);
IkReal x1316=(cj1*cj2);
IkReal x1317=(cj5*r20);
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1316))+((r22*x1314)))),IkReal((((x1314*x1315))+((x1316*x1317))+(((-1.0)*x1314*x1317))+(((-1.0)*x1315*x1316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign((x1313+((x1312*(r20*r20)))+(r22*r22)+(((-2.0)*x1315*x1317))+(((-1.0)*x1312*x1313)))),-1);
if(!x1319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1318.value)+(((1.5707963267949)*(x1319.value))));
=======
IkReal x13561=((1.0)*gconst17);
CheckValue<IkReal> x13562=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13561)))),-1);
if(!x13562.valid){
continue;
}
CheckValue<IkReal> x13563 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13561))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13562.value)))+(x13563.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[2];
IkReal x1320=IKsin(j4);
IkReal x1321=IKcos(j4);
IkReal x1322=(r21*sj5);
IkReal x1323=(cj5*r20);
IkReal x1324=((1.0)*x1321);
IkReal x1325=((1.0)*x1320);
evalcond[0]=((((-1.0)*x1323*x1325))+(((-1.0)*r22*x1324))+((x1320*x1322)));
evalcond[1]=((((-1.0)*r22*x1325))+(((-1.0)*x1322*x1324))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1321*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1326=(cj5*sj4);
IkReal x1327=(sj4*sj5);
if( IKabs((((r00*x1326))+(((-1.0)*r01*x1327))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1326))+((r11*x1327))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1326))+(((-1.0)*r01*x1327))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1326))+((r11*x1327))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1326))+(((-1.0)*r01*x1327))+((cj4*r02))), ((((-1.0)*r10*x1326))+((r11*x1327))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1328=IKcos(j0);
IkReal x1329=IKsin(j0);
IkReal x1330=(cj4*cj5);
IkReal x1331=(cj5*r01);
IkReal x1332=((1.0)*sj1);
IkReal x1333=(r11*sj5);
IkReal x1334=((1.0)*sj4);
IkReal x1335=((0.21325)*sj1);
IkReal x1336=((0.24365)*cj1);
IkReal x1337=(r00*sj5);
IkReal x1338=(cj5*r11);
IkReal x1339=((1.0)*cj4);
IkReal x1340=(r01*sj5);
IkReal x1341=(r10*sj5);
IkReal x1342=(sj2*x1329);
IkReal x1343=(cj2*x1328);
IkReal x1344=(sj2*x1328);
IkReal x1345=(cj1*cj2*x1329);
evalcond[0]=(x1329+((sj4*x1340))+(((-1.0)*cj5*r00*x1334))+(((-1.0)*r02*x1339)));
evalcond[1]=(((sj4*x1333))+(((-1.0)*cj5*r10*x1334))+(((-1.0)*x1328))+(((-1.0)*r12*x1339)));
evalcond[2]=(x1337+x1331+((cj1*x1343))+(((-1.0)*x1332*x1344)));
evalcond[3]=(x1341+x1345+x1338+(((-1.0)*x1332*x1342)));
evalcond[4]=(((sj1*x1343))+((cj1*x1344))+((r00*x1330))+(((-1.0)*x1339*x1340))+(((-1.0)*r02*x1334)));
evalcond[5]=(((cj1*x1342))+((cj2*sj1*x1329))+(((-1.0)*x1333*x1339))+((r10*x1330))+(((-1.0)*r12*x1334)));
evalcond[6]=((((-0.08535)*x1337))+(((-0.08535)*x1331))+(((-1.0)*x1328*x1336))+(((-1.0)*px))+(((-0.21325)*cj1*x1343))+(((0.11)*x1329))+((x1335*x1344)));
evalcond[7]=((((-0.08535)*x1338))+(((-0.08535)*x1341))+(((-0.11)*x1328))+(((-1.0)*py))+(((-1.0)*x1329*x1336))+((x1335*x1342))+(((-0.21325)*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13564=IKsin(j4);
IkReal x13565=IKcos(j4);
IkReal x13566=((1.0)*gconst17);
IkReal x13567=(gconst17*sj3);
IkReal x13568=(gconst16*r21);
IkReal x13569=(cj3*gconst17);
IkReal x13570=(sj1*sj2);
IkReal x13571=(cj1*cj2);
IkReal x13572=(gconst16*sj3);
IkReal x13573=(cj3*gconst16);
IkReal x13574=(cj2*sj1);
IkReal x13575=(cj1*sj2);
IkReal x13576=((1.0)*sj3);
IkReal x13577=((1.0)*cj0);
IkReal x13578=(cj3*x13565);
IkReal x13579=(gconst16*x13564);
IkReal x13580=((1.0)*x13565);
IkReal x13581=(r02*x13564);
IkReal x13582=(r12*x13564);
evalcond[0]=(((x13564*x13568))+(((-1.0)*r20*x13564*x13566)));
evalcond[1]=(sj0+(((-1.0)*r02*x13580))+(((-1.0)*r00*x13564*x13566))+((r01*x13579)));
evalcond[2]=((((-1.0)*r12*x13580))+((r11*x13579))+(((-1.0)*r10*x13564*x13566))+(((-1.0)*x13577)));
evalcond[3]=(x13575+x13574+((x13568*x13578))+((r20*x13572))+(((-1.0)*r20*x13566*x13578))+((r21*x13567)));
evalcond[4]=(x13570+(((-1.0)*x13565*x13568*x13576))+((r20*x13573))+(((-1.0)*x13571))+((r20*x13565*x13567))+((r21*x13569)));
evalcond[5]=((((-1.0)*r01*x13572*x13580))+((r00*x13573))+((r01*x13569))+((cj0*x13574))+((cj0*x13575))+(((-1.0)*x13576*x13581))+((r00*x13565*x13567)));
evalcond[6]=(((r00*x13572))+((r01*x13567))+((cj0*x13571))+(((-1.0)*x13570*x13577))+((cj3*x13581))+(((-1.0)*r00*x13566*x13578))+((r01*x13565*x13573)));
evalcond[7]=(((r10*x13573))+((r10*x13565*x13567))+((r11*x13569))+(((-1.0)*r11*x13572*x13580))+(((-1.0)*x13576*x13582))+((sj0*x13574))+((sj0*x13575)));
evalcond[8]=(((r10*x13572))+(((-1.0)*sj0*x13570))+(((-1.0)*r10*x13566*x13578))+((r11*x13567))+((sj0*x13571))+((cj3*x13582))+((r11*x13565*x13573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1346=((1.0)*cj5);
IkReal x1347=((1.0)*sj5);
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1348.valid){
continue;
}
CheckValue<IkReal> x1349 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1346))+(((-1.0)*r10*x1347)))),IkReal(((((-1.0)*r00*x1347))+(((-1.0)*r01*x1346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1349.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1348.value)))+(x1349.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
=======
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
}
}
}
}
}
<<<<<<< HEAD
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1350=IKcos(j0);
IkReal x1351=IKsin(j0);
IkReal x1352=(cj5*r01);
IkReal x1353=(sj1*sj2);
IkReal x1354=(cj5*r11);
IkReal x1355=(r00*sj5);
IkReal x1356=((0.24365)*cj1);
IkReal x1357=(r10*sj5);
IkReal x1358=(cj1*cj2*x1351);
IkReal x1359=(cj1*cj2*x1350);
evalcond[0]=(x1359+x1352+x1355+(((-1.0)*x1350*x1353)));
evalcond[1]=((((-1.0)*x1351*x1353))+x1358+x1357+x1354);
evalcond[2]=((((-1.0)*x1350*x1356))+(((0.11)*x1351))+(((-1.0)*px))+(((-0.08535)*x1352))+(((-0.08535)*x1355))+(((0.21325)*x1350*x1353))+(((-0.21325)*x1359)));
evalcond[3]=((((-0.11)*x1350))+(((-1.0)*py))+(((-0.08535)*x1357))+(((-0.08535)*x1354))+(((-1.0)*x1351*x1356))+(((-0.21325)*x1358))+(((0.21325)*x1351*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1360=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1360;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1361=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1361;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1362=((1.0)*cj5);
IkReal x1363=((((-1.0)*r21*x1362))+(((-1.0)*r20*sj5)));
j4eval[0]=x1363;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1362))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1362))))));
j4eval[2]=IKsign(x1363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

=======
}
}

>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1364=((1.0)*cj5);
CheckValue<IkReal> x1365 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1364))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1365.valid){
continue;
}
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1364))+(((-1.0)*r20*sj5)))),-1);
if(!x1366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1365.value)+(((1.5707963267949)*(x1366.value))));
=======
IkReal x13583=r21*r21;
IkReal x13584=gconst16*gconst16;
IkReal x13585=r20*r20;
IkReal x13586=gconst17*gconst17;
IkReal x13587=(gconst16*r21);
IkReal x13588=(cj1*sj2);
IkReal x13589=(cj2*sj1);
IkReal x13590=(gconst17*r20);
IkReal x13591=(gconst16*sj3);
IkReal x13592=(r21*sj3);
IkReal x13593=((1.0)*cj3);
CheckValue<IkReal> x13594=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13583*x13584*x13593))+(((-1.0)*x13593*(r22*r22)))+(((2.0)*cj3*x13587*x13590))+(((-1.0)*x13585*x13586*x13593)))),-1);
if(!x13594.valid){
continue;
}
CheckValue<IkReal> x13595 = IKatan2WithCheck(IkReal((((r20*r22*x13591))+((gconst17*r22*x13592))+((r22*x13588))+((r22*x13589)))),IkReal(((((-1.0)*x13588*x13590))+(((-1.0)*gconst17*x13585*x13591))+(((-1.0)*x13589*x13590))+(((-1.0)*r20*x13586*x13592))+((gconst17*x13583*x13591))+((x13587*x13589))+((x13587*x13588))+((r20*x13584*x13592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13594.value)))+(x13595.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1367=IKsin(j4);
IkReal x1368=IKcos(j4);
IkReal x1369=(cj5*r10);
IkReal x1370=(cj2*sj1);
IkReal x1371=(r01*sj5);
IkReal x1372=(cj5*r00);
IkReal x1373=(cj5*r20);
IkReal x1374=(cj1*sj2);
IkReal x1375=((1.0)*x1368);
IkReal x1376=((1.0)*x1367);
IkReal x1377=(sj5*x1367);
evalcond[0]=((((-1.0)*r22*x1375))+((r21*x1377))+(((-1.0)*x1373*x1376)));
evalcond[1]=(sj0+((x1367*x1371))+(((-1.0)*x1372*x1376))+(((-1.0)*r02*x1375)));
evalcond[2]=(((r11*x1377))+(((-1.0)*r12*x1375))+(((-1.0)*x1369*x1376))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1368*x1373))+(((-1.0)*r21*sj5*x1375)));
evalcond[4]=((((-1.0)*x1371*x1375))+(((-1.0)*r02*x1376))+((x1368*x1372))+((cj0*x1370))+((cj0*x1374)));
evalcond[5]=((((-1.0)*r12*x1376))+(((-1.0)*r11*sj5*x1375))+((x1368*x1369))+((sj0*x1374))+((sj0*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13596=IKsin(j4);
IkReal x13597=IKcos(j4);
IkReal x13598=(cj3*gconst17);
IkReal x13599=(gconst16*r21);
IkReal x13600=(gconst17*sj3);
IkReal x13601=(gconst16*r20);
IkReal x13602=(sj1*sj2);
IkReal x13603=(cj1*cj2);
IkReal x13604=(gconst16*r10);
IkReal x13605=(cj2*sj1);
IkReal x13606=(gconst16*sj3);
IkReal x13607=(cj1*sj2);
IkReal x13608=((1.0)*cj0);
IkReal x13609=((1.0)*x13597);
IkReal x13610=(gconst16*x13596);
IkReal x13611=(cj3*x13597);
IkReal x13612=(cj3*x13596);
IkReal x13613=((1.0)*gconst17*x13596);
IkReal x13614=((1.0)*sj3*x13596);
evalcond[0]=((((-1.0)*r20*x13613))+(((-1.0)*r22*x13609))+((x13596*x13599)));
evalcond[1]=(sj0+(((-1.0)*r02*x13609))+((r01*x13610))+(((-1.0)*r00*x13613)));
evalcond[2]=((((-1.0)*r10*x13613))+(((-1.0)*r12*x13609))+((r11*x13610))+(((-1.0)*x13608)));
evalcond[3]=(x13605+x13607+((x13599*x13611))+((sj3*x13601))+((r21*x13600))+(((-1.0)*r20*x13598*x13609))+((r22*x13612)));
evalcond[4]=((((-1.0)*x13603))+x13602+((r20*x13597*x13600))+((r21*x13598))+(((-1.0)*sj3*x13599*x13609))+((cj3*x13601))+(((-1.0)*r22*x13614)));
evalcond[5]=(((cj0*x13607))+((cj0*x13605))+((r01*x13598))+(((-1.0)*r02*x13614))+((r00*x13597*x13600))+(((-1.0)*r01*x13606*x13609))+((cj3*gconst16*r00)));
evalcond[6]=(((gconst16*r01*x13611))+((cj0*x13603))+(((-1.0)*r00*x13598*x13609))+((r02*x13612))+((r00*x13606))+((r01*x13600))+(((-1.0)*x13602*x13608)));
evalcond[7]=(((r11*x13598))+(((-1.0)*r11*x13606*x13609))+((r10*x13597*x13600))+((sj0*x13607))+((sj0*x13605))+((cj3*x13604))+(((-1.0)*r12*x13614)));
evalcond[8]=(((r11*x13600))+(((-1.0)*sj0*x13602))+((gconst16*r11*x13611))+((sj0*x13603))+((sj3*x13604))+((r12*x13612))+(((-1.0)*r10*x13598*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1378.valid){
continue;
}
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1378.value)))+(x1379.value));
=======
IkReal x13615=((1.0)*gconst17);
CheckValue<IkReal> x13616=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13615)))),-1);
if(!x13616.valid){
continue;
}
CheckValue<IkReal> x13617 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13615))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13616.value)))+(x13617.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1380=IKsin(j4);
IkReal x1381=IKcos(j4);
IkReal x1382=(cj5*r10);
IkReal x1383=(cj2*sj1);
IkReal x1384=(r01*sj5);
IkReal x1385=(cj5*r00);
IkReal x1386=(cj5*r20);
IkReal x1387=(cj1*sj2);
IkReal x1388=((1.0)*x1381);
IkReal x1389=((1.0)*x1380);
IkReal x1390=(sj5*x1380);
evalcond[0]=(((r21*x1390))+(((-1.0)*r22*x1388))+(((-1.0)*x1386*x1389)));
evalcond[1]=(((x1380*x1384))+sj0+(((-1.0)*r02*x1388))+(((-1.0)*x1385*x1389)));
evalcond[2]=((((-1.0)*r12*x1388))+(((-1.0)*x1382*x1389))+((r11*x1390))+(((-1.0)*cj0)));
evalcond[3]=(((x1381*x1386))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1388))+(((-1.0)*r22*x1389)));
evalcond[4]=(((x1381*x1385))+(((-1.0)*x1384*x1388))+(((-1.0)*r02*x1389))+((cj0*x1387))+((cj0*x1383)));
evalcond[5]=((((-1.0)*r12*x1389))+((x1381*x1382))+(((-1.0)*r11*sj5*x1388))+((sj0*x1387))+((sj0*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13618=IKsin(j4);
IkReal x13619=IKcos(j4);
IkReal x13620=(cj3*gconst17);
IkReal x13621=(gconst16*r21);
IkReal x13622=(gconst17*sj3);
IkReal x13623=(gconst16*r20);
IkReal x13624=(sj1*sj2);
IkReal x13625=(cj1*cj2);
IkReal x13626=(gconst16*r10);
IkReal x13627=(cj2*sj1);
IkReal x13628=(gconst16*sj3);
IkReal x13629=(cj1*sj2);
IkReal x13630=((1.0)*cj0);
IkReal x13631=((1.0)*x13619);
IkReal x13632=(gconst16*x13618);
IkReal x13633=(cj3*x13619);
IkReal x13634=(cj3*x13618);
IkReal x13635=((1.0)*gconst17*x13618);
IkReal x13636=((1.0)*sj3*x13618);
evalcond[0]=(((x13618*x13621))+(((-1.0)*r22*x13631))+(((-1.0)*r20*x13635)));
evalcond[1]=((((-1.0)*r02*x13631))+sj0+(((-1.0)*r00*x13635))+((r01*x13632)));
evalcond[2]=(((r11*x13632))+(((-1.0)*r12*x13631))+(((-1.0)*x13630))+(((-1.0)*r10*x13635)));
evalcond[3]=(x13627+x13629+((r22*x13634))+((r21*x13622))+((x13621*x13633))+(((-1.0)*r20*x13620*x13631))+((sj3*x13623)));
evalcond[4]=((((-1.0)*sj3*x13621*x13631))+x13624+((r20*x13619*x13622))+((r21*x13620))+(((-1.0)*r22*x13636))+((cj3*x13623))+(((-1.0)*x13625)));
evalcond[5]=(((cj0*x13627))+((cj0*x13629))+(((-1.0)*r02*x13636))+(((-1.0)*r01*x13628*x13631))+((r01*x13620))+((cj3*gconst16*r00))+((r00*x13619*x13622)));
evalcond[6]=(((cj0*x13625))+(((-1.0)*x13624*x13630))+(((-1.0)*r00*x13620*x13631))+((r02*x13634))+((gconst16*r01*x13633))+((r01*x13622))+((r00*x13628)));
evalcond[7]=(((r11*x13620))+((sj0*x13627))+((sj0*x13629))+(((-1.0)*r12*x13636))+(((-1.0)*r11*x13628*x13631))+((r10*x13619*x13622))+((cj3*x13626)));
evalcond[8]=((((-1.0)*sj0*x13624))+((r11*x13622))+((r12*x13634))+((sj0*x13625))+(((-1.0)*r10*x13620*x13631))+((gconst16*r11*x13633))+((sj3*x13626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1391.value)))+(x1392.value));
=======
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13637.valid){
continue;
}
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13637.value)))+(x13638.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1393=IKsin(j4);
IkReal x1394=IKcos(j4);
IkReal x1395=(cj5*r10);
IkReal x1396=(cj2*sj1);
IkReal x1397=(r01*sj5);
IkReal x1398=(cj5*r00);
IkReal x1399=(cj5*r20);
IkReal x1400=(cj1*sj2);
IkReal x1401=((1.0)*x1394);
IkReal x1402=((1.0)*x1393);
IkReal x1403=(sj5*x1393);
evalcond[0]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1401))+((r21*x1403)));
evalcond[1]=(sj0+((x1393*x1397))+(((-1.0)*x1398*x1402))+(((-1.0)*r02*x1401)));
evalcond[2]=((((-1.0)*r12*x1401))+((r11*x1403))+(((-1.0)*x1395*x1402))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1402))+((x1394*x1399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1401)));
evalcond[4]=(((x1394*x1398))+((cj0*x1400))+(((-1.0)*r02*x1402))+((cj0*x1396))+(((-1.0)*x1397*x1401)));
evalcond[5]=((((-1.0)*r12*x1402))+(((-1.0)*r11*sj5*x1401))+((x1394*x1395))+((sj0*x1396))+((sj0*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13639=IKsin(j4);
IkReal x13640=IKcos(j4);
IkReal x13641=(cj3*gconst17);
IkReal x13642=(gconst16*r21);
IkReal x13643=(gconst17*sj3);
IkReal x13644=(gconst16*r20);
IkReal x13645=(sj1*sj2);
IkReal x13646=(cj1*cj2);
IkReal x13647=(gconst16*r10);
IkReal x13648=(cj2*sj1);
IkReal x13649=(gconst16*sj3);
IkReal x13650=(cj1*sj2);
IkReal x13651=((1.0)*cj0);
IkReal x13652=((1.0)*x13640);
IkReal x13653=(gconst16*x13639);
IkReal x13654=(cj3*x13640);
IkReal x13655=(cj3*x13639);
IkReal x13656=((1.0)*gconst17*x13639);
IkReal x13657=((1.0)*sj3*x13639);
evalcond[0]=((((-1.0)*r20*x13656))+((x13639*x13642))+(((-1.0)*r22*x13652)));
evalcond[1]=((((-1.0)*r00*x13656))+sj0+((r01*x13653))+(((-1.0)*r02*x13652)));
evalcond[2]=((((-1.0)*r12*x13652))+(((-1.0)*r10*x13656))+((r11*x13653))+(((-1.0)*x13651)));
evalcond[3]=(x13650+x13648+((x13642*x13654))+(((-1.0)*r20*x13641*x13652))+((sj3*x13644))+((r22*x13655))+((r21*x13643)));
evalcond[4]=(x13645+((r20*x13640*x13643))+(((-1.0)*r22*x13657))+(((-1.0)*sj3*x13642*x13652))+(((-1.0)*x13646))+((r21*x13641))+((cj3*x13644)));
evalcond[5]=(((r00*x13640*x13643))+(((-1.0)*r02*x13657))+((cj0*x13650))+(((-1.0)*r01*x13649*x13652))+((r01*x13641))+((cj3*gconst16*r00))+((cj0*x13648)));
evalcond[6]=((((-1.0)*x13645*x13651))+((r00*x13649))+((r02*x13655))+((r01*x13643))+(((-1.0)*r00*x13641*x13652))+((gconst16*r01*x13654))+((cj0*x13646)));
evalcond[7]=(((r11*x13641))+((sj0*x13650))+(((-1.0)*r11*x13649*x13652))+(((-1.0)*r12*x13657))+((r10*x13640*x13643))+((sj0*x13648))+((cj3*x13647)));
evalcond[8]=(((gconst16*r11*x13654))+((r12*x13655))+((r11*x13643))+((sj3*x13647))+(((-1.0)*r10*x13641*x13652))+(((-1.0)*sj0*x13645))+((sj0*x13646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13658=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13658;
j4eval[1]=IKsign(x13658);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13659=((1.0)*cj5);
IkReal x13660=((((-1.0)*r21*x13659))+(((-1.0)*r20*sj5)));
j4eval[0]=x13660;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13659))+((r01*sj5))))));
j4eval[2]=IKsign(x13660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13661=cj5*cj5;
IkReal x13662=(cj3*r21);
IkReal x13663=(cj5*sj5);
IkReal x13664=((1.0)*cj3);
IkReal x13665=(((cj3*r11*r20*x13663))+((r11*x13661*x13662))+((r10*x13662*x13663))+(((-1.0)*r12*r22*x13664))+(((-1.0)*r10*r20*x13661*x13664))+(((-1.0)*r11*x13662)));
j4eval[0]=x13665;
j4eval[1]=IKsign(x13665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
<<<<<<< HEAD
j3=-1.5707963267949;
IkReal x1404=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1404;
j0eval[1]=IKsign(x1404);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
=======
j3=1.5707963267949;
IkReal x13666=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13666;
j4eval[1]=IKsign(x13666);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
<<<<<<< HEAD
j3=-1.5707963267949;
IkReal x1405=r21*r21;
IkReal x1406=cj5*cj5;
IkReal x1407=(sj1*sj2);
IkReal x1408=(r21*sj5);
IkReal x1409=(cj5*r20);
IkReal x1410=(cj1*cj2);
IkReal x1411=((((-1.0)*x1405))+(((-1.0)*x1406*(r20*r20)))+(((2.0)*x1408*x1409))+((x1405*x1406))+(((-1.0)*(r22*r22))));
j4eval[0]=x1411;
j4eval[1]=((IKabs(((((-1.0)*x1407*x1409))+((x1409*x1410))+(((-1.0)*x1408*x1410))+((x1407*x1408)))))+(IKabs(((((-1.0)*r22*x1410))+((r22*x1407))))));
j4eval[2]=IKsign(x1411);
=======
j3=1.5707963267949;
IkReal x13667=((1.0)*cj5);
IkReal x13668=((((-1.0)*r21*x13667))+(((-1.0)*r20*sj5)));
j4eval[0]=x13668;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13667))))));
j4eval[2]=IKsign(x13668);
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13669=cj5*cj5;
IkReal x13670=r11*r11;
IkReal x13671=(cj5*r10);
IkReal x13672=(r11*sj5);
IkReal x13673=((((2.0)*x13671*x13672))+((x13669*x13670))+(((-1.0)*x13669*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13670)));
j4eval[0]=x13673;
j4eval[1]=((IKabs(r12))+(IKabs((x13671+(((-1.0)*x13672))))));
j4eval[2]=IKsign(x13673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
<<<<<<< HEAD
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1412=(cj1*cj2);
IkReal x1413=(sj1*sj2);
IkReal x1414=(r00*sj5);
IkReal x1415=((100.0)*px);
IkReal x1416=(cj5*r01);
IkReal x1417=((24.365)*cj1);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(((((-11.0)*x1413))+(((11.0)*x1412))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck((x1412+(((-1.0)*x1413))),-1);
if(!x1419.valid){
continue;
}
if( IKabs(((x1418.value)*((((x1412*x1415))+(((-1.0)*x1413*x1415))+((x1416*x1417))+(((29.86)*x1412*x1414))+(((29.86)*x1412*x1416))+(((-29.86)*x1413*x1416))+(((-29.86)*x1413*x1414))+((x1414*x1417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1419.value)*((x1414+x1416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1418.value)*((((x1412*x1415))+(((-1.0)*x1413*x1415))+((x1416*x1417))+(((29.86)*x1412*x1414))+(((29.86)*x1412*x1416))+(((-29.86)*x1413*x1416))+(((-29.86)*x1413*x1414))+((x1414*x1417))))))+IKsqr(((x1419.value)*((x1414+x1416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1418.value)*((((x1412*x1415))+(((-1.0)*x1413*x1415))+((x1416*x1417))+(((29.86)*x1412*x1414))+(((29.86)*x1412*x1416))+(((-29.86)*x1413*x1416))+(((-29.86)*x1413*x1414))+((x1414*x1417))))), ((x1419.value)*((x1414+x1416))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
=======
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13674=cj5*cj5;
IkReal x13675=r11*r11;
IkReal x13676=(cj5*r10);
IkReal x13677=(r11*sj5);
CheckValue<IkReal> x13678=IKPowWithIntegerCheck(IKsign(((((2.0)*x13676*x13677))+(((-1.0)*(r12*r12)))+(((-1.0)*x13675))+((x13674*x13675))+(((-1.0)*x13674*(r10*r10))))),-1);
if(!x13678.valid){
continue;
}
CheckValue<IkReal> x13679 = IKatan2WithCheck(IkReal((x13676+(((-1.0)*x13677)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13678.value)))+(x13679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[4];
IkReal x1420=IKcos(j0);
IkReal x1421=IKsin(j0);
IkReal x1422=(sj1*sj2);
IkReal x1423=(cj5*r11);
IkReal x1424=((1.0)*sj5);
IkReal x1425=(cj5*r01);
IkReal x1426=((0.24365)*cj1);
IkReal x1427=((0.08535)*sj5);
IkReal x1428=(cj1*cj2*x1421);
IkReal x1429=(cj1*cj2*x1420);
evalcond[0]=((((-1.0)*x1420*x1422))+(((-1.0)*x1425))+x1429+(((-1.0)*r00*x1424)));
evalcond[1]=((((-1.0)*r10*x1424))+(((-1.0)*x1423))+(((-1.0)*x1421*x1422))+x1428);
evalcond[2]=((((-0.08535)*x1425))+(((0.21325)*x1420*x1422))+(((-0.21325)*x1429))+(((-1.0)*x1420*x1426))+(((-1.0)*px))+(((0.11)*x1421))+(((-1.0)*r00*x1427)));
evalcond[3]=((((-1.0)*x1421*x1426))+(((-0.08535)*x1423))+(((-1.0)*r10*x1427))+(((-0.21325)*x1428))+(((-0.11)*x1420))+(((-1.0)*py))+(((0.21325)*x1421*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[6];
IkReal x13680=IKsin(j4);
IkReal x13681=IKcos(j4);
IkReal x13682=(cj5*r10);
IkReal x13683=(r01*sj5);
IkReal x13684=(cj5*r00);
IkReal x13685=(cj5*r20);
IkReal x13686=((1.0)*x13681);
IkReal x13687=((1.0)*x13680);
IkReal x13688=(sj5*x13680);
evalcond[0]=((((-1.0)*r22*x13686))+(((-1.0)*x13685*x13687))+((r21*x13688)));
evalcond[1]=((((-1.0)*x13684*x13687))+((x13680*x13683))+(((-1.0)*r02*x13686)));
evalcond[2]=((((-1.0)*r12*x13687))+((x13681*x13682))+(((-1.0)*r11*sj5*x13686)));
evalcond[3]=((-1.0)+((r11*x13688))+(((-1.0)*x13682*x13687))+(((-1.0)*r12*x13686)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13681*x13684))+(((-1.0)*r02*x13687))+(((-1.0)*x13683*x13686)));
evalcond[5]=((((-1.0)*r22*x13687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13686))+((x13681*x13685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
<<<<<<< HEAD
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1430=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1430;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1431=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1431;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1432=((1.0)*cj5);
IkReal x1433=((((-1.0)*r21*x1432))+(((-1.0)*r20*sj5)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1432))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1432))))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached
=======
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1434=((1.0)*cj5);
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1434))+(((-1.0)*r20*sj5)))),-1);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1434))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1435.value)))+(x1436.value));
=======
IkReal x13689=((1.0)*cj5);
CheckValue<IkReal> x13690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13689))+(((-1.0)*r20*sj5)))),-1);
if(!x13690.valid){
continue;
}
CheckValue<IkReal> x13691 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13690.value)))+(x13691.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1437=IKsin(j4);
IkReal x1438=IKcos(j4);
IkReal x1439=(cj5*r00);
IkReal x1440=(cj5*r10);
IkReal x1441=(cj2*sj1);
IkReal x1442=(r21*sj5);
IkReal x1443=(cj5*r20);
IkReal x1444=(cj1*sj2);
IkReal x1445=((1.0)*x1438);
IkReal x1446=((1.0)*x1437);
IkReal x1447=(sj5*x1437);
IkReal x1448=(sj5*x1438);
evalcond[0]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1443*x1446)));
evalcond[1]=(sj0+(((-1.0)*x1439*x1446))+(((-1.0)*r02*x1445))+((r01*x1447)));
evalcond[2]=(((r11*x1447))+(((-1.0)*r12*x1445))+(((-1.0)*x1440*x1446))+(((-1.0)*cj0)));
evalcond[3]=(((x1438*x1442))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1443*x1445))+((r22*x1437)));
evalcond[4]=(((r02*x1437))+(((-1.0)*x1439*x1445))+((cj0*x1441))+((cj0*x1444))+((r01*x1448)));
evalcond[5]=(((r11*x1448))+((sj0*x1441))+((sj0*x1444))+((r12*x1437))+(((-1.0)*x1440*x1445)));
=======
IkReal x13692=IKsin(j4);
IkReal x13693=IKcos(j4);
IkReal x13694=(cj5*r10);
IkReal x13695=(r01*sj5);
IkReal x13696=(cj5*r00);
IkReal x13697=(cj5*r20);
IkReal x13698=((1.0)*x13693);
IkReal x13699=((1.0)*x13692);
IkReal x13700=(sj5*x13692);
evalcond[0]=(((r21*x13700))+(((-1.0)*r22*x13698))+(((-1.0)*x13697*x13699)));
evalcond[1]=(((x13692*x13695))+(((-1.0)*r02*x13698))+(((-1.0)*x13696*x13699)));
evalcond[2]=((((-1.0)*r11*sj5*x13698))+((x13693*x13694))+(((-1.0)*r12*x13699)));
evalcond[3]=((-1.0)+(((-1.0)*x13694*x13699))+((r11*x13700))+(((-1.0)*r12*x13698)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13699))+((cj1*sj2))+(((-1.0)*x13695*x13698))+((x13693*x13696)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13699))+(((-1.0)*r21*sj5*x13698))+((x13693*x13697)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1449.valid){
continue;
}
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1449.value)))+(x1450.value));
=======
CheckValue<IkReal> x13701 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13701.valid){
continue;
}
CheckValue<IkReal> x13702=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13701.value)+(((1.5707963267949)*(x13702.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1451=IKsin(j4);
IkReal x1452=IKcos(j4);
IkReal x1453=(cj5*r00);
IkReal x1454=(cj5*r10);
IkReal x1455=(cj2*sj1);
IkReal x1456=(r21*sj5);
IkReal x1457=(cj5*r20);
IkReal x1458=(cj1*sj2);
IkReal x1459=((1.0)*x1452);
IkReal x1460=((1.0)*x1451);
IkReal x1461=(sj5*x1451);
IkReal x1462=(sj5*x1452);
evalcond[0]=((((-1.0)*r22*x1459))+(((-1.0)*x1457*x1460))+((x1451*x1456)));
evalcond[1]=(sj0+(((-1.0)*x1453*x1460))+((r01*x1461))+(((-1.0)*r02*x1459)));
evalcond[2]=((((-1.0)*x1454*x1460))+((r11*x1461))+(((-1.0)*cj0))+(((-1.0)*r12*x1459)));
evalcond[3]=((((-1.0)*x1457*x1459))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1451))+((x1452*x1456)));
evalcond[4]=(((r01*x1462))+((cj0*x1455))+((cj0*x1458))+(((-1.0)*x1453*x1459))+((r02*x1451)));
evalcond[5]=((((-1.0)*x1454*x1459))+((r12*x1451))+((sj0*x1455))+((sj0*x1458))+((r11*x1462)));
=======
IkReal x13703=IKsin(j4);
IkReal x13704=IKcos(j4);
IkReal x13705=(cj5*r10);
IkReal x13706=(r01*sj5);
IkReal x13707=(cj5*r00);
IkReal x13708=(cj5*r20);
IkReal x13709=((1.0)*x13704);
IkReal x13710=((1.0)*x13703);
IkReal x13711=(sj5*x13703);
evalcond[0]=((((-1.0)*r22*x13709))+((r21*x13711))+(((-1.0)*x13708*x13710)));
evalcond[1]=((((-1.0)*x13707*x13710))+(((-1.0)*r02*x13709))+((x13703*x13706)));
evalcond[2]=((((-1.0)*r12*x13710))+((x13704*x13705))+(((-1.0)*r11*sj5*x13709)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13709))+(((-1.0)*x13705*x13710))+((r11*x13711)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13704*x13707))+(((-1.0)*x13706*x13709))+(((-1.0)*r02*x13710)));
evalcond[5]=((((-1.0)*r22*x13710))+((x13704*x13708))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13709)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13712=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13712;
j4eval[1]=IKsign(x13712);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13713=((1.0)*cj5);
IkReal x13714=((((-1.0)*r21*x13713))+(((-1.0)*r20*sj5)));
j4eval[0]=x13714;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13713))))));
j4eval[2]=IKsign(x13714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13715=cj5*cj5;
IkReal x13716=r11*r11;
IkReal x13717=(r11*sj5);
IkReal x13718=(cj5*r10);
IkReal x13719=((r12*r12)+((x13715*(r10*r10)))+x13716+(((-2.0)*x13717*x13718))+(((-1.0)*x13715*x13716)));
j4eval[0]=x13719;
j4eval[1]=IKsign(x13719);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13718))+x13717))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1463.value)))+(x1464.value));
=======
IkReal x13720=cj5*cj5;
IkReal x13721=r11*r11;
IkReal x13722=(cj5*r10);
IkReal x13723=(r11*sj5);
CheckValue<IkReal> x13724=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13721+(((-1.0)*x13720*x13721))+(((-2.0)*x13722*x13723))+((x13720*(r10*r10))))),-1);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725 = IKatan2WithCheck(IkReal((x13723+(((-1.0)*x13722)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13724.value)))+(x13725.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1465=IKsin(j4);
IkReal x1466=IKcos(j4);
IkReal x1467=(cj5*r00);
IkReal x1468=(cj5*r10);
IkReal x1469=(cj2*sj1);
IkReal x1470=(r21*sj5);
IkReal x1471=(cj5*r20);
IkReal x1472=(cj1*sj2);
IkReal x1473=((1.0)*x1466);
IkReal x1474=((1.0)*x1465);
IkReal x1475=(sj5*x1465);
IkReal x1476=(sj5*x1466);
evalcond[0]=((((-1.0)*r22*x1473))+(((-1.0)*x1471*x1474))+((x1465*x1470)));
evalcond[1]=(sj0+(((-1.0)*x1467*x1474))+(((-1.0)*r02*x1473))+((r01*x1475)));
evalcond[2]=(((r11*x1475))+(((-1.0)*r12*x1473))+(((-1.0)*x1468*x1474))+(((-1.0)*cj0)));
evalcond[3]=(((x1466*x1470))+(((-1.0)*x1471*x1473))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1465)));
evalcond[4]=(((cj0*x1469))+(((-1.0)*x1467*x1473))+((cj0*x1472))+((r01*x1476))+((r02*x1465)));
evalcond[5]=(((sj0*x1472))+((r11*x1476))+((r12*x1465))+(((-1.0)*x1468*x1473))+((sj0*x1469)));
=======
IkReal x13726=IKcos(j4);
IkReal x13727=IKsin(j4);
IkReal x13728=(cj5*r00);
IkReal x13729=(cj5*r10);
IkReal x13730=(r21*sj5);
IkReal x13731=(cj5*r20);
IkReal x13732=((1.0)*x13726);
IkReal x13733=((1.0)*x13727);
IkReal x13734=(sj5*x13727);
IkReal x13735=(sj5*x13726);
evalcond[0]=(((r12*x13727))+(((-1.0)*x13729*x13732))+((r11*x13735)));
evalcond[1]=((((-1.0)*r22*x13732))+(((-1.0)*x13731*x13733))+((x13727*x13730)));
evalcond[2]=((((-1.0)*r02*x13732))+(((-1.0)*x13728*x13733))+((r01*x13734)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13732))+(((-1.0)*x13729*x13733))+((r11*x13734)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13728*x13732))+((cj1*sj2))+((r02*x13727))+((r01*x13735)));
evalcond[5]=(((r22*x13727))+(((-1.0)*x13731*x13732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13726*x13730)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1477=r21*r21;
IkReal x1478=cj5*cj5;
IkReal x1479=(sj1*sj2);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj1*cj2);
IkReal x1482=(cj5*r20);
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1478*(r20*r20)))+(((2.0)*x1480*x1482))+(((-1.0)*x1477))+(((-1.0)*(r22*r22)))+((x1477*x1478)))),-1);
if(!x1483.valid){
continue;
}
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1481))+((r22*x1479)))),IkReal(((((-1.0)*x1479*x1482))+((x1481*x1482))+(((-1.0)*x1480*x1481))+((x1479*x1480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1483.value)))+(x1484.value));
=======
IkReal x13736=((1.0)*cj5);
CheckValue<IkReal> x13737 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13737.valid){
continue;
}
CheckValue<IkReal> x13738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13736))+(((-1.0)*r20*sj5)))),-1);
if(!x13738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13737.value)+(((1.5707963267949)*(x13738.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[2];
IkReal x1485=IKsin(j4);
IkReal x1486=IKcos(j4);
IkReal x1487=(r21*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=((1.0)*x1486);
evalcond[0]=((((-1.0)*x1485*x1488))+((x1485*x1487))+(((-1.0)*r22*x1489)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1486*x1487))+(((-1.0)*x1488*x1489))+((r22*x1485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1490=(cj5*sj4);
IkReal x1491=(sj4*sj5);
if( IKabs((((r00*x1490))+(((-1.0)*r01*x1491))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1491))+(((-1.0)*r10*x1490))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1490))+(((-1.0)*r01*x1491))+((cj4*r02))))+IKsqr((((r11*x1491))+(((-1.0)*r10*x1490))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1490))+(((-1.0)*r01*x1491))+((cj4*r02))), (((r11*x1491))+(((-1.0)*r10*x1490))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1492=IKcos(j0);
IkReal x1493=IKsin(j0);
IkReal x1494=((1.0)*sj1);
IkReal x1495=(r11*sj5);
IkReal x1496=((1.0)*cj5);
IkReal x1497=((0.21325)*sj1);
IkReal x1498=((1.0)*sj5);
IkReal x1499=((0.24365)*cj1);
IkReal x1500=((0.08535)*cj5);
IkReal x1501=((1.0)*cj4);
IkReal x1502=(r01*sj5);
IkReal x1503=((0.08535)*sj5);
IkReal x1504=(sj2*x1493);
IkReal x1505=(cj2*x1492);
IkReal x1506=(sj2*x1492);
IkReal x1507=(cj1*cj2*x1493);
evalcond[0]=((((-1.0)*r00*sj4*x1496))+(((-1.0)*r02*x1501))+x1493+((sj4*x1502)));
evalcond[1]=((((-1.0)*r10*sj4*x1496))+(((-1.0)*x1492))+((sj4*x1495))+(((-1.0)*r12*x1501)));
evalcond[2]=((((-1.0)*r00*x1498))+(((-1.0)*r01*x1496))+(((-1.0)*x1494*x1506))+((cj1*x1505)));
evalcond[3]=((((-1.0)*r11*x1496))+(((-1.0)*x1494*x1504))+x1507+(((-1.0)*r10*x1498)));
evalcond[4]=(((r02*sj4))+((sj1*x1505))+((cj1*x1506))+((cj4*x1502))+(((-1.0)*cj4*r00*x1496)));
evalcond[5]=(((cj1*x1504))+(((-1.0)*cj4*r10*x1496))+((r12*sj4))+((cj4*x1495))+((cj2*sj1*x1493)));
evalcond[6]=((((-0.21325)*cj1*x1505))+(((-1.0)*r01*x1500))+(((-1.0)*r00*x1503))+(((-1.0)*x1492*x1499))+(((-1.0)*px))+((x1497*x1506))+(((0.11)*x1493)));
evalcond[7]=((((-1.0)*x1493*x1499))+(((-1.0)*py))+((x1497*x1504))+(((-0.11)*x1492))+(((-0.21325)*x1507))+(((-1.0)*r11*x1500))+(((-1.0)*r10*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[6];
IkReal x13739=IKcos(j4);
IkReal x13740=IKsin(j4);
IkReal x13741=(cj5*r00);
IkReal x13742=(cj5*r10);
IkReal x13743=(r21*sj5);
IkReal x13744=(cj5*r20);
IkReal x13745=((1.0)*x13739);
IkReal x13746=((1.0)*x13740);
IkReal x13747=(sj5*x13740);
IkReal x13748=(sj5*x13739);
evalcond[0]=((((-1.0)*x13742*x13745))+((r12*x13740))+((r11*x13748)));
evalcond[1]=((((-1.0)*r22*x13745))+(((-1.0)*x13744*x13746))+((x13740*x13743)));
evalcond[2]=((((-1.0)*r02*x13745))+((r01*x13747))+(((-1.0)*x13741*x13746)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13745))+(((-1.0)*x13742*x13746))+((r11*x13747)));
evalcond[4]=(((cj2*sj1))+((r01*x13748))+((cj1*sj2))+((r02*x13740))+(((-1.0)*x13741*x13745)));
evalcond[5]=((((-1.0)*x13744*x13745))+((x13739*x13743))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1508=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1508.value)))+(x1509.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1510=IKcos(j0);
IkReal x1511=IKsin(j0);
IkReal x1512=(sj1*sj2);
IkReal x1513=(cj5*r11);
IkReal x1514=((1.0)*sj5);
IkReal x1515=(cj5*r01);
IkReal x1516=((0.24365)*cj1);
IkReal x1517=((0.08535)*sj5);
IkReal x1518=(cj1*cj2*x1511);
IkReal x1519=(cj1*cj2*x1510);
evalcond[0]=((((-1.0)*x1515))+(((-1.0)*r00*x1514))+x1519+(((-1.0)*x1510*x1512)));
evalcond[1]=((((-1.0)*x1511*x1512))+(((-1.0)*x1513))+x1518+(((-1.0)*r10*x1514)));
evalcond[2]=((((0.11)*x1511))+(((0.21325)*x1510*x1512))+(((-1.0)*r00*x1517))+(((-1.0)*x1510*x1516))+(((-1.0)*px))+(((-0.08535)*x1515))+(((-0.21325)*x1519)));
evalcond[3]=((((-1.0)*py))+(((-0.11)*x1510))+(((0.21325)*x1511*x1512))+(((-0.08535)*x1513))+(((-0.21325)*x1518))+(((-1.0)*r10*x1517))+(((-1.0)*x1511*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1520=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1520;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1521=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1521;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1522=((1.0)*cj5);
IkReal x1523=((((-1.0)*r21*x1522))+(((-1.0)*r20*sj5)));
j4eval[0]=x1523;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1522))+(((-1.0)*cj0*r00*x1522))))));
j4eval[2]=IKsign(x1523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1524=((1.0)*cj5);
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1524))+(((-1.0)*cj0*r00*x1524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1524))+(((-1.0)*r20*sj5)))),-1);
if(!x1526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1525.value)+(((1.5707963267949)*(x1526.value))));
=======
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13749 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13749.valid){
continue;
}
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13749.value)+(((1.5707963267949)*(x13750.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1527=IKsin(j4);
IkReal x1528=IKcos(j4);
IkReal x1529=(cj5*r00);
IkReal x1530=(cj5*r10);
IkReal x1531=(cj2*sj1);
IkReal x1532=(r21*sj5);
IkReal x1533=(cj5*r20);
IkReal x1534=(cj1*sj2);
IkReal x1535=((1.0)*x1528);
IkReal x1536=((1.0)*x1527);
IkReal x1537=(sj5*x1527);
IkReal x1538=(sj5*x1528);
evalcond[0]=((((-1.0)*r22*x1535))+((x1527*x1532))+(((-1.0)*x1533*x1536)));
evalcond[1]=((((-1.0)*x1529*x1536))+sj0+((r01*x1537))+(((-1.0)*r02*x1535)));
evalcond[2]=((((-1.0)*r12*x1535))+(((-1.0)*x1530*x1536))+((r11*x1537))+(((-1.0)*cj0)));
evalcond[3]=(((x1528*x1532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1533*x1535))+((r22*x1527)));
evalcond[4]=((((-1.0)*x1529*x1535))+((r01*x1538))+((r02*x1527))+((cj0*x1534))+((cj0*x1531)));
evalcond[5]=(((r12*x1527))+(((-1.0)*x1530*x1535))+((r11*x1538))+((sj0*x1534))+((sj0*x1531)));
=======
IkReal x13751=IKcos(j4);
IkReal x13752=IKsin(j4);
IkReal x13753=(cj5*r00);
IkReal x13754=(cj5*r10);
IkReal x13755=(r21*sj5);
IkReal x13756=(cj5*r20);
IkReal x13757=((1.0)*x13751);
IkReal x13758=((1.0)*x13752);
IkReal x13759=(sj5*x13752);
IkReal x13760=(sj5*x13751);
evalcond[0]=(((r11*x13760))+(((-1.0)*x13754*x13757))+((r12*x13752)));
evalcond[1]=((((-1.0)*r22*x13757))+(((-1.0)*x13756*x13758))+((x13752*x13755)));
evalcond[2]=((((-1.0)*x13753*x13758))+((r01*x13759))+(((-1.0)*r02*x13757)));
evalcond[3]=((-1.0)+((r11*x13759))+(((-1.0)*x13754*x13758))+(((-1.0)*r12*x13757)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13752))+((r01*x13760))+(((-1.0)*x13753*x13757)));
evalcond[5]=(((r22*x13752))+(((-1.0)*x13756*x13757))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13751*x13755)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13761=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13761);
rxp1_1=(px*r21);
rxp1_2=(r11*x13761);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13762=(cj5*r10);
IkReal x13763=(r11*sj5);
j4eval[0]=((((-1.0)*x13762))+x13763);
j4eval[1]=(((sj3*x13762))+(((-1.0)*sj3*x13763)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13764=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13764);
rxp1_1=(px*r21);
rxp1_2=(r11*x13764);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13765=(r11*sj5);
IkReal x13766=((1.0)*cj5*r10);
j4eval[0]=(x13765+(((-1.0)*x13766)));
j4eval[1]=((((-1.0)*cj3*x13766))+((cj3*x13765)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13767=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13767);
rxp1_1=(px*r21);
rxp1_2=(r11*x13767);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
=======
IkReal x13768=((1.0)*r11);
CheckValue<IkReal> x13769=IKPowWithIntegerCheck(r02,-1);
if(!x13769.valid){
continue;
}
CheckValue<IkReal> x13770=IKPowWithIntegerCheck(sj3,-1);
if(!x13770.valid){
continue;
}
CheckValue<IkReal> x13771=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13768))),-1);
if(!x13771.valid){
continue;
}
if( IKabs(((x13769.value)*(x13770.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13771.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13768)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13769.value)*(x13770.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13771.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13768))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13769.value)*(x13770.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13771.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13768))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1541=IKsin(j4);
IkReal x1542=IKcos(j4);
IkReal x1543=(cj5*r00);
IkReal x1544=(cj5*r10);
IkReal x1545=(cj2*sj1);
IkReal x1546=(r21*sj5);
IkReal x1547=(cj5*r20);
IkReal x1548=(cj1*sj2);
IkReal x1549=((1.0)*x1542);
IkReal x1550=((1.0)*x1541);
IkReal x1551=(sj5*x1541);
IkReal x1552=(sj5*x1542);
evalcond[0]=(((x1541*x1546))+(((-1.0)*r22*x1549))+(((-1.0)*x1547*x1550)));
evalcond[1]=(((r01*x1551))+(((-1.0)*r02*x1549))+sj0+(((-1.0)*x1543*x1550)));
evalcond[2]=(((r11*x1551))+(((-1.0)*x1544*x1550))+(((-1.0)*r12*x1549))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1547*x1549))+((r22*x1541))+((x1542*x1546)));
evalcond[4]=((((-1.0)*x1543*x1549))+((r01*x1552))+((cj0*x1545))+((cj0*x1548))+((r02*x1541)));
evalcond[5]=(((r11*x1552))+((r12*x1541))+((sj0*x1545))+((sj0*x1548))+(((-1.0)*x1544*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13772=IKsin(j4);
IkReal x13773=IKcos(j4);
IkReal x13774=(cj2*sj1);
IkReal x13775=(cj1*sj2);
IkReal x13776=(cj5*r10);
IkReal x13777=(sj1*sj2);
IkReal x13778=(cj5*sj3);
IkReal x13779=(r11*sj5);
IkReal x13780=(cj3*sj5);
IkReal x13781=(r21*sj5);
IkReal x13782=(cj1*cj2);
IkReal x13783=(cj3*cj5);
IkReal x13784=(sj3*sj5);
IkReal x13785=((1.0)*x13772);
IkReal x13786=(r20*x13773);
IkReal x13787=(cj3*x13773);
IkReal x13788=(sj3*x13773);
IkReal x13789=(x13775+x13774);
evalcond[0]=((-1.0)*r02*x13773);
evalcond[1]=(((x13772*x13781))+(((-1.0)*cj5*r20*x13785)));
evalcond[2]=(x13789+(((-1.0)*r02*sj3*x13785)));
evalcond[3]=((((-1.0)*x13777))+x13782+((cj3*r02*x13772)));
evalcond[4]=((-1.0)+((x13772*x13779))+(((-1.0)*x13776*x13785)));
evalcond[5]=(((x13776*x13788))+((r11*x13783))+(((-1.0)*x13779*x13788))+((r10*x13780)));
evalcond[6]=(((r11*x13778))+((x13779*x13787))+(((-1.0)*x13776*x13787))+((r10*x13784)));
evalcond[7]=(x13789+(((-1.0)*x13783*x13786))+((r21*x13773*x13780))+((r20*x13784))+((r21*x13778)));
evalcond[8]=((((-1.0)*x13781*x13788))+x13777+((x13778*x13786))+(((-1.0)*x13782))+((r21*x13783))+((r20*x13780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1553.value)))+(x1554.value));
=======
IkReal x13790=((1.0)*r10);
IkReal x13791=(r11*sj5);
CheckValue<IkReal> x13792=IKPowWithIntegerCheck((x13791+(((-1.0)*cj5*x13790))),-1);
if(!x13792.valid){
continue;
}
CheckValue<IkReal> x13793=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13790))+((cj3*x13791))),-1);
if(!x13793.valid){
continue;
}
if( IKabs(x13792.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13793.value)*(((((-1.0)*sj3*sj5*x13790))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13792.value)+IKsqr(((x13793.value)*(((((-1.0)*sj3*sj5*x13790))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13792.value, ((x13793.value)*(((((-1.0)*sj3*sj5*x13790))+(((-1.0)*cj5*r11*sj3))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1555=IKsin(j4);
IkReal x1556=IKcos(j4);
IkReal x1557=(cj5*r00);
IkReal x1558=(cj5*r10);
IkReal x1559=(cj2*sj1);
IkReal x1560=(r21*sj5);
IkReal x1561=(cj5*r20);
IkReal x1562=(cj1*sj2);
IkReal x1563=((1.0)*x1556);
IkReal x1564=((1.0)*x1555);
IkReal x1565=(sj5*x1555);
IkReal x1566=(sj5*x1556);
evalcond[0]=(((x1555*x1560))+(((-1.0)*r22*x1563))+(((-1.0)*x1561*x1564)));
evalcond[1]=(sj0+(((-1.0)*r02*x1563))+(((-1.0)*x1557*x1564))+((r01*x1565)));
evalcond[2]=(((r11*x1565))+(((-1.0)*r12*x1563))+(((-1.0)*cj0))+(((-1.0)*x1558*x1564)));
evalcond[3]=(((x1556*x1560))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1555))+(((-1.0)*x1561*x1563)));
evalcond[4]=((((-1.0)*x1557*x1563))+((r02*x1555))+((cj0*x1562))+((cj0*x1559))+((r01*x1566)));
evalcond[5]=(((r11*x1566))+((sj0*x1562))+((r12*x1555))+((sj0*x1559))+(((-1.0)*x1558*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13794=IKsin(j4);
IkReal x13795=IKcos(j4);
IkReal x13796=(cj2*sj1);
IkReal x13797=(cj1*sj2);
IkReal x13798=(cj5*r10);
IkReal x13799=(sj1*sj2);
IkReal x13800=(cj5*sj3);
IkReal x13801=(r11*sj5);
IkReal x13802=(cj3*sj5);
IkReal x13803=(r21*sj5);
IkReal x13804=(cj1*cj2);
IkReal x13805=(cj3*cj5);
IkReal x13806=(sj3*sj5);
IkReal x13807=((1.0)*x13794);
IkReal x13808=(r20*x13795);
IkReal x13809=(cj3*x13795);
IkReal x13810=(sj3*x13795);
IkReal x13811=(x13797+x13796);
evalcond[0]=((-1.0)*r02*x13795);
evalcond[1]=(((x13794*x13803))+(((-1.0)*cj5*r20*x13807)));
evalcond[2]=(x13811+(((-1.0)*r02*sj3*x13807)));
evalcond[3]=(x13804+(((-1.0)*x13799))+((cj3*r02*x13794)));
evalcond[4]=((-1.0)+((x13794*x13801))+(((-1.0)*x13798*x13807)));
evalcond[5]=(((r11*x13805))+((x13798*x13810))+(((-1.0)*x13801*x13810))+((r10*x13802)));
evalcond[6]=(((r11*x13800))+(((-1.0)*x13798*x13809))+((r10*x13806))+((x13801*x13809)));
evalcond[7]=(((r21*x13800))+((r21*x13795*x13802))+x13811+(((-1.0)*x13805*x13808))+((r20*x13806)));
evalcond[8]=(((r21*x13805))+(((-1.0)*x13803*x13810))+x13799+(((-1.0)*x13804))+((r20*x13802))+((x13800*x13808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
<<<<<<< HEAD
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1567=((1.0)*cj5);
IkReal x1568=((1.0)*sj5);
IkReal x1569=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1569;
j0eval[1]=((IKabs(((((-1.0)*r00*x1568))+(((-1.0)*r01*x1567)))))+(IKabs(((((-1.0)*r10*x1568))+(((-1.0)*r11*x1567))))));
j0eval[2]=IKsign(x1569);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1570=r21*r21;
IkReal x1571=cj5*cj5;
IkReal x1572=(cj2*sj1);
IkReal x1573=(cj1*sj2);
IkReal x1574=(r21*sj5);
IkReal x1575=((1.0)*cj5*r20);
IkReal x1576=((((-1.0)*x1571*(r20*r20)))+((x1570*x1571))+(((2.0)*cj5*r20*x1574))+(((-1.0)*(r22*r22)))+(((-1.0)*x1570)));
j4eval[0]=x1576;
j4eval[1]=((IKabs((((x1572*x1574))+(((-1.0)*x1572*x1575))+(((-1.0)*x1573*x1575))+((x1573*x1574)))))+(IKabs((((r22*x1573))+((r22*x1572))))));
j4eval[2]=IKsign(x1576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1577=cj1*cj1;
IkReal x1578=(cj2*sj2);
IkReal x1579=(cj1*sj1);
j0eval[0]=((((-2.0)*x1579*(cj2*cj2)))+(((-1.14255568581477)*cj2*x1579))+(((-1.14255568581477)*sj2*x1577))+x1579+x1578+(((-2.0)*x1577*x1578)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1580=cj1*cj1;
IkReal x1581=(cj1*sj2);
IkReal x1582=(cj1*sj1);
IkReal x1583=(cj5*r01);
IkReal x1584=((100.0)*py);
IkReal x1585=(cj2*sj1);
IkReal x1586=(r00*sj5);
IkReal x1587=((8.535)*cj5*r11);
IkReal x1588=(sj2*x1580);
IkReal x1589=((8.535)*r10*sj5);
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(((((21.325)*x1582))+(((-24.365)*x1588))+(((-42.65)*cj2*x1588))+(((-24.365)*cj2*x1582))+(((21.325)*cj2*sj2))+(((-42.65)*x1582*(cj2*cj2)))),-1);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591=IKPowWithIntegerCheck((x1581+x1585),-1);
if(!x1591.valid){
continue;
}
if( IKabs(((x1590.value)*((((x1584*x1585))+(((-11.0)*x1586))+(((-11.0)*x1583))+((x1585*x1589))+((x1585*x1587))+((x1581*x1589))+((x1581*x1584))+((x1581*x1587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1591.value)*(((((-1.0)*x1586))+(((-1.0)*x1583)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1590.value)*((((x1584*x1585))+(((-11.0)*x1586))+(((-11.0)*x1583))+((x1585*x1589))+((x1585*x1587))+((x1581*x1589))+((x1581*x1584))+((x1581*x1587))))))+IKsqr(((x1591.value)*(((((-1.0)*x1586))+(((-1.0)*x1583))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1590.value)*((((x1584*x1585))+(((-11.0)*x1586))+(((-11.0)*x1583))+((x1585*x1589))+((x1585*x1587))+((x1581*x1589))+((x1581*x1584))+((x1581*x1587))))), ((x1591.value)*(((((-1.0)*x1586))+(((-1.0)*x1583))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1592=IKcos(j0);
IkReal x1593=IKsin(j0);
IkReal x1594=(cj5*r01);
IkReal x1595=((0.21325)*sj2);
IkReal x1596=(cj5*r11);
IkReal x1597=(r00*sj5);
IkReal x1598=((0.24365)*cj1);
IkReal x1599=(r10*sj5);
IkReal x1600=(cj1*sj2);
IkReal x1601=((0.21325)*cj1*cj2);
IkReal x1602=(sj1*x1592);
IkReal x1603=(sj1*x1593);
evalcond[0]=(x1594+x1597+((cj2*x1602))+((x1592*x1600)));
evalcond[1]=(x1596+x1599+((cj2*x1603))+((x1593*x1600)));
evalcond[2]=((((-1.0)*x1592*x1601))+((x1595*x1602))+(((-1.0)*x1592*x1598))+(((-0.08535)*x1594))+(((-0.08535)*x1597))+(((-1.0)*px))+(((0.11)*x1593)));
evalcond[3]=((((-1.0)*x1593*x1601))+((x1595*x1603))+(((-0.11)*x1592))+(((-1.0)*x1593*x1598))+(((-0.08535)*x1596))+(((-0.08535)*x1599))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1604=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1604;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1605=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1605;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1606=((1.0)*cj5);
IkReal x1607=((((-1.0)*r21*x1606))+(((-1.0)*r20*sj5)));
j4eval[0]=x1607;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1606))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1606))))));
j4eval[2]=IKsign(x1607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached
=======
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1608=((1.0)*cj5);
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1608))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1608))+(((-1.0)*r20*sj5)))),-1);
if(!x1610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1609.value)+(((1.5707963267949)*(x1610.value))));
=======
IkReal x13812=(cj5*r10);
IkReal x13813=((1.0)*r11);
CheckValue<IkReal> x13814=IKPowWithIntegerCheck(((((-1.0)*x13812))+((r11*sj5))),-1);
if(!x13814.valid){
continue;
}
CheckValue<IkReal> x13815=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13813))+((sj3*x13812))),-1);
if(!x13815.valid){
continue;
}
if( IKabs(x13814.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13815.value)*(((((-1.0)*cj3*cj5*x13813))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13814.value)+IKsqr(((x13815.value)*(((((-1.0)*cj3*cj5*x13813))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13814.value, ((x13815.value)*(((((-1.0)*cj3*cj5*x13813))+(((-1.0)*cj3*r10*sj5))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1611=IKsin(j4);
IkReal x1612=IKcos(j4);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj1*cj2);
IkReal x1615=(cj5*r10);
IkReal x1616=(r21*sj5);
IkReal x1617=(cj5*r20);
IkReal x1618=((1.0)*x1612);
IkReal x1619=((1.0)*x1611);
IkReal x1620=(sj5*x1611);
IkReal x1621=(sj5*x1612);
IkReal x1622=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1617*x1619))+(((-1.0)*r22*x1618))+((x1611*x1616)));
evalcond[1]=(sj0+((r01*x1620))+(((-1.0)*r02*x1618))+(((-1.0)*x1613*x1619)));
evalcond[2]=((((-1.0)*r12*x1618))+((r11*x1620))+(((-1.0)*x1615*x1619))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1617*x1618))+((x1612*x1616))+((r22*x1611)));
evalcond[4]=(((r01*x1621))+((cj0*x1614))+(((-1.0)*cj0*x1622))+(((-1.0)*x1613*x1618))+((r02*x1611)));
evalcond[5]=((((-1.0)*sj0*x1622))+((sj0*x1614))+((r12*x1611))+((r11*x1621))+(((-1.0)*x1615*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13816=IKsin(j4);
IkReal x13817=IKcos(j4);
IkReal x13818=(cj2*sj1);
IkReal x13819=(cj1*sj2);
IkReal x13820=(cj5*r10);
IkReal x13821=(sj1*sj2);
IkReal x13822=(cj5*sj3);
IkReal x13823=(r11*sj5);
IkReal x13824=(cj3*sj5);
IkReal x13825=(r21*sj5);
IkReal x13826=(cj1*cj2);
IkReal x13827=(cj3*cj5);
IkReal x13828=(sj3*sj5);
IkReal x13829=((1.0)*x13816);
IkReal x13830=(r20*x13817);
IkReal x13831=(cj3*x13817);
IkReal x13832=(sj3*x13817);
IkReal x13833=(x13818+x13819);
evalcond[0]=((-1.0)*r02*x13817);
evalcond[1]=(((x13816*x13825))+(((-1.0)*cj5*r20*x13829)));
evalcond[2]=(x13833+(((-1.0)*r02*sj3*x13829)));
evalcond[3]=(x13826+(((-1.0)*x13821))+((cj3*r02*x13816)));
evalcond[4]=((-1.0)+((x13816*x13823))+(((-1.0)*x13820*x13829)));
evalcond[5]=(((r10*x13824))+((r11*x13827))+((x13820*x13832))+(((-1.0)*x13823*x13832)));
evalcond[6]=(((r10*x13828))+((r11*x13822))+(((-1.0)*x13820*x13831))+((x13823*x13831)));
evalcond[7]=(((r21*x13822))+x13833+((r21*x13817*x13824))+((r20*x13828))+(((-1.0)*x13827*x13830)));
evalcond[8]=(((r21*x13827))+x13821+((x13822*x13830))+(((-1.0)*x13826))+((r20*x13824))+(((-1.0)*x13825*x13832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1623.valid){
continue;
}
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1623.value)))+(x1624.value));
=======
IkReal x13834=cj5*cj5;
IkReal x13835=((1.0)*cj3);
IkReal x13836=(r10*r21);
IkReal x13837=(cj5*sj5);
IkReal x13838=(r11*r21);
IkReal x13839=(r11*r20);
IkReal x13840=(r22*sj3);
IkReal x13841=(r10*r20);
IkReal x13842=((1.0)*sj3*x13834);
CheckValue<IkReal> x13843 = IKatan2WithCheck(IkReal((((r10*sj5*x13840))+((cj5*r11*x13840)))),IkReal(((((-1.0)*x13839*x13842))+((sj3*x13837*x13838))+((sj3*x13836))+(((-1.0)*x13836*x13842))+(((-1.0)*sj3*x13837*x13841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13843.valid){
continue;
}
CheckValue<IkReal> x13844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13835))+(((-1.0)*x13835*x13838))+(((-1.0)*x13834*x13835*x13841))+((cj3*x13836*x13837))+((cj3*x13837*x13839))+((cj3*x13834*x13838)))),-1);
if(!x13844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13843.value)+(((1.5707963267949)*(x13844.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1625=IKsin(j4);
IkReal x1626=IKcos(j4);
IkReal x1627=(cj5*r00);
IkReal x1628=(cj1*cj2);
IkReal x1629=(cj5*r10);
IkReal x1630=(r21*sj5);
IkReal x1631=(cj5*r20);
IkReal x1632=((1.0)*x1626);
IkReal x1633=((1.0)*x1625);
IkReal x1634=(sj5*x1625);
IkReal x1635=(sj5*x1626);
IkReal x1636=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1632))+((x1625*x1630))+(((-1.0)*x1631*x1633)));
evalcond[1]=(sj0+((r01*x1634))+(((-1.0)*r02*x1632))+(((-1.0)*x1627*x1633)));
evalcond[2]=(((r11*x1634))+(((-1.0)*r12*x1632))+(((-1.0)*x1629*x1633))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1625))+(((-1.0)*x1631*x1632))+((x1626*x1630)));
evalcond[4]=(((r02*x1625))+((cj0*x1628))+((r01*x1635))+(((-1.0)*cj0*x1636))+(((-1.0)*x1627*x1632)));
evalcond[5]=(((r11*x1635))+((sj0*x1628))+((r12*x1625))+(((-1.0)*x1629*x1632))+(((-1.0)*sj0*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13845=IKsin(j4);
IkReal x13846=IKcos(j4);
IkReal x13847=(cj2*sj1);
IkReal x13848=(cj1*sj2);
IkReal x13849=(cj5*sj3);
IkReal x13850=(cj5*r10);
IkReal x13851=(r00*sj5);
IkReal x13852=(sj1*sj2);
IkReal x13853=(r11*sj5);
IkReal x13854=(cj3*cj5);
IkReal x13855=(cj3*sj5);
IkReal x13856=(r21*sj5);
IkReal x13857=(cj1*cj2);
IkReal x13858=(sj3*sj5);
IkReal x13859=(r01*sj5);
IkReal x13860=((1.0)*x13846);
IkReal x13861=((1.0)*x13845);
IkReal x13862=(cj3*x13845);
IkReal x13863=(cj3*x13846);
IkReal x13864=(x13847+x13848);
evalcond[0]=((((-1.0)*r22*x13860))+((x13845*x13856))+(((-1.0)*cj5*r20*x13861)));
evalcond[1]=((((-1.0)*cj5*r00*x13861))+(((-1.0)*r02*x13860))+((x13845*x13859)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13860))+((x13845*x13853))+(((-1.0)*x13850*x13861)));
evalcond[3]=(((x13853*x13863))+((r12*x13862))+((r11*x13849))+(((-1.0)*cj3*x13850*x13860))+((r10*x13858)));
evalcond[4]=((((-1.0)*sj3*x13853*x13860))+((r11*x13854))+(((-1.0)*r12*sj3*x13861))+((r10*x13846*x13849))+((r10*x13855)));
evalcond[5]=(((r21*x13846*x13855))+(((-1.0)*r20*x13854*x13860))+((r22*x13862))+x13864+((r21*x13849))+((r20*x13858)));
evalcond[6]=((((-1.0)*r01*x13858*x13860))+((r01*x13854))+x13864+(((-1.0)*r02*sj3*x13861))+((r00*x13846*x13849))+((cj3*x13851)));
evalcond[7]=((((-1.0)*x13852))+x13857+((sj3*x13851))+((r02*x13862))+((r01*x13846*x13855))+(((-1.0)*r00*x13854*x13860))+((r01*x13849)));
evalcond[8]=(((r20*x13846*x13849))+(((-1.0)*x13857))+x13852+(((-1.0)*sj3*x13856*x13860))+((r21*x13854))+(((-1.0)*r22*sj3*x13861))+((r20*x13855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1637=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1637.value)))+(x1638.value));
=======
IkReal x13865=((1.0)*cj5);
CheckValue<IkReal> x13866 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13865))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13866.valid){
continue;
}
CheckValue<IkReal> x13867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13865))+(((-1.0)*r20*sj5)))),-1);
if(!x13867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13866.value)+(((1.5707963267949)*(x13867.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1639=IKsin(j4);
IkReal x1640=IKcos(j4);
IkReal x1641=(cj5*r00);
IkReal x1642=(cj1*cj2);
IkReal x1643=(cj5*r10);
IkReal x1644=(r21*sj5);
IkReal x1645=(cj5*r20);
IkReal x1646=((1.0)*x1640);
IkReal x1647=((1.0)*x1639);
IkReal x1648=(sj5*x1639);
IkReal x1649=(sj5*x1640);
IkReal x1650=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1646))+(((-1.0)*x1645*x1647))+((x1639*x1644)));
evalcond[1]=(sj0+(((-1.0)*x1641*x1647))+((r01*x1648))+(((-1.0)*r02*x1646)));
evalcond[2]=(((r11*x1648))+(((-1.0)*r12*x1646))+(((-1.0)*x1643*x1647))+(((-1.0)*cj0)));
evalcond[3]=(((x1640*x1644))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1645*x1646))+((r22*x1639)));
evalcond[4]=(((r02*x1639))+(((-1.0)*x1641*x1646))+((r01*x1649))+((cj0*x1642))+(((-1.0)*cj0*x1650)));
evalcond[5]=(((r11*x1649))+((sj0*x1642))+((r12*x1639))+(((-1.0)*x1643*x1646))+(((-1.0)*sj0*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13868=IKsin(j4);
IkReal x13869=IKcos(j4);
IkReal x13870=(cj2*sj1);
IkReal x13871=(cj1*sj2);
IkReal x13872=(cj5*sj3);
IkReal x13873=(cj5*r10);
IkReal x13874=(r00*sj5);
IkReal x13875=(sj1*sj2);
IkReal x13876=(r11*sj5);
IkReal x13877=(cj3*cj5);
IkReal x13878=(cj3*sj5);
IkReal x13879=(r21*sj5);
IkReal x13880=(cj1*cj2);
IkReal x13881=(sj3*sj5);
IkReal x13882=(r01*sj5);
IkReal x13883=((1.0)*x13869);
IkReal x13884=((1.0)*x13868);
IkReal x13885=(cj3*x13868);
IkReal x13886=(cj3*x13869);
IkReal x13887=(x13870+x13871);
evalcond[0]=((((-1.0)*cj5*r20*x13884))+(((-1.0)*r22*x13883))+((x13868*x13879)));
evalcond[1]=((((-1.0)*r02*x13883))+((x13868*x13882))+(((-1.0)*cj5*r00*x13884)));
evalcond[2]=((-1.0)+(((-1.0)*x13873*x13884))+((x13868*x13876))+(((-1.0)*r12*x13883)));
evalcond[3]=(((r10*x13881))+((r11*x13872))+((r12*x13885))+((x13876*x13886))+(((-1.0)*cj3*x13873*x13883)));
evalcond[4]=(((r11*x13877))+(((-1.0)*sj3*x13876*x13883))+((r10*x13869*x13872))+((r10*x13878))+(((-1.0)*r12*sj3*x13884)));
evalcond[5]=(x13887+((r21*x13872))+((r20*x13881))+(((-1.0)*r20*x13877*x13883))+((r21*x13869*x13878))+((r22*x13885)));
evalcond[6]=((((-1.0)*r01*x13881*x13883))+((cj3*x13874))+x13887+((r01*x13877))+(((-1.0)*r02*sj3*x13884))+((r00*x13869*x13872)));
evalcond[7]=(((sj3*x13874))+(((-1.0)*r00*x13877*x13883))+x13880+(((-1.0)*x13875))+((r02*x13885))+((r01*x13869*x13878))+((r01*x13872)));
evalcond[8]=((((-1.0)*r22*sj3*x13884))+x13875+((r20*x13869*x13872))+((r21*x13877))+((r20*x13878))+(((-1.0)*sj3*x13879*x13883))+(((-1.0)*x13880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1651=r21*r21;
IkReal x1652=cj5*cj5;
IkReal x1653=(cj2*sj1);
IkReal x1654=(cj1*sj2);
IkReal x1655=(r21*sj5);
IkReal x1656=((1.0)*cj5*r20);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1651))+(((2.0)*cj5*r20*x1655))+(((-1.0)*(r22*r22)))+(((-1.0)*x1652*(r20*r20)))+((x1651*x1652)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((((r22*x1653))+((r22*x1654)))),IkReal((((x1654*x1655))+(((-1.0)*x1654*x1656))+(((-1.0)*x1653*x1656))+((x1653*x1655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
=======
CheckValue<IkReal> x13888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13888.valid){
continue;
}
CheckValue<IkReal> x13889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13888.value)+(((1.5707963267949)*(x13889.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[2];
IkReal x1659=IKsin(j4);
IkReal x1660=IKcos(j4);
IkReal x1661=(r21*sj5);
IkReal x1662=(cj5*r20);
IkReal x1663=((1.0)*x1660);
evalcond[0]=((((-1.0)*r22*x1663))+((x1659*x1661))+(((-1.0)*x1659*x1662)));
evalcond[1]=(((cj2*sj1))+((x1660*x1661))+((r22*x1659))+(((-1.0)*x1662*x1663))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1664=(cj5*sj4);
IkReal x1665=(sj4*sj5);
if( IKabs((((r00*x1664))+(((-1.0)*r01*x1665))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1665))+(((-1.0)*r10*x1664))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1664))+(((-1.0)*r01*x1665))+((cj4*r02))))+IKsqr((((r11*x1665))+(((-1.0)*r10*x1664))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1664))+(((-1.0)*r01*x1665))+((cj4*r02))), (((r11*x1665))+(((-1.0)*r10*x1664))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1666=IKcos(j0);
IkReal x1667=IKsin(j0);
IkReal x1668=(cj5*r01);
IkReal x1669=((1.0)*sj1);
IkReal x1670=(r11*sj5);
IkReal x1671=((0.21325)*sj1);
IkReal x1672=((0.24365)*cj1);
IkReal x1673=(r00*sj5);
IkReal x1674=(cj5*r11);
IkReal x1675=((1.0)*cj4);
IkReal x1676=(r01*sj5);
IkReal x1677=(r10*sj5);
IkReal x1678=(sj2*x1667);
IkReal x1679=(cj2*x1666);
IkReal x1680=(cj5*x1675);
IkReal x1681=(sj2*x1666);
IkReal x1682=((1.0)*cj5*sj4);
IkReal x1683=(cj1*cj2*x1667);
evalcond[0]=(((sj4*x1676))+(((-1.0)*r02*x1675))+x1667+(((-1.0)*r00*x1682)));
evalcond[1]=((((-1.0)*r10*x1682))+((sj4*x1670))+(((-1.0)*x1666))+(((-1.0)*r12*x1675)));
evalcond[2]=(((cj1*x1681))+((sj1*x1679))+x1668+x1673);
evalcond[3]=(x1674+x1677+((cj1*x1678))+((cj2*sj1*x1667)));
evalcond[4]=(((cj1*x1679))+((r02*sj4))+((cj4*x1676))+(((-1.0)*x1669*x1681))+(((-1.0)*r00*x1680)));
evalcond[5]=((((-1.0)*r10*x1680))+x1683+(((-1.0)*x1669*x1678))+((cj4*x1670))+((r12*sj4)));
evalcond[6]=((((-0.08535)*x1668))+((x1671*x1681))+(((-1.0)*px))+(((-0.21325)*cj1*x1679))+(((-0.08535)*x1673))+(((-1.0)*x1666*x1672))+(((0.11)*x1667)));
evalcond[7]=((((-0.11)*x1666))+(((-1.0)*x1667*x1672))+(((-1.0)*py))+(((-0.21325)*x1683))+(((-0.08535)*x1677))+(((-0.08535)*x1674))+((x1671*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x13890=IKsin(j4);
IkReal x13891=IKcos(j4);
IkReal x13892=(cj2*sj1);
IkReal x13893=(cj1*sj2);
IkReal x13894=(cj5*sj3);
IkReal x13895=(cj5*r10);
IkReal x13896=(r00*sj5);
IkReal x13897=(sj1*sj2);
IkReal x13898=(r11*sj5);
IkReal x13899=(cj3*cj5);
IkReal x13900=(cj3*sj5);
IkReal x13901=(r21*sj5);
IkReal x13902=(cj1*cj2);
IkReal x13903=(sj3*sj5);
IkReal x13904=(r01*sj5);
IkReal x13905=((1.0)*x13891);
IkReal x13906=((1.0)*x13890);
IkReal x13907=(cj3*x13890);
IkReal x13908=(cj3*x13891);
IkReal x13909=(x13892+x13893);
evalcond[0]=((((-1.0)*cj5*r20*x13906))+(((-1.0)*r22*x13905))+((x13890*x13901)));
evalcond[1]=((((-1.0)*cj5*r00*x13906))+((x13890*x13904))+(((-1.0)*r02*x13905)));
evalcond[2]=((-1.0)+((x13890*x13898))+(((-1.0)*r12*x13905))+(((-1.0)*x13895*x13906)));
evalcond[3]=(((r10*x13903))+((r12*x13907))+((x13898*x13908))+(((-1.0)*cj3*x13895*x13905))+((r11*x13894)));
evalcond[4]=(((r10*x13891*x13894))+((r10*x13900))+(((-1.0)*r12*sj3*x13906))+(((-1.0)*sj3*x13898*x13905))+((r11*x13899)));
evalcond[5]=(((r22*x13907))+((r21*x13891*x13900))+x13909+((r20*x13903))+((r21*x13894))+(((-1.0)*r20*x13899*x13905)));
evalcond[6]=(((r00*x13891*x13894))+(((-1.0)*r01*x13903*x13905))+((cj3*x13896))+x13909+(((-1.0)*r02*sj3*x13906))+((r01*x13899)));
evalcond[7]=(((r02*x13907))+((sj3*x13896))+x13902+((r01*x13891*x13900))+(((-1.0)*r00*x13899*x13905))+((r01*x13894))+(((-1.0)*x13897)));
evalcond[8]=((((-1.0)*r22*sj3*x13906))+x13897+(((-1.0)*x13902))+(((-1.0)*sj3*x13901*x13905))+((r20*x13900))+((r21*x13899))+((r20*x13891*x13894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1684=((1.0)*cj5);
IkReal x1685=((1.0)*sj5);
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1684))+(((-1.0)*r10*x1685)))),IkReal(((((-1.0)*r01*x1684))+(((-1.0)*r00*x1685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1686.value)))+(x1687.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
=======
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13910=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13910;
j4eval[1]=IKsign(x13910);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13911=((1.0)*cj5);
IkReal x13912=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13911)));
j4eval[0]=x13912;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13911)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
<<<<<<< HEAD
IkReal evalcond[4];
IkReal x1688=IKcos(j0);
IkReal x1689=IKsin(j0);
IkReal x1690=(cj5*r01);
IkReal x1691=((0.21325)*sj2);
IkReal x1692=(cj5*r11);
IkReal x1693=(r00*sj5);
IkReal x1694=((0.24365)*cj1);
IkReal x1695=(r10*sj5);
IkReal x1696=(cj1*sj2);
IkReal x1697=((0.21325)*cj1*cj2);
IkReal x1698=(sj1*x1688);
IkReal x1699=(sj1*x1689);
evalcond[0]=(x1693+x1690+((x1688*x1696))+((cj2*x1698)));
evalcond[1]=(x1695+x1692+((x1689*x1696))+((cj2*x1699)));
evalcond[2]=((((-1.0)*x1688*x1697))+(((-1.0)*x1688*x1694))+((x1691*x1698))+(((-1.0)*px))+(((0.11)*x1689))+(((-0.08535)*x1693))+(((-0.08535)*x1690)));
evalcond[3]=(((x1691*x1699))+(((-1.0)*py))+(((-0.11)*x1688))+(((-0.08535)*x1695))+(((-0.08535)*x1692))+(((-1.0)*x1689*x1694))+(((-1.0)*x1689*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13913=cj5*cj5;
IkReal x13914=(cj3*r21);
IkReal x13915=(cj5*sj5);
IkReal x13916=((1.0)*cj3);
IkReal x13917=((((-1.0)*r12*r22*x13916))+((r10*x13914*x13915))+((cj3*r11*r20*x13915))+((r11*x13913*x13914))+(((-1.0)*r11*x13914))+(((-1.0)*r10*r20*x13913*x13916)));
j4eval[0]=x13917;
j4eval[1]=IKsign(x13917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
<<<<<<< HEAD
sj3=0;
cj3=1.0;
j3=0;
IkReal x1700=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1700;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1700);
=======
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13918=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13918;
j4eval[1]=IKsign(x13918);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
<<<<<<< HEAD
sj3=0;
cj3=1.0;
j3=0;
IkReal x1701=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1701;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1701);
=======
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13919=((1.0)*cj5);
IkReal x13920=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13919)));
j4eval[0]=x13920;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13919))))));
j4eval[2]=IKsign(x13920);
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
<<<<<<< HEAD
sj3=0;
cj3=1.0;
j3=0;
IkReal x1702=((1.0)*cj5);
IkReal x1703=((((-1.0)*r21*x1702))+(((-1.0)*r20*sj5)));
j4eval[0]=x1703;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1702))+(((-1.0)*r10*sj0*x1702))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1703);
=======
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13921=cj5*cj5;
IkReal x13922=r11*r11;
IkReal x13923=(r11*sj5);
IkReal x13924=(cj5*r10);
IkReal x13925=((r12*r12)+x13922+(((-2.0)*x13923*x13924))+(((-1.0)*x13921*x13922))+((x13921*(r10*r10))));
j4eval[0]=x13925;
j4eval[1]=IKsign(x13925);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13923))+x13924))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1704=((1.0)*cj5);
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1704))+(((-1.0)*r10*sj0*x1704))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1704))+(((-1.0)*r20*sj5)))),-1);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1705.value)+(((1.5707963267949)*(x1706.value))));
=======
IkReal x13926=cj5*cj5;
IkReal x13927=r11*r11;
IkReal x13928=(cj5*r10);
IkReal x13929=(r11*sj5);
CheckValue<IkReal> x13930=IKPowWithIntegerCheck(IKsign((((x13926*(r10*r10)))+(r12*r12)+(((-1.0)*x13926*x13927))+x13927+(((-2.0)*x13928*x13929)))),-1);
if(!x13930.valid){
continue;
}
CheckValue<IkReal> x13931 = IKatan2WithCheck(IkReal(((((-1.0)*x13929))+x13928)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13930.value)))+(x13931.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1707=IKsin(j4);
IkReal x1708=IKcos(j4);
IkReal x1709=(cj5*r00);
IkReal x1710=(cj1*cj2);
IkReal x1711=(cj5*r10);
IkReal x1712=(r21*sj5);
IkReal x1713=(cj5*r20);
IkReal x1714=((1.0)*x1708);
IkReal x1715=((1.0)*x1707);
IkReal x1716=(sj5*x1707);
IkReal x1717=(sj5*x1708);
IkReal x1718=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1713*x1715))+(((-1.0)*r22*x1714))+((x1707*x1712)));
evalcond[1]=(sj0+(((-1.0)*x1709*x1715))+((r01*x1716))+(((-1.0)*r02*x1714)));
evalcond[2]=(((r11*x1716))+(((-1.0)*x1711*x1715))+(((-1.0)*r12*x1714))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1707))+(((-1.0)*x1713*x1714))+((cj1*sj2))+((x1708*x1712)));
evalcond[4]=(((r02*x1707))+(((-1.0)*x1709*x1714))+((cj0*x1710))+((r01*x1717))+(((-1.0)*cj0*x1718)));
evalcond[5]=(((r12*x1707))+((r11*x1717))+(((-1.0)*x1711*x1714))+(((-1.0)*sj0*x1718))+((sj0*x1710)));
=======
IkReal x13932=IKsin(j4);
IkReal x13933=IKcos(j4);
IkReal x13934=(cj5*r10);
IkReal x13935=(r01*sj5);
IkReal x13936=((1.0)*cj2);
IkReal x13937=(cj5*r00);
IkReal x13938=(cj5*r20);
IkReal x13939=((1.0)*x13933);
IkReal x13940=((1.0)*x13932);
IkReal x13941=(sj5*x13932);
evalcond[0]=((((-1.0)*x13938*x13940))+(((-1.0)*r22*x13939))+((r21*x13941)));
evalcond[1]=(((x13932*x13935))+(((-1.0)*r02*x13939))+(((-1.0)*x13937*x13940)));
evalcond[2]=((((-1.0)*r12*x13940))+((x13933*x13934))+(((-1.0)*r11*sj5*x13939)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13939))+(((-1.0)*x13934*x13940))+((r11*x13941)));
evalcond[4]=(((x13933*x13938))+((sj1*sj2))+(((-1.0)*r22*x13940))+(((-1.0)*cj1*x13936))+(((-1.0)*r21*sj5*x13939)));
evalcond[5]=((((-1.0)*sj1*x13936))+(((-1.0)*x13935*x13939))+((x13933*x13937))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13940)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1719.value)))+(x1720.value));
=======
IkReal x13942=((1.0)*cj5);
CheckValue<IkReal> x13943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13942)))),-1);
if(!x13943.valid){
continue;
}
CheckValue<IkReal> x13944 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13943.value)))+(x13944.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(cj5*r00);
IkReal x1724=(cj1*cj2);
IkReal x1725=(cj5*r10);
IkReal x1726=(r21*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=((1.0)*x1722);
IkReal x1729=((1.0)*x1721);
IkReal x1730=(sj5*x1721);
IkReal x1731=(sj5*x1722);
IkReal x1732=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1728))+((x1721*x1726))+(((-1.0)*x1727*x1729)));
evalcond[1]=(((r01*x1730))+sj0+(((-1.0)*x1723*x1729))+(((-1.0)*r02*x1728)));
evalcond[2]=((((-1.0)*r12*x1728))+((r11*x1730))+(((-1.0)*x1725*x1729))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x1722*x1726))+((cj1*sj2))+((r22*x1721))+(((-1.0)*x1727*x1728)));
evalcond[4]=(((r01*x1731))+((cj0*x1724))+(((-1.0)*cj0*x1732))+(((-1.0)*x1723*x1728))+((r02*x1721)));
evalcond[5]=((((-1.0)*sj0*x1732))+((sj0*x1724))+((r11*x1731))+(((-1.0)*x1725*x1728))+((r12*x1721)));
=======
IkReal x13945=IKsin(j4);
IkReal x13946=IKcos(j4);
IkReal x13947=(cj5*r10);
IkReal x13948=(r01*sj5);
IkReal x13949=((1.0)*cj2);
IkReal x13950=(cj5*r00);
IkReal x13951=(cj5*r20);
IkReal x13952=((1.0)*x13946);
IkReal x13953=((1.0)*x13945);
IkReal x13954=(sj5*x13945);
evalcond[0]=(((r21*x13954))+(((-1.0)*r22*x13952))+(((-1.0)*x13951*x13953)));
evalcond[1]=((((-1.0)*r02*x13952))+((x13945*x13948))+(((-1.0)*x13950*x13953)));
evalcond[2]=((((-1.0)*r11*sj5*x13952))+((x13946*x13947))+(((-1.0)*r12*x13953)));
evalcond[3]=((1.0)+((r11*x13954))+(((-1.0)*x13947*x13953))+(((-1.0)*r12*x13952)));
evalcond[4]=((((-1.0)*r21*sj5*x13952))+((sj1*sj2))+(((-1.0)*r22*x13953))+(((-1.0)*cj1*x13949))+((x13946*x13951)));
evalcond[5]=((((-1.0)*sj1*x13949))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13953))+(((-1.0)*x13948*x13952))+((x13946*x13950)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1733.value)))+(x1734.value));
=======
CheckValue<IkReal> x13955=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13955.valid){
continue;
}
CheckValue<IkReal> x13956 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13955.value)))+(x13956.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1735=IKsin(j4);
IkReal x1736=IKcos(j4);
IkReal x1737=(cj5*r00);
IkReal x1738=(cj1*cj2);
IkReal x1739=(cj5*r10);
IkReal x1740=(r21*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=((1.0)*x1736);
IkReal x1743=((1.0)*x1735);
IkReal x1744=(sj5*x1735);
IkReal x1745=(sj5*x1736);
IkReal x1746=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1741*x1743))+(((-1.0)*r22*x1742))+((x1735*x1740)));
evalcond[1]=(sj0+(((-1.0)*x1737*x1743))+((r01*x1744))+(((-1.0)*r02*x1742)));
evalcond[2]=((((-1.0)*r12*x1742))+(((-1.0)*x1739*x1743))+((r11*x1744))+(((-1.0)*cj0)));
evalcond[3]=(((x1736*x1740))+(((-1.0)*x1741*x1742))+((cj2*sj1))+((cj1*sj2))+((r22*x1735)));
evalcond[4]=(((cj0*x1738))+(((-1.0)*cj0*x1746))+((r02*x1735))+(((-1.0)*x1737*x1742))+((r01*x1745)));
evalcond[5]=(((sj0*x1738))+(((-1.0)*sj0*x1746))+(((-1.0)*x1739*x1742))+((r12*x1735))+((r11*x1745)));
=======
IkReal x13957=IKsin(j4);
IkReal x13958=IKcos(j4);
IkReal x13959=(cj5*r10);
IkReal x13960=(r01*sj5);
IkReal x13961=((1.0)*cj2);
IkReal x13962=(cj5*r00);
IkReal x13963=(cj5*r20);
IkReal x13964=((1.0)*x13958);
IkReal x13965=((1.0)*x13957);
IkReal x13966=(sj5*x13957);
evalcond[0]=((((-1.0)*r22*x13964))+(((-1.0)*x13963*x13965))+((r21*x13966)));
evalcond[1]=((((-1.0)*r02*x13964))+((x13957*x13960))+(((-1.0)*x13962*x13965)));
evalcond[2]=((((-1.0)*r12*x13965))+((x13958*x13959))+(((-1.0)*r11*sj5*x13964)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13964))+(((-1.0)*x13959*x13965))+((r11*x13966)));
evalcond[4]=((((-1.0)*cj1*x13961))+((x13958*x13963))+(((-1.0)*r22*x13965))+((sj1*sj2))+(((-1.0)*r21*sj5*x13964)));
evalcond[5]=((((-1.0)*r02*x13965))+((x13958*x13962))+(((-1.0)*sj1*x13961))+(((-1.0)*cj1*sj2))+(((-1.0)*x13960*x13964)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
<<<<<<< HEAD
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1747=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1747;
j0eval[1]=IKsign(x1747);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1748=cj5*cj5;
IkReal x1749=r21*r21;
IkReal x1750=(cj2*sj1);
IkReal x1751=(cj1*sj2);
IkReal x1752=(r21*sj5);
IkReal x1753=((1.0)*cj5*r20);
IkReal x1754=(x1749+(r22*r22)+(((-2.0)*cj5*r20*x1752))+((x1748*(r20*r20)))+(((-1.0)*x1748*x1749)));
j4eval[0]=x1754;
j4eval[1]=IKsign(x1754);
j4eval[2]=((IKabs((((r22*x1751))+((r22*x1750)))))+(IKabs((((x1750*x1752))+(((-1.0)*x1750*x1753))+(((-1.0)*x1751*x1753))+((x1751*x1752))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1755=cj1*cj1;
IkReal x1756=(cj2*sj2);
IkReal x1757=(cj1*sj1);
j0eval[0]=(x1757+x1756+(((-1.14255568581477)*sj2*x1755))+(((-2.0)*x1755*x1756))+(((-2.0)*x1757*(cj2*cj2)))+(((-1.14255568581477)*cj2*x1757)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1758=cj1*cj1;
IkReal x1759=(cj1*sj2);
IkReal x1760=(r00*sj5);
IkReal x1761=(cj1*sj1);
IkReal x1762=((100.0)*py);
IkReal x1763=(cj2*sj1);
IkReal x1764=(cj5*r01);
IkReal x1765=((8.535)*cj5*r11);
IkReal x1766=(sj2*x1758);
IkReal x1767=((8.535)*r10*sj5);
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(((((-42.65)*cj2*x1766))+(((-24.365)*x1766))+(((-42.65)*x1761*(cj2*cj2)))+(((21.325)*x1761))+(((21.325)*cj2*sj2))+(((-24.365)*cj2*x1761))),-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769=IKPowWithIntegerCheck((x1763+x1759),-1);
if(!x1769.valid){
continue;
}
if( IKabs(((x1768.value)*((((x1759*x1767))+((x1759*x1765))+((x1759*x1762))+((x1762*x1763))+(((11.0)*x1764))+(((11.0)*x1760))+((x1763*x1767))+((x1763*x1765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1769.value)*((x1760+x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1768.value)*((((x1759*x1767))+((x1759*x1765))+((x1759*x1762))+((x1762*x1763))+(((11.0)*x1764))+(((11.0)*x1760))+((x1763*x1767))+((x1763*x1765))))))+IKsqr(((x1769.value)*((x1760+x1764))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1768.value)*((((x1759*x1767))+((x1759*x1765))+((x1759*x1762))+((x1762*x1763))+(((11.0)*x1764))+(((11.0)*x1760))+((x1763*x1767))+((x1763*x1765))))), ((x1769.value)*((x1760+x1764))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1770=IKcos(j0);
IkReal x1771=IKsin(j0);
IkReal x1772=(cj5*r11);
IkReal x1773=((0.21325)*sj2);
IkReal x1774=((1.0)*sj5);
IkReal x1775=(cj5*r01);
IkReal x1776=((0.24365)*cj1);
IkReal x1777=((0.08535)*sj5);
IkReal x1778=(cj1*sj2);
IkReal x1779=((0.21325)*cj1*cj2);
IkReal x1780=(sj1*x1770);
IkReal x1781=(sj1*x1771);
evalcond[0]=((((-1.0)*x1775))+((x1770*x1778))+((cj2*x1780))+(((-1.0)*r00*x1774)));
evalcond[1]=((((-1.0)*x1772))+((x1771*x1778))+((cj2*x1781))+(((-1.0)*r10*x1774)));
evalcond[2]=((((0.11)*x1771))+(((-1.0)*px))+(((-1.0)*x1770*x1776))+(((-1.0)*x1770*x1779))+(((-1.0)*r00*x1777))+(((-0.08535)*x1775))+((x1773*x1780)));
evalcond[3]=((((-0.11)*x1770))+(((-1.0)*r10*x1777))+(((-1.0)*py))+(((-1.0)*x1771*x1776))+(((-1.0)*x1771*x1779))+(((-0.08535)*x1772))+((x1773*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1782=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1782;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1782);
=======
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13967=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13967;
j4eval[1]=IKsign(x13967);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
<<<<<<< HEAD
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1783=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1783;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1783);
=======
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13968=((1.0)*cj5);
IkReal x13969=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13968)));
j4eval[0]=x13969;
j4eval[1]=((IKabs(((((-1.0)*r20*x13968))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13969);
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
<<<<<<< HEAD
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1784=((1.0)*cj5);
IkReal x1785=((((-1.0)*r21*x1784))+(((-1.0)*r20*sj5)));
j4eval[0]=x1785;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1784))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1784))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1785);
=======
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13970=(sj1*sj2);
IkReal x13971=(cj5*r10);
IkReal x13972=(r11*sj5);
IkReal x13973=(cj1*cj2);
IkReal x13974=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x13974;
j4eval[1]=((IKabs((((x13971*x13973))+((x13970*x13972))+(((-1.0)*x13970*x13971))+(((-1.0)*x13972*x13973)))))+(IKabs((((r12*x13973))+(((-1.0)*r12*x13970))))));
j4eval[2]=IKsign(x13974);
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1786=((1.0)*cj5);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1786))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1786))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1786))+(((-1.0)*r20*sj5)))),-1);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
=======
IkReal x13975=(sj1*sj2);
IkReal x13976=(cj5*r10);
IkReal x13977=(r11*sj5);
IkReal x13978=(cj1*cj2);
CheckValue<IkReal> x13979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13979.valid){
continue;
}
CheckValue<IkReal> x13980 = IKatan2WithCheck(IkReal(((((-1.0)*x13975*x13976))+(((-1.0)*x13977*x13978))+((x13976*x13978))+((x13975*x13977)))),IkReal((((r12*x13978))+(((-1.0)*r12*x13975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13979.value)))+(x13980.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=(cj1*cj2);
IkReal x1792=(cj5*r10);
IkReal x1793=(r01*sj5);
IkReal x1794=(cj5*r00);
IkReal x1795=(cj5*r20);
IkReal x1796=((1.0)*cj0);
IkReal x1797=(sj1*sj2);
IkReal x1798=((1.0)*x1790);
IkReal x1799=((1.0)*x1789);
IkReal x1800=(sj5*x1789);
evalcond[0]=((((-1.0)*x1795*x1799))+(((-1.0)*r22*x1798))+((r21*x1800)));
evalcond[1]=(sj0+((x1789*x1793))+(((-1.0)*r02*x1798))+(((-1.0)*x1794*x1799)));
evalcond[2]=((((-1.0)*x1792*x1799))+(((-1.0)*x1796))+(((-1.0)*r12*x1798))+((r11*x1800)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1799))+(((-1.0)*r21*sj5*x1798))+((cj1*sj2))+((x1790*x1795)));
evalcond[4]=((((-1.0)*x1796*x1797))+(((-1.0)*x1793*x1798))+((x1790*x1794))+(((-1.0)*r02*x1799))+((cj0*x1791)));
evalcond[5]=((((-1.0)*r11*sj5*x1798))+((sj0*x1791))+(((-1.0)*r12*x1799))+((x1790*x1792))+(((-1.0)*sj0*x1797)));
=======
IkReal x13981=IKcos(j4);
IkReal x13982=IKsin(j4);
IkReal x13983=(cj5*r00);
IkReal x13984=(cj5*r10);
IkReal x13985=(r21*sj5);
IkReal x13986=((1.0)*cj2);
IkReal x13987=(cj5*r20);
IkReal x13988=((1.0)*x13981);
IkReal x13989=((1.0)*x13982);
IkReal x13990=(sj5*x13982);
IkReal x13991=(sj5*x13981);
evalcond[0]=(((r12*x13982))+(((-1.0)*x13984*x13988))+((r11*x13991)));
evalcond[1]=((((-1.0)*x13987*x13989))+((x13982*x13985))+(((-1.0)*r22*x13988)));
evalcond[2]=((((-1.0)*r02*x13988))+(((-1.0)*x13983*x13989))+((r01*x13990)));
evalcond[3]=((1.0)+(((-1.0)*x13984*x13989))+((r11*x13990))+(((-1.0)*r12*x13988)));
evalcond[4]=((((-1.0)*x13987*x13988))+(((-1.0)*cj1*x13986))+((sj1*sj2))+((r22*x13982))+((x13981*x13985)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x13982))+(((-1.0)*x13983*x13988))+((r01*x13991))+(((-1.0)*sj1*x13986)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1801.valid){
continue;
}
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1801.value)))+(x1802.value));
=======
IkReal x13992=((1.0)*cj5);
CheckValue<IkReal> x13993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13992)))),-1);
if(!x13993.valid){
continue;
}
CheckValue<IkReal> x13994 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13993.value)))+(x13994.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1803=IKsin(j4);
IkReal x1804=IKcos(j4);
IkReal x1805=(cj1*cj2);
IkReal x1806=(cj5*r10);
IkReal x1807=(r01*sj5);
IkReal x1808=(cj5*r00);
IkReal x1809=(cj5*r20);
IkReal x1810=((1.0)*cj0);
IkReal x1811=(sj1*sj2);
IkReal x1812=((1.0)*x1804);
IkReal x1813=((1.0)*x1803);
IkReal x1814=(sj5*x1803);
evalcond[0]=((((-1.0)*x1809*x1813))+((r21*x1814))+(((-1.0)*r22*x1812)));
evalcond[1]=(sj0+(((-1.0)*x1808*x1813))+(((-1.0)*r02*x1812))+((x1803*x1807)));
evalcond[2]=((((-1.0)*x1810))+(((-1.0)*r12*x1812))+(((-1.0)*x1806*x1813))+((r11*x1814)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1812))+((cj1*sj2))+((x1804*x1809))+(((-1.0)*r22*x1813)));
evalcond[4]=((((-1.0)*x1807*x1812))+((cj0*x1805))+(((-1.0)*r02*x1813))+(((-1.0)*x1810*x1811))+((x1804*x1808)));
evalcond[5]=(((sj0*x1805))+(((-1.0)*r11*sj5*x1812))+(((-1.0)*r12*x1813))+(((-1.0)*sj0*x1811))+((x1804*x1806)));
=======
IkReal x13995=IKcos(j4);
IkReal x13996=IKsin(j4);
IkReal x13997=(cj5*r00);
IkReal x13998=(cj5*r10);
IkReal x13999=(r21*sj5);
IkReal x14000=((1.0)*cj2);
IkReal x14001=(cj5*r20);
IkReal x14002=((1.0)*x13995);
IkReal x14003=((1.0)*x13996);
IkReal x14004=(sj5*x13996);
IkReal x14005=(sj5*x13995);
evalcond[0]=((((-1.0)*x13998*x14002))+((r12*x13996))+((r11*x14005)));
evalcond[1]=(((x13996*x13999))+(((-1.0)*x14001*x14003))+(((-1.0)*r22*x14002)));
evalcond[2]=((((-1.0)*r02*x14002))+(((-1.0)*x13997*x14003))+((r01*x14004)));
evalcond[3]=((1.0)+(((-1.0)*x13998*x14003))+((r11*x14004))+(((-1.0)*r12*x14002)));
evalcond[4]=(((x13995*x13999))+((r22*x13996))+((sj1*sj2))+(((-1.0)*cj1*x14000))+(((-1.0)*x14001*x14002)));
evalcond[5]=((((-1.0)*sj1*x14000))+(((-1.0)*cj1*sj2))+((r02*x13996))+(((-1.0)*x13997*x14002))+((r01*x14005)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1815.valid){
continue;
}
CheckValue<IkReal> x1816 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1815.value)))+(x1816.value));
=======
CheckValue<IkReal> x14006=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14006.valid){
continue;
}
CheckValue<IkReal> x14007 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14006.value)))+(x14007.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
<<<<<<< HEAD
IkReal x1817=IKsin(j4);
IkReal x1818=IKcos(j4);
IkReal x1819=(cj1*cj2);
IkReal x1820=(cj5*r10);
IkReal x1821=(r01*sj5);
IkReal x1822=(cj5*r00);
IkReal x1823=(cj5*r20);
IkReal x1824=((1.0)*cj0);
IkReal x1825=(sj1*sj2);
IkReal x1826=((1.0)*x1818);
IkReal x1827=((1.0)*x1817);
IkReal x1828=(sj5*x1817);
evalcond[0]=((((-1.0)*r22*x1826))+(((-1.0)*x1823*x1827))+((r21*x1828)));
evalcond[1]=(sj0+(((-1.0)*x1822*x1827))+(((-1.0)*r02*x1826))+((x1817*x1821)));
evalcond[2]=((((-1.0)*x1824))+(((-1.0)*r12*x1826))+((r11*x1828))+(((-1.0)*x1820*x1827)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1818*x1823))+(((-1.0)*r22*x1827))+(((-1.0)*r21*sj5*x1826)));
evalcond[4]=((((-1.0)*x1821*x1826))+((cj0*x1819))+((x1818*x1822))+(((-1.0)*r02*x1827))+(((-1.0)*x1824*x1825)));
evalcond[5]=((((-1.0)*r11*sj5*x1826))+(((-1.0)*sj0*x1825))+((x1818*x1820))+((sj0*x1819))+(((-1.0)*r12*x1827)));
=======
IkReal x14008=IKcos(j4);
IkReal x14009=IKsin(j4);
IkReal x14010=(cj5*r00);
IkReal x14011=(cj5*r10);
IkReal x14012=(r21*sj5);
IkReal x14013=((1.0)*cj2);
IkReal x14014=(cj5*r20);
IkReal x14015=((1.0)*x14008);
IkReal x14016=((1.0)*x14009);
IkReal x14017=(sj5*x14009);
IkReal x14018=(sj5*x14008);
evalcond[0]=(((r11*x14018))+((r12*x14009))+(((-1.0)*x14011*x14015)));
evalcond[1]=((((-1.0)*x14014*x14016))+((x14009*x14012))+(((-1.0)*r22*x14015)));
evalcond[2]=((((-1.0)*r02*x14015))+(((-1.0)*x14010*x14016))+((r01*x14017)));
evalcond[3]=((1.0)+((r11*x14017))+(((-1.0)*r12*x14015))+(((-1.0)*x14011*x14016)));
evalcond[4]=((((-1.0)*x14014*x14015))+((sj1*sj2))+((r22*x14009))+(((-1.0)*cj1*x14013))+((x14008*x14012)));
evalcond[5]=(((r02*x14009))+(((-1.0)*sj1*x14013))+(((-1.0)*cj1*sj2))+(((-1.0)*x14010*x14015))+((r01*x14018)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14019=((-1.0)*r00);
IkReal x14021 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14021)==0){
continue;
}
IkReal x14020=pow(x14021,-0.5);
CheckValue<IkReal> x14022 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14019),IKFAST_ATAN2_MAGTHRESH);
if(!x14022.valid){
continue;
}
IkReal gconst54=((-1.0)*(x14022.value));
IkReal gconst55=(r01*x14020);
IkReal gconst56=(x14019*x14020);
CheckValue<IkReal> x14023 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14023.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14023.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14024=((-1.0)*r00);
IkReal x14025=x14020;
CheckValue<IkReal> x14027 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14024),IKFAST_ATAN2_MAGTHRESH);
if(!x14027.valid){
continue;
}
IkReal x14026=((-1.0)*(x14027.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14026;
IkReal gconst54=x14026;
IkReal gconst55=(r01*x14025);
IkReal gconst56=(x14024*x14025);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14028=((-1.0)*r00);
IkReal x14029=x14020;
CheckValue<IkReal> x14031 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14028),IKFAST_ATAN2_MAGTHRESH);
if(!x14031.valid){
continue;
}
IkReal x14030=((-1.0)*(x14031.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14030;
IkReal gconst54=x14030;
IkReal gconst55=(r01*x14029);
IkReal gconst56=(x14028*x14029);
CheckValue<IkReal> x14039=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14039.valid){
continue;
}
IkReal x14032=x14039.value;
IkReal x14033=(sj3*x14032);
IkReal x14034=(r11*x14033);
IkReal x14035=(r21*x14033);
IkReal x14036=(r20*x14033);
IkReal x14037=(r10*x14033);
IkReal x14038=(r00*r01*x14033);
j4eval[0]=IKsign((((r21*x14034*(r01*r01)))+((r00*r01*r20*x14034))+((r10*x14036*(r00*r00)))+((r00*r01*r10*x14035))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1829=cj5*cj5;
IkReal x1830=r21*r21;
IkReal x1831=(cj2*sj1);
IkReal x1832=(cj1*sj2);
IkReal x1833=(r21*sj5);
IkReal x1834=((1.0)*cj5*r20);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal((((r22*x1832))+((r22*x1831)))),IkReal(((((-1.0)*x1832*x1834))+((x1831*x1833))+((x1832*x1833))+(((-1.0)*x1831*x1834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1829*x1830))+(r22*r22)+((x1829*(r20*r20)))+x1830+(((-2.0)*cj5*r20*x1833)))),-1);
if(!x1836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
=======
IkReal x14040=gconst56*gconst56;
IkReal x14041=gconst55*gconst55;
IkReal x14042=(r11*r21);
IkReal x14043=(gconst56*sj3);
IkReal x14044=((1.0)*cj3);
IkReal x14045=(r10*r20);
IkReal x14046=(r10*r21);
IkReal x14047=(r11*r20);
IkReal x14048=(cj3*gconst55*gconst56);
CheckValue<IkReal> x14049=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14040*x14044*x14045))+(((-1.0)*r12*r22*x14044))+((x14047*x14048))+((x14046*x14048))+(((-1.0)*x14041*x14042*x14044)))),-1);
if(!x14049.valid){
continue;
}
CheckValue<IkReal> x14050 = IKatan2WithCheck(IkReal((((r11*r22*x14043))+((gconst55*r10*r22*sj3)))),IkReal((((sj3*x14041*x14046))+(((-1.0)*gconst55*x14043*x14045))+((gconst55*x14042*x14043))+(((-1.0)*sj3*x14040*x14047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14049.value)))+(x14050.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[2];
IkReal x1837=IKsin(j4);
IkReal x1838=IKcos(j4);
IkReal x1839=(r21*sj5);
IkReal x1840=(cj5*r20);
IkReal x1841=((1.0)*x1838);
IkReal x1842=((1.0)*x1837);
evalcond[0]=((((-1.0)*r22*x1841))+((x1837*x1839))+(((-1.0)*x1840*x1842)));
evalcond[1]=(((cj2*sj1))+((x1838*x1840))+(((-1.0)*r22*x1842))+((cj1*sj2))+(((-1.0)*x1839*x1841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x14051=IKsin(j4);
IkReal x14052=IKcos(j4);
IkReal x14053=(sj1*sj2);
IkReal x14054=(gconst55*r21);
IkReal x14055=(gconst56*r00);
IkReal x14056=(cj3*gconst55);
IkReal x14057=(gconst56*sj3);
IkReal x14058=(gconst55*sj3);
IkReal x14059=((1.0)*cj1);
IkReal x14060=(cj3*gconst56);
IkReal x14061=(cj2*sj1);
IkReal x14062=(cj2*x14059);
IkReal x14063=((1.0)*x14052);
IkReal x14064=((1.0)*x14051);
IkReal x14065=(cj3*x14051);
IkReal x14066=(gconst55*x14051);
evalcond[0]=(((x14051*x14054))+(((-1.0)*r22*x14063))+(((-1.0)*gconst56*r20*x14064)));
evalcond[1]=((((-1.0)*x14055*x14064))+((r01*x14066))+(((-1.0)*r02*x14063)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14063))+((r11*x14066))+(((-1.0)*gconst56*r10*x14064)));
evalcond[3]=(((r11*x14057))+((r11*x14052*x14056))+(((-1.0)*r10*x14060*x14063))+((r10*x14058))+((r12*x14065)));
evalcond[4]=(((r10*x14052*x14057))+(((-1.0)*r11*x14058*x14063))+((r10*x14056))+((r11*x14060))+(((-1.0)*r12*sj3*x14064)));
evalcond[5]=(((r20*x14058))+(((-1.0)*r20*x14060*x14063))+((r22*x14065))+((cj1*sj2))+x14061+((cj3*x14052*x14054))+((r21*x14057)));
evalcond[6]=(((r02*x14065))+((r00*x14058))+(((-1.0)*x14062))+((r01*x14052*x14056))+x14053+(((-1.0)*cj3*x14055*x14063))+((r01*x14057)));
evalcond[7]=(((r20*x14056))+(((-1.0)*r22*sj3*x14064))+((r21*x14060))+((r20*x14052*x14057))+(((-1.0)*x14062))+x14053+(((-1.0)*sj3*x14054*x14063)));
evalcond[8]=(((sj3*x14052*x14055))+((r00*x14056))+(((-1.0)*r02*sj3*x14064))+((r01*x14060))+(((-1.0)*r01*x14058*x14063))+(((-1.0)*sj2*x14059))+(((-1.0)*x14061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
<<<<<<< HEAD
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1843=(cj5*sj4);
IkReal x1844=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1844))+((r00*x1843))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1843))+((r11*x1844))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1844))+((r00*x1843))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1843))+((r11*x1844))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1844))+((r00*x1843))+((cj4*r02))), ((((-1.0)*r10*x1843))+((r11*x1844))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
=======
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14067=gconst55*gconst55;
IkReal x14068=gconst56*gconst56;
IkReal x14069=(r11*r21);
IkReal x14070=(cj3*gconst56);
IkReal x14071=(gconst55*r10);
IkReal x14072=((1.0)*r20);
IkReal x14073=(gconst56*sj3);
CheckValue<IkReal> x14074 = IKatan2WithCheck(IkReal((((cj3*r22*x14071))+((r11*r22*x14070)))),IkReal((((cj3*r10*r21*x14067))+(((-1.0)*x14070*x14071*x14072))+(((-1.0)*cj3*r11*x14068*x14072))+((gconst55*x14069*x14070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14074.valid){
continue;
}
CheckValue<IkReal> x14075=IKPowWithIntegerCheck(IKsign((((sj3*x14067*x14069))+((r10*r20*sj3*x14068))+((r12*r22*sj3))+(((-1.0)*r21*x14071*x14073))+(((-1.0)*gconst55*r11*x14072*x14073)))),-1);
if(!x14075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14074.value)+(((1.5707963267949)*(x14075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[8];
IkReal x1845=IKcos(j0);
IkReal x1846=IKsin(j0);
IkReal x1847=(cj4*cj5);
IkReal x1848=((1.0)*sj1);
IkReal x1849=(r11*sj5);
IkReal x1850=((1.0)*cj5);
IkReal x1851=((1.0)*sj4);
IkReal x1852=((0.21325)*sj1);
IkReal x1853=((1.0)*sj5);
IkReal x1854=((0.24365)*cj1);
IkReal x1855=((0.08535)*cj5);
IkReal x1856=((1.0)*cj4);
IkReal x1857=((0.08535)*sj5);
IkReal x1858=(sj2*x1846);
IkReal x1859=(cj2*x1845);
IkReal x1860=(sj2*x1845);
IkReal x1861=(cj1*cj2*x1846);
evalcond[0]=((((-1.0)*r00*sj4*x1850))+((r01*sj4*sj5))+(((-1.0)*r02*x1856))+x1846);
evalcond[1]=((((-1.0)*r10*sj4*x1850))+(((-1.0)*r12*x1856))+(((-1.0)*x1845))+((sj4*x1849)));
evalcond[2]=(((cj1*x1860))+(((-1.0)*r01*x1850))+(((-1.0)*r00*x1853))+((sj1*x1859)));
evalcond[3]=(((cj1*x1858))+(((-1.0)*r11*x1850))+((cj2*sj1*x1846))+(((-1.0)*r10*x1853)));
evalcond[4]=((((-1.0)*cj4*r01*x1853))+((cj1*x1859))+(((-1.0)*x1848*x1860))+((r00*x1847))+(((-1.0)*r02*x1851)));
evalcond[5]=((((-1.0)*x1848*x1858))+(((-1.0)*x1849*x1856))+((r10*x1847))+x1861+(((-1.0)*r12*x1851)));
evalcond[6]=((((-1.0)*x1845*x1854))+(((0.11)*x1846))+(((-1.0)*r01*x1855))+(((-1.0)*px))+(((-1.0)*r00*x1857))+(((-0.21325)*cj1*x1859))+((x1852*x1860)));
evalcond[7]=(((x1852*x1858))+(((-0.11)*x1845))+(((-1.0)*py))+(((-1.0)*r11*x1855))+(((-1.0)*x1846*x1854))+(((-1.0)*r10*x1857))+(((-0.21325)*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x14076=IKsin(j4);
IkReal x14077=IKcos(j4);
IkReal x14078=(sj1*sj2);
IkReal x14079=(gconst55*r21);
IkReal x14080=(gconst56*r00);
IkReal x14081=(cj3*gconst55);
IkReal x14082=(gconst56*sj3);
IkReal x14083=(gconst55*sj3);
IkReal x14084=((1.0)*cj1);
IkReal x14085=(cj3*gconst56);
IkReal x14086=(cj2*sj1);
IkReal x14087=(cj2*x14084);
IkReal x14088=((1.0)*x14077);
IkReal x14089=((1.0)*x14076);
IkReal x14090=(cj3*x14076);
IkReal x14091=(gconst55*x14076);
evalcond[0]=((((-1.0)*r22*x14088))+(((-1.0)*gconst56*r20*x14089))+((x14076*x14079)));
evalcond[1]=((((-1.0)*x14080*x14089))+(((-1.0)*r02*x14088))+((r01*x14091)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14088))+((r11*x14091))+(((-1.0)*gconst56*r10*x14089)));
evalcond[3]=((((-1.0)*r10*x14085*x14088))+((r11*x14082))+((r12*x14090))+((r11*x14077*x14081))+((r10*x14083)));
evalcond[4]=((((-1.0)*r12*sj3*x14089))+((r11*x14085))+(((-1.0)*r11*x14083*x14088))+((r10*x14077*x14082))+((r10*x14081)));
evalcond[5]=(((cj3*x14077*x14079))+((r20*x14083))+((cj1*sj2))+(((-1.0)*r20*x14085*x14088))+((r21*x14082))+x14086+((r22*x14090)));
evalcond[6]=((((-1.0)*cj3*x14080*x14088))+((r01*x14077*x14081))+((r00*x14083))+((r01*x14082))+(((-1.0)*x14087))+((r02*x14090))+x14078);
evalcond[7]=(((r20*x14081))+(((-1.0)*r22*sj3*x14089))+(((-1.0)*sj3*x14079*x14088))+(((-1.0)*x14087))+((r20*x14077*x14082))+((r21*x14085))+x14078);
evalcond[8]=((((-1.0)*sj2*x14084))+((r00*x14081))+((r01*x14085))+(((-1.0)*x14086))+(((-1.0)*r02*sj3*x14089))+((sj3*x14077*x14080))+(((-1.0)*r01*x14083*x14088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1862.valid){
continue;
}
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1862.value)))+(x1863.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
=======
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14092 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst56*r00))+((gconst55*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14092.valid){
continue;
}
CheckValue<IkReal> x14093=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x14093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14092.value)+(((1.5707963267949)*(x14093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[4];
IkReal x1864=IKcos(j0);
IkReal x1865=IKsin(j0);
IkReal x1866=(cj5*r11);
IkReal x1867=((0.21325)*sj2);
IkReal x1868=((1.0)*sj5);
IkReal x1869=(cj5*r01);
IkReal x1870=((0.24365)*cj1);
IkReal x1871=((0.08535)*sj5);
IkReal x1872=(cj1*sj2);
IkReal x1873=((0.21325)*cj1*cj2);
IkReal x1874=(sj1*x1864);
IkReal x1875=(sj1*x1865);
evalcond[0]=(((cj2*x1874))+(((-1.0)*r00*x1868))+(((-1.0)*x1869))+((x1864*x1872)));
evalcond[1]=(((x1865*x1872))+((cj2*x1875))+(((-1.0)*x1866))+(((-1.0)*r10*x1868)));
evalcond[2]=((((0.11)*x1865))+(((-1.0)*x1864*x1870))+(((-1.0)*x1864*x1873))+(((-1.0)*r00*x1871))+(((-1.0)*px))+(((-0.08535)*x1869))+((x1867*x1874)));
evalcond[3]=((((-1.0)*r10*x1871))+(((-1.0)*py))+(((-0.08535)*x1866))+(((-1.0)*x1865*x1873))+(((-1.0)*x1865*x1870))+((x1867*x1875))+(((-0.11)*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x14094=IKsin(j4);
IkReal x14095=IKcos(j4);
IkReal x14096=(sj1*sj2);
IkReal x14097=(gconst55*r21);
IkReal x14098=(gconst56*r00);
IkReal x14099=(cj3*gconst55);
IkReal x14100=(gconst56*sj3);
IkReal x14101=(gconst55*sj3);
IkReal x14102=((1.0)*cj1);
IkReal x14103=(cj3*gconst56);
IkReal x14104=(cj2*sj1);
IkReal x14105=(cj2*x14102);
IkReal x14106=((1.0)*x14095);
IkReal x14107=((1.0)*x14094);
IkReal x14108=(cj3*x14094);
IkReal x14109=(gconst55*x14094);
evalcond[0]=(((x14094*x14097))+(((-1.0)*r22*x14106))+(((-1.0)*gconst56*r20*x14107)));
evalcond[1]=(((r01*x14109))+(((-1.0)*r02*x14106))+(((-1.0)*x14098*x14107)));
evalcond[2]=((1.0)+(((-1.0)*gconst56*r10*x14107))+(((-1.0)*r12*x14106))+((r11*x14109)));
evalcond[3]=((((-1.0)*r10*x14103*x14106))+((r11*x14095*x14099))+((r10*x14101))+((r12*x14108))+((r11*x14100)));
evalcond[4]=((((-1.0)*r11*x14101*x14106))+((r10*x14099))+((r10*x14095*x14100))+(((-1.0)*r12*sj3*x14107))+((r11*x14103)));
evalcond[5]=(((cj1*sj2))+((r22*x14108))+(((-1.0)*r20*x14103*x14106))+x14104+((r20*x14101))+((cj3*x14095*x14097))+((r21*x14100)));
evalcond[6]=(((r01*x14095*x14099))+((r02*x14108))+(((-1.0)*cj3*x14098*x14106))+((r00*x14101))+((r01*x14100))+(((-1.0)*x14105))+x14096);
evalcond[7]=((((-1.0)*r22*sj3*x14107))+((r20*x14095*x14100))+((r20*x14099))+(((-1.0)*sj3*x14097*x14106))+(((-1.0)*x14105))+x14096+((r21*x14103)));
evalcond[8]=(((r00*x14099))+((r01*x14103))+(((-1.0)*r02*sj3*x14107))+(((-1.0)*r01*x14101*x14106))+((sj3*x14095*x14098))+(((-1.0)*x14104))+(((-1.0)*sj2*x14102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
<<<<<<< HEAD
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1876=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1876;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
=======
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1877=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1877;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
=======
IkReal x14110=((-1.0)*r01);
IkReal x14112 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14112)==0){
continue;
}
IkReal x14111=pow(x14112,-0.5);
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal(x14110),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x14113.value))));
IkReal gconst58=(x14110*x14111);
IkReal gconst59=((1.0)*r00*x14111);
CheckValue<IkReal> x14114 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
bgotonextstatement=false;
{
<<<<<<< HEAD
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1878=((1.0)*cj5);
IkReal x1879=((((-1.0)*r21*x1878))+(((-1.0)*r20*sj5)));
j4eval[0]=x1879;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1878))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1878))))));
j4eval[2]=IKsign(x1879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
=======
IkReal j4eval[1];
IkReal x14115=((-1.0)*r01);
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal(x14115),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
IkReal x14116=((1.0)*(x14118.value));
IkReal x14117=x14111;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14116)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14116)));
IkReal gconst58=(x14115*x14117);
IkReal gconst59=((1.0)*r00*x14117);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
{
IkReal j4eval[4];
IkReal x14119=((-1.0)*r01);
CheckValue<IkReal> x14122 = IKatan2WithCheck(IkReal(x14119),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14122.valid){
continue;
}
IkReal x14120=((1.0)*(x14122.value));
IkReal x14121=x14111;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14120)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14120)));
IkReal gconst58=(x14119*x14121);
IkReal gconst59=((1.0)*r00*x14121);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1880=((1.0)*cj5);
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1880))+(((-1.0)*r10*sj0*x1880))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1880))+(((-1.0)*r20*sj5)))),-1);
if(!x1882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1881.value)+(((1.5707963267949)*(x1882.value))));
=======
IkReal x14123=gconst59*gconst59;
IkReal x14124=gconst58*gconst58;
IkReal x14125=((1.0)*cj3);
IkReal x14126=(r11*r21);
IkReal x14127=((1.0)*r20);
IkReal x14128=(r11*sj3);
IkReal x14129=(gconst58*gconst59);
IkReal x14130=(r10*r21);
IkReal x14131=(gconst58*r10*sj3);
CheckValue<IkReal> x14132 = IKatan2WithCheck(IkReal((((gconst59*r22*x14128))+((r22*x14131)))),IkReal((((sj3*x14124*x14130))+(((-1.0)*x14123*x14127*x14128))+(((-1.0)*r10*sj3*x14127*x14129))+((sj3*x14126*x14129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14132.valid){
continue;
}
CheckValue<IkReal> x14133=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14129))+(((-1.0)*r10*r20*x14123*x14125))+(((-1.0)*x14124*x14125*x14126))+((cj3*x14129*x14130))+(((-1.0)*r12*r22*x14125)))),-1);
if(!x14133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14132.value)+(((1.5707963267949)*(x14133.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1883=IKsin(j4);
IkReal x1884=IKcos(j4);
IkReal x1885=(cj1*cj2);
IkReal x1886=(cj5*r10);
IkReal x1887=(r01*sj5);
IkReal x1888=(cj5*r00);
IkReal x1889=(cj5*r20);
IkReal x1890=((1.0)*cj0);
IkReal x1891=(sj1*sj2);
IkReal x1892=((1.0)*x1884);
IkReal x1893=((1.0)*x1883);
IkReal x1894=(sj5*x1883);
evalcond[0]=((((-1.0)*r22*x1892))+(((-1.0)*x1889*x1893))+((r21*x1894)));
evalcond[1]=((((-1.0)*r02*x1892))+sj0+((x1883*x1887))+(((-1.0)*x1888*x1893)));
evalcond[2]=(((r11*x1894))+(((-1.0)*r12*x1892))+(((-1.0)*x1886*x1893))+(((-1.0)*x1890)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1892))+(((-1.0)*r22*x1893))+((x1884*x1889)));
evalcond[4]=((((-1.0)*r02*x1893))+(((-1.0)*x1890*x1891))+(((-1.0)*x1887*x1892))+((cj0*x1885))+((x1884*x1888)));
evalcond[5]=((((-1.0)*sj0*x1891))+(((-1.0)*r12*x1893))+(((-1.0)*r11*sj5*x1892))+((sj0*x1885))+((x1884*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x14134=IKsin(j4);
IkReal x14135=IKcos(j4);
IkReal x14136=(sj1*sj2);
IkReal x14137=(cj3*gconst59);
IkReal x14138=(gconst58*r00);
IkReal x14139=((1.0)*cj1);
IkReal x14140=(gconst59*r20);
IkReal x14141=(gconst59*r00);
IkReal x14142=(cj2*sj1);
IkReal x14143=(gconst58*sj3);
IkReal x14144=(gconst59*sj3);
IkReal x14145=(gconst59*r10);
IkReal x14146=(cj3*gconst58);
IkReal x14147=(cj2*x14139);
IkReal x14148=((1.0)*x14135);
IkReal x14149=((1.0)*x14134);
IkReal x14150=(cj3*x14134);
IkReal x14151=(gconst58*x14134);
IkReal x14152=(sj3*x14135);
IkReal x14153=(x14135*x14146);
evalcond[0]=((((-1.0)*r22*x14148))+((r21*x14151))+(((-1.0)*x14140*x14149)));
evalcond[1]=(((r01*x14151))+(((-1.0)*x14141*x14149))+(((-1.0)*r02*x14148)));
evalcond[2]=((1.0)+((r11*x14151))+(((-1.0)*r12*x14148))+(((-1.0)*x14145*x14149)));
evalcond[3]=((((-1.0)*r10*x14137*x14148))+((r10*x14143))+((r11*x14153))+((r12*x14150))+((r11*x14144)));
evalcond[4]=(((r10*x14146))+(((-1.0)*r11*x14143*x14148))+(((-1.0)*r12*sj3*x14149))+((r11*x14137))+((r10*x14135*x14144)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x14137*x14148))+((r22*x14150))+((r21*x14144))+x14142+((r21*x14153))+((r20*x14143)));
evalcond[6]=(((r02*x14150))+((sj3*x14138))+((r01*x14144))+((r01*x14153))+(((-1.0)*x14147))+x14136+(((-1.0)*r00*x14137*x14148)));
evalcond[7]=((((-1.0)*r22*sj3*x14149))+(((-1.0)*r21*x14143*x14148))+((r21*x14137))+(((-1.0)*x14147))+((x14140*x14152))+x14136+((r20*x14146)));
evalcond[8]=((((-1.0)*r01*x14143*x14148))+(((-1.0)*r02*sj3*x14149))+(((-1.0)*x14142))+((cj3*x14138))+((x14141*x14152))+((r01*x14137))+(((-1.0)*sj2*x14139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1895.value)))+(x1896.value));
=======
IkReal x14154=((1.0)*gconst59);
CheckValue<IkReal> x14155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14154))+(((-1.0)*gconst58*r00)))),-1);
if(!x14155.valid){
continue;
}
CheckValue<IkReal> x14156 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14154))+((gconst58*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14155.value)))+(x14156.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1897=IKsin(j4);
IkReal x1898=IKcos(j4);
IkReal x1899=(cj1*cj2);
IkReal x1900=(cj5*r10);
IkReal x1901=(r01*sj5);
IkReal x1902=(cj5*r00);
IkReal x1903=(cj5*r20);
IkReal x1904=((1.0)*cj0);
IkReal x1905=(sj1*sj2);
IkReal x1906=((1.0)*x1898);
IkReal x1907=((1.0)*x1897);
IkReal x1908=(sj5*x1897);
evalcond[0]=((((-1.0)*x1903*x1907))+(((-1.0)*r22*x1906))+((r21*x1908)));
evalcond[1]=((((-1.0)*x1902*x1907))+sj0+((x1897*x1901))+(((-1.0)*r02*x1906)));
evalcond[2]=((((-1.0)*x1900*x1907))+(((-1.0)*r12*x1906))+((r11*x1908))+(((-1.0)*x1904)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1907))+((x1898*x1903))+(((-1.0)*r21*sj5*x1906)));
evalcond[4]=((((-1.0)*x1901*x1906))+((x1898*x1902))+(((-1.0)*x1904*x1905))+((cj0*x1899))+(((-1.0)*r02*x1907)));
evalcond[5]=(((x1898*x1900))+(((-1.0)*r11*sj5*x1906))+(((-1.0)*sj0*x1905))+(((-1.0)*r12*x1907))+((sj0*x1899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x14157=IKsin(j4);
IkReal x14158=IKcos(j4);
IkReal x14159=(sj1*sj2);
IkReal x14160=(cj3*gconst59);
IkReal x14161=(gconst58*r00);
IkReal x14162=((1.0)*cj1);
IkReal x14163=(gconst59*r20);
IkReal x14164=(gconst59*r00);
IkReal x14165=(cj2*sj1);
IkReal x14166=(gconst58*sj3);
IkReal x14167=(gconst59*sj3);
IkReal x14168=(gconst59*r10);
IkReal x14169=(cj3*gconst58);
IkReal x14170=(cj2*x14162);
IkReal x14171=((1.0)*x14158);
IkReal x14172=((1.0)*x14157);
IkReal x14173=(cj3*x14157);
IkReal x14174=(gconst58*x14157);
IkReal x14175=(sj3*x14158);
IkReal x14176=(x14158*x14169);
evalcond[0]=(((r21*x14174))+(((-1.0)*r22*x14171))+(((-1.0)*x14163*x14172)));
evalcond[1]=(((r01*x14174))+(((-1.0)*r02*x14171))+(((-1.0)*x14164*x14172)));
evalcond[2]=((1.0)+(((-1.0)*x14168*x14172))+((r11*x14174))+(((-1.0)*r12*x14171)));
evalcond[3]=(((r10*x14166))+((r11*x14176))+((r12*x14173))+(((-1.0)*r10*x14160*x14171))+((r11*x14167)));
evalcond[4]=((((-1.0)*r12*sj3*x14172))+((r10*x14169))+(((-1.0)*r11*x14166*x14171))+((r11*x14160))+((r10*x14158*x14167)));
evalcond[5]=(((r22*x14173))+((r21*x14176))+((cj1*sj2))+x14165+((r21*x14167))+((r20*x14166))+(((-1.0)*r20*x14160*x14171)));
evalcond[6]=((((-1.0)*x14170))+((sj3*x14161))+((r01*x14176))+((r02*x14173))+((r01*x14167))+x14159+(((-1.0)*r00*x14160*x14171)));
evalcond[7]=((((-1.0)*x14170))+(((-1.0)*r21*x14166*x14171))+((x14163*x14175))+x14159+((r21*x14160))+(((-1.0)*r22*sj3*x14172))+((r20*x14169)));
evalcond[8]=(((cj3*x14161))+((x14164*x14175))+(((-1.0)*sj2*x14162))+((r01*x14160))+(((-1.0)*r01*x14166*x14171))+(((-1.0)*r02*sj3*x14172))+(((-1.0)*x14165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1909.valid){
continue;
}
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1909.value)))+(x1910.value));
=======
CheckValue<IkReal> x14177=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x14177.valid){
continue;
}
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst58*r01))+(((-1.0)*gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14177.value)))+(x14178.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[6];
IkReal x1911=IKsin(j4);
IkReal x1912=IKcos(j4);
IkReal x1913=(cj1*cj2);
IkReal x1914=(cj5*r10);
IkReal x1915=(r01*sj5);
IkReal x1916=(cj5*r00);
IkReal x1917=(cj5*r20);
IkReal x1918=((1.0)*cj0);
IkReal x1919=(sj1*sj2);
IkReal x1920=((1.0)*x1912);
IkReal x1921=((1.0)*x1911);
IkReal x1922=(sj5*x1911);
evalcond[0]=((((-1.0)*x1917*x1921))+(((-1.0)*r22*x1920))+((r21*x1922)));
evalcond[1]=(sj0+(((-1.0)*x1916*x1921))+((x1911*x1915))+(((-1.0)*r02*x1920)));
evalcond[2]=((((-1.0)*r12*x1920))+(((-1.0)*x1914*x1921))+((r11*x1922))+(((-1.0)*x1918)));
evalcond[3]=(((cj2*sj1))+((x1912*x1917))+((cj1*sj2))+(((-1.0)*r21*sj5*x1920))+(((-1.0)*r22*x1921)));
evalcond[4]=(((x1912*x1916))+(((-1.0)*x1915*x1920))+(((-1.0)*r02*x1921))+((cj0*x1913))+(((-1.0)*x1918*x1919)));
evalcond[5]=((((-1.0)*r12*x1921))+((x1912*x1914))+(((-1.0)*r11*sj5*x1920))+(((-1.0)*sj0*x1919))+((sj0*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[9];
IkReal x14179=IKsin(j4);
IkReal x14180=IKcos(j4);
IkReal x14181=(sj1*sj2);
IkReal x14182=(cj3*gconst59);
IkReal x14183=(gconst58*r00);
IkReal x14184=((1.0)*cj1);
IkReal x14185=(gconst59*r20);
IkReal x14186=(gconst59*r00);
IkReal x14187=(cj2*sj1);
IkReal x14188=(gconst58*sj3);
IkReal x14189=(gconst59*sj3);
IkReal x14190=(gconst59*r10);
IkReal x14191=(cj3*gconst58);
IkReal x14192=(cj2*x14184);
IkReal x14193=((1.0)*x14180);
IkReal x14194=((1.0)*x14179);
IkReal x14195=(cj3*x14179);
IkReal x14196=(gconst58*x14179);
IkReal x14197=(sj3*x14180);
IkReal x14198=(x14180*x14191);
evalcond[0]=((((-1.0)*r22*x14193))+(((-1.0)*x14185*x14194))+((r21*x14196)));
evalcond[1]=((((-1.0)*x14186*x14194))+(((-1.0)*r02*x14193))+((r01*x14196)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14193))+((r11*x14196))+(((-1.0)*x14190*x14194)));
evalcond[3]=((((-1.0)*r10*x14182*x14193))+((r11*x14198))+((r12*x14195))+((r11*x14189))+((r10*x14188)));
evalcond[4]=(((r10*x14191))+(((-1.0)*r12*sj3*x14194))+((r10*x14180*x14189))+((r11*x14182))+(((-1.0)*r11*x14188*x14193)));
evalcond[5]=(((r20*x14188))+(((-1.0)*r20*x14182*x14193))+((cj1*sj2))+((r22*x14195))+((r21*x14189))+x14187+((r21*x14198)));
evalcond[6]=(((r02*x14195))+((sj3*x14183))+(((-1.0)*r00*x14182*x14193))+((r01*x14189))+(((-1.0)*x14192))+((r01*x14198))+x14181);
evalcond[7]=((((-1.0)*r22*sj3*x14194))+(((-1.0)*r21*x14188*x14193))+((x14185*x14197))+(((-1.0)*x14192))+((r21*x14182))+x14181+((r20*x14191)));
evalcond[8]=(((cj3*x14183))+((r01*x14182))+(((-1.0)*r01*x14188*x14193))+(((-1.0)*r02*sj3*x14194))+((x14186*x14197))+(((-1.0)*sj2*x14184))+(((-1.0)*x14187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1923=cj2*cj2;
IkReal x1924=cj1*cj1;
IkReal x1925=((182.008875)*cj5);
IkReal x1926=(cj1*cj2);
IkReal x1927=(sj1*sj2);
IkReal x1928=(cj5*r11);
IkReal x1929=((2132.5)*py);
IkReal x1930=((182.008875)*sj5);
IkReal x1931=((207.955275)*cj1);
IkReal x1932=(cj5*r01);
IkReal x1933=(r00*sj5);
IkReal x1934=((2436.5)*cj1);
IkReal x1935=(r10*sj5);
IkReal x1936=((2132.5)*px);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1925*x1927))+((r11*x1925*x1926))+(((-1.0)*r10*x1927*x1930))+(((-1100.0)*px))+((x1931*x1935))+(((-93.885)*x1932))+(((-93.885)*x1933))+((py*x1934))+(((-1.0)*x1927*x1929))+((x1928*x1931))+((x1926*x1929))+((r10*x1926*x1930)))),IkReal(((((-1.0)*r01*x1925*x1927))+((px*x1934))+((r00*x1926*x1930))+((x1931*x1933))+((x1931*x1932))+(((93.885)*x1935))+((x1926*x1936))+((r01*x1925*x1926))+(((1100.0)*py))+(((93.885)*x1928))+(((-1.0)*x1927*x1936))+(((-1.0)*r00*x1927*x1930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
CheckValue<IkReal> x1938=IKPowWithIntegerCheck(IKsign(((-575.755625)+(((-909.51125)*x1923*x1924))+(((909.51125)*x1926*x1927))+(((454.755625)*x1923))+(((-138.8976)*x1924))+(((-1039.16725)*cj2*x1924))+(((1039.16725)*cj1*x1927)))),-1);
if(!x1938.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1937.value)+(((1.5707963267949)*(x1938.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1939=IKcos(j0);
IkReal x1940=IKsin(j0);
IkReal x1941=((0.24365)*cj1);
IkReal x1942=((0.08535)*sj5);
IkReal x1943=((0.08535)*cj5);
IkReal x1944=((0.21325)*sj1*sj2);
IkReal x1945=((0.21325)*cj1*cj2);
evalcond[0]=(((x1939*x1944))+(((-1.0)*px))+(((-1.0)*r00*x1942))+(((-1.0)*r01*x1943))+(((-1.0)*x1939*x1941))+(((-1.0)*x1939*x1945))+(((0.11)*x1940)));
evalcond[1]=((((-0.11)*x1939))+(((-1.0)*x1940*x1945))+(((-1.0)*x1940*x1941))+((x1940*x1944))+(((-1.0)*py))+(((-1.0)*r11*x1943))+(((-1.0)*r10*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1946=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1946;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1947=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1947;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1948=((1.0)*cj5);
IkReal x1949=((((-1.0)*r21*x1948))+(((-1.0)*r20*sj5)));
j4eval[0]=x1949;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1948))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1948))))));
j4eval[2]=IKsign(x1949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1950=((-1.0)*r20);
IkReal x1952 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1952)==0){
continue;
}
IkReal x1951=pow(x1952,-0.5);
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1950),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1953.value));
IkReal gconst1=(r21*x1951);
IkReal gconst2=(x1950*x1951);
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1954.value)+j5)))), 6.28318530717959)));
=======
IkReal x14200 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14200)==0){
continue;
}
IkReal x14199=pow(x14200,-0.5);
CheckValue<IkReal> x14201 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14201.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14201.value));
IkReal gconst61=((-1.0)*r21*x14199);
IkReal gconst62=(r20*x14199);
CheckValue<IkReal> x14202 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14202.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14202.value)+j5)))), 6.28318530717959)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
<<<<<<< HEAD
IkReal x1955=((-1.0)*r20);
IkReal x1956=x1951;
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1955),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
IkReal x1957=((-1.0)*(x1958.value));
sj5=gconst1;
cj5=gconst2;
j5=x1957;
IkReal gconst0=x1957;
IkReal gconst1=(r21*x1956);
IkReal gconst2=(x1955*x1956);
j4eval[0]=sj0;
=======
CheckValue<IkReal> x14205 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14205.valid){
continue;
}
IkReal x14203=((-1.0)*(x14205.value));
IkReal x14204=x14199;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14203;
IkReal gconst60=x14203;
IkReal gconst61=((-1.0)*r21*x14204);
IkReal gconst62=(r20*x14204);
j4eval[0]=1.0;
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
<<<<<<< HEAD
IkReal x1959=((-1.0)*r20);
IkReal x1960=x1951;
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1959),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal x1961=((-1.0)*(x1962.value));
sj5=gconst1;
cj5=gconst2;
j5=x1961;
IkReal gconst0=x1961;
IkReal gconst1=(r21*x1960);
IkReal gconst2=(x1959*x1960);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1963=((-1.0)*r20);
IkReal x1964=x1951;
CheckValue<IkReal> x1966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1963),IKFAST_ATAN2_MAGTHRESH);
if(!x1966.valid){
continue;
}
IkReal x1965=((-1.0)*(x1966.value));
sj5=gconst1;
cj5=gconst2;
j5=x1965;
IkReal gconst0=x1965;
IkReal gconst1=(r21*x1964);
IkReal gconst2=(x1963*x1964);
IkReal x1967=r22*r22;
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1967))),-1);
if(!x1971.valid){
continue;
}
IkReal x1968=x1971.value;
IkReal x1969=(sj3*x1968);
IkReal x1970=((((2.0)*x1969*(r20*r20)*(r21*r21)))+((sj3*x1967))+((x1969*(r21*r21*r21*r21)))+((x1969*(r20*r20*r20*r20))));
j4eval[0]=x1970;
j4eval[1]=IKsign(x1970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
=======
CheckValue<IkReal> x14208 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14208.valid){
continue;
}
IkReal x14206=((-1.0)*(x14208.value));
IkReal x14207=x14199;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14206;
IkReal gconst60=x14206;
IkReal gconst61=((-1.0)*r21*x14207);
IkReal gconst62=(r20*x14207);
CheckValue<IkReal> x14216=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14216.valid){
continue;
}
IkReal x14209=x14216.value;
IkReal x14210=(sj3*x14209);
IkReal x14211=(r11*x14210);
IkReal x14212=(r00*x14210);
IkReal x14213=(r01*x14210);
IkReal x14214=(r10*x14210);
IkReal x14215=(r20*r21*x14210);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14213))+((r10*x14212*(r20*r20)))+((r00*r20*r21*x14211))+((r01*x14211*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x1972=gconst1*gconst1;
IkReal x1973=r21*r21;
IkReal x1974=gconst2*gconst2;
IkReal x1975=r20*r20;
IkReal x1976=(gconst2*r20);
IkReal x1977=(cj1*cj2);
IkReal x1978=(sj1*sj2);
IkReal x1979=(gconst1*r21);
IkReal x1980=(cj3*gconst2);
IkReal x1981=(cj3*r20);
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x1972*x1973))+(((-2.0)*sj3*x1976*x1979))+((sj3*x1974*x1975)))),-1);
if(!x1982.valid){
continue;
}
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1977))+((gconst1*r22*x1981))+((r22*x1978))+((r21*r22*x1980)))),IkReal(((((-1.0)*gconst1*x1975*x1980))+((r21*x1972*x1981))+((gconst1*x1973*x1980))+((x1976*x1977))+(((-1.0)*x1977*x1979))+(((-1.0)*x1976*x1978))+((x1978*x1979))+(((-1.0)*r21*x1974*x1981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1982.value)))+(x1983.value));
=======
IkReal x14217=gconst61*gconst61;
IkReal x14218=gconst62*gconst62;
IkReal x14219=(r00*r11);
IkReal x14220=(r01*r10);
IkReal x14221=(r00*r10);
IkReal x14222=(r01*r11);
IkReal x14223=((1.0)*cj3);
IkReal x14224=(r02*sj3);
IkReal x14225=(cj3*gconst61*gconst62);
IkReal x14226=((1.0)*x14218);
IkReal x14227=(gconst61*gconst62*sj3);
CheckValue<IkReal> x14228=IKPowWithIntegerCheck(IKsign((((x14219*x14225))+(((-1.0)*r02*r12*x14223))+(((-1.0)*x14217*x14222*x14223))+((x14220*x14225))+(((-1.0)*x14218*x14221*x14223)))),-1);
if(!x14228.valid){
continue;
}
CheckValue<IkReal> x14229 = IKatan2WithCheck(IkReal((((gconst62*r11*x14224))+((gconst61*r10*x14224)))),IkReal((((x14222*x14227))+(((-1.0)*x14221*x14227))+(((-1.0)*sj3*x14219*x14226))+((sj3*x14217*x14220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14228.value)))+(x14229.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x1984=IKsin(j4);
IkReal x1985=IKcos(j4);
IkReal x1986=(gconst1*sj3);
IkReal x1987=(cj2*sj0);
IkReal x1988=(cj3*gconst1);
IkReal x1989=(sj1*sj2);
IkReal x1990=(cj3*gconst2);
IkReal x1991=(cj1*cj2);
IkReal x1992=(gconst2*sj3);
IkReal x1993=(cj2*sj1);
IkReal x1994=((1.0)*cj0);
IkReal x1995=(cj1*sj2);
IkReal x1996=((1.0)*x1985);
IkReal x1997=((1.0)*x1984);
IkReal x1998=(gconst1*x1984);
IkReal x1999=(cj3*x1984);
IkReal x2000=(x1985*x1992);
evalcond[0]=(((r21*x1998))+(((-1.0)*gconst2*r20*x1997))+(((-1.0)*r22*x1996)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x1997))+(((-1.0)*r02*x1996))+((r01*x1998)));
evalcond[2]=(((r11*x1998))+(((-1.0)*gconst2*r10*x1997))+(((-1.0)*x1994))+(((-1.0)*r12*x1996)));
evalcond[3]=(((r21*x1992))+x1993+x1995+((r21*x1985*x1988))+((r22*x1999))+((r20*x1986))+(((-1.0)*r20*x1990*x1996)));
evalcond[4]=(((r21*x1990))+x1989+((r20*x2000))+(((-1.0)*r21*x1986*x1996))+(((-1.0)*r22*sj3*x1997))+(((-1.0)*x1991))+((r20*x1988)));
evalcond[5]=(((cj0*x1995))+((cj0*x1993))+((r00*x2000))+(((-1.0)*r01*x1986*x1996))+(((-1.0)*r02*sj3*x1997))+((r00*x1988))+((r01*x1990)));
evalcond[6]=(((cj0*x1991))+((r01*x1985*x1988))+((r02*x1999))+(((-1.0)*x1989*x1994))+((r00*x1986))+((r01*x1992))+(((-1.0)*r00*x1990*x1996)));
evalcond[7]=(((sj0*x1995))+((r11*x1990))+((r10*x2000))+((r10*x1988))+(((-1.0)*r11*x1986*x1996))+((sj1*x1987))+(((-1.0)*r12*sj3*x1997)));
evalcond[8]=(((r12*x1999))+((r11*x1992))+(((-1.0)*sj0*x1989))+((r10*x1986))+((cj1*x1987))+((r11*x1985*x1988))+(((-1.0)*r10*x1990*x1996)));
=======
IkReal x14230=IKsin(j4);
IkReal x14231=IKcos(j4);
IkReal x14232=(sj1*sj2);
IkReal x14233=(gconst61*sj3);
IkReal x14234=(cj3*gconst61);
IkReal x14235=(cj3*gconst62);
IkReal x14236=((1.0)*cj2);
IkReal x14237=(gconst62*sj3);
IkReal x14238=(cj1*sj2);
IkReal x14239=(cj1*x14236);
IkReal x14240=((1.0)*x14231);
IkReal x14241=((1.0)*x14230);
IkReal x14242=(gconst61*x14230);
IkReal x14243=(cj3*x14230);
evalcond[0]=(((r21*x14242))+(((-1.0)*r22*x14240))+(((-1.0)*gconst62*r20*x14241)));
evalcond[1]=(((r01*x14242))+(((-1.0)*r02*x14240))+(((-1.0)*gconst62*r00*x14241)));
evalcond[2]=((1.0)+((r11*x14242))+(((-1.0)*r12*x14240))+(((-1.0)*gconst62*r10*x14241)));
evalcond[3]=((((-1.0)*r10*x14235*x14240))+((r10*x14233))+((r12*x14243))+((r11*x14231*x14234))+((r11*x14237)));
evalcond[4]=(((r10*x14234))+(((-1.0)*r11*x14233*x14240))+((r10*x14231*x14237))+((r11*x14235))+(((-1.0)*r12*sj3*x14241)));
evalcond[5]=(((cj2*sj1))+((r20*x14233))+((r21*x14231*x14234))+((r21*x14237))+x14238+(((-1.0)*r20*x14235*x14240))+((r22*x14243)));
evalcond[6]=((((-1.0)*x14239))+((r02*x14243))+(((-1.0)*r00*x14235*x14240))+((r01*x14237))+((r00*x14233))+x14232+((r01*x14231*x14234)));
evalcond[7]=((((-1.0)*r22*sj3*x14241))+(((-1.0)*x14239))+((r20*x14234))+((r20*x14231*x14237))+((r21*x14235))+x14232+(((-1.0)*r21*x14233*x14240)));
evalcond[8]=((((-1.0)*r01*x14233*x14240))+(((-1.0)*sj1*x14236))+(((-1.0)*r02*sj3*x14241))+((r00*x14231*x14237))+((r01*x14235))+((r00*x14234))+(((-1.0)*x14238)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2001.value)))+(x2002.value));
=======
IkReal x14244=gconst61*gconst61;
IkReal x14245=gconst62*gconst62;
IkReal x14246=(r01*r10);
IkReal x14247=(r00*r11);
IkReal x14248=(cj3*gconst61);
IkReal x14249=(gconst62*r11);
IkReal x14250=(r00*r10);
IkReal x14251=((1.0)*gconst61*gconst62*sj3);
CheckValue<IkReal> x14252 = IKatan2WithCheck(IkReal((((r02*r10*x14248))+((cj3*r02*x14249)))),IkReal((((r01*x14248*x14249))+(((-1.0)*cj3*x14245*x14247))+((cj3*x14244*x14246))+(((-1.0)*gconst62*x14248*x14250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14252.valid){
continue;
}
CheckValue<IkReal> x14253=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14246*x14251))+(((-1.0)*x14247*x14251))+((r01*r11*sj3*x14244))+((sj3*x14245*x14250)))),-1);
if(!x14253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14252.value)+(((1.5707963267949)*(x14253.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2003=IKsin(j4);
IkReal x2004=IKcos(j4);
IkReal x2005=(gconst1*sj3);
IkReal x2006=(cj2*sj0);
IkReal x2007=(cj3*gconst1);
IkReal x2008=(sj1*sj2);
IkReal x2009=(cj3*gconst2);
IkReal x2010=(cj1*cj2);
IkReal x2011=(gconst2*sj3);
IkReal x2012=(cj2*sj1);
IkReal x2013=((1.0)*cj0);
IkReal x2014=(cj1*sj2);
IkReal x2015=((1.0)*x2004);
IkReal x2016=((1.0)*x2003);
IkReal x2017=(gconst1*x2003);
IkReal x2018=(cj3*x2003);
IkReal x2019=(x2004*x2011);
evalcond[0]=((((-1.0)*gconst2*r20*x2016))+((r21*x2017))+(((-1.0)*r22*x2015)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x2016))+((r01*x2017))+(((-1.0)*r02*x2015)));
evalcond[2]=((((-1.0)*x2013))+(((-1.0)*r12*x2015))+(((-1.0)*gconst2*r10*x2016))+((r11*x2017)));
evalcond[3]=(x2014+x2012+(((-1.0)*r20*x2009*x2015))+((r22*x2018))+((r20*x2005))+((r21*x2011))+((r21*x2004*x2007)));
evalcond[4]=(((r21*x2009))+((r20*x2019))+(((-1.0)*r22*sj3*x2016))+x2008+((r20*x2007))+(((-1.0)*r21*x2005*x2015))+(((-1.0)*x2010)));
evalcond[5]=((((-1.0)*r02*sj3*x2016))+((r01*x2009))+((r00*x2007))+((r00*x2019))+(((-1.0)*r01*x2005*x2015))+((cj0*x2014))+((cj0*x2012)));
evalcond[6]=((((-1.0)*x2008*x2013))+((r00*x2005))+((r01*x2011))+((r01*x2004*x2007))+((cj0*x2010))+((r02*x2018))+(((-1.0)*r00*x2009*x2015)));
evalcond[7]=(((r11*x2009))+((sj0*x2014))+(((-1.0)*r12*sj3*x2016))+((r10*x2007))+((r10*x2019))+((sj1*x2006))+(((-1.0)*r11*x2005*x2015)));
evalcond[8]=(((r11*x2004*x2007))+((r10*x2005))+(((-1.0)*r10*x2009*x2015))+(((-1.0)*sj0*x2008))+((r12*x2018))+((r11*x2011))+((cj1*x2006)));
=======
IkReal x14254=IKsin(j4);
IkReal x14255=IKcos(j4);
IkReal x14256=(sj1*sj2);
IkReal x14257=(gconst61*sj3);
IkReal x14258=(cj3*gconst61);
IkReal x14259=(cj3*gconst62);
IkReal x14260=((1.0)*cj2);
IkReal x14261=(gconst62*sj3);
IkReal x14262=(cj1*sj2);
IkReal x14263=(cj1*x14260);
IkReal x14264=((1.0)*x14255);
IkReal x14265=((1.0)*x14254);
IkReal x14266=(gconst61*x14254);
IkReal x14267=(cj3*x14254);
evalcond[0]=((((-1.0)*gconst62*r20*x14265))+((r21*x14266))+(((-1.0)*r22*x14264)));
evalcond[1]=((((-1.0)*r02*x14264))+(((-1.0)*gconst62*r00*x14265))+((r01*x14266)));
evalcond[2]=((1.0)+((r11*x14266))+(((-1.0)*r12*x14264))+(((-1.0)*gconst62*r10*x14265)));
evalcond[3]=(((r11*x14261))+((r12*x14267))+((r10*x14257))+(((-1.0)*r10*x14259*x14264))+((r11*x14255*x14258)));
evalcond[4]=((((-1.0)*r11*x14257*x14264))+(((-1.0)*r12*sj3*x14265))+((r10*x14255*x14261))+((r10*x14258))+((r11*x14259)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x14259*x14264))+((r21*x14261))+((r20*x14257))+((r22*x14267))+x14262+((r21*x14255*x14258)));
evalcond[6]=((((-1.0)*x14263))+((r01*x14255*x14258))+((r02*x14267))+(((-1.0)*r00*x14259*x14264))+((r00*x14257))+x14256+((r01*x14261)));
evalcond[7]=(((r21*x14259))+(((-1.0)*r21*x14257*x14264))+(((-1.0)*r22*sj3*x14265))+(((-1.0)*x14263))+((r20*x14258))+((r20*x14255*x14261))+x14256);
evalcond[8]=((((-1.0)*r01*x14257*x14264))+((r00*x14255*x14261))+(((-1.0)*x14262))+(((-1.0)*sj1*x14260))+(((-1.0)*r02*sj3*x14265))+((r00*x14258))+((r01*x14259)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
=======
IkReal x14268=((1.0)*gconst62);
CheckValue<IkReal> x14269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x14268)))),-1);
if(!x14269.valid){
continue;
}
CheckValue<IkReal> x14270 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst61*r21))+(((-1.0)*r20*x14268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14269.value)))+(x14270.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2022=IKsin(j4);
IkReal x2023=IKcos(j4);
IkReal x2024=(gconst1*sj3);
IkReal x2025=(cj2*sj0);
IkReal x2026=(cj3*gconst1);
IkReal x2027=(sj1*sj2);
IkReal x2028=(cj3*gconst2);
IkReal x2029=(cj1*cj2);
IkReal x2030=(gconst2*sj3);
IkReal x2031=(cj2*sj1);
IkReal x2032=((1.0)*cj0);
IkReal x2033=(cj1*sj2);
IkReal x2034=((1.0)*x2023);
IkReal x2035=((1.0)*x2022);
IkReal x2036=(gconst1*x2022);
IkReal x2037=(cj3*x2022);
IkReal x2038=(x2023*x2030);
evalcond[0]=(((r21*x2036))+(((-1.0)*r22*x2034))+(((-1.0)*gconst2*r20*x2035)));
evalcond[1]=(sj0+((r01*x2036))+(((-1.0)*gconst2*r00*x2035))+(((-1.0)*r02*x2034)));
evalcond[2]=((((-1.0)*gconst2*r10*x2035))+(((-1.0)*r12*x2034))+(((-1.0)*x2032))+((r11*x2036)));
evalcond[3]=(((r22*x2037))+((r21*x2030))+((r21*x2023*x2026))+x2033+x2031+(((-1.0)*r20*x2028*x2034))+((r20*x2024)));
evalcond[4]=((((-1.0)*r22*sj3*x2035))+x2027+(((-1.0)*x2029))+((r20*x2038))+((r20*x2026))+((r21*x2028))+(((-1.0)*r21*x2024*x2034)));
evalcond[5]=(((r01*x2028))+((r00*x2026))+((r00*x2038))+(((-1.0)*r02*sj3*x2035))+((cj0*x2031))+((cj0*x2033))+(((-1.0)*r01*x2024*x2034)));
evalcond[6]=((((-1.0)*r00*x2028*x2034))+((r00*x2024))+((r01*x2030))+((r01*x2023*x2026))+((cj0*x2029))+((r02*x2037))+(((-1.0)*x2027*x2032)));
evalcond[7]=((((-1.0)*r12*sj3*x2035))+((r10*x2026))+((r10*x2038))+((r11*x2028))+((sj1*x2025))+((sj0*x2033))+(((-1.0)*r11*x2024*x2034)));
evalcond[8]=(((r10*x2024))+((r11*x2023*x2026))+((r12*x2037))+(((-1.0)*r10*x2028*x2034))+(((-1.0)*sj0*x2027))+((cj1*x2025))+((r11*x2030)));
=======
IkReal x14271=IKsin(j4);
IkReal x14272=IKcos(j4);
IkReal x14273=(sj1*sj2);
IkReal x14274=(gconst61*sj3);
IkReal x14275=(cj3*gconst61);
IkReal x14276=(cj3*gconst62);
IkReal x14277=((1.0)*cj2);
IkReal x14278=(gconst62*sj3);
IkReal x14279=(cj1*sj2);
IkReal x14280=(cj1*x14277);
IkReal x14281=((1.0)*x14272);
IkReal x14282=((1.0)*x14271);
IkReal x14283=(gconst61*x14271);
IkReal x14284=(cj3*x14271);
evalcond[0]=((((-1.0)*r22*x14281))+((r21*x14283))+(((-1.0)*gconst62*r20*x14282)));
evalcond[1]=(((r01*x14283))+(((-1.0)*gconst62*r00*x14282))+(((-1.0)*r02*x14281)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r10*x14282))+(((-1.0)*r12*x14281))+((r11*x14283)));
evalcond[3]=(((r11*x14278))+((r12*x14284))+((r10*x14274))+((r11*x14272*x14275))+(((-1.0)*r10*x14276*x14281)));
evalcond[4]=(((r10*x14272*x14278))+(((-1.0)*r12*sj3*x14282))+(((-1.0)*r11*x14274*x14281))+((r11*x14276))+((r10*x14275)));
evalcond[5]=(((cj2*sj1))+((r21*x14278))+((r21*x14272*x14275))+(((-1.0)*r20*x14276*x14281))+((r20*x14274))+((r22*x14284))+x14279);
evalcond[6]=(((r01*x14278))+(((-1.0)*r00*x14276*x14281))+(((-1.0)*x14280))+((r01*x14272*x14275))+x14273+((r02*x14284))+((r00*x14274)));
evalcond[7]=(((r21*x14276))+((r20*x14272*x14278))+((r20*x14275))+(((-1.0)*x14280))+(((-1.0)*r22*sj3*x14282))+(((-1.0)*r21*x14274*x14281))+x14273);
evalcond[8]=((((-1.0)*x14279))+((r00*x14272*x14278))+((r01*x14276))+(((-1.0)*r02*sj3*x14282))+(((-1.0)*sj1*x14277))+(((-1.0)*r01*x14274*x14281))+((r00*x14275)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal x2039=((-1.0)*r21);
IkReal x2041 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2041)==0){
continue;
}
IkReal x2040=pow(x2041,-0.5);
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(x2039),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2042.value))));
IkReal gconst4=(x2039*x2040);
IkReal gconst5=((1.0)*r20*x2040);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2043.value)+j5)))), 6.28318530717959)));
=======
IkReal x14286 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14286)==0){
continue;
}
IkReal x14285=pow(x14286,-0.5);
CheckValue<IkReal> x14287 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14287.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14287.value))));
IkReal gconst64=((1.0)*r21*x14285);
IkReal gconst65=((-1.0)*r20*x14285);
CheckValue<IkReal> x14288 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14288.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14288.value)+j5)))), 6.28318530717959)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
<<<<<<< HEAD
IkReal j4eval[1];
IkReal x2044=((-1.0)*r21);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal(x2044),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
IkReal x2045=((1.0)*(x2047.value));
IkReal x2046=x2040;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2045)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2045)));
IkReal gconst4=(x2044*x2046);
IkReal gconst5=((1.0)*r20*x2046);
IkReal x2048=r22*r22;
IkReal x2049=((1.0)*x2048);
CheckValue<IkReal> x2053=IKPowWithIntegerCheck(((-1.0)+x2048),-1);
if(!x2053.valid){
continue;
}
IkReal x2050=x2053.value;
if((((1.0)+(((-1.0)*x2049)))) < -0.00001)
continue;
IkReal x2051=IKsqrt(((1.0)+(((-1.0)*x2049))));
IkReal x2052=(sj0*x2050*x2051);
j4eval[0]=((IKabs((x2052+(((-1.0)*x2049*x2052)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2054=((-1.0)*r21);
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal(x2054),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
IkReal x2055=((1.0)*(x2057.value));
IkReal x2056=x2040;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2055)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2055)));
IkReal gconst4=(x2054*x2056);
IkReal gconst5=((1.0)*r20*x2056);
IkReal x2058=r22*r22;
IkReal x2059=((1.0)*x2058);
CheckValue<IkReal> x2063=IKPowWithIntegerCheck(((-1.0)+x2058),-1);
if(!x2063.valid){
continue;
}
IkReal x2060=x2063.value;
if((((1.0)+(((-1.0)*x2059)))) < -0.00001)
continue;
IkReal x2061=IKsqrt(((1.0)+(((-1.0)*x2059))));
IkReal x2062=(cj0*x2060*x2061);
j4eval[0]=((IKabs((x2062+(((-1.0)*x2059*x2062)))))+(IKabs((cj0*r22))));
=======
IkReal j4eval[4];
CheckValue<IkReal> x14291 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14291.valid){
continue;
}
IkReal x14289=((1.0)*(x14291.value));
IkReal x14290=x14285;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14289)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14289)));
IkReal gconst64=((1.0)*r21*x14290);
IkReal gconst65=((-1.0)*r20*x14290);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14294 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14294.valid){
continue;
}
IkReal x14292=((1.0)*(x14294.value));
IkReal x14293=x14285;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14292)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14292)));
IkReal gconst64=((1.0)*r21*x14293);
IkReal gconst65=((-1.0)*r20*x14293);
j4eval[0]=1.0;
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
<<<<<<< HEAD
IkReal x2064=((-1.0)*r21);
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(x2064),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
IkReal x2065=((1.0)*(x2067.value));
IkReal x2066=x2040;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2065)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2065)));
IkReal gconst4=(x2064*x2066);
IkReal gconst5=((1.0)*r20*x2066);
IkReal x2068=r22*r22;
IkReal x2069=(cj0*r02);
IkReal x2070=(r12*sj0);
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(((-1.0)+x2068),-1);
if(!x2074.valid){
continue;
}
IkReal x2071=x2074.value;
if((((1.0)+(((-1.0)*x2068)))) < -0.00001)
continue;
IkReal x2072=IKsqrt(((1.0)+(((-1.0)*x2068))));
IkReal x2073=((1.0)*r22*x2071*x2072);
j4eval[0]=0;
j4eval[1]=((IKabs((x2069+x2070)))+(IKabs(((((-1.0)*x2070*x2073))+(((-1.0)*x2069*x2073))))));
j4eval[2]=0;
=======
CheckValue<IkReal> x14297 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14297.valid){
continue;
}
IkReal x14295=((1.0)*(x14297.value));
IkReal x14296=x14285;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14295)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14295)));
IkReal gconst64=((1.0)*r21*x14296);
IkReal gconst65=((-1.0)*r20*x14296);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2075=((1.0)*gconst5);
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2075))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x2075))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
CheckValue<IkReal> x2077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2075))+(((-1.0)*gconst4*r20)))),-1);
if(!x2077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2076.value)+(((1.5707963267949)*(x2077.value))));
=======
IkReal x14298=gconst64*gconst64;
IkReal x14299=gconst65*gconst65;
IkReal x14300=(gconst64*sj3);
IkReal x14301=(gconst65*r11);
IkReal x14302=((1.0)*cj3);
IkReal x14303=(gconst65*r10);
IkReal x14304=(cj3*gconst64);
IkReal x14305=(r20*x14299);
IkReal x14306=(r21*x14298);
CheckValue<IkReal> x14307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14302*x14306))+(((-1.0)*r10*x14302*x14305))+((r20*x14301*x14304))+(((-1.0)*r12*r22*x14302))+((r21*x14303*x14304)))),-1);
if(!x14307.valid){
continue;
}
CheckValue<IkReal> x14308 = IKatan2WithCheck(IkReal((((r22*sj3*x14301))+((r10*r22*x14300)))),IkReal(((((-1.0)*r20*x14300*x14303))+(((-1.0)*r11*sj3*x14305))+((r10*sj3*x14306))+((r21*x14300*x14301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14307.value)))+(x14308.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2078=IKsin(j4);
IkReal x2079=IKcos(j4);
IkReal x2080=(gconst4*r11);
IkReal x2081=(cj2*sj0);
IkReal x2082=(sj1*sj2);
IkReal x2083=(gconst4*sj3);
IkReal x2084=(gconst5*r10);
IkReal x2085=(cj1*cj2);
IkReal x2086=(gconst4*r01);
IkReal x2087=(cj2*sj1);
IkReal x2088=(gconst4*r21);
IkReal x2089=(gconst5*r00);
IkReal x2090=(gconst5*sj3);
IkReal x2091=(cj3*gconst5);
IkReal x2092=(cj3*gconst4);
IkReal x2093=(cj1*sj2);
IkReal x2094=((1.0)*cj0);
IkReal x2095=((1.0)*x2079);
IkReal x2096=((1.0)*x2078);
IkReal x2097=(cj3*x2078);
IkReal x2098=(cj3*x2079);
IkReal x2099=(x2079*x2090);
evalcond[0]=((((-1.0)*gconst5*r20*x2096))+((x2078*x2088))+(((-1.0)*r22*x2095)));
evalcond[1]=(sj0+((x2078*x2086))+(((-1.0)*x2089*x2096))+(((-1.0)*r02*x2095)));
evalcond[2]=((((-1.0)*x2094))+((x2078*x2080))+(((-1.0)*x2084*x2096))+(((-1.0)*r12*x2095)));
evalcond[3]=((((-1.0)*r20*x2091*x2095))+x2093+x2087+((r20*x2083))+((x2088*x2098))+((r22*x2097))+((r21*x2090)));
evalcond[4]=(((r20*x2092))+((r20*x2099))+(((-1.0)*r22*sj3*x2096))+(((-1.0)*x2085))+x2082+(((-1.0)*r21*x2083*x2095))+((r21*x2091)));
evalcond[5]=((((-1.0)*r02*sj3*x2096))+(((-1.0)*r01*x2083*x2095))+((r01*x2091))+((r00*x2092))+((sj3*x2079*x2089))+((cj0*x2093))+((cj0*x2087)));
evalcond[6]=((((-1.0)*cj3*x2089*x2095))+((r01*x2090))+((cj0*x2085))+((r02*x2097))+((r00*x2083))+(((-1.0)*x2082*x2094))+((x2086*x2098)));
evalcond[7]=((((-1.0)*sj3*x2080*x2095))+((sj0*x2093))+(((-1.0)*r12*sj3*x2096))+((sj1*x2081))+((r10*x2092))+((sj3*x2079*x2084))+((r11*x2091)));
evalcond[8]=((((-1.0)*cj3*x2084*x2095))+((x2080*x2098))+(((-1.0)*sj0*x2082))+((cj1*x2081))+((r10*x2083))+((r12*x2097))+((r11*x2090)));
=======
IkReal x14309=IKsin(j4);
IkReal x14310=IKcos(j4);
IkReal x14311=(sj1*sj2);
IkReal x14312=(cj3*gconst64);
IkReal x14313=(gconst65*r21);
IkReal x14314=(gconst65*sj3);
IkReal x14315=(gconst64*sj3);
IkReal x14316=((1.0)*cj2);
IkReal x14317=(cj1*sj2);
IkReal x14318=(cj3*gconst65);
IkReal x14319=(cj1*x14316);
IkReal x14320=((1.0)*x14310);
IkReal x14321=((1.0)*x14309);
IkReal x14322=(cj3*x14309);
IkReal x14323=(gconst64*x14309);
evalcond[0]=((((-1.0)*gconst65*r20*x14321))+((r21*x14323))+(((-1.0)*r22*x14320)));
evalcond[1]=(((r01*x14323))+(((-1.0)*gconst65*r00*x14321))+(((-1.0)*r02*x14320)));
evalcond[2]=((1.0)+((r11*x14323))+(((-1.0)*gconst65*r10*x14321))+(((-1.0)*r12*x14320)));
evalcond[3]=((((-1.0)*r10*x14318*x14320))+((r11*x14314))+((r11*x14310*x14312))+((r12*x14322))+((r10*x14315)));
evalcond[4]=(((r11*x14318))+(((-1.0)*r12*sj3*x14321))+(((-1.0)*r11*x14315*x14320))+((r10*x14310*x14314))+((r10*x14312)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x14318*x14320))+((r21*x14310*x14312))+((sj3*x14313))+((r20*x14315))+x14317+((r22*x14322)));
evalcond[6]=(((r02*x14322))+(((-1.0)*x14319))+(((-1.0)*r00*x14318*x14320))+((r00*x14315))+((r01*x14314))+((r01*x14310*x14312))+x14311);
evalcond[7]=(((cj3*x14313))+(((-1.0)*r22*sj3*x14321))+((r20*x14310*x14314))+(((-1.0)*x14319))+((r20*x14312))+(((-1.0)*r21*x14315*x14320))+x14311);
evalcond[8]=((((-1.0)*sj1*x14316))+(((-1.0)*r01*x14315*x14320))+((r00*x14310*x14314))+(((-1.0)*r02*sj3*x14321))+(((-1.0)*x14317))+((r00*x14312))+((r01*x14318)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2100=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2100.valid){
continue;
}
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2100.value)))+(x2101.value));
=======
IkReal x14324=((1.0)*gconst65);
CheckValue<IkReal> x14325 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14324))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14325.valid){
continue;
}
CheckValue<IkReal> x14326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r00))+(((-1.0)*r01*x14324)))),-1);
if(!x14326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14325.value)+(((1.5707963267949)*(x14326.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2102=IKsin(j4);
IkReal x2103=IKcos(j4);
IkReal x2104=(gconst4*r11);
IkReal x2105=(cj2*sj0);
IkReal x2106=(sj1*sj2);
IkReal x2107=(gconst4*sj3);
IkReal x2108=(gconst5*r10);
IkReal x2109=(cj1*cj2);
IkReal x2110=(gconst4*r01);
IkReal x2111=(cj2*sj1);
IkReal x2112=(gconst4*r21);
IkReal x2113=(gconst5*r00);
IkReal x2114=(gconst5*sj3);
IkReal x2115=(cj3*gconst5);
IkReal x2116=(cj3*gconst4);
IkReal x2117=(cj1*sj2);
IkReal x2118=((1.0)*cj0);
IkReal x2119=((1.0)*x2103);
IkReal x2120=((1.0)*x2102);
IkReal x2121=(cj3*x2102);
IkReal x2122=(cj3*x2103);
IkReal x2123=(x2103*x2114);
evalcond[0]=((((-1.0)*gconst5*r20*x2120))+((x2102*x2112))+(((-1.0)*r22*x2119)));
evalcond[1]=(sj0+(((-1.0)*x2113*x2120))+((x2102*x2110))+(((-1.0)*r02*x2119)));
evalcond[2]=((((-1.0)*x2108*x2120))+((x2102*x2104))+(((-1.0)*x2118))+(((-1.0)*r12*x2119)));
evalcond[3]=(((r20*x2107))+((r21*x2114))+((x2112*x2122))+x2111+x2117+(((-1.0)*r20*x2115*x2119))+((r22*x2121)));
evalcond[4]=(((r21*x2115))+(((-1.0)*r21*x2107*x2119))+((r20*x2123))+x2106+((r20*x2116))+(((-1.0)*r22*sj3*x2120))+(((-1.0)*x2109)));
evalcond[5]=(((sj3*x2103*x2113))+((r01*x2115))+((r00*x2116))+((cj0*x2111))+((cj0*x2117))+(((-1.0)*r02*sj3*x2120))+(((-1.0)*r01*x2107*x2119)));
evalcond[6]=(((r01*x2114))+((cj0*x2109))+((r02*x2121))+((r00*x2107))+(((-1.0)*cj3*x2113*x2119))+((x2110*x2122))+(((-1.0)*x2106*x2118)));
evalcond[7]=((((-1.0)*r12*sj3*x2120))+((sj0*x2117))+((sj3*x2103*x2108))+(((-1.0)*sj3*x2104*x2119))+((r10*x2116))+((sj1*x2105))+((r11*x2115)));
evalcond[8]=((((-1.0)*sj0*x2106))+((r12*x2121))+((r10*x2107))+(((-1.0)*cj3*x2108*x2119))+((cj1*x2105))+((x2104*x2122))+((r11*x2114)));
=======
IkReal x14327=IKsin(j4);
IkReal x14328=IKcos(j4);
IkReal x14329=(sj1*sj2);
IkReal x14330=(cj3*gconst64);
IkReal x14331=(gconst65*r21);
IkReal x14332=(gconst65*sj3);
IkReal x14333=(gconst64*sj3);
IkReal x14334=((1.0)*cj2);
IkReal x14335=(cj1*sj2);
IkReal x14336=(cj3*gconst65);
IkReal x14337=(cj1*x14334);
IkReal x14338=((1.0)*x14328);
IkReal x14339=((1.0)*x14327);
IkReal x14340=(cj3*x14327);
IkReal x14341=(gconst64*x14327);
evalcond[0]=((((-1.0)*r22*x14338))+((r21*x14341))+(((-1.0)*gconst65*r20*x14339)));
evalcond[1]=((((-1.0)*r02*x14338))+((r01*x14341))+(((-1.0)*gconst65*r00*x14339)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14338))+(((-1.0)*gconst65*r10*x14339))+((r11*x14341)));
evalcond[3]=(((r11*x14332))+((r11*x14328*x14330))+((r12*x14340))+((r10*x14333))+(((-1.0)*r10*x14336*x14338)));
evalcond[4]=(((r10*x14328*x14332))+((r11*x14336))+(((-1.0)*r11*x14333*x14338))+((r10*x14330))+(((-1.0)*r12*sj3*x14339)));
evalcond[5]=(((cj2*sj1))+((r21*x14328*x14330))+((r20*x14333))+((r22*x14340))+x14335+((sj3*x14331))+(((-1.0)*r20*x14336*x14338)));
evalcond[6]=((((-1.0)*x14337))+((r00*x14333))+(((-1.0)*r00*x14336*x14338))+((r01*x14332))+((r02*x14340))+x14329+((r01*x14328*x14330)));
evalcond[7]=((((-1.0)*x14337))+((r20*x14330))+((r20*x14328*x14332))+(((-1.0)*r22*sj3*x14339))+(((-1.0)*r21*x14333*x14338))+x14329+((cj3*x14331)));
evalcond[8]=((((-1.0)*sj1*x14334))+(((-1.0)*r02*sj3*x14339))+((r00*x14328*x14332))+((r00*x14330))+(((-1.0)*x14335))+((r01*x14336))+(((-1.0)*r01*x14333*x14338)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2124.value)))+(x2125.value));
=======
CheckValue<IkReal> x14342 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r01))+(((-1.0)*gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14342.valid){
continue;
}
CheckValue<IkReal> x14343=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14342.value)+(((1.5707963267949)*(x14343.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=(gconst4*r11);
IkReal x2129=(cj2*sj0);
IkReal x2130=(sj1*sj2);
IkReal x2131=(gconst4*sj3);
IkReal x2132=(gconst5*r10);
IkReal x2133=(cj1*cj2);
IkReal x2134=(gconst4*r01);
IkReal x2135=(cj2*sj1);
IkReal x2136=(gconst4*r21);
IkReal x2137=(gconst5*r00);
IkReal x2138=(gconst5*sj3);
IkReal x2139=(cj3*gconst5);
IkReal x2140=(cj3*gconst4);
IkReal x2141=(cj1*sj2);
IkReal x2142=((1.0)*cj0);
IkReal x2143=((1.0)*x2127);
IkReal x2144=((1.0)*x2126);
IkReal x2145=(cj3*x2126);
IkReal x2146=(cj3*x2127);
IkReal x2147=(x2127*x2138);
evalcond[0]=(((x2126*x2136))+(((-1.0)*gconst5*r20*x2144))+(((-1.0)*r22*x2143)));
evalcond[1]=(sj0+(((-1.0)*r02*x2143))+((x2126*x2134))+(((-1.0)*x2137*x2144)));
evalcond[2]=((((-1.0)*x2132*x2144))+(((-1.0)*x2142))+(((-1.0)*r12*x2143))+((x2126*x2128)));
evalcond[3]=(((r21*x2138))+(((-1.0)*r20*x2139*x2143))+x2135+x2141+((x2136*x2146))+((r22*x2145))+((r20*x2131)));
evalcond[4]=(((r21*x2139))+((r20*x2140))+((r20*x2147))+x2130+(((-1.0)*r21*x2131*x2143))+(((-1.0)*x2133))+(((-1.0)*r22*sj3*x2144)));
evalcond[5]=(((cj0*x2135))+((cj0*x2141))+((r01*x2139))+(((-1.0)*r02*sj3*x2144))+(((-1.0)*r01*x2131*x2143))+((r00*x2140))+((sj3*x2127*x2137)));
evalcond[6]=(((cj0*x2133))+(((-1.0)*x2130*x2142))+((r02*x2145))+((r01*x2138))+((r00*x2131))+(((-1.0)*cj3*x2137*x2143))+((x2134*x2146)));
evalcond[7]=((((-1.0)*sj3*x2128*x2143))+(((-1.0)*r12*sj3*x2144))+((r11*x2139))+((sj1*x2129))+((sj0*x2141))+((r10*x2140))+((sj3*x2127*x2132)));
evalcond[8]=((((-1.0)*cj3*x2132*x2143))+(((-1.0)*sj0*x2130))+((r11*x2138))+((x2128*x2146))+((cj1*x2129))+((r10*x2131))+((r12*x2145)));
=======
IkReal x14344=IKsin(j4);
IkReal x14345=IKcos(j4);
IkReal x14346=(sj1*sj2);
IkReal x14347=(cj3*gconst64);
IkReal x14348=(gconst65*r21);
IkReal x14349=(gconst65*sj3);
IkReal x14350=(gconst64*sj3);
IkReal x14351=((1.0)*cj2);
IkReal x14352=(cj1*sj2);
IkReal x14353=(cj3*gconst65);
IkReal x14354=(cj1*x14351);
IkReal x14355=((1.0)*x14345);
IkReal x14356=((1.0)*x14344);
IkReal x14357=(cj3*x14344);
IkReal x14358=(gconst64*x14344);
evalcond[0]=((((-1.0)*r22*x14355))+(((-1.0)*gconst65*r20*x14356))+((r21*x14358)));
evalcond[1]=((((-1.0)*r02*x14355))+(((-1.0)*gconst65*r00*x14356))+((r01*x14358)));
evalcond[2]=((1.0)+((r11*x14358))+(((-1.0)*r12*x14355))+(((-1.0)*gconst65*r10*x14356)));
evalcond[3]=((((-1.0)*r10*x14353*x14355))+((r12*x14357))+((r11*x14349))+((r10*x14350))+((r11*x14345*x14347)));
evalcond[4]=(((r10*x14345*x14349))+((r11*x14353))+((r10*x14347))+(((-1.0)*r11*x14350*x14355))+(((-1.0)*r12*sj3*x14356)));
evalcond[5]=((((-1.0)*r20*x14353*x14355))+((cj2*sj1))+((r21*x14345*x14347))+((r20*x14350))+((sj3*x14348))+((r22*x14357))+x14352);
evalcond[6]=((((-1.0)*x14354))+((r02*x14357))+((r01*x14349))+((r00*x14350))+((r01*x14345*x14347))+(((-1.0)*r00*x14353*x14355))+x14346);
evalcond[7]=((((-1.0)*r22*sj3*x14356))+(((-1.0)*x14354))+((cj3*x14348))+(((-1.0)*r21*x14350*x14355))+((r20*x14347))+x14346+((r20*x14345*x14349)));
evalcond[8]=(((r00*x14347))+(((-1.0)*sj1*x14351))+((r00*x14345*x14349))+(((-1.0)*x14352))+((r01*x14353))+(((-1.0)*r01*x14350*x14355))+(((-1.0)*r02*sj3*x14356)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal x2149 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2149)==0){
continue;
}
IkReal x2148=pow(x2149,-0.5);
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2150.value));
IkReal gconst7=((-1.0)*r01*x2148);
IkReal gconst8=(r00*x2148);
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2151.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
=======
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14359=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14359);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14359);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14360=(cj5*r10);
IkReal x14361=(r11*sj5);
j4eval[0]=((((-1.0)*x14360))+x14361);
j4eval[1]=(((sj3*x14360))+(((-1.0)*sj3*x14361)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14362=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14362);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14362);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14363=(r11*sj5);
IkReal x14364=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14364))+x14363);
j4eval[1]=(((cj3*x14363))+(((-1.0)*cj3*x14364)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14365=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14365);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14365);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14366=((1.0)*r11);
CheckValue<IkReal> x14367=IKPowWithIntegerCheck(cj3,-1);
if(!x14367.valid){
continue;
}
CheckValue<IkReal> x14368=IKPowWithIntegerCheck(r22,-1);
if(!x14368.valid){
continue;
}
CheckValue<IkReal> x14369=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x14366))),-1);
if(!x14369.valid){
continue;
}
if( IKabs(((x14367.value)*(x14368.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14369.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14366)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14367.value)*(x14368.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14369.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14366))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14367.value)*(x14368.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14369.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14366))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14370=IKsin(j4);
IkReal x14371=IKcos(j4);
IkReal x14372=(sj1*sj2);
IkReal x14373=(r11*sj5);
IkReal x14374=(r00*sj3);
IkReal x14375=(cj5*r01);
IkReal x14376=((1.0)*cj1);
IkReal x14377=(cj3*sj5);
IkReal x14378=(cj5*r11);
IkReal x14379=(r10*sj3);
IkReal x14380=(cj2*sj1);
IkReal x14381=((1.0)*cj5);
IkReal x14382=((1.0)*sj3);
IkReal x14383=(r01*sj5);
IkReal x14384=(cj2*x14376);
IkReal x14385=(cj3*x14371);
IkReal x14386=(r22*x14370);
IkReal x14387=(cj5*x14371);
IkReal x14388=(x14370*x14381);
evalcond[0]=((-1.0)*r22*x14371);
evalcond[1]=(((cj1*sj2))+((cj3*x14386))+x14380);
evalcond[2]=(((x14370*x14383))+(((-1.0)*r00*x14388)));
evalcond[3]=((1.0)+((x14370*x14373))+(((-1.0)*r10*x14388)));
evalcond[4]=((((-1.0)*x14384))+(((-1.0)*x14382*x14386))+x14372);
evalcond[5]=(((x14379*x14387))+(((-1.0)*x14371*x14373*x14382))+((r10*x14377))+((cj3*x14378)));
evalcond[6]=(((x14373*x14385))+((sj5*x14379))+(((-1.0)*r10*x14381*x14385))+((sj3*x14378)));
evalcond[7]=((((-1.0)*x14384))+((sj5*x14374))+(((-1.0)*r00*x14381*x14385))+((r01*x14371*x14377))+((sj3*x14375))+x14372);
evalcond[8]=((((-1.0)*x14380))+((r00*x14377))+(((-1.0)*x14371*x14382*x14383))+((cj3*x14375))+((x14374*x14387))+(((-1.0)*sj2*x14376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
<<<<<<< HEAD
IkReal j4eval[3];
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal x2152=((-1.0)*(x2154.value));
IkReal x2153=x2148;
sj5=gconst7;
cj5=gconst8;
j5=x2152;
IkReal gconst6=x2152;
IkReal gconst7=((-1.0)*r01*x2153);
IkReal gconst8=(r00*x2153);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
=======
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2155=((1.0)*gconst8);
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x2155))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x2155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x2155)))),-1);
if(!x2157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2156.value)+(((1.5707963267949)*(x2157.value))));
=======
IkReal x14389=((1.0)*sj3);
IkReal x14390=(r11*sj5);
IkReal x14391=((1.0)*cj5*r10);
CheckValue<IkReal> x14392=IKPowWithIntegerCheck((x14390+(((-1.0)*x14391))),-1);
if(!x14392.valid){
continue;
}
CheckValue<IkReal> x14393=IKPowWithIntegerCheck((((cj3*x14390))+(((-1.0)*cj3*x14391))),-1);
if(!x14393.valid){
continue;
}
if( IKabs(((-1.0)*(x14392.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14393.value)*(((((-1.0)*cj5*r11*x14389))+(((-1.0)*r10*sj5*x14389)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14392.value)))+IKsqr(((x14393.value)*(((((-1.0)*cj5*r11*x14389))+(((-1.0)*r10*sj5*x14389))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14392.value)), ((x14393.value)*(((((-1.0)*cj5*r11*x14389))+(((-1.0)*r10*sj5*x14389))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2158=IKsin(j4);
IkReal x2159=IKcos(j4);
IkReal x2160=(gconst7*sj3);
IkReal x2161=(cj3*gconst8);
IkReal x2162=(cj2*sj0);
IkReal x2163=(cj3*gconst7);
IkReal x2164=(sj1*sj2);
IkReal x2165=(cj1*cj2);
IkReal x2166=(cj2*sj1);
IkReal x2167=((1.0)*cj0);
IkReal x2168=(gconst8*sj3);
IkReal x2169=(cj1*sj2);
IkReal x2170=((1.0)*x2159);
IkReal x2171=((1.0)*x2158);
IkReal x2172=(cj3*x2158);
IkReal x2173=(gconst7*x2158);
IkReal x2174=(x2159*x2168);
evalcond[0]=(((r21*x2173))+(((-1.0)*gconst8*r20*x2171))+(((-1.0)*r22*x2170)));
evalcond[1]=(((r01*x2173))+(((-1.0)*gconst8*r00*x2171))+sj0+(((-1.0)*r02*x2170)));
evalcond[2]=(((r11*x2173))+(((-1.0)*x2167))+(((-1.0)*gconst8*r10*x2171))+(((-1.0)*r12*x2170)));
evalcond[3]=(((r22*x2172))+x2169+x2166+((r21*x2168))+((r20*x2160))+((r21*x2159*x2163))+(((-1.0)*r20*x2161*x2170)));
evalcond[4]=(x2164+((r21*x2161))+(((-1.0)*r21*x2160*x2170))+((r20*x2163))+((r20*x2174))+(((-1.0)*r22*sj3*x2171))+(((-1.0)*x2165)));
evalcond[5]=(((r00*x2174))+(((-1.0)*r02*sj3*x2171))+((r00*x2163))+((r01*x2161))+((cj0*x2169))+((cj0*x2166))+(((-1.0)*r01*x2160*x2170)));
evalcond[6]=(((r00*x2160))+((r01*x2168))+(((-1.0)*r00*x2161*x2170))+((cj0*x2165))+((r01*x2159*x2163))+(((-1.0)*x2164*x2167))+((r02*x2172)));
evalcond[7]=(((sj1*x2162))+((sj0*x2169))+(((-1.0)*r12*sj3*x2171))+((r10*x2174))+(((-1.0)*r11*x2160*x2170))+((r10*x2163))+((r11*x2161)));
evalcond[8]=(((r11*x2159*x2163))+((r10*x2160))+((cj1*x2162))+((r11*x2168))+((r12*x2172))+(((-1.0)*r10*x2161*x2170))+(((-1.0)*sj0*x2164)));
=======
IkReal x14394=IKsin(j4);
IkReal x14395=IKcos(j4);
IkReal x14396=(sj1*sj2);
IkReal x14397=(r11*sj5);
IkReal x14398=(r00*sj3);
IkReal x14399=(cj5*r01);
IkReal x14400=((1.0)*cj1);
IkReal x14401=(cj3*sj5);
IkReal x14402=(cj5*r11);
IkReal x14403=(r10*sj3);
IkReal x14404=(cj2*sj1);
IkReal x14405=((1.0)*cj5);
IkReal x14406=((1.0)*sj3);
IkReal x14407=(r01*sj5);
IkReal x14408=(cj2*x14400);
IkReal x14409=(cj3*x14395);
IkReal x14410=(r22*x14394);
IkReal x14411=(cj5*x14395);
IkReal x14412=(x14394*x14405);
evalcond[0]=((-1.0)*r22*x14395);
evalcond[1]=(((cj1*sj2))+((cj3*x14410))+x14404);
evalcond[2]=(((x14394*x14407))+(((-1.0)*r00*x14412)));
evalcond[3]=((1.0)+((x14394*x14397))+(((-1.0)*r10*x14412)));
evalcond[4]=((((-1.0)*x14408))+(((-1.0)*x14406*x14410))+x14396);
evalcond[5]=(((r10*x14401))+((cj3*x14402))+((x14403*x14411))+(((-1.0)*x14395*x14397*x14406)));
evalcond[6]=(((sj5*x14403))+((sj3*x14402))+(((-1.0)*r10*x14405*x14409))+((x14397*x14409)));
evalcond[7]=((((-1.0)*x14408))+(((-1.0)*r00*x14405*x14409))+((sj5*x14398))+x14396+((r01*x14395*x14401))+((sj3*x14399)));
evalcond[8]=((((-1.0)*x14404))+((x14398*x14411))+((cj3*x14399))+((r00*x14401))+(((-1.0)*x14395*x14406*x14407))+(((-1.0)*sj2*x14400)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2175.value)+(((1.5707963267949)*(x2176.value))));
=======
IkReal x14413=(cj5*r10);
IkReal x14414=((1.0)*r11);
CheckValue<IkReal> x14415=IKPowWithIntegerCheck(((((-1.0)*x14413))+((r11*sj5))),-1);
if(!x14415.valid){
continue;
}
CheckValue<IkReal> x14416=IKPowWithIntegerCheck((((sj3*x14413))+(((-1.0)*sj3*sj5*x14414))),-1);
if(!x14416.valid){
continue;
}
if( IKabs(((-1.0)*(x14415.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14416.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14415.value)))+IKsqr(((x14416.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14414))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14415.value)), ((x14416.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14414))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(gconst7*sj3);
IkReal x2180=(cj3*gconst8);
IkReal x2181=(cj2*sj0);
IkReal x2182=(cj3*gconst7);
IkReal x2183=(sj1*sj2);
IkReal x2184=(cj1*cj2);
IkReal x2185=(cj2*sj1);
IkReal x2186=((1.0)*cj0);
IkReal x2187=(gconst8*sj3);
IkReal x2188=(cj1*sj2);
IkReal x2189=((1.0)*x2178);
IkReal x2190=((1.0)*x2177);
IkReal x2191=(cj3*x2177);
IkReal x2192=(gconst7*x2177);
IkReal x2193=(x2178*x2187);
evalcond[0]=((((-1.0)*gconst8*r20*x2190))+(((-1.0)*r22*x2189))+((r21*x2192)));
evalcond[1]=(sj0+(((-1.0)*r02*x2189))+(((-1.0)*gconst8*r00*x2190))+((r01*x2192)));
evalcond[2]=((((-1.0)*gconst8*r10*x2190))+(((-1.0)*x2186))+((r11*x2192))+(((-1.0)*r12*x2189)));
evalcond[3]=(((r22*x2191))+((r21*x2178*x2182))+x2185+x2188+((r21*x2187))+((r20*x2179))+(((-1.0)*r20*x2180*x2189)));
evalcond[4]=((((-1.0)*r22*sj3*x2190))+x2183+(((-1.0)*x2184))+((r20*x2182))+((r20*x2193))+((r21*x2180))+(((-1.0)*r21*x2179*x2189)));
evalcond[5]=((((-1.0)*r02*sj3*x2190))+(((-1.0)*r01*x2179*x2189))+((cj0*x2185))+((cj0*x2188))+((r01*x2180))+((r00*x2193))+((r00*x2182)));
evalcond[6]=((((-1.0)*r00*x2180*x2189))+((r00*x2179))+((cj0*x2184))+(((-1.0)*x2183*x2186))+((r02*x2191))+((r01*x2178*x2182))+((r01*x2187)));
evalcond[7]=((((-1.0)*r12*sj3*x2190))+((sj0*x2188))+(((-1.0)*r11*x2179*x2189))+((sj1*x2181))+((r11*x2180))+((r10*x2193))+((r10*x2182)));
evalcond[8]=(((cj1*x2181))+((r11*x2178*x2182))+(((-1.0)*r10*x2180*x2189))+((r10*x2179))+((r12*x2191))+((r11*x2187))+(((-1.0)*sj0*x2183)));
=======
IkReal x14417=IKsin(j4);
IkReal x14418=IKcos(j4);
IkReal x14419=(sj1*sj2);
IkReal x14420=(r11*sj5);
IkReal x14421=(r00*sj3);
IkReal x14422=(cj5*r01);
IkReal x14423=((1.0)*cj1);
IkReal x14424=(cj3*sj5);
IkReal x14425=(cj5*r11);
IkReal x14426=(r10*sj3);
IkReal x14427=(cj2*sj1);
IkReal x14428=((1.0)*cj5);
IkReal x14429=((1.0)*sj3);
IkReal x14430=(r01*sj5);
IkReal x14431=(cj2*x14423);
IkReal x14432=(cj3*x14418);
IkReal x14433=(r22*x14417);
IkReal x14434=(cj5*x14418);
IkReal x14435=(x14417*x14428);
evalcond[0]=((-1.0)*r22*x14418);
evalcond[1]=(((cj1*sj2))+x14427+((cj3*x14433)));
evalcond[2]=((((-1.0)*r00*x14435))+((x14417*x14430)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14435))+((x14417*x14420)));
evalcond[4]=((((-1.0)*x14431))+(((-1.0)*x14429*x14433))+x14419);
evalcond[5]=(((x14426*x14434))+(((-1.0)*x14418*x14420*x14429))+((r10*x14424))+((cj3*x14425)));
evalcond[6]=((((-1.0)*r10*x14428*x14432))+((x14420*x14432))+((sj3*x14425))+((sj5*x14426)));
evalcond[7]=((((-1.0)*x14431))+((sj3*x14422))+x14419+((sj5*x14421))+((r01*x14418*x14424))+(((-1.0)*r00*x14428*x14432)));
evalcond[8]=((((-1.0)*sj2*x14423))+(((-1.0)*x14418*x14429*x14430))+((r00*x14424))+((x14421*x14434))+((cj3*x14422))+(((-1.0)*x14427)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal x2195 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2195)==0){
continue;
}
IkReal x2194=pow(x2195,-0.5);
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2196.value))));
IkReal gconst10=((1.0)*r01*x2194);
IkReal gconst11=((-1.0)*r00*x2194);
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
IkReal x2198=((1.0)*(x2200.value));
IkReal x2199=x2194;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2198)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2198)));
IkReal gconst10=((1.0)*r01*x2199);
IkReal gconst11=((-1.0)*r00*x2199);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
IkReal x2201=((1.0)*(x2203.value));
IkReal x2202=x2194;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2201)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2201)));
IkReal gconst10=((1.0)*r01*x2202);
IkReal gconst11=((-1.0)*r00*x2202);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2206 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
IkReal x2204=((1.0)*(x2206.value));
IkReal x2205=x2194;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2204)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2204)));
IkReal gconst10=((1.0)*r01*x2205);
IkReal gconst11=((-1.0)*r00*x2205);
IkReal x2207=r02*r02;
IkReal x2208=(r12*sj0);
IkReal x2209=x2194;
IkReal x2210=(cj0*x2209);
j4eval[0]=((IKabs(((((-1.0)*x2210))+((r02*x2208*x2209))+((x2207*x2210)))))+(IKabs((x2208+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached
=======
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2211=((1.0)*gconst11);
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x2211)))),-1);
if(!x2212.valid){
continue;
}
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2211))+(((-1.0)*r10*sj0*x2211))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2212.value)))+(x2213.value));
=======
IkReal x14436=cj5*cj5;
IkReal x14437=((1.0)*cj3);
IkReal x14438=(r10*r21);
IkReal x14439=(cj5*sj5);
IkReal x14440=(r11*r21);
IkReal x14441=(r11*r20);
IkReal x14442=(r22*sj3);
IkReal x14443=(r10*r20);
IkReal x14444=((1.0)*sj3*x14436);
CheckValue<IkReal> x14445 = IKatan2WithCheck(IkReal((((r10*sj5*x14442))+((cj5*r11*x14442)))),IkReal((((sj3*x14439*x14440))+(((-1.0)*x14438*x14444))+(((-1.0)*sj3*x14439*x14443))+((sj3*x14438))+(((-1.0)*x14441*x14444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14445.valid){
continue;
}
CheckValue<IkReal> x14446=IKPowWithIntegerCheck(IKsign((((cj3*x14436*x14440))+((cj3*x14439*x14441))+(((-1.0)*x14436*x14437*x14443))+((cj3*x14438*x14439))+(((-1.0)*x14437*x14440))+(((-1.0)*r12*r22*x14437)))),-1);
if(!x14446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14445.value)+(((1.5707963267949)*(x14446.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2214=IKsin(j4);
IkReal x2215=IKcos(j4);
IkReal x2216=(gconst10*sj3);
IkReal x2217=(cj3*r10);
IkReal x2218=(gconst11*r20);
IkReal x2219=(gconst11*sj3);
IkReal x2220=(cj3*gconst11);
IkReal x2221=(sj1*sj2);
IkReal x2222=(cj1*cj2);
IkReal x2223=(cj2*sj1);
IkReal x2224=(cj1*sj2);
IkReal x2225=(cj3*gconst10);
IkReal x2226=((1.0)*cj0);
IkReal x2227=((1.0)*x2215);
IkReal x2228=((1.0)*x2214);
IkReal x2229=(cj3*x2214);
IkReal x2230=(gconst10*x2214);
IkReal x2231=(x2215*x2225);
evalcond[0]=(((r21*x2230))+(((-1.0)*r22*x2227))+(((-1.0)*x2218*x2228)));
evalcond[1]=(sj0+(((-1.0)*r02*x2227))+((r01*x2230))+(((-1.0)*gconst11*r00*x2228)));
evalcond[2]=((((-1.0)*r12*x2227))+(((-1.0)*x2226))+(((-1.0)*gconst11*r10*x2228))+((r11*x2230)));
evalcond[3]=(((r22*x2229))+((r20*x2216))+x2224+x2223+((r21*x2231))+((r21*x2219))+(((-1.0)*cj3*x2218*x2227)));
evalcond[4]=(x2221+(((-1.0)*r21*x2216*x2227))+(((-1.0)*r22*sj3*x2228))+((r21*x2220))+(((-1.0)*x2222))+((r20*x2225))+((sj3*x2215*x2218)));
evalcond[5]=(((r00*x2215*x2219))+((cj0*x2224))+((cj0*x2223))+(((-1.0)*r02*sj3*x2228))+(((-1.0)*r01*x2216*x2227))+((r00*x2225))+((r01*x2220)));
evalcond[6]=(((r01*x2219))+((r00*x2216))+((r02*x2229))+((cj0*x2222))+(((-1.0)*x2221*x2226))+(((-1.0)*r00*x2220*x2227))+((r01*x2231)));
evalcond[7]=(((gconst10*x2217))+((r10*x2215*x2219))+(((-1.0)*r11*x2216*x2227))+((sj0*x2224))+((sj0*x2223))+(((-1.0)*r12*sj3*x2228))+((r11*x2220)));
evalcond[8]=(((r12*x2229))+(((-1.0)*gconst11*x2217*x2227))+((sj0*x2222))+((r11*x2219))+(((-1.0)*sj0*x2221))+((r10*x2216))+((r11*x2231)));
=======
IkReal x14447=IKsin(j4);
IkReal x14448=IKcos(j4);
IkReal x14449=(sj1*sj2);
IkReal x14450=(cj5*sj3);
IkReal x14451=(cj5*r10);
IkReal x14452=(r00*sj5);
IkReal x14453=(r11*sj5);
IkReal x14454=(cj3*cj5);
IkReal x14455=((1.0)*cj1);
IkReal x14456=(cj3*sj5);
IkReal x14457=(r21*sj5);
IkReal x14458=(cj2*sj1);
IkReal x14459=(sj3*sj5);
IkReal x14460=(r01*sj5);
IkReal x14461=(cj2*x14455);
IkReal x14462=((1.0)*x14448);
IkReal x14463=((1.0)*x14447);
IkReal x14464=(cj3*x14447);
IkReal x14465=(cj3*x14448);
evalcond[0]=((((-1.0)*cj5*r20*x14463))+((x14447*x14457))+(((-1.0)*r22*x14462)));
evalcond[1]=((((-1.0)*cj5*r00*x14463))+(((-1.0)*r02*x14462))+((x14447*x14460)));
evalcond[2]=((1.0)+(((-1.0)*x14451*x14463))+(((-1.0)*r12*x14462))+((x14447*x14453)));
evalcond[3]=(((r10*x14459))+((r11*x14450))+((r12*x14464))+(((-1.0)*cj3*x14451*x14462))+((x14453*x14465)));
evalcond[4]=((((-1.0)*sj3*x14453*x14462))+((r10*x14456))+((r11*x14454))+(((-1.0)*r12*sj3*x14463))+((r10*x14448*x14450)));
evalcond[5]=(((cj1*sj2))+((r20*x14459))+((r22*x14464))+x14458+(((-1.0)*r20*x14454*x14462))+((r21*x14448*x14456))+((r21*x14450)));
evalcond[6]=(((r01*x14448*x14456))+((r01*x14450))+((r02*x14464))+x14449+((sj3*x14452))+(((-1.0)*x14461))+(((-1.0)*r00*x14454*x14462)));
evalcond[7]=((((-1.0)*r22*sj3*x14463))+((r20*x14456))+((r20*x14448*x14450))+x14449+(((-1.0)*x14461))+((r21*x14454))+(((-1.0)*sj3*x14457*x14462)));
evalcond[8]=((((-1.0)*r01*x14459*x14462))+((r01*x14454))+(((-1.0)*sj2*x14455))+(((-1.0)*r02*sj3*x14463))+(((-1.0)*x14458))+((cj3*x14452))+((r00*x14448*x14450)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
CheckValue<IkReal> x2233=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2232.value)+(((1.5707963267949)*(x2233.value))));
=======
IkReal x14466=((1.0)*cj5);
CheckValue<IkReal> x14467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14466))+(((-1.0)*r00*sj5)))),-1);
if(!x14467.valid){
continue;
}
CheckValue<IkReal> x14468 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14467.value)))+(x14468.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2234=IKsin(j4);
IkReal x2235=IKcos(j4);
IkReal x2236=(gconst10*sj3);
IkReal x2237=(cj3*r10);
IkReal x2238=(gconst11*r20);
IkReal x2239=(gconst11*sj3);
IkReal x2240=(cj3*gconst11);
IkReal x2241=(sj1*sj2);
IkReal x2242=(cj1*cj2);
IkReal x2243=(cj2*sj1);
IkReal x2244=(cj1*sj2);
IkReal x2245=(cj3*gconst10);
IkReal x2246=((1.0)*cj0);
IkReal x2247=((1.0)*x2235);
IkReal x2248=((1.0)*x2234);
IkReal x2249=(cj3*x2234);
IkReal x2250=(gconst10*x2234);
IkReal x2251=(x2235*x2245);
evalcond[0]=((((-1.0)*r22*x2247))+(((-1.0)*x2238*x2248))+((r21*x2250)));
evalcond[1]=(sj0+(((-1.0)*r02*x2247))+(((-1.0)*gconst11*r00*x2248))+((r01*x2250)));
evalcond[2]=((((-1.0)*gconst11*r10*x2248))+(((-1.0)*x2246))+(((-1.0)*r12*x2247))+((r11*x2250)));
evalcond[3]=(x2244+x2243+((r21*x2239))+((r20*x2236))+((r21*x2251))+((r22*x2249))+(((-1.0)*cj3*x2238*x2247)));
evalcond[4]=(x2241+(((-1.0)*x2242))+((r20*x2245))+(((-1.0)*r22*sj3*x2248))+((r21*x2240))+((sj3*x2235*x2238))+(((-1.0)*r21*x2236*x2247)));
evalcond[5]=((((-1.0)*r01*x2236*x2247))+(((-1.0)*r02*sj3*x2248))+((r01*x2240))+((r00*x2245))+((r00*x2235*x2239))+((cj0*x2244))+((cj0*x2243)));
evalcond[6]=((((-1.0)*r00*x2240*x2247))+(((-1.0)*x2241*x2246))+((r01*x2251))+((r01*x2239))+((r00*x2236))+((r02*x2249))+((cj0*x2242)));
evalcond[7]=(((r11*x2240))+((r10*x2235*x2239))+(((-1.0)*r12*sj3*x2248))+((gconst10*x2237))+((sj0*x2244))+((sj0*x2243))+(((-1.0)*r11*x2236*x2247)));
evalcond[8]=((((-1.0)*gconst11*x2237*x2247))+((r10*x2236))+((sj0*x2242))+(((-1.0)*sj0*x2241))+((r11*x2239))+((r12*x2249))+((r11*x2251)));
=======
IkReal x14469=IKsin(j4);
IkReal x14470=IKcos(j4);
IkReal x14471=(sj1*sj2);
IkReal x14472=(cj5*sj3);
IkReal x14473=(cj5*r10);
IkReal x14474=(r00*sj5);
IkReal x14475=(r11*sj5);
IkReal x14476=(cj3*cj5);
IkReal x14477=((1.0)*cj1);
IkReal x14478=(cj3*sj5);
IkReal x14479=(r21*sj5);
IkReal x14480=(cj2*sj1);
IkReal x14481=(sj3*sj5);
IkReal x14482=(r01*sj5);
IkReal x14483=(cj2*x14477);
IkReal x14484=((1.0)*x14470);
IkReal x14485=((1.0)*x14469);
IkReal x14486=(cj3*x14469);
IkReal x14487=(cj3*x14470);
evalcond[0]=(((x14469*x14479))+(((-1.0)*r22*x14484))+(((-1.0)*cj5*r20*x14485)));
evalcond[1]=((((-1.0)*cj5*r00*x14485))+((x14469*x14482))+(((-1.0)*r02*x14484)));
evalcond[2]=((1.0)+(((-1.0)*x14473*x14485))+((x14469*x14475))+(((-1.0)*r12*x14484)));
evalcond[3]=(((r10*x14481))+((r12*x14486))+((r11*x14472))+((x14475*x14487))+(((-1.0)*cj3*x14473*x14484)));
evalcond[4]=(((r10*x14470*x14472))+((r10*x14478))+(((-1.0)*sj3*x14475*x14484))+((r11*x14476))+(((-1.0)*r12*sj3*x14485)));
evalcond[5]=(((cj1*sj2))+((r21*x14472))+((r22*x14486))+x14480+(((-1.0)*r20*x14476*x14484))+((r21*x14470*x14478))+((r20*x14481)));
evalcond[6]=((((-1.0)*r00*x14476*x14484))+((r02*x14486))+((r01*x14472))+((sj3*x14474))+x14471+(((-1.0)*x14483))+((r01*x14470*x14478)));
evalcond[7]=((((-1.0)*sj3*x14479*x14484))+((r21*x14476))+(((-1.0)*r22*sj3*x14485))+x14471+((r20*x14470*x14472))+((r20*x14478))+(((-1.0)*x14483)));
evalcond[8]=((((-1.0)*r02*sj3*x14485))+((r01*x14476))+((r00*x14470*x14472))+(((-1.0)*x14480))+(((-1.0)*r01*x14481*x14484))+((cj3*x14474))+(((-1.0)*sj2*x14477)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2252=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2252.valid){
continue;
}
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2252.value)))+(x2253.value));
=======
CheckValue<IkReal> x14488=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14488.valid){
continue;
}
CheckValue<IkReal> x14489 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14488.value)))+(x14489.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2254=IKsin(j4);
IkReal x2255=IKcos(j4);
IkReal x2256=(gconst10*sj3);
IkReal x2257=(cj3*r10);
IkReal x2258=(gconst11*r20);
IkReal x2259=(gconst11*sj3);
IkReal x2260=(cj3*gconst11);
IkReal x2261=(sj1*sj2);
IkReal x2262=(cj1*cj2);
IkReal x2263=(cj2*sj1);
IkReal x2264=(cj1*sj2);
IkReal x2265=(cj3*gconst10);
IkReal x2266=((1.0)*cj0);
IkReal x2267=((1.0)*x2255);
IkReal x2268=((1.0)*x2254);
IkReal x2269=(cj3*x2254);
IkReal x2270=(gconst10*x2254);
IkReal x2271=(x2255*x2265);
evalcond[0]=(((r21*x2270))+(((-1.0)*x2258*x2268))+(((-1.0)*r22*x2267)));
evalcond[1]=(((r01*x2270))+sj0+(((-1.0)*r02*x2267))+(((-1.0)*gconst11*r00*x2268)));
evalcond[2]=(((r11*x2270))+(((-1.0)*gconst11*r10*x2268))+(((-1.0)*x2266))+(((-1.0)*r12*x2267)));
evalcond[3]=(((r21*x2271))+x2263+x2264+((r22*x2269))+((r20*x2256))+((r21*x2259))+(((-1.0)*cj3*x2258*x2267)));
evalcond[4]=(x2261+((r21*x2260))+((sj3*x2255*x2258))+(((-1.0)*r21*x2256*x2267))+((r20*x2265))+(((-1.0)*r22*sj3*x2268))+(((-1.0)*x2262)));
evalcond[5]=((((-1.0)*r01*x2256*x2267))+((r00*x2265))+(((-1.0)*r02*sj3*x2268))+((r01*x2260))+((cj0*x2263))+((cj0*x2264))+((r00*x2255*x2259)));
evalcond[6]=(((r01*x2271))+(((-1.0)*r00*x2260*x2267))+((cj0*x2262))+(((-1.0)*x2261*x2266))+((r02*x2269))+((r00*x2256))+((r01*x2259)));
evalcond[7]=(((sj0*x2263))+((sj0*x2264))+(((-1.0)*r12*sj3*x2268))+((r11*x2260))+((r10*x2255*x2259))+(((-1.0)*r11*x2256*x2267))+((gconst10*x2257)));
evalcond[8]=((((-1.0)*gconst11*x2257*x2267))+((r10*x2256))+((sj0*x2262))+(((-1.0)*sj0*x2261))+((r11*x2271))+((r12*x2269))+((r11*x2259)));
=======
IkReal x14490=IKsin(j4);
IkReal x14491=IKcos(j4);
IkReal x14492=(sj1*sj2);
IkReal x14493=(cj5*sj3);
IkReal x14494=(cj5*r10);
IkReal x14495=(r00*sj5);
IkReal x14496=(r11*sj5);
IkReal x14497=(cj3*cj5);
IkReal x14498=((1.0)*cj1);
IkReal x14499=(cj3*sj5);
IkReal x14500=(r21*sj5);
IkReal x14501=(cj2*sj1);
IkReal x14502=(sj3*sj5);
IkReal x14503=(r01*sj5);
IkReal x14504=(cj2*x14498);
IkReal x14505=((1.0)*x14491);
IkReal x14506=((1.0)*x14490);
IkReal x14507=(cj3*x14490);
IkReal x14508=(cj3*x14491);
evalcond[0]=(((x14490*x14500))+(((-1.0)*r22*x14505))+(((-1.0)*cj5*r20*x14506)));
evalcond[1]=((((-1.0)*r02*x14505))+((x14490*x14503))+(((-1.0)*cj5*r00*x14506)));
evalcond[2]=((1.0)+(((-1.0)*x14494*x14506))+(((-1.0)*r12*x14505))+((x14490*x14496)));
evalcond[3]=(((x14496*x14508))+((r11*x14493))+(((-1.0)*cj3*x14494*x14505))+((r10*x14502))+((r12*x14507)));
evalcond[4]=(((r10*x14499))+((r11*x14497))+(((-1.0)*sj3*x14496*x14505))+((r10*x14491*x14493))+(((-1.0)*r12*sj3*x14506)));
evalcond[5]=(((r21*x14493))+((r20*x14502))+(((-1.0)*r20*x14497*x14505))+((cj1*sj2))+((r22*x14507))+((r21*x14491*x14499))+x14501);
evalcond[6]=(((r02*x14507))+((r01*x14491*x14499))+(((-1.0)*x14504))+((sj3*x14495))+x14492+((r01*x14493))+(((-1.0)*r00*x14497*x14505)));
evalcond[7]=(((r21*x14497))+(((-1.0)*x14504))+((r20*x14491*x14493))+x14492+(((-1.0)*r22*sj3*x14506))+((r20*x14499))+(((-1.0)*sj3*x14500*x14505)));
evalcond[8]=((((-1.0)*x14501))+(((-1.0)*r01*x14502*x14505))+((cj3*x14495))+((r01*x14497))+((r00*x14491*x14493))+(((-1.0)*r02*sj3*x14506))+(((-1.0)*sj2*x14498)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
<<<<<<< HEAD
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2272=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2272;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2273=((1.0)*cj5);
IkReal x2274=((((-1.0)*r21*x2273))+(((-1.0)*r20*sj5)));
j4eval[0]=x2274;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2273)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2275=cj5*cj5;
IkReal x2276=(cj3*r01);
IkReal x2277=(cj5*sj5);
IkReal x2278=((1.0)*cj3);
IkReal x2279=((((-1.0)*r02*r22*x2278))+((r21*x2275*x2276))+((cj3*r00*r21*x2277))+(((-1.0)*r00*r20*x2275*x2278))+((r20*x2276*x2277))+(((-1.0)*r21*x2276)));
j4eval[0]=x2279;
j4eval[1]=IKsign(x2279);
=======
IkReal j4eval[2];
IkReal x14509=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14509);
rxp0_2=(py*r00);
rxp1_0=(r21*x14509);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14510=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14510);
rxp0_2=(py*r00);
rxp1_0=(r21*x14510);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14511=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x14511)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14511)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14512=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14512);
rxp0_2=(py*r00);
rxp1_0=(r21*x14512);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14513=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14513);
rxp0_2=(py*r00);
rxp1_0=(r21*x14513);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14514=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14514);
rxp0_2=(py*r00);
rxp1_0=(r21*x14514);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14515=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14515);
rxp0_2=(py*r00);
rxp1_0=(r21*x14515);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2280=cj5*cj5;
IkReal x2281=(cj3*r20);
IkReal x2282=(r21*sj3);
IkReal x2283=((1.0)*cj3);
IkReal x2284=(r01*r21);
IkReal x2285=(r01*sj3);
IkReal x2286=(r00*sj5);
IkReal x2287=(cj5*r01*sj5);
IkReal x2288=((1.0)*x2280);
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal((((r22*sj3*x2286))+((cj5*r22*x2285)))),IkReal((((x2282*x2287))+((r00*x2282))+(((-1.0)*cj5*r20*sj3*x2286))+(((-1.0)*r20*x2285*x2288))+(((-1.0)*r00*x2282*x2288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(IKsign((((x2281*x2287))+((cj3*x2280*x2284))+(((-1.0)*r00*x2281*x2288))+(((-1.0)*r02*r22*x2283))+(((-1.0)*x2283*x2284))+((cj3*cj5*r21*x2286)))),-1);
if(!x2290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2289.value)+(((1.5707963267949)*(x2290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14518=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14518.valid){
continue;
}
IkReal x14516=x14518.value;
IkReal x14517=(cj0*x14516);
cj4array[0]=(((sj1*sj2*x14517))+(((-1.0)*cj1*cj2*x14517)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2291=IKsin(j4);
IkReal x2292=IKcos(j4);
IkReal x2293=(cj2*sj1);
IkReal x2294=(cj1*sj2);
IkReal x2295=(r11*sj5);
IkReal x2296=(cj5*r10);
IkReal x2297=(sj1*sj2);
IkReal x2298=(cj5*r01);
IkReal x2299=(cj5*r00);
IkReal x2300=(cj3*sj5);
IkReal x2301=(r21*sj5);
IkReal x2302=(cj1*cj2);
IkReal x2303=(cj5*sj3);
IkReal x2304=(sj3*sj5);
IkReal x2305=(r01*sj5);
IkReal x2306=(cj3*cj5);
IkReal x2307=(cj5*r20);
IkReal x2308=((1.0)*x2292);
IkReal x2309=((1.0)*x2291);
IkReal x2310=(cj3*x2292);
IkReal x2311=(sj3*x2292);
IkReal x2312=(cj3*x2291);
IkReal x2313=(x2293+x2294);
evalcond[0]=((((-1.0)*r22*x2308))+((x2291*x2301))+(((-1.0)*x2307*x2309)));
evalcond[1]=(((x2291*x2295))+(((-1.0)*x2296*x2309))+(((-1.0)*r12*x2308)));
evalcond[2]=((1.0)+(((-1.0)*x2299*x2309))+((x2291*x2305))+(((-1.0)*r02*x2308)));
evalcond[3]=((((-1.0)*cj3*x2299*x2308))+((r01*x2292*x2300))+((sj3*x2298))+((r00*x2304))+((r02*x2312)));
evalcond[4]=((((-1.0)*r02*sj3*x2309))+((x2299*x2311))+(((-1.0)*r01*x2304*x2308))+((r00*x2300))+((cj3*x2298)));
evalcond[5]=(x2313+((r20*x2304))+((r22*x2312))+(((-1.0)*r20*x2306*x2308))+((r21*x2303))+((r21*x2292*x2300)));
evalcond[6]=((((-1.0)*r12*sj3*x2309))+((r11*x2306))+((r10*x2300))+x2313+(((-1.0)*sj3*x2295*x2308))+((x2296*x2311)));
evalcond[7]=(((r11*x2303))+((r10*x2304))+x2302+(((-1.0)*x2297))+((x2295*x2310))+((r12*x2312))+(((-1.0)*cj3*x2296*x2308)));
evalcond[8]=((((-1.0)*x2302))+x2297+((r20*x2300))+((r20*x2292*x2303))+(((-1.0)*sj3*x2301*x2308))+((r21*x2306))+(((-1.0)*r22*sj3*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14519=IKsin(j4);
IkReal x14520=IKcos(j4);
IkReal x14521=(r21*sj5);
IkReal x14522=((1.0)*x14520);
IkReal x14523=((1.0)*cj5*x14519);
evalcond[0]=(r12*x14519);
evalcond[1]=((((-1.0)*r12*x14522))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14523))+((x14519*x14521)));
evalcond[3]=((((-1.0)*r00*x14523))+((r01*sj5*x14519)));
evalcond[4]=(((cj2*sj1))+((x14520*x14521))+((cj1*sj2))+(((-1.0)*cj5*r20*x14522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2314=((1.0)*cj5);
CheckValue<IkReal> x2315 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2314))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2315.valid){
continue;
}
CheckValue<IkReal> x2316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2314))+(((-1.0)*r20*sj5)))),-1);
if(!x2316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2315.value)+(((1.5707963267949)*(x2316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14526=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14526.valid){
continue;
}
IkReal x14524=x14526.value;
IkReal x14525=((1.0)*x14524);
cj4array[0]=((((-1.0)*cj1*sj2*x14525))+(((-1.0)*cj2*sj1*x14525)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2317=IKsin(j4);
IkReal x2318=IKcos(j4);
IkReal x2319=(cj2*sj1);
IkReal x2320=(cj1*sj2);
IkReal x2321=(r11*sj5);
IkReal x2322=(cj5*r10);
IkReal x2323=(sj1*sj2);
IkReal x2324=(cj5*r01);
IkReal x2325=(cj5*r00);
IkReal x2326=(cj3*sj5);
IkReal x2327=(r21*sj5);
IkReal x2328=(cj1*cj2);
IkReal x2329=(cj5*sj3);
IkReal x2330=(sj3*sj5);
IkReal x2331=(r01*sj5);
IkReal x2332=(cj3*cj5);
IkReal x2333=(cj5*r20);
IkReal x2334=((1.0)*x2318);
IkReal x2335=((1.0)*x2317);
IkReal x2336=(cj3*x2318);
IkReal x2337=(sj3*x2318);
IkReal x2338=(cj3*x2317);
IkReal x2339=(x2320+x2319);
evalcond[0]=(((x2317*x2327))+(((-1.0)*r22*x2334))+(((-1.0)*x2333*x2335)));
evalcond[1]=((((-1.0)*x2322*x2335))+((x2317*x2321))+(((-1.0)*r12*x2334)));
evalcond[2]=((1.0)+((x2317*x2331))+(((-1.0)*r02*x2334))+(((-1.0)*x2325*x2335)));
evalcond[3]=(((r02*x2338))+((sj3*x2324))+((r01*x2318*x2326))+(((-1.0)*cj3*x2325*x2334))+((r00*x2330)));
evalcond[4]=(((cj3*x2324))+(((-1.0)*r01*x2330*x2334))+((r00*x2326))+((x2325*x2337))+(((-1.0)*r02*sj3*x2335)));
evalcond[5]=(x2339+((r21*x2329))+((r21*x2318*x2326))+((r22*x2338))+(((-1.0)*r20*x2332*x2334))+((r20*x2330)));
evalcond[6]=(((r10*x2326))+x2339+((x2322*x2337))+((r11*x2332))+(((-1.0)*sj3*x2321*x2334))+(((-1.0)*r12*sj3*x2335)));
evalcond[7]=(x2328+((r12*x2338))+((r11*x2329))+((x2321*x2336))+(((-1.0)*cj3*x2322*x2334))+((r10*x2330))+(((-1.0)*x2323)));
evalcond[8]=(((r21*x2332))+x2323+((r20*x2318*x2329))+(((-1.0)*sj3*x2327*x2334))+(((-1.0)*r22*sj3*x2335))+((r20*x2326))+(((-1.0)*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14527=IKsin(j4);
IkReal x14528=IKcos(j4);
IkReal x14529=((1.0)*cj0);
IkReal x14530=(r01*sj5);
IkReal x14531=((1.0)*cj5*r00);
evalcond[0]=(r12*x14527);
evalcond[1]=((((-1.0)*r12*x14528))+(((-1.0)*x14529)));
evalcond[2]=(((r21*sj5*x14527))+(((-1.0)*cj5*r20*x14527)));
evalcond[3]=((((-1.0)*x14527*x14531))+((x14527*x14530)));
evalcond[4]=((((-1.0)*sj1*sj2*x14529))+((cj0*cj1*cj2))+(((-1.0)*x14528*x14531))+((x14528*x14530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
CheckValue<IkReal> x2341=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2340.value)+(((1.5707963267949)*(x2341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14532=IKPowWithIntegerCheck(r12,-1);
if(!x14532.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14532.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2342=IKsin(j4);
IkReal x2343=IKcos(j4);
IkReal x2344=(cj2*sj1);
IkReal x2345=(cj1*sj2);
IkReal x2346=(r11*sj5);
IkReal x2347=(cj5*r10);
IkReal x2348=(sj1*sj2);
IkReal x2349=(cj5*r01);
IkReal x2350=(cj5*r00);
IkReal x2351=(cj3*sj5);
IkReal x2352=(r21*sj5);
IkReal x2353=(cj1*cj2);
IkReal x2354=(cj5*sj3);
IkReal x2355=(sj3*sj5);
IkReal x2356=(r01*sj5);
IkReal x2357=(cj3*cj5);
IkReal x2358=(cj5*r20);
IkReal x2359=((1.0)*x2343);
IkReal x2360=((1.0)*x2342);
IkReal x2361=(cj3*x2343);
IkReal x2362=(sj3*x2343);
IkReal x2363=(cj3*x2342);
IkReal x2364=(x2345+x2344);
evalcond[0]=((((-1.0)*x2358*x2360))+(((-1.0)*r22*x2359))+((x2342*x2352)));
evalcond[1]=((((-1.0)*x2347*x2360))+(((-1.0)*r12*x2359))+((x2342*x2346)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2359))+((x2342*x2356))+(((-1.0)*x2350*x2360)));
evalcond[3]=(((r00*x2355))+((r02*x2363))+((r01*x2343*x2351))+((sj3*x2349))+(((-1.0)*cj3*x2350*x2359)));
evalcond[4]=(((r00*x2351))+(((-1.0)*r02*sj3*x2360))+((cj3*x2349))+((x2350*x2362))+(((-1.0)*r01*x2355*x2359)));
evalcond[5]=(x2364+((r21*x2343*x2351))+((r22*x2363))+((r20*x2355))+(((-1.0)*r20*x2357*x2359))+((r21*x2354)));
evalcond[6]=(((r10*x2351))+x2364+(((-1.0)*r12*sj3*x2360))+((r11*x2357))+((x2347*x2362))+(((-1.0)*sj3*x2346*x2359)));
evalcond[7]=(((r12*x2363))+((r10*x2355))+x2353+(((-1.0)*x2348))+((r11*x2354))+((x2346*x2361))+(((-1.0)*cj3*x2347*x2359)));
evalcond[8]=((((-1.0)*r22*sj3*x2360))+(((-1.0)*sj3*x2352*x2359))+x2348+(((-1.0)*x2353))+((r20*x2343*x2354))+((r20*x2351))+((r21*x2357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14533=IKsin(j4);
IkReal x14534=IKcos(j4);
IkReal x14535=((1.0)*cj5*r00);
IkReal x14536=(sj5*x14534);
IkReal x14537=(sj5*x14533);
IkReal x14538=((1.0)*cj5*r20);
evalcond[0]=(r12*x14533);
evalcond[1]=(((r21*x14537))+(((-1.0)*x14533*x14538)));
evalcond[2]=(((r01*x14537))+(((-1.0)*x14533*x14535)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x14536))+(((-1.0)*x14534*x14538)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r01*x14536))+((cj0*cj1*cj2))+(((-1.0)*x14534*x14535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
<<<<<<< HEAD
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2365=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2365;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2366=((1.0)*cj5);
IkReal x2367=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2366)));
j4eval[0]=x2367;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2366)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2368=cj5*cj5;
IkReal x2369=(cj3*r01);
IkReal x2370=(cj5*sj5);
IkReal x2371=((1.0)*cj3);
IkReal x2372=(((cj3*r00*r21*x2370))+((r20*x2369*x2370))+(((-1.0)*r21*x2369))+((r21*x2368*x2369))+(((-1.0)*r02*r22*x2371))+(((-1.0)*r00*r20*x2368*x2371)));
j4eval[0]=x2372;
j4eval[1]=IKsign(x2372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
=======
IkReal j4eval[1];
IkReal x14539=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14539);
rxp0_2=(py*r00);
rxp1_0=(r21*x14539);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14540=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14540);
rxp0_2=(py*r00);
rxp1_0=(r21*x14540);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14541=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14541);
rxp0_2=(py*r00);
rxp1_0=(r21*x14541);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue; // 3 cases reached

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2373=cj5*cj5;
IkReal x2374=(cj3*r20);
IkReal x2375=(r21*sj3);
IkReal x2376=((1.0)*cj3);
IkReal x2377=(r01*r21);
IkReal x2378=(r01*sj3);
IkReal x2379=(r00*sj5);
IkReal x2380=(cj5*r01*sj5);
IkReal x2381=((1.0)*x2373);
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal((((r22*sj3*x2379))+((cj5*r22*x2378)))),IkReal(((((-1.0)*cj5*r20*sj3*x2379))+(((-1.0)*r20*x2378*x2381))+((x2375*x2380))+((r00*x2375))+(((-1.0)*r00*x2375*x2381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x2376))+((cj3*cj5*r21*x2379))+(((-1.0)*x2376*x2377))+((x2374*x2380))+(((-1.0)*r00*x2374*x2381))+((cj3*x2373*x2377)))),-1);
if(!x2383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2382.value)+(((1.5707963267949)*(x2383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14544=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14544.valid){
continue;
}
IkReal x14542=x14544.value;
IkReal x14543=(cj0*x14542);
cj4array[0]=(((sj1*sj2*x14543))+(((-1.0)*cj1*cj2*x14543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2384=IKsin(j4);
IkReal x2385=IKcos(j4);
IkReal x2386=(sj1*sj2);
IkReal x2387=(r11*sj5);
IkReal x2388=(cj5*r10);
IkReal x2389=(cj5*r01);
IkReal x2390=(cj5*r00);
IkReal x2391=((1.0)*cj1);
IkReal x2392=(cj3*sj5);
IkReal x2393=(r21*sj5);
IkReal x2394=(cj5*sj3);
IkReal x2395=(sj3*sj5);
IkReal x2396=(cj2*sj1);
IkReal x2397=(r01*sj5);
IkReal x2398=(cj3*cj5);
IkReal x2399=(cj5*r20);
IkReal x2400=(cj2*x2391);
IkReal x2401=((1.0)*x2385);
IkReal x2402=((1.0)*x2384);
IkReal x2403=(cj3*x2385);
IkReal x2404=(sj3*x2385);
IkReal x2405=(cj3*x2384);
evalcond[0]=(((x2384*x2393))+(((-1.0)*x2399*x2402))+(((-1.0)*r22*x2401)));
evalcond[1]=(((x2384*x2387))+(((-1.0)*x2388*x2402))+(((-1.0)*r12*x2401)));
evalcond[2]=((-1.0)+((x2384*x2397))+(((-1.0)*r02*x2401))+(((-1.0)*x2390*x2402)));
evalcond[3]=(((r01*x2385*x2392))+((r00*x2395))+((r02*x2405))+((sj3*x2389))+(((-1.0)*cj3*x2390*x2401)));
evalcond[4]=((((-1.0)*r02*sj3*x2402))+(((-1.0)*r01*x2395*x2401))+((r00*x2392))+((x2390*x2404))+((cj3*x2389)));
evalcond[5]=(x2396+((cj1*sj2))+(((-1.0)*r20*x2398*x2401))+((r20*x2395))+((r21*x2385*x2392))+((r22*x2405))+((r21*x2394)));
evalcond[6]=((((-1.0)*cj3*x2388*x2401))+(((-1.0)*x2400))+x2386+((r12*x2405))+((r10*x2395))+((r11*x2394))+((x2387*x2403)));
evalcond[7]=((((-1.0)*x2400))+x2386+((r20*x2392))+(((-1.0)*sj3*x2393*x2401))+(((-1.0)*r22*sj3*x2402))+((r21*x2398))+((r20*x2385*x2394)));
evalcond[8]=((((-1.0)*sj2*x2391))+(((-1.0)*r12*sj3*x2402))+(((-1.0)*x2396))+((r10*x2392))+(((-1.0)*sj3*x2387*x2401))+((x2388*x2404))+((r11*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14545=IKsin(j4);
IkReal x14546=IKcos(j4);
IkReal x14547=(r21*sj5);
IkReal x14548=((1.0)*x14546);
IkReal x14549=((1.0)*cj5*x14545);
evalcond[0]=((-1.0)*r12*x14545);
evalcond[1]=((((-1.0)*r12*x14548))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14549))+((x14545*x14547)));
evalcond[3]=((((-1.0)*r00*x14549))+((r01*sj5*x14545)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14547*x14548))+((cj5*r20*x14546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2406=((1.0)*cj5);
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2406)))),-1);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2407.value)))+(x2408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14552=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14552.valid){
continue;
}
IkReal x14550=x14552.value;
IkReal x14551=((1.0)*x14550);
cj4array[0]=((((-1.0)*cj2*sj1*x14551))+(((-1.0)*cj1*sj2*x14551)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2409=IKsin(j4);
IkReal x2410=IKcos(j4);
IkReal x2411=(sj1*sj2);
IkReal x2412=(r11*sj5);
IkReal x2413=(cj5*r10);
IkReal x2414=(cj5*r01);
IkReal x2415=(cj5*r00);
IkReal x2416=((1.0)*cj1);
IkReal x2417=(cj3*sj5);
IkReal x2418=(r21*sj5);
IkReal x2419=(cj5*sj3);
IkReal x2420=(sj3*sj5);
IkReal x2421=(cj2*sj1);
IkReal x2422=(r01*sj5);
IkReal x2423=(cj3*cj5);
IkReal x2424=(cj5*r20);
IkReal x2425=(cj2*x2416);
IkReal x2426=((1.0)*x2410);
IkReal x2427=((1.0)*x2409);
IkReal x2428=(cj3*x2410);
IkReal x2429=(sj3*x2410);
IkReal x2430=(cj3*x2409);
evalcond[0]=((((-1.0)*x2424*x2427))+((x2409*x2418))+(((-1.0)*r22*x2426)));
evalcond[1]=(((x2409*x2412))+(((-1.0)*x2413*x2427))+(((-1.0)*r12*x2426)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2426))+((x2409*x2422))+(((-1.0)*x2415*x2427)));
evalcond[3]=(((r02*x2430))+((r00*x2420))+((r01*x2410*x2417))+((sj3*x2414))+(((-1.0)*cj3*x2415*x2426)));
evalcond[4]=((((-1.0)*r02*sj3*x2427))+((r00*x2417))+((x2415*x2429))+((cj3*x2414))+(((-1.0)*r01*x2420*x2426)));
evalcond[5]=(x2421+((r21*x2410*x2417))+((r21*x2419))+(((-1.0)*r20*x2423*x2426))+((cj1*sj2))+((r22*x2430))+((r20*x2420)));
evalcond[6]=(x2411+((r11*x2419))+(((-1.0)*cj3*x2413*x2426))+((x2412*x2428))+((r12*x2430))+((r10*x2420))+(((-1.0)*x2425)));
evalcond[7]=(x2411+((r21*x2423))+((r20*x2410*x2419))+(((-1.0)*sj3*x2418*x2426))+(((-1.0)*r22*sj3*x2427))+((r20*x2417))+(((-1.0)*x2425)));
evalcond[8]=(((x2413*x2429))+((r10*x2417))+(((-1.0)*sj3*x2412*x2426))+(((-1.0)*r12*sj3*x2427))+((r11*x2423))+(((-1.0)*x2421))+(((-1.0)*sj2*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14553=IKsin(j4);
IkReal x14554=IKcos(j4);
IkReal x14555=(cj5*r00);
IkReal x14556=((1.0)*cj0);
IkReal x14557=((1.0)*x14553);
IkReal x14558=(sj5*x14553);
IkReal x14559=((1.0)*x14554);
evalcond[0]=((-1.0)*r12*x14553);
evalcond[1]=((((-1.0)*x14556))+(((-1.0)*r12*x14559)));
evalcond[2]=((((-1.0)*cj5*r20*x14557))+((r21*x14558)));
evalcond[3]=(((r01*x14558))+(((-1.0)*x14555*x14557)));
evalcond[4]=((((-1.0)*r01*sj5*x14559))+(((-1.0)*sj1*sj2*x14556))+((cj0*cj1*cj2))+((x14554*x14555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2431.value)))+(x2432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14560=IKPowWithIntegerCheck(r12,-1);
if(!x14560.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14560.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2433=IKsin(j4);
IkReal x2434=IKcos(j4);
IkReal x2435=(sj1*sj2);
IkReal x2436=(r11*sj5);
IkReal x2437=(cj5*r10);
IkReal x2438=(cj5*r01);
IkReal x2439=(cj5*r00);
IkReal x2440=((1.0)*cj1);
IkReal x2441=(cj3*sj5);
IkReal x2442=(r21*sj5);
IkReal x2443=(cj5*sj3);
IkReal x2444=(sj3*sj5);
IkReal x2445=(cj2*sj1);
IkReal x2446=(r01*sj5);
IkReal x2447=(cj3*cj5);
IkReal x2448=(cj5*r20);
IkReal x2449=(cj2*x2440);
IkReal x2450=((1.0)*x2434);
IkReal x2451=((1.0)*x2433);
IkReal x2452=(cj3*x2434);
IkReal x2453=(sj3*x2434);
IkReal x2454=(cj3*x2433);
evalcond[0]=(((x2433*x2442))+(((-1.0)*x2448*x2451))+(((-1.0)*r22*x2450)));
evalcond[1]=((((-1.0)*x2437*x2451))+((x2433*x2436))+(((-1.0)*r12*x2450)));
evalcond[2]=((-1.0)+((x2433*x2446))+(((-1.0)*x2439*x2451))+(((-1.0)*r02*x2450)));
evalcond[3]=(((r02*x2454))+((sj3*x2438))+((r00*x2444))+(((-1.0)*cj3*x2439*x2450))+((r01*x2434*x2441)));
evalcond[4]=((((-1.0)*r02*sj3*x2451))+((r00*x2441))+((cj3*x2438))+(((-1.0)*r01*x2444*x2450))+((x2439*x2453)));
evalcond[5]=((((-1.0)*r20*x2447*x2450))+x2445+((r21*x2434*x2441))+((r22*x2454))+((cj1*sj2))+((r20*x2444))+((r21*x2443)));
evalcond[6]=((((-1.0)*cj3*x2437*x2450))+x2435+((r10*x2444))+((r12*x2454))+((r11*x2443))+(((-1.0)*x2449))+((x2436*x2452)));
evalcond[7]=(x2435+(((-1.0)*r22*sj3*x2451))+(((-1.0)*sj3*x2442*x2450))+(((-1.0)*x2449))+((r20*x2441))+((r20*x2434*x2443))+((r21*x2447)));
evalcond[8]=(((r10*x2441))+(((-1.0)*x2445))+(((-1.0)*r12*sj3*x2451))+(((-1.0)*sj3*x2436*x2450))+((r11*x2447))+((x2437*x2453))+(((-1.0)*sj2*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14561=IKsin(j4);
IkReal x14562=IKcos(j4);
IkReal x14563=(cj5*r00);
IkReal x14564=(r21*sj5);
IkReal x14565=(cj5*r20);
IkReal x14566=(r01*sj5);
IkReal x14567=((1.0)*x14561);
IkReal x14568=((1.0)*x14562);
evalcond[0]=((-1.0)*r12*x14561);
evalcond[1]=(((x14561*x14564))+(((-1.0)*x14565*x14567)));
evalcond[2]=((((-1.0)*x14563*x14567))+((x14561*x14566)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x14562*x14565))+(((-1.0)*x14564*x14568)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x14562*x14563))+((cj0*cj1*cj2))+(((-1.0)*x14566*x14568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
<<<<<<< HEAD
IkReal x2456 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2456)==0){
continue;
}
IkReal x2455=pow(x2456,-0.5);
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2457.value));
IkReal gconst13=((-1.0)*r11*x2455);
IkReal gconst14=(r10*x2455);
CheckValue<IkReal> x2458 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2458.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2458.value)+j5)))), 6.28318530717959)));
=======
CheckValue<IkReal> x14569 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14569.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14569.value));
IkReal gconst67=r00;
IkReal gconst68=r01;
CheckValue<IkReal> x14570 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14570.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14570.value)+j5)))), 6.28318530717959)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14571=((-1.0)*py);
CheckValue<IkReal> x14573 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14573.valid){
continue;
}
IkReal x14572=((-1.0)*(x14573.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14571);
rxp0_2=(py*r00);
rxp1_0=(r21*x14571);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14572;
IkReal gconst66=x14572;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14574=((-1.0)*py);
CheckValue<IkReal> x14576 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14576.valid){
continue;
}
IkReal x14575=((-1.0)*(x14576.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14574);
rxp0_2=(py*r00);
rxp1_0=(r21*x14574);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14575;
IkReal gconst66=x14575;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
<<<<<<< HEAD
CheckValue<IkReal> x2461 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2461.valid){
continue;
}
IkReal x2459=((-1.0)*(x2461.value));
IkReal x2460=x2455;
sj5=gconst13;
cj5=gconst14;
j5=x2459;
IkReal gconst12=x2459;
IkReal gconst13=((-1.0)*r11*x2460);
IkReal gconst14=(r10*x2460);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
=======
IkReal x14577=((-1.0)*py);
CheckValue<IkReal> x14579 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14579.valid){
continue;
}
IkReal x14578=((-1.0)*(x14579.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14577);
rxp0_2=(py*r00);
rxp1_0=(r21*x14577);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14578;
IkReal gconst66=x14578;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj3*r01*r20))+((cj3*r00*r21)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2462=((1.0)*gconst14);
CheckValue<IkReal> x2463=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x2462)))),-1);
if(!x2463.valid){
continue;
}
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2462))+((cj0*gconst13*r01))+(((-1.0)*cj0*r00*x2462))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2463.value)))+(x2464.value));
=======
IkReal x14580=(cj2*sj1);
IkReal x14581=(cj1*sj2);
IkReal x14582=((1.0)*gconst68);
CheckValue<IkReal> x14583=IKPowWithIntegerCheck(r12,-1);
if(!x14583.valid){
continue;
}
CheckValue<IkReal> x14584=IKPowWithIntegerCheck(sj3,-1);
if(!x14584.valid){
continue;
}
CheckValue<IkReal> x14585=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x14582))),-1);
if(!x14585.valid){
continue;
}
if( IKabs(((x14583.value)*(x14584.value)*((((sj0*x14580))+((sj0*x14581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14585.value)*(((((-1.0)*x14581))+(((-1.0)*x14580))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x14582)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14583.value)*(x14584.value)*((((sj0*x14580))+((sj0*x14581))))))+IKsqr(((x14585.value)*(((((-1.0)*x14581))+(((-1.0)*x14580))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x14582))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14583.value)*(x14584.value)*((((sj0*x14580))+((sj0*x14581))))), ((x14585.value)*(((((-1.0)*x14581))+(((-1.0)*x14580))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x14582))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2465=IKsin(j4);
IkReal x2466=IKcos(j4);
IkReal x2467=((1.0)*r22);
IkReal x2468=((1.0)*r12);
IkReal x2469=(cj2*sj0);
IkReal x2470=(gconst13*sj3);
IkReal x2471=(gconst13*r01);
IkReal x2472=(sj1*sj2);
IkReal x2473=(gconst14*sj3);
IkReal x2474=(cj1*cj2);
IkReal x2475=((1.0)*gconst14);
IkReal x2476=(cj3*gconst13);
IkReal x2477=(cj3*gconst14);
IkReal x2478=(cj2*sj1);
IkReal x2479=((1.0)*r02);
IkReal x2480=(cj1*sj2);
IkReal x2481=((1.0)*cj0);
IkReal x2482=(sj3*x2465);
IkReal x2483=(cj3*x2466);
IkReal x2484=(cj3*x2465);
IkReal x2485=(gconst13*x2465);
IkReal x2486=((1.0)*x2466);
evalcond[0]=((((-1.0)*r20*x2465*x2475))+(((-1.0)*x2466*x2467))+((r21*x2485)));
evalcond[1]=(sj0+(((-1.0)*x2466*x2479))+(((-1.0)*r00*x2465*x2475))+((x2465*x2471)));
evalcond[2]=((((-1.0)*x2466*x2468))+(((-1.0)*x2481))+((r11*x2485))+(((-1.0)*r10*x2465*x2475)));
evalcond[3]=(x2480+x2478+((r22*x2484))+((r21*x2473))+((r20*x2470))+(((-1.0)*r20*x2475*x2483))+((r21*x2466*x2476)));
evalcond[4]=(((r20*x2466*x2473))+x2472+((r21*x2477))+(((-1.0)*x2474))+(((-1.0)*x2467*x2482))+((r20*x2476))+(((-1.0)*r21*x2470*x2486)));
evalcond[5]=(((r00*x2466*x2473))+((r01*x2477))+((r00*x2476))+(((-1.0)*r01*x2470*x2486))+((cj0*x2478))+((cj0*x2480))+(((-1.0)*x2479*x2482)));
evalcond[6]=(((r02*x2484))+((r01*x2473))+((r00*x2470))+((cj0*x2474))+(((-1.0)*x2472*x2481))+(((-1.0)*r00*x2475*x2483))+((x2471*x2483)));
evalcond[7]=(((sj0*x2480))+((r10*x2466*x2473))+(((-1.0)*x2468*x2482))+((r10*x2476))+((sj1*x2469))+(((-1.0)*r11*x2470*x2486))+((r11*x2477)));
evalcond[8]=((((-1.0)*sj0*x2472))+((r11*x2466*x2476))+(((-1.0)*r10*x2475*x2483))+((cj1*x2469))+((r10*x2470))+((r12*x2484))+((r11*x2473)));
=======
IkReal x14586=IKsin(j4);
IkReal x14587=IKcos(j4);
IkReal x14588=((1.0)*sj3);
IkReal x14589=(cj2*sj0);
IkReal x14590=(gconst68*sj3);
IkReal x14591=(sj1*sj2);
IkReal x14592=(cj1*cj2);
IkReal x14593=(cj3*r20);
IkReal x14594=(gconst67*r00);
IkReal x14595=(cj2*sj1);
IkReal x14596=(cj3*gconst68);
IkReal x14597=(cj1*sj2);
IkReal x14598=((1.0)*cj0);
IkReal x14599=(r12*x14586);
IkReal x14600=(gconst67*x14587);
IkReal x14601=((1.0)*x14587);
IkReal x14602=(gconst67*x14586);
IkReal x14603=((1.0)*gconst68*x14586);
evalcond[0]=((((-1.0)*x14598))+(((-1.0)*r12*x14601)));
evalcond[1]=((((-1.0)*r20*x14603))+((r21*x14602)));
evalcond[2]=(sj0+((r01*x14602))+(((-1.0)*r00*x14603)));
evalcond[3]=(((sj1*x14589))+((sj0*x14597))+(((-1.0)*x14588*x14599)));
evalcond[4]=(((cj3*x14599))+((cj1*x14589))+(((-1.0)*sj0*x14591)));
evalcond[5]=(((cj3*r21*x14600))+((r21*x14590))+((gconst67*r20*sj3))+x14595+x14597+(((-1.0)*gconst68*x14593*x14601)));
evalcond[6]=(((r20*x14587*x14590))+(((-1.0)*x14592))+((r21*x14596))+x14591+((gconst67*x14593))+(((-1.0)*r21*x14588*x14600)));
evalcond[7]=(((cj3*x14594))+((r00*x14587*x14590))+((r01*x14596))+((cj0*x14595))+((cj0*x14597))+(((-1.0)*r01*x14588*x14600)));
evalcond[8]=(((r01*x14590))+((sj3*x14594))+(((-1.0)*r00*x14596*x14601))+((cj3*r01*x14600))+(((-1.0)*x14591*x14598))+((cj0*x14592)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2487.value)+(((1.5707963267949)*(x2488.value))));
=======
CheckValue<IkReal> x14605=IKPowWithIntegerCheck(r12,-1);
if(!x14605.valid){
continue;
}
IkReal x14604=x14605.value;
CheckValue<IkReal> x14606=IKPowWithIntegerCheck(cj3,-1);
if(!x14606.valid){
continue;
}
if( IKabs((x14604*(x14606.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14604)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14604*(x14606.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14604))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14604*(x14606.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14604));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2489=IKsin(j4);
IkReal x2490=IKcos(j4);
IkReal x2491=((1.0)*r22);
IkReal x2492=((1.0)*r12);
IkReal x2493=(cj2*sj0);
IkReal x2494=(gconst13*sj3);
IkReal x2495=(gconst13*r01);
IkReal x2496=(sj1*sj2);
IkReal x2497=(gconst14*sj3);
IkReal x2498=(cj1*cj2);
IkReal x2499=((1.0)*gconst14);
IkReal x2500=(cj3*gconst13);
IkReal x2501=(cj3*gconst14);
IkReal x2502=(cj2*sj1);
IkReal x2503=((1.0)*r02);
IkReal x2504=(cj1*sj2);
IkReal x2505=((1.0)*cj0);
IkReal x2506=(sj3*x2489);
IkReal x2507=(cj3*x2490);
IkReal x2508=(cj3*x2489);
IkReal x2509=(gconst13*x2489);
IkReal x2510=((1.0)*x2490);
evalcond[0]=((((-1.0)*r20*x2489*x2499))+(((-1.0)*x2490*x2491))+((r21*x2509)));
evalcond[1]=(sj0+(((-1.0)*r00*x2489*x2499))+(((-1.0)*x2490*x2503))+((x2489*x2495)));
evalcond[2]=((((-1.0)*x2505))+(((-1.0)*x2490*x2492))+(((-1.0)*r10*x2489*x2499))+((r11*x2509)));
evalcond[3]=(x2504+x2502+((r22*x2508))+((r21*x2490*x2500))+(((-1.0)*r20*x2499*x2507))+((r21*x2497))+((r20*x2494)));
evalcond[4]=(x2496+(((-1.0)*x2498))+((r20*x2490*x2497))+((r21*x2501))+(((-1.0)*x2491*x2506))+((r20*x2500))+(((-1.0)*r21*x2494*x2510)));
evalcond[5]=(((cj0*x2502))+((cj0*x2504))+(((-1.0)*x2503*x2506))+(((-1.0)*r01*x2494*x2510))+((r00*x2490*x2497))+((r00*x2500))+((r01*x2501)));
evalcond[6]=(((r00*x2494))+(((-1.0)*r00*x2499*x2507))+((r02*x2508))+(((-1.0)*x2496*x2505))+((x2495*x2507))+((cj0*x2498))+((r01*x2497)));
evalcond[7]=(((sj1*x2493))+((r10*x2500))+((r10*x2490*x2497))+(((-1.0)*x2492*x2506))+((sj0*x2504))+(((-1.0)*r11*x2494*x2510))+((r11*x2501)));
evalcond[8]=(((cj1*x2493))+((r12*x2508))+((r11*x2490*x2500))+(((-1.0)*r10*x2499*x2507))+((r11*x2497))+(((-1.0)*sj0*x2496))+((r10*x2494)));
=======
IkReal x14607=IKsin(j4);
IkReal x14608=IKcos(j4);
IkReal x14609=((1.0)*sj3);
IkReal x14610=(cj2*sj0);
IkReal x14611=(gconst68*sj3);
IkReal x14612=(sj1*sj2);
IkReal x14613=(cj1*cj2);
IkReal x14614=(cj3*r20);
IkReal x14615=(gconst67*r00);
IkReal x14616=(cj2*sj1);
IkReal x14617=(cj3*gconst68);
IkReal x14618=(cj1*sj2);
IkReal x14619=((1.0)*cj0);
IkReal x14620=(r12*x14607);
IkReal x14621=(gconst67*x14608);
IkReal x14622=((1.0)*x14608);
IkReal x14623=(gconst67*x14607);
IkReal x14624=((1.0)*gconst68*x14607);
evalcond[0]=((((-1.0)*r12*x14622))+(((-1.0)*x14619)));
evalcond[1]=(((r21*x14623))+(((-1.0)*r20*x14624)));
evalcond[2]=(sj0+(((-1.0)*r00*x14624))+((r01*x14623)));
evalcond[3]=(((sj0*x14618))+((sj1*x14610))+(((-1.0)*x14609*x14620)));
evalcond[4]=(((cj1*x14610))+((cj3*x14620))+(((-1.0)*sj0*x14612)));
evalcond[5]=(((r21*x14611))+((gconst67*r20*sj3))+(((-1.0)*gconst68*x14614*x14622))+x14618+x14616+((cj3*r21*x14621)));
evalcond[6]=(((gconst67*x14614))+((r21*x14617))+(((-1.0)*x14613))+x14612+(((-1.0)*r21*x14609*x14621))+((r20*x14608*x14611)));
evalcond[7]=(((r00*x14608*x14611))+((cj0*x14618))+((cj0*x14616))+((r01*x14617))+(((-1.0)*r01*x14609*x14621))+((cj3*x14615)));
evalcond[8]=((((-1.0)*x14612*x14619))+((cj0*x14613))+((cj3*r01*x14621))+((r01*x14611))+(((-1.0)*r00*x14617*x14622))+((sj3*x14615)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

<<<<<<< HEAD
}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2512 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2512)==0){
continue;
}
IkReal x2511=pow(x2512,-0.5);
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2513.value))));
IkReal gconst16=((1.0)*r11*x2511);
IkReal gconst17=((-1.0)*r10*x2511);
CheckValue<IkReal> x2514 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2514.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
IkReal x2515=((1.0)*(x2517.value));
IkReal x2516=x2511;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2515)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2515)));
IkReal gconst16=((1.0)*r11*x2516);
IkReal gconst17=((-1.0)*r10*x2516);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
IkReal x2518=((1.0)*(x2520.value));
IkReal x2519=x2511;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2518)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2518)));
IkReal gconst16=((1.0)*r11*x2519);
IkReal gconst17=((-1.0)*r10*x2519);
IkReal x2521=r12*r12;
IkReal x2522=(cj0*r02);
IkReal x2523=x2511;
IkReal x2524=(sj0*x2523);
j4eval[0]=((IKabs((x2522+((r12*sj0)))))+(IKabs(((((-1.0)*x2524))+((r12*x2522*x2523))+((x2521*x2524))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
IkReal x2525=((1.0)*(x2527.value));
IkReal x2526=x2511;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2525)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2525)));
IkReal gconst16=((1.0)*r11*x2526);
IkReal gconst17=((-1.0)*r10*x2526);
IkReal x2528=((1.0)*cj3);
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2533.valid){
continue;
}
IkReal x2529=x2533.value;
IkReal x2530=(cj3*x2529);
IkReal x2531=(x2528*x2529);
IkReal x2532=((((-1.0)*x2528*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x2530))+(((-1.0)*x2531*(r10*r10)*(r20*r20)))+(((-1.0)*x2531*(r11*r11)*(r21*r21))));
j4eval[0]=x2532;
j4eval[1]=IKsign(x2532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

=======
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2534=r21*r21;
IkReal x2535=gconst16*gconst16;
IkReal x2536=r20*r20;
IkReal x2537=gconst17*gconst17;
IkReal x2538=(gconst16*r21);
IkReal x2539=(cj1*sj2);
IkReal x2540=(cj2*sj1);
IkReal x2541=(gconst17*r20);
IkReal x2542=(gconst16*sj3);
IkReal x2543=(r21*sj3);
IkReal x2544=((1.0)*cj3);
CheckValue<IkReal> x2545=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2534*x2535*x2544))+(((2.0)*cj3*x2538*x2541))+(((-1.0)*x2536*x2537*x2544))+(((-1.0)*x2544*(r22*r22))))),-1);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal((((gconst17*r22*x2543))+((r20*r22*x2542))+((r22*x2539))+((r22*x2540)))),IkReal(((((-1.0)*r20*x2537*x2543))+(((-1.0)*x2539*x2541))+((x2538*x2540))+((gconst17*x2534*x2542))+(((-1.0)*gconst17*x2536*x2542))+((r20*x2535*x2543))+((x2538*x2539))+(((-1.0)*x2540*x2541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2545.value)))+(x2546.value));
=======
CheckValue<IkReal> x14626=IKPowWithIntegerCheck(r12,-1);
if(!x14626.valid){
continue;
}
IkReal x14625=x14626.value;
CheckValue<IkReal> x14627=IKPowWithIntegerCheck(sj3,-1);
if(!x14627.valid){
continue;
}
if( IKabs((x14625*(x14627.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14625)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14625*(x14627.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14625))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14625*(x14627.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14625));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2547=IKsin(j4);
IkReal x2548=IKcos(j4);
IkReal x2549=(cj3*gconst17);
IkReal x2550=(gconst16*r21);
IkReal x2551=(gconst17*sj3);
IkReal x2552=(gconst16*r20);
IkReal x2553=(sj1*sj2);
IkReal x2554=(cj1*cj2);
IkReal x2555=(gconst16*r10);
IkReal x2556=(cj2*sj1);
IkReal x2557=(gconst16*sj3);
IkReal x2558=(cj1*sj2);
IkReal x2559=((1.0)*cj0);
IkReal x2560=((1.0)*x2548);
IkReal x2561=(gconst16*x2547);
IkReal x2562=(cj3*x2548);
IkReal x2563=(cj3*x2547);
IkReal x2564=((1.0)*gconst17*x2547);
IkReal x2565=((1.0)*sj3*x2547);
evalcond[0]=((((-1.0)*r22*x2560))+((x2547*x2550))+(((-1.0)*r20*x2564)));
evalcond[1]=((((-1.0)*r00*x2564))+sj0+((r01*x2561))+(((-1.0)*r02*x2560)));
evalcond[2]=(((r11*x2561))+(((-1.0)*x2559))+(((-1.0)*r12*x2560))+(((-1.0)*r10*x2564)));
evalcond[3]=(((r22*x2563))+x2556+x2558+((sj3*x2552))+((x2550*x2562))+(((-1.0)*r20*x2549*x2560))+((r21*x2551)));
evalcond[4]=(x2553+((r21*x2549))+(((-1.0)*r22*x2565))+((cj3*x2552))+(((-1.0)*x2554))+(((-1.0)*sj3*x2550*x2560))+((r20*x2548*x2551)));
evalcond[5]=(((r00*x2548*x2551))+(((-1.0)*r02*x2565))+(((-1.0)*r01*x2557*x2560))+((r01*x2549))+((cj0*x2558))+((cj0*x2556))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x2551))+((r00*x2557))+(((-1.0)*r00*x2549*x2560))+((cj0*x2554))+((gconst16*r01*x2562))+(((-1.0)*x2553*x2559))+((r02*x2563)));
evalcond[7]=((((-1.0)*r11*x2557*x2560))+((r11*x2549))+((cj3*x2555))+((r10*x2548*x2551))+((sj0*x2558))+((sj0*x2556))+(((-1.0)*r12*x2565)));
evalcond[8]=((((-1.0)*sj0*x2553))+(((-1.0)*r10*x2549*x2560))+((r11*x2551))+((sj3*x2555))+((gconst16*r11*x2562))+((r12*x2563))+((sj0*x2554)));
=======
IkReal x14628=IKsin(j4);
IkReal x14629=IKcos(j4);
IkReal x14630=((1.0)*sj3);
IkReal x14631=(cj2*sj0);
IkReal x14632=(gconst68*sj3);
IkReal x14633=(sj1*sj2);
IkReal x14634=(cj1*cj2);
IkReal x14635=(cj3*r20);
IkReal x14636=(gconst67*r00);
IkReal x14637=(cj2*sj1);
IkReal x14638=(cj3*gconst68);
IkReal x14639=(cj1*sj2);
IkReal x14640=((1.0)*cj0);
IkReal x14641=(r12*x14628);
IkReal x14642=(gconst67*x14629);
IkReal x14643=((1.0)*x14629);
IkReal x14644=(gconst67*x14628);
IkReal x14645=((1.0)*gconst68*x14628);
evalcond[0]=((((-1.0)*r12*x14643))+(((-1.0)*x14640)));
evalcond[1]=(((r21*x14644))+(((-1.0)*r20*x14645)));
evalcond[2]=(sj0+((r01*x14644))+(((-1.0)*r00*x14645)));
evalcond[3]=((((-1.0)*x14630*x14641))+((sj0*x14639))+((sj1*x14631)));
evalcond[4]=((((-1.0)*sj0*x14633))+((cj1*x14631))+((cj3*x14641)));
evalcond[5]=(((cj3*r21*x14642))+((gconst67*r20*sj3))+(((-1.0)*gconst68*x14635*x14643))+x14639+x14637+((r21*x14632)));
evalcond[6]=((((-1.0)*r21*x14630*x14642))+((r20*x14629*x14632))+((gconst67*x14635))+x14633+(((-1.0)*x14634))+((r21*x14638)));
evalcond[7]=((((-1.0)*r01*x14630*x14642))+((r00*x14629*x14632))+((cj3*x14636))+((cj0*x14639))+((cj0*x14637))+((r01*x14638)));
evalcond[8]=((((-1.0)*r00*x14638*x14643))+((sj3*x14636))+((cj0*x14634))+((r01*x14632))+(((-1.0)*x14633*x14640))+((cj3*r01*x14642)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14646=((-1.0)*r00);
CheckValue<IkReal> x14647 = IKatan2WithCheck(IkReal(x14646),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14647.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14647.value))));
IkReal gconst70=x14646;
IkReal gconst71=((-1.0)*r01);
CheckValue<IkReal> x14648 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14648.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14649=((-1.0)*r00);
IkReal x14650=((-1.0)*py);
CheckValue<IkReal> x14652 = IKatan2WithCheck(IkReal(x14649),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14652.valid){
continue;
}
IkReal x14651=((1.0)*(x14652.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14650);
rxp0_2=(py*r00);
rxp1_0=(r21*x14650);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14651)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14651)));
IkReal gconst70=x14649;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14653=((-1.0)*r00);
IkReal x14654=((-1.0)*py);
CheckValue<IkReal> x14656 = IKatan2WithCheck(IkReal(x14653),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14656.valid){
continue;
}
IkReal x14655=((1.0)*(x14656.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14654);
rxp0_2=(py*r00);
rxp1_0=(r21*x14654);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14655)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14655)));
IkReal gconst70=x14653;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14657=((-1.0)*r00);
IkReal x14658=((-1.0)*py);
CheckValue<IkReal> x14660 = IKatan2WithCheck(IkReal(x14657),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14660.valid){
continue;
}
IkReal x14659=((1.0)*(x14660.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14658);
rxp0_2=(py*r00);
rxp1_0=(r21*x14658);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14659)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14659)));
IkReal gconst70=x14657;
IkReal gconst71=((-1.0)*r01);
IkReal x14661=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*x14661))+((r01*r20*x14661)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2566=((1.0)*gconst17);
CheckValue<IkReal> x2567 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2566))+((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x2566))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2567.valid){
continue;
}
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2566)))),-1);
if(!x2568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2567.value)+(((1.5707963267949)*(x2568.value))));
=======
IkReal x14662=(cj2*sj1);
IkReal x14663=(cj1*sj2);
IkReal x14664=((1.0)*gconst71);
CheckValue<IkReal> x14665=IKPowWithIntegerCheck(r12,-1);
if(!x14665.valid){
continue;
}
CheckValue<IkReal> x14666=IKPowWithIntegerCheck(sj3,-1);
if(!x14666.valid){
continue;
}
CheckValue<IkReal> x14667=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*r20*x14664))),-1);
if(!x14667.valid){
continue;
}
if( IKabs(((x14665.value)*(x14666.value)*((((sj0*x14663))+((sj0*x14662)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14667.value)*(((((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14663))+(((-1.0)*x14662))+(((-1.0)*r21*sj3*x14664)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14665.value)*(x14666.value)*((((sj0*x14663))+((sj0*x14662))))))+IKsqr(((x14667.value)*(((((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14663))+(((-1.0)*x14662))+(((-1.0)*r21*sj3*x14664))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14665.value)*(x14666.value)*((((sj0*x14663))+((sj0*x14662))))), ((x14667.value)*(((((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14663))+(((-1.0)*x14662))+(((-1.0)*r21*sj3*x14664))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2569=IKsin(j4);
IkReal x2570=IKcos(j4);
IkReal x2571=(cj3*gconst17);
IkReal x2572=(gconst16*r21);
IkReal x2573=(gconst17*sj3);
IkReal x2574=(gconst16*r20);
IkReal x2575=(sj1*sj2);
IkReal x2576=(cj1*cj2);
IkReal x2577=(gconst16*r10);
IkReal x2578=(cj2*sj1);
IkReal x2579=(gconst16*sj3);
IkReal x2580=(cj1*sj2);
IkReal x2581=((1.0)*cj0);
IkReal x2582=((1.0)*x2570);
IkReal x2583=(gconst16*x2569);
IkReal x2584=(cj3*x2570);
IkReal x2585=(cj3*x2569);
IkReal x2586=((1.0)*gconst17*x2569);
IkReal x2587=((1.0)*sj3*x2569);
evalcond[0]=((((-1.0)*r20*x2586))+((x2569*x2572))+(((-1.0)*r22*x2582)));
evalcond[1]=(((r01*x2583))+(((-1.0)*r00*x2586))+sj0+(((-1.0)*r02*x2582)));
evalcond[2]=((((-1.0)*x2581))+((r11*x2583))+(((-1.0)*r10*x2586))+(((-1.0)*r12*x2582)));
evalcond[3]=(((r21*x2573))+((r22*x2585))+x2580+x2578+((x2572*x2584))+((sj3*x2574))+(((-1.0)*r20*x2571*x2582)));
evalcond[4]=((((-1.0)*sj3*x2572*x2582))+((r21*x2571))+x2575+((cj3*x2574))+(((-1.0)*x2576))+((r20*x2570*x2573))+(((-1.0)*r22*x2587)));
evalcond[5]=(((r00*x2570*x2573))+(((-1.0)*r01*x2579*x2582))+(((-1.0)*r02*x2587))+((cj0*x2580))+((r01*x2571))+((cj0*x2578))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x2571*x2582))+((r01*x2573))+((r00*x2579))+((gconst16*r01*x2584))+((cj0*x2576))+((r02*x2585))+(((-1.0)*x2575*x2581)));
evalcond[7]=(((cj3*x2577))+(((-1.0)*r11*x2579*x2582))+((r11*x2571))+((r10*x2570*x2573))+((sj0*x2578))+((sj0*x2580))+(((-1.0)*r12*x2587)));
evalcond[8]=(((r11*x2573))+(((-1.0)*sj0*x2575))+((sj3*x2577))+((r12*x2585))+((gconst16*r11*x2584))+((sj0*x2576))+(((-1.0)*r10*x2571*x2582)));
=======
IkReal x14668=IKsin(j4);
IkReal x14669=IKcos(j4);
IkReal x14670=(cj1*sj0);
IkReal x14671=(cj3*r21);
IkReal x14672=(sj1*sj2);
IkReal x14673=(gconst71*r20);
IkReal x14674=(cj3*r00);
IkReal x14675=(r21*sj3);
IkReal x14676=(cj1*cj2);
IkReal x14677=(gconst70*r20);
IkReal x14678=(cj2*sj1);
IkReal x14679=(cj3*r01);
IkReal x14680=(gconst71*r00);
IkReal x14681=(r01*sj3);
IkReal x14682=(cj1*sj2);
IkReal x14683=((1.0)*cj0);
IkReal x14684=((1.0)*x14668);
IkReal x14685=(gconst70*x14668);
IkReal x14686=(gconst70*x14669);
IkReal x14687=((1.0)*x14669);
IkReal x14688=(sj3*x14669);
evalcond[0]=((((-1.0)*x14683))+(((-1.0)*r12*x14687)));
evalcond[1]=((((-1.0)*x14673*x14684))+((r21*x14685)));
evalcond[2]=(((r01*x14685))+sj0+(((-1.0)*x14680*x14684)));
evalcond[3]=((((-1.0)*r12*sj3*x14684))+((sj0*x14678))+((sj2*x14670)));
evalcond[4]=(((cj3*r12*x14668))+(((-1.0)*sj0*x14672))+((cj2*x14670)));
evalcond[5]=((((-1.0)*cj3*x14673*x14687))+((gconst71*x14675))+x14682+x14678+((sj3*x14677))+((x14671*x14686)));
evalcond[6]=(((x14673*x14688))+(((-1.0)*x14676))+((gconst71*x14671))+(((-1.0)*x14675*x14686))+x14672+((cj3*x14677)));
evalcond[7]=(((gconst70*x14674))+((x14680*x14688))+((cj0*x14678))+((gconst71*x14679))+(((-1.0)*x14681*x14686))+((cj0*x14682)));
evalcond[8]=(((x14679*x14686))+((cj0*x14676))+(((-1.0)*x14672*x14683))+(((-1.0)*gconst71*x14674*x14687))+((gconst70*r00*sj3))+((gconst71*x14681)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2588=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2588.valid){
continue;
}
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2588.value)))+(x2589.value));
=======
CheckValue<IkReal> x14690=IKPowWithIntegerCheck(r12,-1);
if(!x14690.valid){
continue;
}
IkReal x14689=x14690.value;
CheckValue<IkReal> x14691=IKPowWithIntegerCheck(cj3,-1);
if(!x14691.valid){
continue;
}
if( IKabs((x14689*(x14691.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14689)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14689*(x14691.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14689))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14689*(x14691.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14689));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2590=IKsin(j4);
IkReal x2591=IKcos(j4);
IkReal x2592=(cj3*gconst17);
IkReal x2593=(gconst16*r21);
IkReal x2594=(gconst17*sj3);
IkReal x2595=(gconst16*r20);
IkReal x2596=(sj1*sj2);
IkReal x2597=(cj1*cj2);
IkReal x2598=(gconst16*r10);
IkReal x2599=(cj2*sj1);
IkReal x2600=(gconst16*sj3);
IkReal x2601=(cj1*sj2);
IkReal x2602=((1.0)*cj0);
IkReal x2603=((1.0)*x2591);
IkReal x2604=(gconst16*x2590);
IkReal x2605=(cj3*x2591);
IkReal x2606=(cj3*x2590);
IkReal x2607=((1.0)*gconst17*x2590);
IkReal x2608=((1.0)*sj3*x2590);
evalcond[0]=((((-1.0)*r22*x2603))+(((-1.0)*r20*x2607))+((x2590*x2593)));
evalcond[1]=(sj0+(((-1.0)*r02*x2603))+((r01*x2604))+(((-1.0)*r00*x2607)));
evalcond[2]=((((-1.0)*r10*x2607))+(((-1.0)*r12*x2603))+(((-1.0)*x2602))+((r11*x2604)));
evalcond[3]=(x2599+((sj3*x2595))+(((-1.0)*r20*x2592*x2603))+((x2593*x2605))+((r22*x2606))+x2601+((r21*x2594)));
evalcond[4]=(x2596+((r20*x2591*x2594))+(((-1.0)*sj3*x2593*x2603))+((cj3*x2595))+(((-1.0)*x2597))+(((-1.0)*r22*x2608))+((r21*x2592)));
evalcond[5]=(((r01*x2592))+((r00*x2591*x2594))+(((-1.0)*r01*x2600*x2603))+((cj0*x2599))+(((-1.0)*r02*x2608))+((cj0*x2601))+((cj3*gconst16*r00)));
evalcond[6]=(((gconst16*r01*x2605))+(((-1.0)*x2596*x2602))+((r01*x2594))+((cj0*x2597))+(((-1.0)*r00*x2592*x2603))+((r02*x2606))+((r00*x2600)));
evalcond[7]=(((r10*x2591*x2594))+((cj3*x2598))+(((-1.0)*r11*x2600*x2603))+(((-1.0)*r12*x2608))+((sj0*x2601))+((r11*x2592))+((sj0*x2599)));
evalcond[8]=(((gconst16*r11*x2605))+((sj3*x2598))+(((-1.0)*sj0*x2596))+((r11*x2594))+((r12*x2606))+((sj0*x2597))+(((-1.0)*r10*x2592*x2603)));
=======
IkReal x14692=IKsin(j4);
IkReal x14693=IKcos(j4);
IkReal x14694=(cj1*sj0);
IkReal x14695=(cj3*r21);
IkReal x14696=(sj1*sj2);
IkReal x14697=(gconst71*r20);
IkReal x14698=(cj3*r00);
IkReal x14699=(r21*sj3);
IkReal x14700=(cj1*cj2);
IkReal x14701=(gconst70*r20);
IkReal x14702=(cj2*sj1);
IkReal x14703=(cj3*r01);
IkReal x14704=(gconst71*r00);
IkReal x14705=(r01*sj3);
IkReal x14706=(cj1*sj2);
IkReal x14707=((1.0)*cj0);
IkReal x14708=((1.0)*x14692);
IkReal x14709=(gconst70*x14692);
IkReal x14710=(gconst70*x14693);
IkReal x14711=((1.0)*x14693);
IkReal x14712=(sj3*x14693);
evalcond[0]=((((-1.0)*x14707))+(((-1.0)*r12*x14711)));
evalcond[1]=((((-1.0)*x14697*x14708))+((r21*x14709)));
evalcond[2]=(sj0+((r01*x14709))+(((-1.0)*x14704*x14708)));
evalcond[3]=(((sj0*x14702))+(((-1.0)*r12*sj3*x14708))+((sj2*x14694)));
evalcond[4]=((((-1.0)*sj0*x14696))+((cj2*x14694))+((cj3*r12*x14692)));
evalcond[5]=(((x14695*x14710))+x14706+x14702+((sj3*x14701))+((gconst71*x14699))+(((-1.0)*cj3*x14697*x14711)));
evalcond[6]=((((-1.0)*x14699*x14710))+(((-1.0)*x14700))+((x14697*x14712))+((cj3*x14701))+x14696+((gconst71*x14695)));
evalcond[7]=(((cj0*x14706))+((cj0*x14702))+((gconst71*x14703))+((gconst70*x14698))+(((-1.0)*x14705*x14710))+((x14704*x14712)));
evalcond[8]=(((cj0*x14700))+((gconst71*x14705))+(((-1.0)*gconst71*x14698*x14711))+((x14703*x14710))+(((-1.0)*x14696*x14707))+((gconst70*r00*sj3)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

<<<<<<< HEAD
}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2609=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2609;
j4eval[1]=IKsign(x2609);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2610=((1.0)*cj5);
IkReal x2611=((((-1.0)*r21*x2610))+(((-1.0)*r20*sj5)));
j4eval[0]=x2611;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2610))+((r01*sj5))))));
j4eval[2]=IKsign(x2611);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2612=cj5*cj5;
IkReal x2613=(cj3*r21);
IkReal x2614=(cj5*sj5);
IkReal x2615=((1.0)*cj3);
IkReal x2616=(((r10*x2613*x2614))+(((-1.0)*r12*r22*x2615))+((cj3*r11*r20*x2614))+(((-1.0)*r11*x2613))+((r11*x2612*x2613))+(((-1.0)*r10*r20*x2612*x2615)));
j4eval[0]=x2616;
j4eval[1]=IKsign(x2616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

=======
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2617=cj5*cj5;
IkReal x2618=((1.0)*cj3);
IkReal x2619=(r10*r21);
IkReal x2620=(cj5*sj5);
IkReal x2621=(r11*r21);
IkReal x2622=(r11*r20);
IkReal x2623=(r22*sj3);
IkReal x2624=(r10*r20);
IkReal x2625=((1.0)*sj3*x2617);
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal((((r10*sj5*x2623))+((cj5*r11*x2623)))),IkReal(((((-1.0)*x2619*x2625))+(((-1.0)*x2622*x2625))+(((-1.0)*sj3*x2620*x2624))+((sj3*x2620*x2621))+((sj3*x2619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2618))+(((-1.0)*x2618*x2621))+((cj3*x2620*x2622))+((cj3*x2619*x2620))+((cj3*x2617*x2621))+(((-1.0)*x2617*x2618*x2624)))),-1);
if(!x2627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2626.value)+(((1.5707963267949)*(x2627.value))));
=======
CheckValue<IkReal> x14714=IKPowWithIntegerCheck(r12,-1);
if(!x14714.valid){
continue;
}
IkReal x14713=x14714.value;
CheckValue<IkReal> x14715=IKPowWithIntegerCheck(sj3,-1);
if(!x14715.valid){
continue;
}
if( IKabs((x14713*(x14715.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14713)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14713*(x14715.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14713))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14713*(x14715.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14713));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2628=IKsin(j4);
IkReal x2629=IKcos(j4);
IkReal x2630=(cj2*sj1);
IkReal x2631=(cj1*sj2);
IkReal x2632=(cj5*sj3);
IkReal x2633=(cj5*r10);
IkReal x2634=(r00*sj5);
IkReal x2635=(sj1*sj2);
IkReal x2636=(r11*sj5);
IkReal x2637=(cj3*cj5);
IkReal x2638=(cj3*sj5);
IkReal x2639=(r21*sj5);
IkReal x2640=(cj1*cj2);
IkReal x2641=(sj3*sj5);
IkReal x2642=(r01*sj5);
IkReal x2643=((1.0)*x2629);
IkReal x2644=((1.0)*x2628);
IkReal x2645=(cj3*x2628);
IkReal x2646=(cj3*x2629);
IkReal x2647=(x2631+x2630);
evalcond[0]=((((-1.0)*r22*x2643))+(((-1.0)*cj5*r20*x2644))+((x2628*x2639)));
evalcond[1]=((((-1.0)*r02*x2643))+((x2628*x2642))+(((-1.0)*cj5*r00*x2644)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2643))+((x2628*x2636))+(((-1.0)*x2633*x2644)));
evalcond[3]=(((r12*x2645))+((r11*x2632))+((r10*x2641))+((x2636*x2646))+(((-1.0)*cj3*x2633*x2643)));
evalcond[4]=(((r11*x2637))+((r10*x2638))+((r10*x2629*x2632))+(((-1.0)*r12*sj3*x2644))+(((-1.0)*sj3*x2636*x2643)));
evalcond[5]=(((r21*x2632))+((r22*x2645))+(((-1.0)*r20*x2637*x2643))+((r21*x2629*x2638))+x2647+((r20*x2641)));
evalcond[6]=(((cj3*x2634))+(((-1.0)*r01*x2641*x2643))+((r00*x2629*x2632))+((r01*x2637))+(((-1.0)*r02*sj3*x2644))+x2647);
evalcond[7]=((((-1.0)*r00*x2637*x2643))+((r01*x2629*x2638))+((r02*x2645))+((sj3*x2634))+((r01*x2632))+(((-1.0)*x2635))+x2640);
evalcond[8]=((((-1.0)*r22*sj3*x2644))+((r21*x2637))+((r20*x2638))+((r20*x2629*x2632))+(((-1.0)*x2640))+(((-1.0)*sj3*x2639*x2643))+x2635);
=======
IkReal x14716=IKsin(j4);
IkReal x14717=IKcos(j4);
IkReal x14718=(cj1*sj0);
IkReal x14719=(cj3*r21);
IkReal x14720=(sj1*sj2);
IkReal x14721=(gconst71*r20);
IkReal x14722=(cj3*r00);
IkReal x14723=(r21*sj3);
IkReal x14724=(cj1*cj2);
IkReal x14725=(gconst70*r20);
IkReal x14726=(cj2*sj1);
IkReal x14727=(cj3*r01);
IkReal x14728=(gconst71*r00);
IkReal x14729=(r01*sj3);
IkReal x14730=(cj1*sj2);
IkReal x14731=((1.0)*cj0);
IkReal x14732=((1.0)*x14716);
IkReal x14733=(gconst70*x14716);
IkReal x14734=(gconst70*x14717);
IkReal x14735=((1.0)*x14717);
IkReal x14736=(sj3*x14717);
evalcond[0]=((((-1.0)*r12*x14735))+(((-1.0)*x14731)));
evalcond[1]=((((-1.0)*x14721*x14732))+((r21*x14733)));
evalcond[2]=(((r01*x14733))+(((-1.0)*x14728*x14732))+sj0);
evalcond[3]=(((sj0*x14726))+((sj2*x14718))+(((-1.0)*r12*sj3*x14732)));
evalcond[4]=(((cj2*x14718))+(((-1.0)*sj0*x14720))+((cj3*r12*x14716)));
evalcond[5]=((((-1.0)*cj3*x14721*x14735))+((x14719*x14734))+((sj3*x14725))+x14726+x14730+((gconst71*x14723)));
evalcond[6]=((((-1.0)*x14724))+(((-1.0)*x14723*x14734))+((x14721*x14736))+((cj3*x14725))+x14720+((gconst71*x14719)));
evalcond[7]=(((cj0*x14730))+(((-1.0)*x14729*x14734))+((cj0*x14726))+((x14728*x14736))+((gconst70*x14722))+((gconst71*x14727)));
evalcond[8]=((((-1.0)*gconst71*x14722*x14735))+((cj0*x14724))+((x14727*x14734))+((gconst70*r00*sj3))+(((-1.0)*x14720*x14731))+((gconst71*x14729)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14737=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14737);
rxp0_2=(py*r00);
rxp1_0=(r21*x14737);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14738=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14738);
rxp0_2=(py*r00);
rxp1_0=(r21*x14738);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14739=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14739);
rxp0_2=(py*r00);
rxp1_0=(r21*x14739);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2648=((1.0)*cj5);
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2648))+(((-1.0)*r20*sj5)))),-1);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2649.value)))+(x2650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14742=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14742.valid){
continue;
}
IkReal x14740=x14742.value;
IkReal x14741=((1.0)*cj0*x14740);
cj4array[0]=((((-1.0)*cj1*sj2*x14741))+(((-1.0)*cj2*sj1*x14741)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2651=IKsin(j4);
IkReal x2652=IKcos(j4);
IkReal x2653=(cj2*sj1);
IkReal x2654=(cj1*sj2);
IkReal x2655=(cj5*sj3);
IkReal x2656=(cj5*r10);
IkReal x2657=(r00*sj5);
IkReal x2658=(sj1*sj2);
IkReal x2659=(r11*sj5);
IkReal x2660=(cj3*cj5);
IkReal x2661=(cj3*sj5);
IkReal x2662=(r21*sj5);
IkReal x2663=(cj1*cj2);
IkReal x2664=(sj3*sj5);
IkReal x2665=(r01*sj5);
IkReal x2666=((1.0)*x2652);
IkReal x2667=((1.0)*x2651);
IkReal x2668=(cj3*x2651);
IkReal x2669=(cj3*x2652);
IkReal x2670=(x2653+x2654);
evalcond[0]=((((-1.0)*cj5*r20*x2667))+((x2651*x2662))+(((-1.0)*r22*x2666)));
evalcond[1]=((((-1.0)*r02*x2666))+((x2651*x2665))+(((-1.0)*cj5*r00*x2667)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2666))+((x2651*x2659))+(((-1.0)*x2656*x2667)));
evalcond[3]=(((r11*x2655))+((x2659*x2669))+((r12*x2668))+((r10*x2664))+(((-1.0)*cj3*x2656*x2666)));
evalcond[4]=((((-1.0)*r12*sj3*x2667))+((r10*x2652*x2655))+((r10*x2661))+(((-1.0)*sj3*x2659*x2666))+((r11*x2660)));
evalcond[5]=(((r21*x2655))+((r21*x2652*x2661))+((r22*x2668))+(((-1.0)*r20*x2660*x2666))+((r20*x2664))+x2670);
evalcond[6]=((((-1.0)*r01*x2664*x2666))+((r01*x2660))+((cj3*x2657))+x2670+((r00*x2652*x2655))+(((-1.0)*r02*sj3*x2667)));
evalcond[7]=((((-1.0)*r00*x2660*x2666))+((r02*x2668))+((r01*x2655))+((sj3*x2657))+((r01*x2652*x2661))+(((-1.0)*x2658))+x2663);
evalcond[8]=((((-1.0)*x2663))+((r21*x2660))+(((-1.0)*r22*sj3*x2667))+((r20*x2661))+(((-1.0)*sj3*x2662*x2666))+x2658+((r20*x2652*x2655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14743=IKsin(j4);
IkReal x14744=IKcos(j4);
IkReal x14745=(r21*sj5);
IkReal x14746=((1.0)*x14744);
IkReal x14747=((1.0)*cj5*x14743);
evalcond[0]=((-1.0)*r12*x14743);
evalcond[1]=((((-1.0)*r12*x14746))+(((-1.0)*cj0)));
evalcond[2]=(((x14743*x14745))+(((-1.0)*r20*x14747)));
evalcond[3]=((((-1.0)*r00*x14747))+((r01*sj5*x14743)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14745*x14746))+((cj5*r20*x14744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2671.value)+(((1.5707963267949)*(x2672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14749=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14749.valid){
continue;
}
IkReal x14748=x14749.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14748))+((cj1*cj2*x14748)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(cj2*sj1);
IkReal x2676=(cj1*sj2);
IkReal x2677=(cj5*sj3);
IkReal x2678=(cj5*r10);
IkReal x2679=(r00*sj5);
IkReal x2680=(sj1*sj2);
IkReal x2681=(r11*sj5);
IkReal x2682=(cj3*cj5);
IkReal x2683=(cj3*sj5);
IkReal x2684=(r21*sj5);
IkReal x2685=(cj1*cj2);
IkReal x2686=(sj3*sj5);
IkReal x2687=(r01*sj5);
IkReal x2688=((1.0)*x2674);
IkReal x2689=((1.0)*x2673);
IkReal x2690=(cj3*x2673);
IkReal x2691=(cj3*x2674);
IkReal x2692=(x2675+x2676);
evalcond[0]=(((x2673*x2684))+(((-1.0)*cj5*r20*x2689))+(((-1.0)*r22*x2688)));
evalcond[1]=((((-1.0)*r02*x2688))+((x2673*x2687))+(((-1.0)*cj5*r00*x2689)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2688))+((x2673*x2681))+(((-1.0)*x2678*x2689)));
evalcond[3]=((((-1.0)*cj3*x2678*x2688))+((r12*x2690))+((r10*x2686))+((x2681*x2691))+((r11*x2677)));
evalcond[4]=(((r11*x2682))+((r10*x2683))+(((-1.0)*sj3*x2681*x2688))+(((-1.0)*r12*sj3*x2689))+((r10*x2674*x2677)));
evalcond[5]=((((-1.0)*r20*x2682*x2688))+((r22*x2690))+((r21*x2677))+((r21*x2674*x2683))+((r20*x2686))+x2692);
evalcond[6]=((((-1.0)*r02*sj3*x2689))+(((-1.0)*r01*x2686*x2688))+((r00*x2674*x2677))+((r01*x2682))+((cj3*x2679))+x2692);
evalcond[7]=(((r01*x2674*x2683))+(((-1.0)*r00*x2682*x2688))+((sj3*x2679))+(((-1.0)*x2680))+((r01*x2677))+((r02*x2690))+x2685);
evalcond[8]=(((r20*x2674*x2677))+(((-1.0)*sj3*x2684*x2688))+((r21*x2682))+(((-1.0)*r22*sj3*x2689))+(((-1.0)*x2685))+((r20*x2683))+x2680);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14750=IKsin(j4);
IkReal x14751=IKcos(j4);
IkReal x14752=(cj5*r00);
IkReal x14753=((1.0)*x14750);
IkReal x14754=(sj5*x14750);
IkReal x14755=((1.0)*x14751);
evalcond[0]=((-1.0)*r12*x14750);
evalcond[1]=((((-1.0)*r12*x14755))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14753))+((r21*x14754)));
evalcond[3]=((((-1.0)*x14752*x14753))+((r01*x14754)));
evalcond[4]=((((-1.0)*r01*sj5*x14755))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x14751*x14752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

<<<<<<< HEAD
}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2693=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2693;
j4eval[1]=IKsign(x2693);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2694=((1.0)*cj5);
IkReal x2695=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2694)));
j4eval[0]=x2695;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2694)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2696=cj5*cj5;
IkReal x2697=(cj3*r21);
IkReal x2698=(cj5*sj5);
IkReal x2699=((1.0)*cj3);
IkReal x2700=((((-1.0)*r12*r22*x2699))+((r11*x2696*x2697))+((r10*x2697*x2698))+(((-1.0)*r10*r20*x2696*x2699))+(((-1.0)*r11*x2697))+((cj3*r11*r20*x2698)));
j4eval[0]=x2700;
j4eval[1]=IKsign(x2700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2701=cj5*cj5;
IkReal x2702=((1.0)*cj3);
IkReal x2703=(r10*r21);
IkReal x2704=(cj5*sj5);
IkReal x2705=(r11*r21);
IkReal x2706=(r11*r20);
IkReal x2707=(r22*sj3);
IkReal x2708=(r10*r20);
IkReal x2709=((1.0)*sj3*x2701);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal((((r10*sj5*x2707))+((cj5*r11*x2707)))),IkReal(((((-1.0)*sj3*x2704*x2708))+((sj3*x2704*x2705))+(((-1.0)*x2706*x2709))+((sj3*x2703))+(((-1.0)*x2703*x2709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(IKsign((((cj3*x2703*x2704))+(((-1.0)*x2702*x2705))+(((-1.0)*r12*r22*x2702))+((cj3*x2701*x2705))+(((-1.0)*x2701*x2702*x2708))+((cj3*x2704*x2706)))),-1);
if(!x2711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2710.value)+(((1.5707963267949)*(x2711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(r12,-1);
if(!x14756.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14756.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2712=IKsin(j4);
IkReal x2713=IKcos(j4);
IkReal x2714=(sj1*sj2);
IkReal x2715=(cj5*sj3);
IkReal x2716=(cj5*r10);
IkReal x2717=(r00*sj5);
IkReal x2718=(r11*sj5);
IkReal x2719=(cj3*cj5);
IkReal x2720=((1.0)*cj1);
IkReal x2721=(cj3*sj5);
IkReal x2722=(r21*sj5);
IkReal x2723=(cj2*sj1);
IkReal x2724=(sj3*sj5);
IkReal x2725=(r01*sj5);
IkReal x2726=(cj2*x2720);
IkReal x2727=((1.0)*x2713);
IkReal x2728=((1.0)*x2712);
IkReal x2729=(cj3*x2712);
IkReal x2730=(cj3*x2713);
evalcond[0]=(((x2712*x2722))+(((-1.0)*r22*x2727))+(((-1.0)*cj5*r20*x2728)));
evalcond[1]=((((-1.0)*cj5*r00*x2728))+((x2712*x2725))+(((-1.0)*r02*x2727)));
evalcond[2]=((1.0)+((x2712*x2718))+(((-1.0)*r12*x2727))+(((-1.0)*x2716*x2728)));
evalcond[3]=(((x2718*x2730))+((r10*x2724))+((r11*x2715))+(((-1.0)*cj3*x2716*x2727))+((r12*x2729)));
evalcond[4]=(((r10*x2713*x2715))+(((-1.0)*sj3*x2718*x2727))+((r10*x2721))+((r11*x2719))+(((-1.0)*r12*sj3*x2728)));
evalcond[5]=(x2723+((r22*x2729))+((cj1*sj2))+(((-1.0)*r20*x2719*x2727))+((r20*x2724))+((r21*x2713*x2721))+((r21*x2715)));
evalcond[6]=(x2714+((r02*x2729))+((sj3*x2717))+(((-1.0)*r00*x2719*x2727))+(((-1.0)*x2726))+((r01*x2713*x2721))+((r01*x2715)));
evalcond[7]=(x2714+((r20*x2713*x2715))+(((-1.0)*r22*sj3*x2728))+(((-1.0)*sj3*x2722*x2727))+((r20*x2721))+(((-1.0)*x2726))+((r21*x2719)));
evalcond[8]=(((cj3*x2717))+(((-1.0)*r01*x2724*x2727))+(((-1.0)*x2723))+(((-1.0)*r02*sj3*x2728))+((r00*x2713*x2715))+((r01*x2719))+(((-1.0)*sj2*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14757=IKsin(j4);
IkReal x14758=IKcos(j4);
IkReal x14759=(cj5*r00);
IkReal x14760=(cj5*r20);
IkReal x14761=(r21*sj5);
IkReal x14762=(r01*sj5);
IkReal x14763=((1.0)*x14757);
IkReal x14764=((1.0)*x14758);
evalcond[0]=((-1.0)*r12*x14757);
evalcond[1]=((((-1.0)*x14760*x14763))+((x14757*x14761)));
evalcond[2]=((((-1.0)*x14759*x14763))+((x14757*x14762)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14758*x14760))+(((-1.0)*x14761*x14764)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x14758*x14759))+(((-1.0)*x14762*x14764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14765=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14765);
rxp0_2=(py*r00);
rxp1_0=(r21*x14765);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14766=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14766);
rxp0_2=(py*r00);
rxp1_0=(r21*x14766);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14767=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14767);
rxp0_2=(py*r00);
rxp1_0=(r21*x14767);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2731=((1.0)*cj5);
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2731)))),-1);
if(!x2732.valid){
continue;
}
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2732.value)))+(x2733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14770=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14770.valid){
continue;
}
IkReal x14768=x14770.value;
IkReal x14769=((1.0)*cj0*x14768);
cj4array[0]=((((-1.0)*cj1*sj2*x14769))+(((-1.0)*cj2*sj1*x14769)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2734=IKsin(j4);
IkReal x2735=IKcos(j4);
IkReal x2736=(sj1*sj2);
IkReal x2737=(cj5*sj3);
IkReal x2738=(cj5*r10);
IkReal x2739=(r00*sj5);
IkReal x2740=(r11*sj5);
IkReal x2741=(cj3*cj5);
IkReal x2742=((1.0)*cj1);
IkReal x2743=(cj3*sj5);
IkReal x2744=(r21*sj5);
IkReal x2745=(cj2*sj1);
IkReal x2746=(sj3*sj5);
IkReal x2747=(r01*sj5);
IkReal x2748=(cj2*x2742);
IkReal x2749=((1.0)*x2735);
IkReal x2750=((1.0)*x2734);
IkReal x2751=(cj3*x2734);
IkReal x2752=(cj3*x2735);
evalcond[0]=(((x2734*x2744))+(((-1.0)*r22*x2749))+(((-1.0)*cj5*r20*x2750)));
evalcond[1]=(((x2734*x2747))+(((-1.0)*cj5*r00*x2750))+(((-1.0)*r02*x2749)));
evalcond[2]=((1.0)+((x2734*x2740))+(((-1.0)*x2738*x2750))+(((-1.0)*r12*x2749)));
evalcond[3]=((((-1.0)*cj3*x2738*x2749))+((r12*x2751))+((r10*x2746))+((x2740*x2752))+((r11*x2737)));
evalcond[4]=(((r11*x2741))+(((-1.0)*sj3*x2740*x2749))+((r10*x2743))+(((-1.0)*r12*sj3*x2750))+((r10*x2735*x2737)));
evalcond[5]=(x2745+((r22*x2751))+((cj1*sj2))+((r21*x2737))+((r21*x2735*x2743))+((r20*x2746))+(((-1.0)*r20*x2741*x2749)));
evalcond[6]=(x2736+((sj3*x2739))+((r01*x2737))+((r01*x2735*x2743))+(((-1.0)*r00*x2741*x2749))+(((-1.0)*x2748))+((r02*x2751)));
evalcond[7]=(x2736+(((-1.0)*sj3*x2744*x2749))+((r21*x2741))+((r20*x2743))+((r20*x2735*x2737))+(((-1.0)*r22*sj3*x2750))+(((-1.0)*x2748)));
evalcond[8]=((((-1.0)*r01*x2746*x2749))+(((-1.0)*r02*sj3*x2750))+(((-1.0)*sj2*x2742))+((cj3*x2739))+((r01*x2741))+((r00*x2735*x2737))+(((-1.0)*x2745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14771=IKsin(j4);
IkReal x14772=IKcos(j4);
IkReal x14773=(r21*sj5);
IkReal x14774=((1.0)*x14772);
IkReal x14775=((1.0)*cj5*x14771);
evalcond[0]=(r12*x14771);
evalcond[1]=((((-1.0)*r12*x14774))+(((-1.0)*cj0)));
evalcond[2]=(((x14771*x14773))+(((-1.0)*r20*x14775)));
evalcond[3]=((((-1.0)*r00*x14775))+((r01*sj5*x14771)));
evalcond[4]=((((-1.0)*cj5*r20*x14774))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14772*x14773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
<<<<<<< HEAD
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2753.valid){
continue;
}
CheckValue<IkReal> x2754 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2753.value)))+(x2754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
=======
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14777=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14777.valid){
continue;
}
IkReal x14776=x14777.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14776))+((cj1*cj2*x14776)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14778=IKsin(j4);
IkReal x14779=IKcos(j4);
IkReal x14780=(r01*sj5);
IkReal x14781=((1.0)*cj5*r00);
evalcond[0]=(r12*x14778);
evalcond[1]=((((-1.0)*r12*x14779))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x14778))+(((-1.0)*cj5*r20*x14778)));
evalcond[3]=(((x14778*x14780))+(((-1.0)*x14778*x14781)));
evalcond[4]=((((-1.0)*x14779*x14781))+((x14779*x14780))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14782=IKPowWithIntegerCheck(r12,-1);
if(!x14782.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14782.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
<<<<<<< HEAD
IkReal evalcond[9];
IkReal x2755=IKsin(j4);
IkReal x2756=IKcos(j4);
IkReal x2757=(sj1*sj2);
IkReal x2758=(cj5*sj3);
IkReal x2759=(cj5*r10);
IkReal x2760=(r00*sj5);
IkReal x2761=(r11*sj5);
IkReal x2762=(cj3*cj5);
IkReal x2763=((1.0)*cj1);
IkReal x2764=(cj3*sj5);
IkReal x2765=(r21*sj5);
IkReal x2766=(cj2*sj1);
IkReal x2767=(sj3*sj5);
IkReal x2768=(r01*sj5);
IkReal x2769=(cj2*x2763);
IkReal x2770=((1.0)*x2756);
IkReal x2771=((1.0)*x2755);
IkReal x2772=(cj3*x2755);
IkReal x2773=(cj3*x2756);
evalcond[0]=((((-1.0)*cj5*r20*x2771))+((x2755*x2765))+(((-1.0)*r22*x2770)));
evalcond[1]=((((-1.0)*r02*x2770))+(((-1.0)*cj5*r00*x2771))+((x2755*x2768)));
evalcond[2]=((1.0)+(((-1.0)*x2759*x2771))+(((-1.0)*r12*x2770))+((x2755*x2761)));
evalcond[3]=(((r11*x2758))+((x2761*x2773))+((r10*x2767))+(((-1.0)*cj3*x2759*x2770))+((r12*x2772)));
evalcond[4]=(((r10*x2756*x2758))+(((-1.0)*sj3*x2761*x2770))+(((-1.0)*r12*sj3*x2771))+((r10*x2764))+((r11*x2762)));
evalcond[5]=(x2766+((r21*x2756*x2764))+((r22*x2772))+((r21*x2758))+(((-1.0)*r20*x2762*x2770))+((cj1*sj2))+((r20*x2767)));
evalcond[6]=(x2757+(((-1.0)*x2769))+(((-1.0)*r00*x2762*x2770))+((r01*x2758))+((sj3*x2760))+((r02*x2772))+((r01*x2756*x2764)));
evalcond[7]=(x2757+((r20*x2764))+(((-1.0)*x2769))+(((-1.0)*r22*sj3*x2771))+((r21*x2762))+((r20*x2756*x2758))+(((-1.0)*sj3*x2765*x2770)));
evalcond[8]=((((-1.0)*x2766))+((r01*x2762))+(((-1.0)*sj2*x2763))+((cj3*x2760))+((r00*x2756*x2758))+(((-1.0)*r02*sj3*x2771))+(((-1.0)*r01*x2767*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
=======
IkReal evalcond[5];
IkReal x14783=IKsin(j4);
IkReal x14784=IKcos(j4);
IkReal x14785=(sj5*x14784);
IkReal x14786=(sj5*x14783);
IkReal x14787=((1.0)*cj5*x14783);
IkReal x14788=((1.0)*cj5*x14784);
evalcond[0]=(r12*x14783);
evalcond[1]=((((-1.0)*r20*x14787))+((r21*x14786)));
evalcond[2]=(((r01*x14786))+(((-1.0)*r00*x14787)));
evalcond[3]=((((-1.0)*r20*x14788))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x14785)));
evalcond[4]=(((r01*x14785))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r00*x14788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
<<<<<<< HEAD
IkReal j4eval[2];
IkReal x2774=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2774);
rxp0_2=(py*r00);
rxp1_0=(r21*x2774);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2775=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2775);
rxp0_2=(py*r00);
rxp1_0=(r21*x2775);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2776=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2776)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2777=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2777);
rxp0_2=(py*r00);
rxp1_0=(r21*x2777);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached
=======
}
}
}
}
}
}
}
}
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(r12,-1);
if(!x2779.valid){
continue;
}
IkReal x2778=x2779.value;
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(sj3,-1);
if(!x2780.valid){
continue;
}
if( IKabs((x2778*(x2780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2778)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2778*(x2780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2778))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2778*(x2780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2778));
=======
CheckValue<IkReal> x14790=IKPowWithIntegerCheck(r12,-1);
if(!x14790.valid){
continue;
}
IkReal x14789=x14790.value;
CheckValue<IkReal> x14791=IKPowWithIntegerCheck(sj3,-1);
if(!x14791.valid){
continue;
}
if( IKabs((x14789*(x14791.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14789)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14789*(x14791.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14789))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14789*(x14791.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14789));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2781=IKsin(j4);
IkReal x2782=IKcos(j4);
IkReal x2783=(cj2*sj0);
IkReal x2784=(sj1*sj2);
IkReal x2785=(cj5*sj3);
IkReal x2786=(cj3*cj5);
IkReal x2787=(cj1*cj2);
IkReal x2788=(r21*sj5);
IkReal x2789=(r00*sj5);
IkReal x2790=(cj2*sj1);
IkReal x2791=(r01*sj5);
IkReal x2792=(r20*sj5);
IkReal x2793=(cj1*sj2);
IkReal x2794=((1.0)*cj0);
IkReal x2795=((1.0)*x2781);
IkReal x2796=(r20*x2782);
IkReal x2797=(r00*x2782);
IkReal x2798=(cj3*x2782);
IkReal x2799=((1.0)*x2782);
evalcond[0]=((((-1.0)*x2794))+(((-1.0)*r12*x2799)));
evalcond[1]=(((x2781*x2788))+(((-1.0)*cj5*r20*x2795)));
evalcond[2]=(((x2781*x2791))+sj0+(((-1.0)*cj5*r00*x2795)));
evalcond[3]=(((sj1*x2783))+((sj0*x2793))+(((-1.0)*r12*sj3*x2795)));
evalcond[4]=(((cj3*r12*x2781))+(((-1.0)*sj0*x2784))+((cj1*x2783)));
evalcond[5]=(x2793+x2790+((r21*x2785))+(((-1.0)*x2786*x2796))+((sj3*x2792))+((x2788*x2798)));
evalcond[6]=(x2784+((r21*x2786))+((x2785*x2796))+((cj3*x2792))+(((-1.0)*x2787))+(((-1.0)*sj3*x2788*x2799)));
evalcond[7]=(((x2785*x2797))+((cj3*x2789))+(((-1.0)*sj3*x2791*x2799))+((r01*x2786))+((cj0*x2790))+((cj0*x2793)));
evalcond[8]=((((-1.0)*x2784*x2794))+(((-1.0)*x2786*x2797))+((sj3*x2789))+((x2791*x2798))+((r01*x2785))+((cj0*x2787)));
=======
IkReal x14792=IKsin(j4);
IkReal x14793=IKcos(j4);
IkReal x14794=(cj2*sj0);
IkReal x14795=(sj1*sj2);
IkReal x14796=(cj5*sj3);
IkReal x14797=(cj3*cj5);
IkReal x14798=(cj1*cj2);
IkReal x14799=(r21*sj5);
IkReal x14800=(r00*sj5);
IkReal x14801=(cj2*sj1);
IkReal x14802=(r01*sj5);
IkReal x14803=(r20*sj5);
IkReal x14804=(cj1*sj2);
IkReal x14805=((1.0)*cj0);
IkReal x14806=((1.0)*x14792);
IkReal x14807=(r20*x14793);
IkReal x14808=(r00*x14793);
IkReal x14809=(cj3*x14793);
IkReal x14810=((1.0)*x14793);
evalcond[0]=((((-1.0)*x14805))+(((-1.0)*r12*x14810)));
evalcond[1]=(((x14792*x14799))+(((-1.0)*cj5*r20*x14806)));
evalcond[2]=((((-1.0)*cj5*r00*x14806))+sj0+((x14792*x14802)));
evalcond[3]=(((sj1*x14794))+((sj0*x14804))+(((-1.0)*r12*sj3*x14806)));
evalcond[4]=((((-1.0)*sj0*x14795))+((cj3*r12*x14792))+((cj1*x14794)));
evalcond[5]=(((sj3*x14803))+(((-1.0)*x14797*x14807))+x14801+x14804+((x14799*x14809))+((r21*x14796)));
evalcond[6]=(((cj3*x14803))+(((-1.0)*x14798))+((x14796*x14807))+x14795+((r21*x14797))+(((-1.0)*sj3*x14799*x14810)));
evalcond[7]=(((cj3*x14800))+(((-1.0)*sj3*x14802*x14810))+((r01*x14797))+((x14796*x14808))+((cj0*x14801))+((cj0*x14804)));
evalcond[8]=(((x14802*x14809))+((sj3*x14800))+(((-1.0)*x14797*x14808))+((cj0*x14798))+((r01*x14796))+(((-1.0)*x14795*x14805)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2800=((1.0)*sj3);
IkReal x2801=((1.0)*cj5);
CheckValue<IkReal> x2802=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2801))),-1);
if(!x2802.valid){
continue;
}
CheckValue<IkReal> x2803=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2801))),-1);
if(!x2803.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2802.value)))+IKsqr(((x2803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2800))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2802.value)), ((x2803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2800))))));
=======
IkReal x14811=((1.0)*sj3);
IkReal x14812=((1.0)*cj5);
CheckValue<IkReal> x14813=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14812))),-1);
if(!x14813.valid){
continue;
}
CheckValue<IkReal> x14814=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x14812))+((cj3*r21*sj5))),-1);
if(!x14814.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14814.value)*(((((-1.0)*r20*sj5*x14811))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14811)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14813.value)))+IKsqr(((x14814.value)*(((((-1.0)*r20*sj5*x14811))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14811))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14813.value)), ((x14814.value)*(((((-1.0)*r20*sj5*x14811))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14811))))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2804=IKsin(j4);
IkReal x2805=IKcos(j4);
IkReal x2806=(cj2*sj0);
IkReal x2807=(sj1*sj2);
IkReal x2808=(cj5*sj3);
IkReal x2809=(cj3*cj5);
IkReal x2810=(cj1*cj2);
IkReal x2811=(r21*sj5);
IkReal x2812=(r00*sj5);
IkReal x2813=(cj2*sj1);
IkReal x2814=(r01*sj5);
IkReal x2815=(r20*sj5);
IkReal x2816=(cj1*sj2);
IkReal x2817=((1.0)*cj0);
IkReal x2818=((1.0)*x2804);
IkReal x2819=(r20*x2805);
IkReal x2820=(r00*x2805);
IkReal x2821=(cj3*x2805);
IkReal x2822=((1.0)*x2805);
evalcond[0]=((((-1.0)*r12*x2822))+(((-1.0)*x2817)));
evalcond[1]=(((x2804*x2811))+(((-1.0)*cj5*r20*x2818)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2818))+((x2804*x2814)));
evalcond[3]=(((sj1*x2806))+((sj0*x2816))+(((-1.0)*r12*sj3*x2818)));
evalcond[4]=(((cj1*x2806))+(((-1.0)*sj0*x2807))+((cj3*r12*x2804)));
evalcond[5]=((((-1.0)*x2809*x2819))+((r21*x2808))+x2816+x2813+((x2811*x2821))+((sj3*x2815)));
evalcond[6]=((((-1.0)*x2810))+(((-1.0)*sj3*x2811*x2822))+((cj3*x2815))+((r21*x2809))+x2807+((x2808*x2819)));
evalcond[7]=((((-1.0)*sj3*x2814*x2822))+((cj3*x2812))+((x2808*x2820))+((cj0*x2816))+((cj0*x2813))+((r01*x2809)));
evalcond[8]=(((x2814*x2821))+(((-1.0)*x2809*x2820))+(((-1.0)*x2807*x2817))+((cj0*x2810))+((r01*x2808))+((sj3*x2812)));
=======
IkReal x14815=IKsin(j4);
IkReal x14816=IKcos(j4);
IkReal x14817=(cj2*sj0);
IkReal x14818=(sj1*sj2);
IkReal x14819=(cj5*sj3);
IkReal x14820=(cj3*cj5);
IkReal x14821=(cj1*cj2);
IkReal x14822=(r21*sj5);
IkReal x14823=(r00*sj5);
IkReal x14824=(cj2*sj1);
IkReal x14825=(r01*sj5);
IkReal x14826=(r20*sj5);
IkReal x14827=(cj1*sj2);
IkReal x14828=((1.0)*cj0);
IkReal x14829=((1.0)*x14815);
IkReal x14830=(r20*x14816);
IkReal x14831=(r00*x14816);
IkReal x14832=(cj3*x14816);
IkReal x14833=((1.0)*x14816);
evalcond[0]=((((-1.0)*r12*x14833))+(((-1.0)*x14828)));
evalcond[1]=(((x14815*x14822))+(((-1.0)*cj5*r20*x14829)));
evalcond[2]=(((x14815*x14825))+sj0+(((-1.0)*cj5*r00*x14829)));
evalcond[3]=(((sj0*x14827))+(((-1.0)*r12*sj3*x14829))+((sj1*x14817)));
evalcond[4]=(((cj1*x14817))+(((-1.0)*sj0*x14818))+((cj3*r12*x14815)));
evalcond[5]=((((-1.0)*x14820*x14830))+((sj3*x14826))+x14824+x14827+((r21*x14819))+((x14822*x14832)));
evalcond[6]=(((r21*x14820))+((x14819*x14830))+((cj3*x14826))+x14818+(((-1.0)*x14821))+(((-1.0)*sj3*x14822*x14833)));
evalcond[7]=((((-1.0)*sj3*x14825*x14833))+((x14819*x14831))+((cj3*x14823))+((r01*x14820))+((cj0*x14824))+((cj0*x14827)));
evalcond[8]=((((-1.0)*x14820*x14831))+(((-1.0)*x14818*x14828))+((sj3*x14823))+((r01*x14819))+((cj0*x14821))+((x14825*x14832)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2823=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2823.valid){
continue;
}
CheckValue<IkReal> x2824=IKPowWithIntegerCheck(r12,-1);
if(!x2824.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2824.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2823.value)))+IKsqr(((-1.0)*cj0*(x2824.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2823.value)), ((-1.0)*cj0*(x2824.value)));
=======
CheckValue<IkReal> x14834=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14834.valid){
continue;
}
CheckValue<IkReal> x14835=IKPowWithIntegerCheck(r12,-1);
if(!x14835.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14834.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14835.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14834.value)))+IKsqr(((-1.0)*cj0*(x14835.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14834.value)), ((-1.0)*cj0*(x14835.value)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2825=IKsin(j4);
IkReal x2826=IKcos(j4);
IkReal x2827=(cj2*sj0);
IkReal x2828=(sj1*sj2);
IkReal x2829=(cj5*sj3);
IkReal x2830=(cj3*cj5);
IkReal x2831=(cj1*cj2);
IkReal x2832=(r21*sj5);
IkReal x2833=(r00*sj5);
IkReal x2834=(cj2*sj1);
IkReal x2835=(r01*sj5);
IkReal x2836=(r20*sj5);
IkReal x2837=(cj1*sj2);
IkReal x2838=((1.0)*cj0);
IkReal x2839=((1.0)*x2825);
IkReal x2840=(r20*x2826);
IkReal x2841=(r00*x2826);
IkReal x2842=(cj3*x2826);
IkReal x2843=((1.0)*x2826);
evalcond[0]=((((-1.0)*x2838))+(((-1.0)*r12*x2843)));
evalcond[1]=(((x2825*x2832))+(((-1.0)*cj5*r20*x2839)));
evalcond[2]=(sj0+((x2825*x2835))+(((-1.0)*cj5*r00*x2839)));
evalcond[3]=(((sj0*x2837))+((sj1*x2827))+(((-1.0)*r12*sj3*x2839)));
evalcond[4]=(((cj3*r12*x2825))+(((-1.0)*sj0*x2828))+((cj1*x2827)));
evalcond[5]=((((-1.0)*x2830*x2840))+((r21*x2829))+((sj3*x2836))+((x2832*x2842))+x2837+x2834);
evalcond[6]=((((-1.0)*x2831))+((x2829*x2840))+(((-1.0)*sj3*x2832*x2843))+x2828+((r21*x2830))+((cj3*x2836)));
evalcond[7]=(((x2829*x2841))+(((-1.0)*sj3*x2835*x2843))+((cj0*x2837))+((cj0*x2834))+((cj3*x2833))+((r01*x2830)));
evalcond[8]=((((-1.0)*x2830*x2841))+((sj3*x2833))+((r01*x2829))+((cj0*x2831))+(((-1.0)*x2828*x2838))+((x2835*x2842)));
=======
IkReal x14836=IKsin(j4);
IkReal x14837=IKcos(j4);
IkReal x14838=(cj2*sj0);
IkReal x14839=(sj1*sj2);
IkReal x14840=(cj5*sj3);
IkReal x14841=(cj3*cj5);
IkReal x14842=(cj1*cj2);
IkReal x14843=(r21*sj5);
IkReal x14844=(r00*sj5);
IkReal x14845=(cj2*sj1);
IkReal x14846=(r01*sj5);
IkReal x14847=(r20*sj5);
IkReal x14848=(cj1*sj2);
IkReal x14849=((1.0)*cj0);
IkReal x14850=((1.0)*x14836);
IkReal x14851=(r20*x14837);
IkReal x14852=(r00*x14837);
IkReal x14853=(cj3*x14837);
IkReal x14854=((1.0)*x14837);
evalcond[0]=((((-1.0)*x14849))+(((-1.0)*r12*x14854)));
evalcond[1]=(((x14836*x14843))+(((-1.0)*cj5*r20*x14850)));
evalcond[2]=(((x14836*x14846))+sj0+(((-1.0)*cj5*r00*x14850)));
evalcond[3]=(((sj0*x14848))+(((-1.0)*r12*sj3*x14850))+((sj1*x14838)));
evalcond[4]=((((-1.0)*sj0*x14839))+((cj3*r12*x14836))+((cj1*x14838)));
evalcond[5]=(x14848+x14845+((x14843*x14853))+((sj3*x14847))+(((-1.0)*x14841*x14851))+((r21*x14840)));
evalcond[6]=((((-1.0)*x14842))+((x14840*x14851))+(((-1.0)*sj3*x14843*x14854))+x14839+((cj3*x14847))+((r21*x14841)));
evalcond[7]=(((cj0*x14848))+((cj0*x14845))+((x14840*x14852))+((cj3*x14844))+((r01*x14841))+(((-1.0)*sj3*x14846*x14854)));
evalcond[8]=(((cj0*x14842))+((sj3*x14844))+(((-1.0)*x14839*x14849))+((x14846*x14853))+(((-1.0)*x14841*x14852))+((r01*x14840)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2844=((1.0)*cj5);
CheckValue<IkReal> x2845 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2844))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2845.valid){
continue;
}
CheckValue<IkReal> x2846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2844))+(((-1.0)*r20*sj5)))),-1);
if(!x2846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2845.value)+(((1.5707963267949)*(x2846.value))));
=======
IkReal x14855=((1.0)*cj5);
CheckValue<IkReal> x14856 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x14855))+(((-1.0)*r10*sj0*x14855))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14856.valid){
continue;
}
CheckValue<IkReal> x14857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14855))+(((-1.0)*r20*sj5)))),-1);
if(!x14857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14856.value)+(((1.5707963267949)*(x14857.value))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2847=IKsin(j4);
IkReal x2848=IKcos(j4);
IkReal x2849=(r11*sj5);
IkReal x2850=(cj2*sj0);
IkReal x2851=(cj5*r10);
IkReal x2852=(sj1*sj2);
IkReal x2853=(cj5*r01);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj1*cj2);
IkReal x2856=(cj3*sj5);
IkReal x2857=(r21*sj5);
IkReal x2858=(cj5*sj3);
IkReal x2859=(sj3*sj5);
IkReal x2860=(cj2*sj1);
IkReal x2861=(r01*sj5);
IkReal x2862=(cj3*cj5);
IkReal x2863=(cj1*sj2);
IkReal x2864=((1.0)*cj0);
IkReal x2865=(cj5*r20);
IkReal x2866=((1.0)*x2848);
IkReal x2867=((1.0)*x2847);
IkReal x2868=(cj3*x2848);
IkReal x2869=(sj3*x2848);
IkReal x2870=(cj3*x2847);
evalcond[0]=(((x2847*x2857))+(((-1.0)*x2865*x2867))+(((-1.0)*r22*x2866)));
evalcond[1]=((((-1.0)*r02*x2866))+sj0+(((-1.0)*x2854*x2867))+((x2847*x2861)));
evalcond[2]=((((-1.0)*x2851*x2867))+(((-1.0)*r12*x2866))+((x2847*x2849))+(((-1.0)*x2864)));
evalcond[3]=(((r21*x2858))+((r22*x2870))+((r21*x2848*x2856))+((r20*x2859))+(((-1.0)*r20*x2862*x2866))+x2860+x2863);
evalcond[4]=((((-1.0)*sj3*x2857*x2866))+(((-1.0)*r22*sj3*x2867))+((r20*x2856))+((r21*x2862))+(((-1.0)*x2855))+x2852+((r20*x2848*x2858)));
evalcond[5]=(((cj3*x2853))+(((-1.0)*r02*sj3*x2867))+((x2854*x2869))+(((-1.0)*r01*x2859*x2866))+((r00*x2856))+((cj0*x2860))+((cj0*x2863)));
evalcond[6]=((((-1.0)*x2852*x2864))+((sj3*x2853))+((cj0*x2855))+((r02*x2870))+(((-1.0)*cj3*x2854*x2866))+((r00*x2859))+((r01*x2848*x2856)));
evalcond[7]=(((x2851*x2869))+(((-1.0)*sj3*x2849*x2866))+((sj1*x2850))+((sj0*x2863))+((r11*x2862))+(((-1.0)*r12*sj3*x2867))+((r10*x2856)));
evalcond[8]=((((-1.0)*cj3*x2851*x2866))+((r11*x2858))+(((-1.0)*sj0*x2852))+((x2849*x2868))+((r12*x2870))+((cj1*x2850))+((r10*x2859)));
=======
IkReal x14858=IKsin(j4);
IkReal x14859=IKcos(j4);
IkReal x14860=(r11*sj5);
IkReal x14861=(cj2*sj0);
IkReal x14862=(cj5*r10);
IkReal x14863=(sj1*sj2);
IkReal x14864=(cj5*r01);
IkReal x14865=(cj5*r00);
IkReal x14866=(cj1*cj2);
IkReal x14867=(cj3*sj5);
IkReal x14868=(r21*sj5);
IkReal x14869=(cj5*sj3);
IkReal x14870=(sj3*sj5);
IkReal x14871=(cj2*sj1);
IkReal x14872=(r01*sj5);
IkReal x14873=(cj3*cj5);
IkReal x14874=(cj1*sj2);
IkReal x14875=((1.0)*cj0);
IkReal x14876=(cj5*r20);
IkReal x14877=((1.0)*x14859);
IkReal x14878=((1.0)*x14858);
IkReal x14879=(cj3*x14859);
IkReal x14880=(sj3*x14859);
IkReal x14881=(cj3*x14858);
evalcond[0]=((((-1.0)*r22*x14877))+((x14858*x14868))+(((-1.0)*x14876*x14878)));
evalcond[1]=((((-1.0)*r02*x14877))+sj0+((x14858*x14872))+(((-1.0)*x14865*x14878)));
evalcond[2]=(((x14858*x14860))+(((-1.0)*r12*x14877))+(((-1.0)*x14862*x14878))+(((-1.0)*x14875)));
evalcond[3]=(((r21*x14859*x14867))+((r22*x14881))+x14874+x14871+((r20*x14870))+((r21*x14869))+(((-1.0)*r20*x14873*x14877)));
evalcond[4]=(((r20*x14867))+(((-1.0)*r22*sj3*x14878))+x14863+((r20*x14859*x14869))+((r21*x14873))+(((-1.0)*sj3*x14868*x14877))+(((-1.0)*x14866)));
evalcond[5]=(((x14865*x14880))+((cj0*x14874))+((cj0*x14871))+((r00*x14867))+(((-1.0)*r02*sj3*x14878))+((cj3*x14864))+(((-1.0)*r01*x14870*x14877)));
evalcond[6]=(((r00*x14870))+(((-1.0)*x14863*x14875))+((sj3*x14864))+(((-1.0)*cj3*x14865*x14877))+((r01*x14859*x14867))+((cj0*x14866))+((r02*x14881)));
evalcond[7]=(((r11*x14873))+((sj1*x14861))+(((-1.0)*r12*sj3*x14878))+((r10*x14867))+((x14862*x14880))+(((-1.0)*sj3*x14860*x14877))+((sj0*x14874)));
evalcond[8]=(((r10*x14870))+(((-1.0)*sj0*x14863))+((r12*x14881))+((cj1*x14861))+((r11*x14869))+(((-1.0)*cj3*x14862*x14877))+((x14860*x14879)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2871.value)))+(x2872.value));
=======
CheckValue<IkReal> x14882=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14882.valid){
continue;
}
CheckValue<IkReal> x14883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14882.value)))+(x14883.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2873=IKsin(j4);
IkReal x2874=IKcos(j4);
IkReal x2875=(r11*sj5);
IkReal x2876=(cj2*sj0);
IkReal x2877=(cj5*r10);
IkReal x2878=(sj1*sj2);
IkReal x2879=(cj5*r01);
IkReal x2880=(cj5*r00);
IkReal x2881=(cj1*cj2);
IkReal x2882=(cj3*sj5);
IkReal x2883=(r21*sj5);
IkReal x2884=(cj5*sj3);
IkReal x2885=(sj3*sj5);
IkReal x2886=(cj2*sj1);
IkReal x2887=(r01*sj5);
IkReal x2888=(cj3*cj5);
IkReal x2889=(cj1*sj2);
IkReal x2890=((1.0)*cj0);
IkReal x2891=(cj5*r20);
IkReal x2892=((1.0)*x2874);
IkReal x2893=((1.0)*x2873);
IkReal x2894=(cj3*x2874);
IkReal x2895=(sj3*x2874);
IkReal x2896=(cj3*x2873);
evalcond[0]=((((-1.0)*r22*x2892))+(((-1.0)*x2891*x2893))+((x2873*x2883)));
evalcond[1]=(sj0+(((-1.0)*r02*x2892))+((x2873*x2887))+(((-1.0)*x2880*x2893)));
evalcond[2]=((((-1.0)*x2877*x2893))+((x2873*x2875))+(((-1.0)*x2890))+(((-1.0)*r12*x2892)));
evalcond[3]=(((r20*x2885))+((r22*x2896))+((r21*x2884))+((r21*x2874*x2882))+x2886+x2889+(((-1.0)*r20*x2888*x2892)));
evalcond[4]=(((r20*x2882))+((r20*x2874*x2884))+(((-1.0)*r22*sj3*x2893))+((r21*x2888))+(((-1.0)*x2881))+(((-1.0)*sj3*x2883*x2892))+x2878);
evalcond[5]=(((x2880*x2895))+((cj0*x2889))+((cj0*x2886))+(((-1.0)*r02*sj3*x2893))+((r00*x2882))+((cj3*x2879))+(((-1.0)*r01*x2885*x2892)));
evalcond[6]=(((cj0*x2881))+((r01*x2874*x2882))+(((-1.0)*cj3*x2880*x2892))+((r00*x2885))+(((-1.0)*x2878*x2890))+((r02*x2896))+((sj3*x2879)));
evalcond[7]=((((-1.0)*r12*sj3*x2893))+((r11*x2888))+((sj0*x2889))+((r10*x2882))+(((-1.0)*sj3*x2875*x2892))+((sj1*x2876))+((x2877*x2895)));
evalcond[8]=((((-1.0)*sj0*x2878))+(((-1.0)*cj3*x2877*x2892))+((cj1*x2876))+((r11*x2884))+((r12*x2896))+((r10*x2885))+((x2875*x2894)));
=======
IkReal x14884=IKsin(j4);
IkReal x14885=IKcos(j4);
IkReal x14886=(r11*sj5);
IkReal x14887=(cj2*sj0);
IkReal x14888=(cj5*r10);
IkReal x14889=(sj1*sj2);
IkReal x14890=(cj5*r01);
IkReal x14891=(cj5*r00);
IkReal x14892=(cj1*cj2);
IkReal x14893=(cj3*sj5);
IkReal x14894=(r21*sj5);
IkReal x14895=(cj5*sj3);
IkReal x14896=(sj3*sj5);
IkReal x14897=(cj2*sj1);
IkReal x14898=(r01*sj5);
IkReal x14899=(cj3*cj5);
IkReal x14900=(cj1*sj2);
IkReal x14901=((1.0)*cj0);
IkReal x14902=(cj5*r20);
IkReal x14903=((1.0)*x14885);
IkReal x14904=((1.0)*x14884);
IkReal x14905=(cj3*x14885);
IkReal x14906=(sj3*x14885);
IkReal x14907=(cj3*x14884);
evalcond[0]=((((-1.0)*r22*x14903))+((x14884*x14894))+(((-1.0)*x14902*x14904)));
evalcond[1]=(sj0+(((-1.0)*r02*x14903))+((x14884*x14898))+(((-1.0)*x14891*x14904)));
evalcond[2]=((((-1.0)*r12*x14903))+((x14884*x14886))+(((-1.0)*x14901))+(((-1.0)*x14888*x14904)));
evalcond[3]=(((r22*x14907))+x14900+((r21*x14885*x14893))+x14897+((r21*x14895))+(((-1.0)*r20*x14899*x14903))+((r20*x14896)));
evalcond[4]=((((-1.0)*sj3*x14894*x14903))+x14889+((r21*x14899))+((r20*x14885*x14895))+(((-1.0)*r22*sj3*x14904))+(((-1.0)*x14892))+((r20*x14893)));
evalcond[5]=(((cj0*x14900))+((r00*x14893))+(((-1.0)*r02*sj3*x14904))+((x14891*x14906))+((cj3*x14890))+(((-1.0)*r01*x14896*x14903))+((cj0*x14897)));
evalcond[6]=(((r00*x14896))+((r02*x14907))+(((-1.0)*x14889*x14901))+((r01*x14885*x14893))+(((-1.0)*cj3*x14891*x14903))+((sj3*x14890))+((cj0*x14892)));
evalcond[7]=(((r10*x14893))+((x14888*x14906))+((r11*x14899))+((sj1*x14887))+((sj0*x14900))+(((-1.0)*sj3*x14886*x14903))+(((-1.0)*r12*sj3*x14904)));
evalcond[8]=(((r10*x14896))+((r11*x14895))+(((-1.0)*cj3*x14888*x14903))+((r12*x14907))+((cj1*x14887))+((x14886*x14905))+(((-1.0)*sj0*x14889)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2897.value)))+(x2898.value));
=======
CheckValue<IkReal> x14908=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14908.valid){
continue;
}
CheckValue<IkReal> x14909 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14908.value)))+(x14909.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
<<<<<<< HEAD
IkReal x2899=IKsin(j4);
IkReal x2900=IKcos(j4);
IkReal x2901=(r11*sj5);
IkReal x2902=(cj2*sj0);
IkReal x2903=(cj5*r10);
IkReal x2904=(sj1*sj2);
IkReal x2905=(cj5*r01);
IkReal x2906=(cj5*r00);
IkReal x2907=(cj1*cj2);
IkReal x2908=(cj3*sj5);
IkReal x2909=(r21*sj5);
IkReal x2910=(cj5*sj3);
IkReal x2911=(sj3*sj5);
IkReal x2912=(cj2*sj1);
IkReal x2913=(r01*sj5);
IkReal x2914=(cj3*cj5);
IkReal x2915=(cj1*sj2);
IkReal x2916=((1.0)*cj0);
IkReal x2917=(cj5*r20);
IkReal x2918=((1.0)*x2900);
IkReal x2919=((1.0)*x2899);
IkReal x2920=(cj3*x2900);
IkReal x2921=(sj3*x2900);
IkReal x2922=(cj3*x2899);
evalcond[0]=(((x2899*x2909))+(((-1.0)*x2917*x2919))+(((-1.0)*r22*x2918)));
evalcond[1]=(sj0+(((-1.0)*x2906*x2919))+(((-1.0)*r02*x2918))+((x2899*x2913)));
evalcond[2]=(((x2899*x2901))+(((-1.0)*r12*x2918))+(((-1.0)*x2903*x2919))+(((-1.0)*x2916)));
evalcond[3]=(((r21*x2900*x2908))+((r22*x2922))+((r20*x2911))+((r21*x2910))+(((-1.0)*r20*x2914*x2918))+x2912+x2915);
evalcond[4]=((((-1.0)*r22*sj3*x2919))+((r20*x2900*x2910))+((r21*x2914))+((r20*x2908))+(((-1.0)*x2907))+(((-1.0)*sj3*x2909*x2918))+x2904);
evalcond[5]=(((cj3*x2905))+((cj0*x2912))+((cj0*x2915))+((r00*x2908))+((x2906*x2921))+(((-1.0)*r01*x2911*x2918))+(((-1.0)*r02*sj3*x2919)));
evalcond[6]=(((r01*x2900*x2908))+((r00*x2911))+((cj0*x2907))+((sj3*x2905))+(((-1.0)*x2904*x2916))+(((-1.0)*cj3*x2906*x2918))+((r02*x2922)));
evalcond[7]=(((r11*x2914))+((r10*x2908))+(((-1.0)*r12*sj3*x2919))+((sj0*x2915))+((x2903*x2921))+(((-1.0)*sj3*x2901*x2918))+((sj1*x2902)));
evalcond[8]=(((r11*x2910))+((x2901*x2920))+(((-1.0)*sj0*x2904))+(((-1.0)*cj3*x2903*x2918))+((cj1*x2902))+((r12*x2922))+((r10*x2911)));
=======
IkReal x14910=IKsin(j4);
IkReal x14911=IKcos(j4);
IkReal x14912=(r11*sj5);
IkReal x14913=(cj2*sj0);
IkReal x14914=(cj5*r10);
IkReal x14915=(sj1*sj2);
IkReal x14916=(cj5*r01);
IkReal x14917=(cj5*r00);
IkReal x14918=(cj1*cj2);
IkReal x14919=(cj3*sj5);
IkReal x14920=(r21*sj5);
IkReal x14921=(cj5*sj3);
IkReal x14922=(sj3*sj5);
IkReal x14923=(cj2*sj1);
IkReal x14924=(r01*sj5);
IkReal x14925=(cj3*cj5);
IkReal x14926=(cj1*sj2);
IkReal x14927=((1.0)*cj0);
IkReal x14928=(cj5*r20);
IkReal x14929=((1.0)*x14911);
IkReal x14930=((1.0)*x14910);
IkReal x14931=(cj3*x14911);
IkReal x14932=(sj3*x14911);
IkReal x14933=(cj3*x14910);
evalcond[0]=((((-1.0)*r22*x14929))+((x14910*x14920))+(((-1.0)*x14928*x14930)));
evalcond[1]=((((-1.0)*x14917*x14930))+sj0+(((-1.0)*r02*x14929))+((x14910*x14924)));
evalcond[2]=(((x14910*x14912))+(((-1.0)*x14914*x14930))+(((-1.0)*x14927))+(((-1.0)*r12*x14929)));
evalcond[3]=(x14926+x14923+((r21*x14921))+((r22*x14933))+((r21*x14911*x14919))+(((-1.0)*r20*x14925*x14929))+((r20*x14922)));
evalcond[4]=((((-1.0)*sj3*x14920*x14929))+x14915+(((-1.0)*r22*sj3*x14930))+(((-1.0)*x14918))+((r21*x14925))+((r20*x14911*x14921))+((r20*x14919)));
evalcond[5]=(((cj3*x14916))+((r00*x14919))+(((-1.0)*r02*sj3*x14930))+((cj0*x14926))+((cj0*x14923))+(((-1.0)*r01*x14922*x14929))+((x14917*x14932)));
evalcond[6]=(((r01*x14911*x14919))+(((-1.0)*cj3*x14917*x14929))+((sj3*x14916))+(((-1.0)*x14915*x14927))+((r00*x14922))+((r02*x14933))+((cj0*x14918)));
evalcond[7]=(((r10*x14919))+((sj0*x14926))+(((-1.0)*r12*sj3*x14930))+((x14914*x14932))+((sj1*x14913))+(((-1.0)*sj3*x14912*x14929))+((r11*x14925)));
evalcond[8]=((((-1.0)*sj0*x14915))+((x14912*x14931))+((cj1*x14913))+((r10*x14922))+(((-1.0)*cj3*x14914*x14929))+((r11*x14921))+((r12*x14933)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2923=cj5*cj5;
IkReal x2924=r21*r21;
IkReal x2925=r20*r20;
IkReal x2926=(r20*r21);
IkReal x2927=((1.0)*cj3);
IkReal x2928=((1.0)*cj5);
IkReal x2929=(cj1*sj2);
IkReal x2930=(cj5*sj5);
IkReal x2931=(sj3*sj5);
IkReal x2932=(cj2*sj1);
IkReal x2933=(r21*sj5);
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2927*(r22*r22)))+((cj3*x2923*x2924))+(((-1.0)*x2924*x2927))+(((-1.0)*x2923*x2925*x2927))+(((2.0)*cj3*x2926*x2930)))),-1);
if(!x2934.valid){
continue;
}
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal((((r22*x2929))+((cj5*r21*r22*sj3))+((r22*x2932))+((r20*r22*x2931)))),IkReal((((x2929*x2933))+((sj3*x2926))+(((-1.0)*x2925*x2928*x2931))+(((-1.0)*r20*x2928*x2929))+((x2932*x2933))+(((-1.0)*r20*x2928*x2932))+((sj3*x2924*x2930))+(((-2.0)*sj3*x2923*x2926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2934.value)))+(x2935.value));
=======
IkReal x14934=cj5*cj5;
IkReal x14935=r21*r21;
IkReal x14936=r20*r20;
IkReal x14937=(r20*r21);
IkReal x14938=((1.0)*cj3);
IkReal x14939=((1.0)*cj5);
IkReal x14940=(cj1*sj2);
IkReal x14941=(cj5*sj5);
IkReal x14942=(sj3*sj5);
IkReal x14943=(cj2*sj1);
IkReal x14944=(r21*sj5);
CheckValue<IkReal> x14945=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x14937*x14941))+(((-1.0)*x14935*x14938))+(((-1.0)*x14938*(r22*r22)))+((cj3*x14934*x14935))+(((-1.0)*x14934*x14936*x14938)))),-1);
if(!x14945.valid){
continue;
}
CheckValue<IkReal> x14946 = IKatan2WithCheck(IkReal((((r20*r22*x14942))+((r22*x14943))+((r22*x14940))+((cj5*r21*r22*sj3)))),IkReal(((((-1.0)*x14936*x14939*x14942))+(((-1.0)*r20*x14939*x14940))+(((-1.0)*r20*x14939*x14943))+(((-2.0)*sj3*x14934*x14937))+((x14940*x14944))+((sj3*x14937))+((x14943*x14944))+((sj3*x14935*x14941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14945.value)))+(x14946.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
<<<<<<< HEAD
IkReal x2936=IKsin(j4);
IkReal x2937=IKcos(j4);
IkReal x2938=(cj3*r21);
IkReal x2939=(r21*sj5);
IkReal x2940=(r20*sj5);
IkReal x2941=(cj5*r20);
IkReal x2942=((1.0)*x2937);
IkReal x2943=((1.0)*x2936);
evalcond[0]=(((x2936*x2939))+(((-1.0)*r22*x2942))+(((-1.0)*x2941*x2943)));
evalcond[1]=(((cj2*sj1))+((sj5*x2937*x2938))+((cj5*r21*sj3))+((cj3*r22*x2936))+((cj1*sj2))+(((-1.0)*cj3*x2941*x2942))+((sj3*x2940)));
evalcond[2]=((((-1.0)*r22*sj3*x2943))+(((-1.0)*sj3*x2939*x2942))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x2937*x2941))+((cj5*x2938))+((cj3*x2940)));
=======
IkReal x14947=IKsin(j4);
IkReal x14948=IKcos(j4);
IkReal x14949=(cj3*r21);
IkReal x14950=(r21*sj5);
IkReal x14951=(r20*sj5);
IkReal x14952=(cj5*r20);
IkReal x14953=((1.0)*x14948);
IkReal x14954=((1.0)*x14947);
evalcond[0]=((((-1.0)*x14952*x14954))+((x14947*x14950))+(((-1.0)*r22*x14953)));
evalcond[1]=(((cj2*sj1))+((sj5*x14948*x14949))+((cj5*r21*sj3))+(((-1.0)*cj3*x14952*x14953))+((cj1*sj2))+((sj3*x14951))+((cj3*r22*x14947)));
evalcond[2]=(((cj5*x14949))+(((-1.0)*sj3*x14950*x14953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x14954))+((cj3*x14951))+((sj3*x14948*x14952)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
<<<<<<< HEAD
IkReal x2944=(cj5*sj4);
IkReal x2945=(sj4*sj5);
if( IKabs((((r00*x2944))+(((-1.0)*r01*x2945))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2945))+(((-1.0)*r10*x2944))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2944))+(((-1.0)*r01*x2945))+((cj4*r02))))+IKsqr((((r11*x2945))+(((-1.0)*r10*x2944))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2944))+(((-1.0)*r01*x2945))+((cj4*r02))), (((r11*x2945))+(((-1.0)*r10*x2944))+(((-1.0)*cj4*r12))));
=======
IkReal x14955=(cj5*sj4);
IkReal x14956=(sj4*sj5);
if( IKabs((((r00*x14955))+(((-1.0)*r01*x14956))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x14955))+(((-1.0)*cj4*r12))+((r11*x14956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x14955))+(((-1.0)*r01*x14956))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x14955))+(((-1.0)*cj4*r12))+((r11*x14956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x14955))+(((-1.0)*r01*x14956))+((cj4*r02))), ((((-1.0)*r10*x14955))+(((-1.0)*cj4*r12))+((r11*x14956))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
<<<<<<< HEAD
IkReal x2946=IKsin(j0);
IkReal x2947=IKcos(j0);
IkReal x2948=(r02*sj4);
IkReal x2949=((1.0)*sj3);
IkReal x2950=(r12*sj4);
IkReal x2951=(cj1*cj2);
IkReal x2952=((1.0)*cj3);
IkReal x2953=((1.0)*sj1);
IkReal x2954=(r11*sj5);
IkReal x2955=(cj5*r01);
IkReal x2956=(cj5*r11);
IkReal x2957=(r00*sj5);
IkReal x2958=((0.24365)*cj1);
IkReal x2959=(cj2*sj1);
IkReal x2960=(r10*sj5);
IkReal x2961=((1.0)*cj4);
IkReal x2962=((0.21325)*x2946);
IkReal x2963=(cj4*cj5*r00);
IkReal x2964=(sj2*x2946);
IkReal x2965=(cj4*cj5*r10);
IkReal x2966=(cj4*r01*sj5);
IkReal x2967=(sj2*x2947);
IkReal x2968=((1.0)*cj5*sj4);
evalcond[0]=(((r01*sj4*sj5))+(((-1.0)*r00*x2968))+(((-1.0)*r02*x2961))+x2946);
evalcond[1]=((((-1.0)*x2947))+((sj4*x2954))+(((-1.0)*r10*x2968))+(((-1.0)*r12*x2961)));
evalcond[2]=((((-1.0)*x2947*x2958))+(((0.11)*x2946))+(((-1.0)*px))+(((0.21325)*sj1*x2967))+(((-0.08535)*x2957))+(((-0.08535)*x2955))+(((-0.21325)*x2947*x2951)));
evalcond[3]=((((-0.08535)*x2960))+(((-1.0)*x2951*x2962))+(((-1.0)*py))+(((-0.11)*x2947))+(((-1.0)*x2946*x2958))+(((-0.08535)*x2956))+((sj1*sj2*x2962)));
evalcond[4]=(((cj1*x2967))+((x2947*x2959))+((sj3*x2963))+(((-1.0)*x2948*x2949))+(((-1.0)*x2949*x2966))+((cj3*x2955))+((cj3*x2957)));
evalcond[5]=(((sj3*x2955))+((sj3*x2957))+((x2947*x2951))+((cj3*x2966))+((cj3*x2948))+(((-1.0)*x2952*x2963))+(((-1.0)*x2953*x2967)));
evalcond[6]=(((cj1*x2964))+((x2946*x2959))+((sj3*x2965))+(((-1.0)*cj4*x2949*x2954))+((cj3*x2960))+(((-1.0)*x2949*x2950))+((cj3*x2956)));
evalcond[7]=(((x2946*x2951))+((sj3*x2956))+((sj3*x2960))+((cj3*cj4*x2954))+(((-1.0)*x2952*x2965))+((cj3*x2950))+(((-1.0)*x2953*x2964)));
=======
IkReal x14957=IKsin(j0);
IkReal x14958=IKcos(j0);
IkReal x14959=(r02*sj4);
IkReal x14960=((1.0)*sj3);
IkReal x14961=(r12*sj4);
IkReal x14962=(cj1*cj2);
IkReal x14963=((1.0)*cj3);
IkReal x14964=((1.0)*sj1);
IkReal x14965=(r11*sj5);
IkReal x14966=(cj5*r01);
IkReal x14967=(cj5*r11);
IkReal x14968=(r00*sj5);
IkReal x14969=((0.24365)*cj1);
IkReal x14970=(cj2*sj1);
IkReal x14971=(r10*sj5);
IkReal x14972=((1.0)*cj4);
IkReal x14973=((0.21325)*x14957);
IkReal x14974=(cj4*cj5*r00);
IkReal x14975=(sj2*x14957);
IkReal x14976=(cj4*cj5*r10);
IkReal x14977=(cj4*r01*sj5);
IkReal x14978=(sj2*x14958);
IkReal x14979=((1.0)*cj5*sj4);
evalcond[0]=(x14957+((r01*sj4*sj5))+(((-1.0)*r00*x14979))+(((-1.0)*r02*x14972)));
evalcond[1]=((((-1.0)*r10*x14979))+(((-1.0)*r12*x14972))+(((-1.0)*x14958))+((sj4*x14965)));
evalcond[2]=((((0.11)*x14957))+(((-1.0)*px))+(((0.21325)*sj1*x14978))+(((-0.08535)*x14968))+(((-0.08535)*x14966))+(((-1.0)*x14958*x14969))+(((-0.21325)*x14958*x14962)));
evalcond[3]=((((-1.0)*x14962*x14973))+((sj1*sj2*x14973))+(((-0.11)*x14958))+(((-1.0)*py))+(((-1.0)*x14957*x14969))+(((-0.08535)*x14967))+(((-0.08535)*x14971)));
evalcond[4]=(((cj3*x14966))+((cj3*x14968))+((cj1*x14978))+((x14958*x14970))+(((-1.0)*x14960*x14977))+((sj3*x14974))+(((-1.0)*x14959*x14960)));
evalcond[5]=((((-1.0)*x14963*x14974))+((cj3*x14977))+((x14958*x14962))+((sj3*x14966))+((sj3*x14968))+((cj3*x14959))+(((-1.0)*x14964*x14978)));
evalcond[6]=(((cj3*x14967))+((cj1*x14975))+((x14957*x14970))+((cj3*x14971))+((sj3*x14976))+(((-1.0)*cj4*x14960*x14965))+(((-1.0)*x14960*x14961)));
evalcond[7]=((((-1.0)*x14963*x14976))+((x14957*x14962))+((cj3*x14961))+((sj3*x14967))+((sj3*x14971))+((cj3*cj4*x14965))+(((-1.0)*x14964*x14975)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
<<<<<<< HEAD
IkReal x2969=cj5*cj5;
IkReal x2970=r21*r21;
IkReal x2971=r20*r20;
IkReal x2972=(r20*r21);
IkReal x2973=(sj1*sj2);
IkReal x2974=(r21*sj5);
IkReal x2975=(cj1*cj2);
IkReal x2976=(cj5*r20);
IkReal x2977=(cj5*sj5);
IkReal x2978=(cj3*r22);
IkReal x2979=(sj3*x2970);
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal((((r20*sj5*x2978))+((r22*x2973))+(((-1.0)*r22*x2975))+((cj5*r21*x2978)))),IkReal(((((-1.0)*x2973*x2976))+(((-1.0)*x2974*x2975))+((x2975*x2976))+(((-1.0)*cj3*x2971*x2977))+((cj3*x2970*x2977))+((cj3*x2972))+(((-2.0)*cj3*x2969*x2972))+((x2973*x2974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x2969*x2979))+(((-2.0)*sj3*x2972*x2977))+((sj3*x2969*x2971))+x2979)),-1);
if(!x2981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2980.value)+(((1.5707963267949)*(x2981.value))));
=======
IkReal x14980=cj5*cj5;
IkReal x14981=r21*r21;
IkReal x14982=r20*r20;
IkReal x14983=(r20*r21);
IkReal x14984=(sj1*sj2);
IkReal x14985=(r21*sj5);
IkReal x14986=(cj1*cj2);
IkReal x14987=(cj5*r20);
IkReal x14988=(cj5*sj5);
IkReal x14989=(cj3*r22);
IkReal x14990=(sj3*x14981);
CheckValue<IkReal> x14991=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x14990+((sj3*x14980*x14982))+(((-1.0)*x14980*x14990))+(((-2.0)*sj3*x14983*x14988)))),-1);
if(!x14991.valid){
continue;
}
CheckValue<IkReal> x14992 = IKatan2WithCheck(IkReal((((cj5*r21*x14989))+((r22*x14984))+(((-1.0)*r22*x14986))+((r20*sj5*x14989)))),IkReal((((x14984*x14985))+(((-1.0)*x14984*x14987))+(((-2.0)*cj3*x14980*x14983))+(((-1.0)*cj3*x14982*x14988))+((cj3*x14983))+((cj3*x14981*x14988))+((x14986*x14987))+(((-1.0)*x14985*x14986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14991.value)))+(x14992.value));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
<<<<<<< HEAD
IkReal x2982=IKsin(j4);
IkReal x2983=IKcos(j4);
IkReal x2984=(cj3*r21);
IkReal x2985=(r21*sj5);
IkReal x2986=(r20*sj5);
IkReal x2987=(cj5*r20);
IkReal x2988=((1.0)*x2983);
IkReal x2989=((1.0)*x2982);
evalcond[0]=((((-1.0)*x2987*x2989))+(((-1.0)*r22*x2988))+((x2982*x2985)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj3*r22*x2982))+((sj3*x2986))+((cj1*sj2))+(((-1.0)*cj3*x2987*x2988))+((sj5*x2983*x2984)));
evalcond[2]=(((cj3*x2986))+(((-1.0)*r22*sj3*x2989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x2983*x2987))+(((-1.0)*sj3*x2985*x2988))+((cj5*x2984)));
=======
IkReal x14993=IKsin(j4);
IkReal x14994=IKcos(j4);
IkReal x14995=(cj3*r21);
IkReal x14996=(r21*sj5);
IkReal x14997=(r20*sj5);
IkReal x14998=(cj5*r20);
IkReal x14999=((1.0)*x14994);
IkReal x15000=((1.0)*x14993);
evalcond[0]=(((x14993*x14996))+(((-1.0)*r22*x14999))+(((-1.0)*x14998*x15000)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x14998*x14999))+((sj5*x14994*x14995))+((cj5*r21*sj3))+((sj3*x14997))+((cj1*sj2))+((cj3*r22*x14993)));
evalcond[2]=(((cj3*x14997))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x14994*x14998))+((cj5*x14995))+(((-1.0)*r22*sj3*x15000))+(((-1.0)*sj3*x14996*x14999)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
<<<<<<< HEAD
IkReal x2990=(cj5*sj4);
IkReal x2991=(sj4*sj5);
if( IKabs((((r00*x2990))+(((-1.0)*r01*x2991))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2990))+((r11*x2991))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2990))+(((-1.0)*r01*x2991))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2990))+((r11*x2991))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2990))+(((-1.0)*r01*x2991))+((cj4*r02))), ((((-1.0)*r10*x2990))+((r11*x2991))+(((-1.0)*cj4*r12))));
=======
IkReal x15001=(cj5*sj4);
IkReal x15002=(sj4*sj5);
if( IKabs((((r00*x15001))+(((-1.0)*r01*x15002))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x15001))+((r11*x15002))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15001))+(((-1.0)*r01*x15002))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x15001))+((r11*x15002))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x15001))+(((-1.0)*r01*x15002))+((cj4*r02))), ((((-1.0)*r10*x15001))+((r11*x15002))+(((-1.0)*cj4*r12))));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
<<<<<<< HEAD
IkReal x2992=IKsin(j0);
IkReal x2993=IKcos(j0);
IkReal x2994=(r02*sj4);
IkReal x2995=((1.0)*sj3);
IkReal x2996=(r12*sj4);
IkReal x2997=(cj1*cj2);
IkReal x2998=((1.0)*cj3);
IkReal x2999=((1.0)*sj1);
IkReal x3000=(r11*sj5);
IkReal x3001=(cj5*r01);
IkReal x3002=(cj5*r11);
IkReal x3003=(r00*sj5);
IkReal x3004=((0.24365)*cj1);
IkReal x3005=(cj2*sj1);
IkReal x3006=(r10*sj5);
IkReal x3007=((1.0)*cj4);
IkReal x3008=((0.21325)*x2992);
IkReal x3009=(cj4*cj5*r00);
IkReal x3010=(sj2*x2992);
IkReal x3011=(cj4*cj5*r10);
IkReal x3012=(cj4*r01*sj5);
IkReal x3013=(sj2*x2993);
IkReal x3014=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x3007))+(((-1.0)*r00*x3014))+((r01*sj4*sj5))+x2992);
evalcond[1]=((((-1.0)*r10*x3014))+(((-1.0)*r12*x3007))+(((-1.0)*x2993))+((sj4*x3000)));
evalcond[2]=((((0.21325)*sj1*x3013))+(((-1.0)*px))+(((-1.0)*x2993*x3004))+(((-0.21325)*x2993*x2997))+(((0.11)*x2992))+(((-0.08535)*x3001))+(((-0.08535)*x3003)));
evalcond[3]=((((-1.0)*x2997*x3008))+(((-0.11)*x2993))+(((-1.0)*py))+(((-1.0)*x2992*x3004))+((sj1*sj2*x3008))+(((-0.08535)*x3002))+(((-0.08535)*x3006)));
evalcond[4]=(((x2993*x3005))+(((-1.0)*x2995*x3012))+((sj3*x3009))+((cj3*x3001))+((cj3*x3003))+(((-1.0)*x2994*x2995))+((cj1*x3013)));
evalcond[5]=(((cj3*x2994))+(((-1.0)*x2998*x3009))+((cj3*x3012))+((sj3*x3003))+((sj3*x3001))+((x2993*x2997))+(((-1.0)*x2999*x3013)));
evalcond[6]=((((-1.0)*x2995*x2996))+((sj3*x3011))+(((-1.0)*cj4*x2995*x3000))+((cj3*x3006))+((cj3*x3002))+((cj1*x3010))+((x2992*x3005)));
evalcond[7]=(((cj3*x2996))+((x2992*x2997))+((sj3*x3006))+((sj3*x3002))+(((-1.0)*x2998*x3011))+(((-1.0)*x2999*x3010))+((cj3*cj4*x3000)));
=======
IkReal x15003=IKsin(j0);
IkReal x15004=IKcos(j0);
IkReal x15005=(r02*sj4);
IkReal x15006=((1.0)*sj3);
IkReal x15007=(r12*sj4);
IkReal x15008=(cj1*cj2);
IkReal x15009=((1.0)*cj3);
IkReal x15010=((1.0)*sj1);
IkReal x15011=(r11*sj5);
IkReal x15012=(cj5*r01);
IkReal x15013=(cj5*r11);
IkReal x15014=(r00*sj5);
IkReal x15015=((0.24365)*cj1);
IkReal x15016=(cj2*sj1);
IkReal x15017=(r10*sj5);
IkReal x15018=((1.0)*cj4);
IkReal x15019=((0.21325)*x15003);
IkReal x15020=(cj4*cj5*r00);
IkReal x15021=(sj2*x15003);
IkReal x15022=(cj4*cj5*r10);
IkReal x15023=(cj4*r01*sj5);
IkReal x15024=(sj2*x15004);
IkReal x15025=((1.0)*cj5*sj4);
evalcond[0]=(x15003+((r01*sj4*sj5))+(((-1.0)*r00*x15025))+(((-1.0)*r02*x15018)));
evalcond[1]=((((-1.0)*r12*x15018))+((sj4*x15011))+(((-1.0)*r10*x15025))+(((-1.0)*x15004)));
evalcond[2]=((((0.11)*x15003))+(((-1.0)*x15004*x15015))+(((-1.0)*px))+(((0.21325)*sj1*x15024))+(((-0.21325)*x15004*x15008))+(((-0.08535)*x15014))+(((-0.08535)*x15012)));
evalcond[3]=((((-1.0)*py))+((sj1*sj2*x15019))+(((-1.0)*x15008*x15019))+(((-0.08535)*x15017))+(((-0.08535)*x15013))+(((-1.0)*x15003*x15015))+(((-0.11)*x15004)));
evalcond[4]=(((cj1*x15024))+((cj3*x15012))+((cj3*x15014))+(((-1.0)*x15005*x15006))+((x15004*x15016))+(((-1.0)*x15006*x15023))+((sj3*x15020)));
evalcond[5]=((((-1.0)*x15010*x15024))+(((-1.0)*x15009*x15020))+((sj3*x15012))+((sj3*x15014))+((x15004*x15008))+((cj3*x15005))+((cj3*x15023)));
evalcond[6]=(((cj1*x15021))+((cj3*x15013))+((cj3*x15017))+(((-1.0)*cj4*x15006*x15011))+((sj3*x15022))+((x15003*x15016))+(((-1.0)*x15006*x15007)));
evalcond[7]=((((-1.0)*x15010*x15021))+(((-1.0)*x15009*x15022))+((x15003*x15008))+((sj3*x15013))+((sj3*x15017))+((cj3*x15007))+((cj3*cj4*x15011)));
>>>>>>> 64c08a9721b8f7d3b6602eedcc3484742d6ce7cc
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (fcad8fb451a9006f3ec00424bf71f2cc)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
