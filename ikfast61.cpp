/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-03-22 16:00:46.360043
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.0819)*x7);
x13=((0.08535)*x5);
x14=((0.0819)*x9);
x15=((0.08535)*x0);
x16=((1.0)*x5);
x17=((1.0)*x9);
x18=((0.21325)*x5);
x19=((1.0)*x7);
x20=((0.0819)*x8);
x21=((1.0)*x8);
x22=((0.24365)*x1);
x23=((1.0)*x0);
x24=((0.21325)*x0);
x25=(x1*x2);
x26=(x3*x4);
x27=(x1*x3);
x28=(x0*x6);
x29=(x2*x4);
x30=(x16*x6);
x31=(x1*x15);
x32=(x23*x27);
x33=(x16*x27);
x34=(x25+x26);
x35=((((-1.0)*x29))+(((1.0)*x27)));
x36=((((-1.0)*x32))+((x0*x29)));
x37=(((x29*x5))+(((-1.0)*x33)));
x38=(x23*((x25+x26)));
x39=(x16*((x25+x26)));
x40=(x37*x8);
x41=((((-1.0)*x17*x35))+(((-1.0)*x21*x34)));
x42=(((x9*(((((1.0)*x25))+(((1.0)*x26))))))+(((-1.0)*x35*x8)));
x43=(((x38*x9))+((x36*x8)));
x44=(x40+((x39*x9)));
x45=(x44*x7);
x46=(((x17*(((((-1.0)*x32))+((x23*x29))))))+(((-1.0)*x21*x38)));
x47=(((x17*(((((-1.0)*x33))+((x16*x29))))))+(((-1.0)*x21*x39)));
eerot[0]=((((-1.0)*x16*x7))+((x6*(((((-1.0)*x17*x38))+(((-1.0)*x21*x36)))))));
eerot[1]=(((x11*(((((-1.0)*x19*x43))+x30))))+((x10*x46)));
eerot[2]=(((x11*x46))+((x10*(((((-1.0)*x30))+((x43*x7)))))));
IkReal x48=((1.0)*x15);
eetrans[0]=(((x0*x22))+(((-1.0)*x12*x5))+((x9*(((((-1.0)*x27*x48))+((x15*x29))))))+((x6*(((((-1.0)*x20*x36))+(((-1.0)*x14*x38))))))+((x8*(((((-1.0)*x26*x48))+(((-1.0)*x25*x48))))))+(((-1.0)*x24*x29))+(((-0.11235)*x5))+((x24*x27)));
eerot[3]=(((x0*x7))+((x6*(((((-1.0)*x17*x39))+(((-1.0)*x21*x37)))))));
eerot[4]=(((x10*x47))+((x11*(((((-1.0)*x19*x44))+(((-1.0)*x23*x6)))))));
eerot[5]=(((x11*x47))+((x10*((x45+x28)))));
IkReal x49=((1.0)*x13);
eetrans[1]=(((x8*(((((-1.0)*x26*x49))+(((-1.0)*x25*x49))))))+((x18*x27))+((x9*(((((-1.0)*x27*x49))+((x13*x29))))))+((x0*x12))+((x22*x5))+(((-1.0)*x18*x29))+(((0.11235)*x0))+((x6*(((((-1.0)*x20*x37))+(((-1.0)*x14*x39)))))));
eerot[6]=(x41*x6);
eerot[7]=(((x10*x42))+((x11*x41*x7)));
eerot[8]=(((x10*x7*((((x34*x8))+((x35*x9))))))+((x11*x42)));
eetrans[2]=((0.1519)+((x6*(((((-1.0)*x20*x34))+(((-1.0)*x14*x35))))))+((x8*(((((0.08535)*x29))+(((-0.08535)*x27))))))+((x9*(((((0.08535)*x25))+(((0.08535)*x26))))))+(((-0.21325)*x26))+(((-0.21325)*x25))+(((-0.24365)*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=((((-0.0819)*r00))+px);
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=(py+(((-0.0819)*r10)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.1519)+pz+(((-0.0819)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x53=((0.1707)*npx);
IkReal x54=((0.1707)*npy);
IkReal x55=((0.08535)*r22);
IkReal x56=((0.08535)*r21);
IkReal x57=((-0.08535)*r20);
IkReal x58=((-1.0)*r20);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-0.08535)*r21);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*rxp1_2);
IkReal x63=((-1.0)*npx);
IkReal x64=((-1.0)*r22);
IkReal x65=((-1.0)*npz);
matrixinvcoeffs[0]=x57;
matrixinvcoeffs[1]=x53;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x57;
matrixinvcoeffs[19]=x53;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x61;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x62;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x61;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x62;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x65;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x56;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x63;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x63;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x57;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x65;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x61;
matrixinvcoeffs[204]=x56;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x56;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x57;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x57;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.1707)*pz);
IkReal x69=(pp*r21);
IkReal x70=((0.1707)*rxp1_2);
IkReal x71=(gclwh13_1*pp);
IkReal x72=(gclwh9_0*r20);
IkReal x73=(npy*pz);
IkReal x74=((4.561674317235e-5)*r21);
IkReal x75=(npz*pz);
IkReal x76=(gclwh13_15*r21);
IkReal x77=((0.0072846225)*pz);
IkReal x78=(gclwh11_13*r22);
IkReal x79=((0.014569245)*r21);
IkReal x80=(gclwh8_12*r20);
IkReal x81=(gclwh15_1*r20);
IkReal x82=((2.0)*pp);
IkReal x83=(pp*r20);
IkReal x84=(pp*r22);
IkReal x85=(gclwh14_2*pz);
IkReal x86=(gclwh6_11*r21);
IkReal x87=((0.3414)*rxp0_2);
IkReal x88=(npx*pz);
IkReal x89=((0.001068933642)*rxp2_2);
IkReal x90=(gclwh15_10*r20);
IkReal x91=((0.853)*pp);
IkReal x92=(gclwh9_13*rxp0_2);
IkReal x93=(gclwh2_0*r21);
IkReal x94=((0.019178145)*rxp0_2);
IkReal x95=((0.2247)*gclwh15_15);
IkReal x96=(gclwh5_9*r22);
IkReal x97=(gclwh8_2*rxp0_2);
IkReal x98=((0.6828)*rxp2_2);
IkReal x99=((0.014569245)*rxp1_2);
IkReal x100=((0.15598566)*rxp0_2);
IkReal x101=(gclwh14_3*rxp0_2);
IkReal x102=(gclwh13_0*pz);
IkReal x103=(gclwh11_10*r22);
IkReal x104=(gclwh10_11*r22);
IkReal x105=((1.0)*pz);
IkReal x106=(gclwh13_0*rxp1_2);
IkReal x107=(gclwh4_14*rxp2_2);
IkReal x108=((0.1707)*rxp2_2);
IkReal x109=((0.00518928)*rxp1_2);
IkReal x110=(gclwh5_0*pz);
IkReal x111=((0.00155960496929498)*r21);
IkReal x112=(gclwh4_3*r22);
IkReal x113=(gclwh14_8*rxp0_2);
IkReal x114=((0.00332834402025)*r22);
IkReal x115=(gclwh4_2*r22);
IkReal x116=(gclwh12_14*rxp1_2);
IkReal x117=(gclwh10_2*r22);
IkReal x118=((0.000818427337875)*r20);
IkReal x119=((0.001068933642)*rxp1_2);
IkReal x120=((0.01037856)*rxp0_2);
IkReal x121=(gclwh15_9*r20);
IkReal x122=(gclwh5_10*r22);
IkReal x123=(gclwh4_8*rxp2_2);
IkReal x124=(gclwh9_10*r20);
IkReal x125=((4.0)*gclwh11_10);
IkReal x126=(gclwh6_12*r21);
IkReal x127=((0.00310689149625)*r20);
IkReal x128=(gclwh13_9*r21);
IkReal x129=(gclwh12_8*r21);
IkReal x130=((0.3414)*rxp1_2);
IkReal x131=((2.0)*gclwh7_10);
IkReal x132=((0.07280355)*rxp1_2);
IkReal x133=(gclwh8_2*r20);
IkReal x134=(gclwh4_14*r22);
IkReal x135=((0.6828)*rxp1_2);
IkReal x136=(gclwh15_15*rxp0_2);
IkReal x137=((4.0)*gclwh8_11);
IkReal x138=(gclwh7_0*r21);
IkReal x139=(gclwh5_15*rxp2_2);
IkReal x140=(gclwh15_9*rxp0_2);
IkReal x141=(gclwh4_2*rxp2_2);
IkReal x142=(gclwh14_11*r20);
IkReal x143=((0.019178145)*rxp1_2);
IkReal x144=((4.561674317235e-5)*r22);
IkReal x145=((4.0)*gclwh9_10);
IkReal x146=((0.6828)*rxp0_2);
IkReal x147=(gclwh5_9*rxp2_2);
IkReal x148=(gclwh15_1*rxp0_2);
IkReal x149=(gclwh9_13*r20);
IkReal x150=(gclwh6_2*r21);
IkReal x151=((0.00310689149625)*r21);
IkReal x152=((0.019178145)*rxp2_2);
IkReal x153=((0.0304)*pp);
IkReal x154=((0.2247)*gclwh13_15);
IkReal x155=((0.000818427337875)*r22);
IkReal x156=((0.00163685467575)*r20);
IkReal x157=((0.000818427337875)*r21);
IkReal x158=(gclwh5_0*r22);
IkReal x159=((0.1707)*rxp0_2);
IkReal x160=((0.08318211)*rxp1_2);
IkReal x161=((2.0)*gclwh6_11);
IkReal x162=(gclwh1_3*r20);
IkReal x163=((0.036546103557)*rxp2_2);
IkReal x164=((4.0)*gclwh10_11);
IkReal x165=((0.036546103557)*rxp1_2);
IkReal x166=((0.1707)*pp);
IkReal x167=(gclwh11_13*rxp2_2);
IkReal x168=((0.3414)*rxp2_2);
IkReal x169=(gclwh10_12*rxp2_2);
IkReal x170=((0.0072846225)*r21);
IkReal x171=(gclwh4_8*r22);
IkReal x172=((0.07280355)*rxp0_2);
IkReal x173=((2.0)*gclwh12_11);
IkReal x174=(gclwh11_0*r22);
IkReal x175=(gclwh14_8*r20);
IkReal x176=(gclwh14_14*rxp0_2);
IkReal x177=(gclwh7_13*r21);
IkReal x178=(gclwh11_0*pz);
IkReal x179=(gclwh10_2*pz);
IkReal x180=(gclwh12_2*rxp1_2);
IkReal x181=(gclwh5_0*rxp2_2);
IkReal x182=((0.07280355)*rxp2_2);
IkReal x183=((0.4569)*pp);
IkReal x184=(gclwh4_11*r22);
IkReal x185=((4.0)*gclwh6_11);
IkReal x186=(gclwh8_11*r20);
IkReal x187=((0.2247)*gclwh5_15);
IkReal x188=((4.0)*gclwh7_10);
IkReal x189=((2.0)*gclwh13_10);
IkReal x190=((0.07799283)*rxp1_2);
IkReal x191=(gclwh5_1*r22);
IkReal x192=((0.2247)*gclwh4_14);
IkReal x193=(gclwh10_12*r22);
IkReal x194=((0.2247)*gclwh14_14);
IkReal x195=((0.2247)*gclwh12_14);
IkReal x196=(gclwh14_3*r20);
IkReal x197=(gclwh13_15*rxp1_2);
IkReal x198=(gclwh11_1*r22);
IkReal x199=(gclwh0_1*r20);
IkReal x200=(gclwh8_12*rxp0_2);
IkReal x201=(gclwh14_14*x94);
IkReal x202=(gclwh6_5*x157);
IkReal x203=((0.019178145)*x116);
IkReal x204=((0.019178145)*x107);
IkReal x205=(gclwh10_5*x155);
IkReal x206=(gclwh8_5*x118);
IkReal x207=((0.014569245)*x123);
IkReal x208=((0.0072846225)*x86);
IkReal x209=(gclwh12_8*x99);
IkReal x210=(gclwh4_11*x108);
IkReal x211=(gclwh12_11*x70);
IkReal x212=(gclwh14_11*x159);
IkReal x213=((0.0072846225)*x104);
IkReal x214=((0.014569245)*x113);
IkReal x215=((0.0072846225)*x186);
IkReal x216=(gclwh13_9*x99);
IkReal x217=((0.014569245)*x147);
IkReal x218=((0.0072846225)*x103);
IkReal x219=(gclwh15_10*x159);
IkReal x220=((0.0072846225)*x124);
IkReal x221=(gclwh13_10*x70);
IkReal x222=(gclwh7_10*x170);
IkReal x223=((0.014569245)*x140);
IkReal x224=(gclwh5_10*x108);
IkReal x225=(gclwh15_15*x94);
IkReal x226=(gclwh7_7*x157);
IkReal x227=(gclwh13_15*x143);
IkReal x228=((0.019178145)*x139);
IkReal x229=(gclwh11_7*x155);
IkReal x230=(gclwh9_7*x118);
IkReal x231=(gclwh8_5*x94);
IkReal x232=(gclwh10_5*x152);
IkReal x233=(gclwh14_14*x118);
IkReal x234=(gclwh6_5*x143);
IkReal x235=(gclwh12_14*x157);
IkReal x236=((0.000818427337875)*x134);
IkReal x237=(gclwh8_11*x159);
IkReal x238=(gclwh10_11*x108);
IkReal x239=(gclwh12_11*x170);
IkReal x240=((0.000621742530375)*x171);
IkReal x241=((0.0072846225)*x184);
IkReal x242=((0.000621742530375)*x129);
IkReal x243=((0.000621742530375)*x175);
IkReal x244=(gclwh6_11*x70);
IkReal x245=((0.0072846225)*x142);
IkReal x246=(gclwh9_10*x159);
IkReal x247=((0.000621742530375)*x121);
IkReal x248=((0.0072846225)*x122);
IkReal x249=(gclwh11_10*x108);
IkReal x250=(gclwh13_10*x170);
IkReal x251=((0.000621742530375)*x128);
IkReal x252=((0.0072846225)*x90);
IkReal x253=(gclwh7_10*x70);
IkReal x254=((0.000621742530375)*x96);
IkReal x255=((0.000818427337875)*x76);
IkReal x256=(gclwh5_15*x155);
IkReal x257=(gclwh7_7*x143);
IkReal x258=(gclwh15_15*x118);
IkReal x259=(gclwh11_7*x152);
IkReal x260=(gclwh9_7*x94);
IkReal x261=(gclwh14_11*x87);
IkReal x262=((0.014569245)*x104);
IkReal x263=((0.014569245)*x186);
IkReal x264=((0.03835629)*x176);
IkReal x265=((0.03835629)*x107);
IkReal x266=((0.03835629)*x116);
IkReal x267=(gclwh4_11*x168);
IkReal x268=(gclwh12_11*x130);
IkReal x269=(gclwh6_11*x79);
IkReal x270=((0.03835629)*x139);
IkReal x271=((0.03835629)*x197);
IkReal x272=((0.03835629)*x136);
IkReal x273=(gclwh15_10*x87);
IkReal x274=((0.014569245)*x124);
IkReal x275=((0.014569245)*x103);
IkReal x276=((0.0608)*x73);
IkReal x277=((2.0)*x66);
IkReal x278=(r21*x67);
IkReal x279=((1.0)*x67);
IkReal x280=((0.2247)*gclwh10_5*x75);
IkReal x281=((0.2247)*gclwh8_5*x88);
IkReal x282=((0.11235)*gclwh6_5*x69);
IkReal x283=((0.11235)*gclwh8_5*x83);
IkReal x284=((0.2247)*gclwh6_5*x73);
IkReal x285=((0.11235)*gclwh10_5*x84);
IkReal x286=(gclwh12_3*pp*x70);
IkReal x287=(gclwh14_2*rxp0_2*x68);
IkReal x288=(gclwh6_3*x278);
IkReal x289=(x117*x77);
IkReal x290=((2.0)*gclwh10_11*x75);
IkReal x291=((2.0)*gclwh8_11*x88);
IkReal x292=(x179*x84);
IkReal x293=(gclwh4_3*pp*x108);
IkReal x294=(x133*x77);
IkReal x295=(gclwh8_2*pz*x83);
IkReal x296=(x150*x77);
IkReal x297=(x161*x73);
IkReal x298=(x180*x68);
IkReal x299=(x141*x68);
IkReal x300=(x101*x166);
IkReal x301=(x70*x71);
IkReal x302=(gclwh7_1*x278);
IkReal x303=(x174*x77);
IkReal x304=(gclwh15_0*rxp0_2*x68);
IkReal x305=(x178*x84);
IkReal x306=(gclwh5_1*pp*x108);
IkReal x307=(x131*x73);
IkReal x308=(x72*x77);
IkReal x309=(pp*pz*x72);
IkReal x310=((2.0)*gclwh11_10*x75);
IkReal x311=((2.0)*gclwh9_10*x88);
IkReal x312=(x148*x166);
IkReal x313=(x106*x68);
IkReal x314=(x181*x68);
IkReal x315=(x138*x77);
IkReal x316=((0.2247)*gclwh9_7*x88);
IkReal x317=((0.11235)*gclwh7_7*x69);
IkReal x318=((0.2247)*gclwh11_7*x75);
IkReal x319=((0.11235)*gclwh11_7*x84);
IkReal x320=((0.2247)*gclwh7_7*x73);
IkReal x321=((0.11235)*gclwh9_7*x83);
IkReal x322=(x195*x73);
IkReal x323=((0.11235)*gclwh14_14*x83);
IkReal x324=(x192*x75);
IkReal x325=((0.11235)*gclwh12_14*x69);
IkReal x326=(x194*x88);
IkReal x327=((0.11235)*gclwh4_14*x84);
IkReal x328=(gclwh14_8*npx*x68);
IkReal x329=(x83*x85);
IkReal x330=(gclwh12_3*x278);
IkReal x331=(gclwh3_2*r21*x77);
IkReal x332=((0.08535)*gclwh12_8*x69);
IkReal x333=(gclwh6_2*rxp1_2*x68);
IkReal x334=(gclwh3_3*x278);
IkReal x335=(x162*x67);
IkReal x336=((0.08535)*gclwh4_8*x84);
IkReal x337=(gclwh14_2*r20*x77);
IkReal x338=((2.0)*gclwh14_11*x88);
IkReal x339=(x112*x67);
IkReal x340=(gclwh1_2*r20*x77);
IkReal x341=(gclwh12_8*npy*x68);
IkReal x342=(gclwh4_8*npz*x68);
IkReal x343=(x68*x97);
IkReal x344=((2.0)*gclwh4_11*x75);
IkReal x345=((0.08535)*gclwh14_8*x83);
IkReal x346=(gclwh6_3*pp*x70);
IkReal x347=(gclwh10_2*rxp2_2*x68);
IkReal x348=(x115*x77);
IkReal x349=(gclwh12_2*r21*x77);
IkReal x350=(x173*x73);
IkReal x351=(gclwh13_0*r21*x77);
IkReal x352=(x67*x81);
IkReal x353=((0.08535)*gclwh15_9*x83);
IkReal x354=(x110*x84);
IkReal x355=(x102*x69);
IkReal x356=(x77*x93);
IkReal x357=(gclwh0_0*r20*x77);
IkReal x358=(gclwh9_0*rxp0_2*x68);
IkReal x359=((2.0)*gclwh15_10*x88);
IkReal x360=(x158*x77);
IkReal x361=(gclwh2_1*x278);
IkReal x362=(gclwh5_9*npz*x68);
IkReal x363=(gclwh7_1*pp*x70);
IkReal x364=(gclwh11_0*rxp2_2*x68);
IkReal x365=(gclwh13_9*npy*x68);
IkReal x366=(x199*x67);
IkReal x367=((0.08535)*gclwh5_9*x84);
IkReal x368=(gclwh15_9*npx*x68);
IkReal x369=((0.08535)*gclwh13_9*x69);
IkReal x370=(gclwh11_1*pp*x108);
IkReal x371=((2.0)*gclwh5_10*x75);
IkReal x372=(x189*x73);
IkReal x373=(gclwh7_0*rxp1_2*x68);
IkReal x374=(gclwh15_0*r20*x77);
IkReal x375=(x88*x95);
IkReal x376=((0.11235)*gclwh5_15*x84);
IkReal x377=((0.11235)*gclwh13_15*x69);
IkReal x378=(x154*x73);
IkReal x379=(x187*x75);
IkReal x380=((0.11235)*gclwh15_15*x83);
IkReal x381=(x186*x82);
IkReal x382=(x104*x82);
IkReal x383=(x185*x73);
IkReal x384=(x137*x88);
IkReal x385=(x161*x69);
IkReal x386=(x164*x75);
IkReal x387=(x103*x82);
IkReal x388=(x188*x73);
IkReal x389=(x124*x82);
IkReal x390=(gclwh6_2*npy*x277);
IkReal x391=(gclwh6_3*x73*x82);
IkReal x392=(gclwh6_2*x105*x69);
IkReal x393=(gclwh10_2*npz*x277);
IkReal x394=(gclwh8_2*npx*x277);
IkReal x395=(gclwh11_1*x75*x82);
IkReal x396=(gclwh7_0*npy*x277);
IkReal x397=(gclwh9_0*npx*x277);
IkReal x398=(x198*x279);
IkReal x399=(gclwh7_1*x73*x82);
IkReal x400=(gclwh11_0*npz*x277);
IkReal x401=(gclwh7_0*x105*x69);
IkReal x402=(gclwh12_2*npy*x277);
IkReal x403=(gclwh3_2*npy*x277);
IkReal x404=(gclwh1_2*npx*x277);
IkReal x405=(gclwh14_3*x82*x88);
IkReal x406=(gclwh4_2*npz*x277);
IkReal x407=(gclwh4_3*x75*x82);
IkReal x408=(gclwh12_2*x105*x69);
IkReal x409=(gclwh1_2*x105*x83);
IkReal x410=(gclwh3_3*x73*x82);
IkReal x411=(gclwh4_2*x105*x84);
IkReal x412=(gclwh1_3*x82*x88);
IkReal x413=(gclwh3_2*x105*x69);
IkReal x414=(gclwh12_3*x73*x82);
IkReal x415=(gclwh14_2*npx*x277);
IkReal x416=(x196*x279);
IkReal x417=(gclwh0_0*npx*x277);
IkReal x418=(gclwh2_0*npy*x277);
IkReal x419=(gclwh5_1*x75*x82);
IkReal x420=((2.0)*x71*x73);
IkReal x421=(gclwh15_0*npx*x277);
IkReal x422=(gclwh2_1*x73*x82);
IkReal x423=(gclwh0_1*x82*x88);
IkReal x424=(gclwh5_0*npz*x277);
IkReal x425=(gclwh13_0*npy*x277);
IkReal x426=(gclwh0_0*x105*x83);
IkReal x427=(gclwh15_0*x105*x83);
IkReal x428=(gclwh2_0*x105*x69);
IkReal x429=((1.0)*gclwh13_1*x278);
IkReal x430=(x191*x279);
IkReal x431=(gclwh15_1*x82*x88);
IkReal x432=(x228+x227);
IkReal x433=(x232+x231);
IkReal x434=(x270+x271);
IkReal x435=(x204+x203);
IkReal x436=(x265+x266);
IkReal x437=(x259+x260);
IkReal x438=(x212+x213+x215+x297);
IkReal x439=(x307+x218+x219+x220);
IkReal x440=(x350+x344+x245+x244);
IkReal x441=(x372+x371+x252+x253);
IkReal x442=(x324+x322+x323+x233);
IkReal x443=(x202+x282+x281+x280);
IkReal x444=(x380+x379+x378+x258);
IkReal x445=(x318+x317+x316+x226);
IkReal x446=(x338+x238+x239+x237+x241);
IkReal x447=(x359+x250+x246+x249+x248);
IkReal x448=(x311+x310+x221+x222+x224);
IkReal x449=(x210+x211+x208+x290+x291);
IkReal x450=(x320+x321+x319+x229+x230);
IkReal x451=(x206+x205+x285+x284+x283);
IkReal x452=(x325+x326+x327+x236+x235);
IkReal x453=(x377+x376+x375+x255+x256);
IkReal x454=(x386+x384+x385+x267+x269+x268);
IkReal x455=(((gclwh7_10*x79))+((x131*x69))+((gclwh5_10*x168))+((x145*x88))+((x125*x75))+((gclwh13_10*x130)));
IkReal x456=(x382+x383+x381+x261+x263+x262);
IkReal x457=(x387+x388+x389+x274+x275+x273);
IkReal x458=(x300+x394+x391+x393+x392+x214+x298+x299+x296);
IkReal x459=(x390+x207+x209+x292+x293+x294+x295+x289+x288+x287+x286);
IkReal x460=(x315+x314+x313+x312+x397+x399+x398+x223+x401+x400);
IkReal x461=(x308+x309+x306+x304+x305+x302+x303+x301+x395+x396+x216+x217);
IkReal x462=(x374+x373+x370+x368+x369+x367+x254+x251+x429+x428+x427+x426+x425+x424+x423+x422+x430+x431);
IkReal x463=(x339+x333+x332+x331+x330+x337+x336+x335+x334+x328+x329+x340+x242+x240+x403+x402+x405+x404+x406+x68);
IkReal x464=(x342+x343+x341+x346+x347+x345+x348+x349+x243+x407+x409+x408+x412+x413+x410+x411+x416+x414+x415);
IkReal x465=(x351+x353+x352+x355+x354+x357+x356+x358+x360+x361+x362+x363+x364+x365+x366+x247+x417+x418+x419+x421+x420+x68);
op[0]=((((-1.0)*x183*x80))+(((0.9138)*gclwh10_12*x75))+(((-0.4569)*gclwh10_12*x84))+(((0.9138)*gclwh8_12*x88))+(((-1.0)*gclwh10_12*x114))+(((0.4569)*gclwh6_12*x69))+(((-1.0)*x201))+(((-1.0)*gclwh12_8*x190))+(((-1.0)*x451))+x435+x443+(((0.07799283)*x113))+(((0.00332834402025)*x126))+(((-0.00332834402025)*x80))+(((-0.9138)*gclwh6_12*x73))+(((-0.07799283)*x123)));
op[1]=((((-1.0)*gclwh12_3*x165))+(((-1.0)*x449))+(((-0.2068108875)*gclwh6_3*x69))+(((0.036546103557)*x101))+(((-1.0)*gclwh6_11*x69))+(((-1.0)*x458))+(((-1.0)*gclwh6_3*x111))+x438+x459+(((0.42819102)*gclwh6_3*x73))+(((-1.0)*gclwh4_3*x163))+((gclwh8_11*x83))+((gclwh10_11*x84)));
op[2]=((-0.09583455)+(((-1.0)*x454))+x456);
op[3]=((((-0.08318211)*x113))+((gclwh8_2*x127))+(((-1.0)*x436))+(((-0.07280355)*x141))+(((-1.0)*gclwh12_2*x132))+(((-0.00310689149625)*x150))+(((-0.853)*gclwh10_2*x75))+(((0.08318211)*x123))+(((-0.853)*gclwh8_2*x88))+x264+(((0.4265)*gclwh10_2*x84))+(((0.00310689149625)*x117))+((gclwh12_8*x160))+(((0.853)*gclwh6_2*x73))+((gclwh14_2*x172))+(((-0.4265)*gclwh6_2*x69))+(((0.4265)*gclwh8_2*x83)));
op[4]=((((-1.0)*x435))+(((-0.0304)*gclwh10_12*x84))+((gclwh12_8*x109))+(((0.0304)*gclwh6_12*x69))+(((-1.0)*x153*x80))+(((0.00518928)*x123))+(((0.0608)*gclwh8_12*x88))+(((-0.000221452524)*x80))+(((-0.000221452524)*x193))+(((-1.0)*x451))+x201+x443+(((-0.00518928)*x113))+(((-1.0)*gclwh6_12*x276))+(((0.000221452524)*x126))+(((0.0608)*gclwh10_12*x75)));
op[5]=((((0.0010225625)*gclwh6_3*x69))+(((-1.0)*x438))+(((-1.0)*gclwh4_3*x89))+(((-1.0)*gclwh8_11*x83))+(((-1.0)*gclwh10_11*x84))+(((-1.0)*x458))+x449+x459+(((-1.0)*gclwh6_3*x74))+(((0.001068933642)*x101))+(((-1.0)*gclwh12_3*x119))+((gclwh6_11*x69))+(((0.01252412)*gclwh6_3*x73)));
op[6]=((((-1.0)*x439))+(((0.42819102)*gclwh7_1*x73))+(((-1.0)*gclwh5_1*x163))+((gclwh7_10*x69))+(((-1.0)*gclwh7_1*x111))+(((-1.0)*gclwh13_1*x165))+(((-1.0)*x460))+(((0.2068108875)*gclwh11_1*x84))+x448+x461+(((-0.2068108875)*gclwh7_1*x69))+(((-1.0)*gclwh9_10*x83))+(((-0.42819102)*gclwh11_1*x75))+(((-1.0)*gclwh11_10*x84))+(((0.036546103557)*x148))+(((0.00155960496929498)*x198)));
op[7]=((((0.4569)*gclwh7_13*x69))+(((-1.0)*gclwh13_9*x190))+(((-0.4569)*gclwh9_13*x83))+(((0.07799283)*x140))+(((-1.0)*x183*x78))+(((0.00332834402025)*x177))+(((-1.0)*x450))+(((-0.00332834402025)*x78))+x432+x445+(((-0.00332834402025)*x149))+(((0.9138)*gclwh11_13*x75))+(((0.9138)*gclwh9_13*x88))+(((-0.07799283)*x147))+(((-1.0)*x225))+(((-0.9138)*gclwh7_13*x73)));
op[8]=((((0.4265)*gclwh11_0*x84))+(((-0.07280355)*x181))+(((0.853)*gclwh7_0*x73))+(((0.00310689149625)*x72))+(((-0.4265)*gclwh7_0*x69))+(((0.08318211)*x140))+(((-0.853)*gclwh11_0*x75))+(((-0.08318211)*x147))+(((-1.0)*gclwh13_9*x160))+(((-0.07280355)*x106))+((gclwh15_0*x172))+x434+(((0.00310689149625)*x174))+(((-1.0)*x272))+(((-0.853)*gclwh9_0*x88))+(((-0.00310689149625)*x138))+(((0.4265)*pp*x72)));
op[9]=((-0.09583455)+(((-1.0)*x455))+x457);
op[10]=((((-1.0)*gclwh7_1*x74))+(((-1.0)*x448))+(((-1.0)*gclwh13_1*x119))+(((0.0010225625)*gclwh7_1*x69))+(((-0.01252412)*gclwh11_1*x75))+(((-1.0)*x460))+(((-1.0)*gclwh7_10*x69))+((gclwh11_1*x144))+(((-1.0)*gclwh5_1*x89))+x439+x461+(((0.01252412)*gclwh7_1*x73))+((gclwh11_10*x84))+((gclwh9_10*x83))+(((0.001068933642)*x148))+(((-0.0010225625)*gclwh11_1*x84)));
op[11]=((((-0.00518928)*x140))+(((-1.0)*x432))+(((0.00518928)*x147))+(((-0.000221452524)*x149))+(((-1.0)*x450))+x225+x445+(((0.0608)*gclwh11_13*x75))+(((-1.0)*gclwh7_13*x276))+(((0.0304)*gclwh7_13*x69))+((gclwh13_9*x109))+(((0.0608)*gclwh9_13*x88))+(((-1.0)*x153*x78))+(((-0.000221452524)*x78))+(((-0.0304)*gclwh9_13*x83))+(((0.000221452524)*x177)));
op[12]=((((-0.00332834402025)*x129))+(((-0.9138)*gclwh14_8*x88))+(((-1.0)*x442))+(((-0.4569)*gclwh4_8*x84))+(((-1.0)*gclwh6_12*x190))+(((-1.0)*gclwh4_8*x114))+(((0.9138)*gclwh4_8*x75))+(((-0.4569)*gclwh12_8*x69))+(((0.07799283)*x169))+(((0.00332834402025)*x175))+(((-1.0)*x234))+x433+x452+(((0.4569)*gclwh14_8*x83))+(((0.07799283)*x200))+(((0.9138)*gclwh12_8*x73)));
op[13]=((-0.2213801325)+(((-0.2068108875)*gclwh12_3*x69))+(((-1.0)*x446))+(((0.42819102)*gclwh12_3*x73))+(((-1.0)*gclwh12_11*x69))+(((-1.0)*gclwh4_11*x84))+((gclwh6_3*x165))+((gclwh3_3*x111))+(((-0.2213801325)*gclwh3_3*x69))+(((-1.0)*x464))+((gclwh14_11*x83))+(((-0.2213801325)*gclwh1_3*x83))+(((0.42819102)*gclwh4_3*x75))+(((0.42819102)*gclwh3_3*x73))+x440+x463+(((-0.00155960496929498)*x112))+(((-1.0)*gclwh12_3*x111))+(((0.2068108875)*gclwh14_3*x83))+(((-0.2068108875)*gclwh4_3*x84))+(((-0.42819102)*gclwh14_3*x88))+(((0.42819102)*gclwh1_3*x88))+(((0.00155960496929498)*x162))+(((0.00155960496929498)*x196)));
op[14]=((-0.053024565)+((gclwh6_11*x130))+(((-1.0)*gclwh12_11*x79))+(((-0.014569245)*x184))+(((4.0)*gclwh4_11*x75))+(((-1.0)*x173*x69))+(((0.014569245)*x142))+(((-1.0)*x184*x82))+((x142*x82))+(((-1.0)*gclwh8_11*x87))+(((4.0)*gclwh12_11*x73))+(((-4.0)*gclwh14_11*x88))+(((-1.0)*gclwh10_11*x168)));
op[15]=((((-0.9746)*gclwh12_8*x73))+(((-0.4265)*gclwh4_2*x84))+(((-0.00310689149625)*x115))+((gclwh14_14*x156))+(((-0.4265)*gclwh1_2*x83))+(((0.4265)*gclwh14_2*x83))+(((-1.0)*gclwh12_2*x151))+(((0.4873)*gclwh4_8*x84))+(((-0.00354979654425)*x175))+((gclwh6_2*x132))+(((0.853)*gclwh3_2*x73))+(((0.853)*gclwh1_2*x88))+(((-0.853)*npx*x85))+(((-0.4265)*gclwh12_2*x69))+((gclwh14_2*x127))+(((-0.4265)*gclwh3_2*x69))+(((-1.0)*x192*x84))+(((0.4494)*gclwh4_14*x75))+(((-0.4873)*gclwh14_8*x83))+((x194*x83))+(((0.4873)*gclwh12_8*x69))+(((-1.0)*x195*x69))+(((-0.4494)*gclwh14_14*x88))+(((-0.07280355)*x97))+(((0.853)*gclwh12_2*x73))+(((0.9746)*gclwh14_8*x88))+(((-1.0)*gclwh10_2*x182))+(((0.00354979654425)*x171))+(((-0.9746)*gclwh4_8*x75))+(((-0.00163685467575)*gclwh12_14*r21))+((gclwh3_2*x151))+(((0.853)*gclwh4_2*x75))+(((-0.00163685467575)*x134))+((gclwh1_2*x127))+(((0.00354979654425)*x129))+(((0.4494)*gclwh12_14*x73)));
op[16]=((((-0.0608)*gclwh4_8*x75))+(((-0.000221452524)*x175))+(((-1.0)*gclwh12_8*x276))+(((-1.0)*gclwh6_12*x109))+(((0.0304)*gclwh12_8*x69))+(((-1.0)*x452))+(((0.0608)*gclwh14_8*x88))+(((0.0304)*gclwh4_8*x84))+(((-1.0)*x234))+x433+x442+(((0.000221452524)*x129))+(((-0.0304)*gclwh14_8*x83))+(((0.00518928)*x200))+(((0.000221452524)*x171))+(((0.00518928)*x169)));
op[17]=((0.0135466825)+(((-4.561674317235e-5)*x112))+((gclwh3_3*x74))+(((-1.0)*x440))+(((-0.0135466825)*gclwh1_3*x83))+(((0.01252412)*gclwh12_3*x73))+(((-1.0)*gclwh14_11*x83))+(((-0.01252412)*gclwh14_3*x88))+(((-1.0)*x464))+(((0.01252412)*gclwh4_3*x75))+((gclwh4_11*x84))+(((4.561674317235e-5)*x196))+(((0.01252412)*gclwh1_3*x88))+(((4.561674317235e-5)*x162))+x446+x463+((gclwh6_3*x119))+(((-1.0)*gclwh12_3*x74))+(((-0.0135466825)*gclwh3_3*x69))+(((0.0010225625)*gclwh4_3*x84))+(((0.0010225625)*gclwh12_3*x69))+(((0.01252412)*gclwh3_3*x73))+((gclwh12_11*x69))+(((-0.0010225625)*gclwh14_3*x83)));
op[18]=((0.2213801325)+((gclwh15_10*x83))+(((-1.0)*x447))+((gclwh2_1*x111))+(((-1.0)*gclwh5_10*x84))+((gclwh13_1*x111))+(((0.42819102)*gclwh0_1*x88))+(((0.42819102)*gclwh2_1*x73))+((gclwh11_1*x163))+(((0.2068108875)*gclwh13_1*x69))+(((-1.0)*x462))+(((-1.0)*gclwh7_1*x165))+(((0.42819102)*gclwh15_1*x88))+(((0.2068108875)*gclwh5_1*x84))+x441+x465+(((-0.2213801325)*gclwh2_1*x69))+(((-0.2213801325)*gclwh0_1*x83))+(((-1.0)*gclwh13_10*x69))+(((-0.00155960496929498)*x81))+(((-0.42819102)*gclwh13_1*x73))+(((-0.42819102)*gclwh5_1*x75))+(((-0.2068108875)*pp*x81))+(((0.00155960496929498)*x191))+(((0.00155960496929498)*x199)));
op[19]=((((-0.00332834402025)*x121))+(((-1.0)*x437))+(((-0.9138)*gclwh5_9*x75))+(((0.4569)*gclwh5_9*x84))+(((-0.07799283)*x92))+((gclwh7_13*x190))+(((-1.0)*x453))+x257+x444+(((-0.9138)*gclwh13_9*x73))+(((0.00332834402025)*x96))+(((-0.07799283)*x167))+(((0.4569)*gclwh13_9*x69))+(((0.00332834402025)*x128))+(((-0.4569)*gclwh15_9*x83))+(((0.9138)*gclwh15_9*x88)));
op[20]=((((0.00354979654425)*x96))+(((-0.00354979654425)*x121))+(((-0.4873)*gclwh15_9*x83))+((gclwh0_0*x127))+(((-0.853)*gclwh5_0*x75))+(((0.00310689149625)*x93))+(((-1.0)*gclwh7_0*x132))+(((0.4494)*gclwh5_15*x75))+(((0.4873)*gclwh5_9*x84))+(((0.4265)*gclwh13_0*x69))+(((-0.00163685467575)*gclwh5_15*r22))+(((0.4494)*gclwh13_15*x73))+(((-0.9746)*gclwh13_9*x73))+(((-0.00163685467575)*x76))+(((-0.9746)*gclwh5_9*x75))+(((-1.0)*gclwh15_0*x127))+(((-0.4265)*gclwh15_0*x83))+(((-0.4494)*gclwh15_15*x88))+(((-0.4265)*gclwh0_0*x83))+(((0.853)*gclwh0_0*x88))+(((-1.0)*x154*x69))+((gclwh15_15*x156))+(((0.4873)*gclwh13_9*x69))+(((0.4265)*gclwh5_0*x84))+(((-0.853)*gclwh13_0*x73))+(((0.9746)*gclwh15_9*x88))+((x83*x95))+(((0.00310689149625)*x158))+(((0.00354979654425)*x128))+((gclwh9_0*x172))+((gclwh13_0*x151))+(((0.853)*gclwh15_0*x88))+(((-1.0)*x187*x84))+(((0.853)*gclwh2_0*x73))+((gclwh11_0*x182))+(((-0.4265)*gclwh2_0*x69)));
op[21]=((-0.053024565)+(((-1.0)*x82*x90))+((x189*x69))+((gclwh11_10*x168))+(((4.0)*gclwh15_10*x88))+(((0.014569245)*x122))+((gclwh13_10*x79))+(((-1.0)*gclwh7_10*x130))+(((-4.0)*gclwh13_10*x73))+(((-0.014569245)*x90))+((x122*x82))+((gclwh9_10*x87))+(((-4.0)*gclwh5_10*x75)));
op[22]=((-0.0135466825)+(((-1.0)*x441))+(((0.01252412)*gclwh0_1*x88))+((gclwh5_10*x84))+((gclwh13_10*x69))+((gclwh11_1*x89))+((gclwh5_1*x144))+(((0.01252412)*gclwh2_1*x73))+(((-0.01252412)*gclwh13_1*x73))+((gclwh2_1*x74))+(((-0.0135466825)*gclwh2_1*x69))+(((-1.0)*gclwh7_1*x119))+(((-1.0)*x462))+(((-4.561674317235e-5)*x81))+((gclwh13_1*x74))+(((4.561674317235e-5)*x199))+(((0.0010225625)*pp*x81))+x447+x465+(((0.01252412)*gclwh15_1*x88))+(((-1.0)*gclwh15_10*x83))+(((-0.0010225625)*gclwh13_1*x69))+(((-0.0010225625)*gclwh5_1*x84))+(((-0.01252412)*gclwh5_1*x75))+(((-0.0135466825)*gclwh0_1*x83)));
op[23]=(((gclwh7_13*x109))+(((-1.0)*x444))+(((-0.000221452524)*x128))+(((-1.0)*x437))+(((-0.00518928)*x92))+(((0.0304)*gclwh15_9*x83))+(((-0.000221452524)*x96))+(((-0.0608)*gclwh15_9*x88))+x257+x453+(((-0.0304)*gclwh5_9*x84))+(((-0.0304)*gclwh13_9*x69))+(((0.000221452524)*x121))+((gclwh13_9*x276))+(((0.0608)*gclwh5_9*x75))+(((-0.00518928)*x167)));
op[24]=((-0.20533086)+(((-1.0)*x454))+x456);
op[25]=((((0.0066566880405)*x133))+(((-1.0)*x436))+(((0.0066566880405)*x117))+(((1.8276)*gclwh6_2*x73))+((gclwh14_2*x100))+(((-0.0066566880405)*x150))+(((0.9138)*gclwh8_2*x83))+(((-0.9138)*gclwh6_2*x69))+x264+(((-0.15598566)*x180))+(((-1.8276)*gclwh8_2*x88))+(((-0.15598566)*x141))+(((-1.8276)*gclwh10_2*x75))+(((0.9138)*gclwh10_2*x84)));
op[26]=((((-1.706)*gclwh10_12*x75))+(((0.0062137829925)*x193))+(((-0.07671258)*x116))+(((-0.07671258)*x107))+(((0.07671258)*x176))+(((-1.706)*gclwh8_12*x88))+(((-0.853)*gclwh6_12*x69))+(((0.853)*gclwh10_12*x84))+(((0.0062137829925)*x80))+(((1.706)*gclwh6_12*x73))+((x80*x91))+(((-0.0062137829925)*x126)));
op[27]=((((8.0)*gclwh10_11*x75))+(((-1.0)*x164*x84))+(((-0.02913849)*x186))+((x185*x69))+(((0.02913849)*x86))+(((-1.0)*gclwh14_11*x146))+((gclwh4_11*x98))+(((-0.02913849)*x104))+(((8.0)*gclwh8_11*x88))+(((-1.0)*x137*x83))+(((-8.0)*gclwh6_11*x73))+((gclwh12_11*x135)));
op[28]=((-0.01366176)+(((-1.0)*x456))+x454);
op[29]=((((0.0608)*gclwh10_2*x84))+(((-0.1216)*gclwh10_2*x75))+((gclwh14_2*x120))+(((-0.01037856)*x141))+(((-0.01037856)*x180))+(((0.000442905048)*x117))+(((0.0608)*gclwh8_2*x83))+(((-0.1216)*gclwh8_2*x88))+x436+(((0.1216)*gclwh6_2*x73))+(((0.000442905048)*x133))+(((-0.0608)*gclwh6_2*x69))+(((-1.0)*x264))+(((-0.000442905048)*x150)));
op[30]=((((0.0066566880405)*x174))+(((-1.8276)*gclwh9_0*x88))+((gclwh15_0*x100))+(((-0.0066566880405)*x138))+(((-0.9138)*gclwh7_0*x69))+x434+(((-0.15598566)*x106))+(((-0.15598566)*x181))+(((-1.0)*x272))+(((-1.8276)*gclwh11_0*x75))+(((0.9138)*gclwh11_0*x84))+(((0.0066566880405)*x72))+(((0.9138)*pp*x72))+(((1.8276)*gclwh7_0*x73)));
op[31]=((-0.20533086)+(((-1.0)*x455))+x457);
op[32]=((((0.02913849)*x124))+((gclwh15_10*x146))+(((0.02913849)*x103))+((x125*x84))+(((-1.0)*x188*x69))+((x145*x83))+(((-8.0)*gclwh11_10*x75))+(((8.0)*gclwh7_10*x73))+(((-1.0)*gclwh13_10*x135))+(((-1.0)*gclwh5_10*x98))+(((-0.02913849)*gclwh7_10*r21))+(((-8.0)*gclwh9_10*x88)));
op[33]=((((-0.07671258)*x139))+(((0.853)*gclwh9_13*x83))+((x78*x91))+(((-0.0062137829925)*x177))+(((-0.07671258)*x197))+(((0.07671258)*x136))+(((-0.853)*gclwh7_13*x69))+(((-1.706)*gclwh11_13*x75))+(((-1.706)*gclwh9_13*x88))+(((0.0062137829925)*x149))+(((0.0062137829925)*x78))+(((1.706)*gclwh7_13*x73)));
op[34]=((((-0.1216)*gclwh9_0*x88))+(((-0.0608)*gclwh7_0*x69))+(((0.0608)*gclwh11_0*x84))+(((0.000442905048)*x72))+(((-1.0)*x434))+(((-0.1216)*gclwh11_0*x75))+((gclwh15_0*x120))+(((0.000442905048)*x174))+(((-0.01037856)*x181))+x272+(((-0.000442905048)*x138))+(((-0.01037856)*x106))+(((0.0608)*pp*x72))+(((0.1216)*gclwh7_0*x73)));
IkReal x466=pz*pz;
IkReal x467=pp*pp;
IkReal x468=((0.1707)*pz);
IkReal x469=(npy*pz);
IkReal x470=(pp*r21);
IkReal x471=((0.1707)*rxp1_2);
IkReal x472=(gclwh13_1*pp);
IkReal x473=(gclwh9_13*rxp0_2);
IkReal x474=((4.561674317235e-5)*r21);
IkReal x475=((4.0)*gclwh12_11);
IkReal x476=(npz*pz);
IkReal x477=((0.00163685467575)*r21);
IkReal x478=(gclwh10_12*rxp2_2);
IkReal x479=(pz*r20);
IkReal x480=(gclwh4_2*r22);
IkReal x481=(gclwh11_13*r22);
IkReal x482=((0.02913849)*r22);
IkReal x483=((0.014569245)*r21);
IkReal x484=(gclwh15_1*r20);
IkReal x485=(pp*r20);
IkReal x486=((2.0)*gclwh11_10);
IkReal x487=((0.0072846225)*r21);
IkReal x488=(npx*pz);
IkReal x489=((0.001068933642)*rxp2_2);
IkReal x490=((2.0)*gclwh4_11);
IkReal x491=(gclwh5_9*r22);
IkReal x492=((0.08535)*pp);
IkReal x493=(gclwh2_0*pz);
IkReal x494=((0.019178145)*rxp0_2);
IkReal x495=((0.2247)*gclwh15_15);
IkReal x496=(gclwh9_0*rxp0_2);
IkReal x497=(gclwh8_2*rxp0_2);
IkReal x498=(gclwh12_8*rxp1_2);
IkReal x499=((0.3414)*rxp0_2);
IkReal x500=(pp*r22);
IkReal x501=(gclwh14_3*rxp0_2);
IkReal x502=(gclwh13_0*pz);
IkReal x503=(gclwh12_2*r21);
IkReal x504=(gclwh11_10*rxp2_2);
IkReal x505=((0.0072846225)*r22);
IkReal x506=((0.1707)*rxp2_2);
IkReal x507=(gclwh5_1*pp);
IkReal x508=(gclwh5_0*pz);
IkReal x509=((0.00155960496929498)*r21);
IkReal x510=((2.0)*gclwh9_10);
IkReal x511=((2.0)*gclwh15_10);
IkReal x512=(gclwh14_11*r20);
IkReal x513=((0.1707)*rxp0_2);
IkReal x514=((4.0)*gclwh14_11);
IkReal x515=((0.00332834402025)*r22);
IkReal x516=((0.08318211)*rxp0_2);
IkReal x517=(gclwh12_14*rxp1_2);
IkReal x518=((0.4494)*gclwh4_14);
IkReal x519=(gclwh6_12*rxp1_2);
IkReal x520=((0.001068933642)*rxp1_2);
IkReal x521=(gclwh15_9*r20);
IkReal x522=((0.4494)*gclwh15_15);
IkReal x523=(gclwh4_8*rxp2_2);
IkReal x524=((0.2247)*gclwh12_14);
IkReal x525=((0.0072846225)*r20);
IkReal x526=((0.00310689149625)*r20);
IkReal x527=((0.3414)*rxp1_2);
IkReal x528=((0.6828)*rxp0_2);
IkReal x529=((2.0)*gclwh7_10);
IkReal x530=((0.000442905048)*r21);
IkReal x531=((1.0)*pp);
IkReal x532=((0.0032737093515)*r20);
IkReal x533=((0.07280355)*rxp1_2);
IkReal x534=((1.0)*pz);
IkReal x535=((4.0)*gclwh15_10);
IkReal x536=(gclwh4_14*r22);
IkReal x537=((0.000818427337875)*r20);
IkReal x538=(gclwh7_0*pz);
IkReal x539=(gclwh5_15*rxp2_2);
IkReal x540=(gclwh12_3*pp);
IkReal x541=(gclwh10_2*pz);
IkReal x542=(gclwh13_9*r21);
IkReal x543=(gclwh13_9*rxp1_2);
IkReal x544=((0.014569245)*rxp0_2);
IkReal x545=((0.019178145)*rxp1_2);
IkReal x546=((4.561674317235e-5)*r22);
IkReal x547=((0.15598566)*rxp1_2);
IkReal x548=(gclwh5_0*r22);
IkReal x549=(gclwh5_9*rxp2_2);
IkReal x550=((0.000221452524)*r20);
IkReal x551=(gclwh4_3*pp);
IkReal x552=(gclwh15_1*rxp0_2);
IkReal x553=(gclwh6_12*r21);
IkReal x554=((0.03835629)*rxp0_2);
IkReal x555=((0.019178145)*rxp2_2);
IkReal x556=(gclwh7_1*pp);
IkReal x557=((0.000818427337875)*r22);
IkReal x558=(gclwh10_11*rxp2_2);
IkReal x559=((0.000442905048)*r20);
IkReal x560=((0.4569)*pp);
IkReal x561=((0.000818427337875)*r21);
IkReal x562=((4.0)*gclwh4_11);
IkReal x563=((0.4494)*gclwh12_14);
IkReal x564=((2.0)*pp);
IkReal x565=((0.014569245)*r22);
IkReal x566=(gclwh12_8*r21);
IkReal x567=((0.00332834402025)*r20);
IkReal x568=((2.0)*gclwh6_11);
IkReal x569=(gclwh1_3*r20);
IkReal x570=((0.036546103557)*rxp2_2);
IkReal x571=((0.036546103557)*rxp1_2);
IkReal x572=((0.3414)*rxp2_2);
IkReal x573=(gclwh4_8*r22);
IkReal x574=((0.07280355)*rxp0_2);
IkReal x575=((2.0)*gclwh12_11);
IkReal x576=(gclwh2_0*r21);
IkReal x577=(gclwh5_15*r22);
IkReal x578=(gclwh6_2*pz);
IkReal x579=((0.4494)*gclwh13_15);
IkReal x580=(gclwh7_13*r21);
IkReal x581=(gclwh11_0*pz);
IkReal x582=((0.014569245)*r20);
IkReal x583=((0.00518928)*rxp0_2);
IkReal x584=(gclwh13_0*r21);
IkReal x585=((0.00310689149625)*r22);
IkReal x586=((2.0)*gclwh8_11);
IkReal x587=(gclwh11_0*rxp2_2);
IkReal x588=((0.00163685467575)*r20);
IkReal x589=((0.07280355)*rxp2_2);
IkReal x590=((4.0)*gclwh5_10);
IkReal x591=((2.0)*gclwh5_10);
IkReal x592=((0.6828)*rxp1_2);
IkReal x593=(gclwh8_12*rxp0_2);
IkReal x594=((0.00155960496929498)*r22);
IkReal x595=((0.07799283)*rxp0_2);
IkReal x596=((0.4494)*gclwh14_14);
IkReal x597=((0.2247)*gclwh5_15);
IkReal x598=((2.0)*gclwh13_10);
IkReal x599=((0.00310689149625)*r21);
IkReal x600=((0.2247)*gclwh4_14);
IkReal x601=(gclwh14_3*r20);
IkReal x602=((0.01037856)*rxp1_2);
IkReal x603=(gclwh11_13*rxp2_2);
IkReal x604=((0.4494)*gclwh5_15);
IkReal x605=((0.2247)*gclwh14_14);
IkReal x606=(gclwh12_2*pz);
IkReal x607=((0.02913849)*r21);
IkReal x608=((0.0066566880405)*r20);
IkReal x609=(gclwh14_8*r20);
IkReal x610=((0.0032737093515)*r21);
IkReal x611=((0.2247)*gclwh13_15);
IkReal x612=(gclwh0_1*r20);
IkReal x613=((2.0)*gclwh10_11);
IkReal x614=(gclwh7_13*rxp1_2);
IkReal x615=(gclwh10_2*rxp2_2);
IkReal x616=((4.0)*gclwh13_10);
IkReal x617=((2.0)*gclwh14_11);
IkReal x618=(gclwh8_11*x499);
IkReal x619=((0.3414)*x558);
IkReal x620=(gclwh12_11*x483);
IkReal x621=(gclwh4_11*x565);
IkReal x622=((0.014569245)*x512);
IkReal x623=(gclwh6_11*x527);
IkReal x624=((0.00163685467575)*x536);
IkReal x625=(gclwh12_14*x477);
IkReal x626=(gclwh14_14*x588);
IkReal x627=((0.00163685467575)*x577);
IkReal x628=(gclwh13_15*x477);
IkReal x629=(gclwh15_15*x588);
IkReal x630=(gclwh7_10*x527);
IkReal x631=(gclwh15_10*x582);
IkReal x632=(gclwh13_10*x483);
IkReal x633=((0.3414)*x504);
IkReal x634=(gclwh5_10*x565);
IkReal x635=(gclwh9_10*x499);
IkReal x636=((0.019178145)*x517);
IkReal x637=(gclwh4_14*x555);
IkReal x638=(gclwh6_5*x561);
IkReal x639=(gclwh10_5*x557);
IkReal x640=(gclwh8_5*x537);
IkReal x641=(gclwh14_14*x494);
IkReal x642=((0.014569245)*x523);
IkReal x643=(gclwh14_11*x513);
IkReal x644=((0.014569245)*x498);
IkReal x645=(gclwh10_11*x505);
IkReal x646=(gclwh8_11*x525);
IkReal x647=(gclwh6_11*x487);
IkReal x648=(gclwh4_11*x506);
IkReal x649=(gclwh14_8*x544);
IkReal x650=(gclwh12_11*x471);
IkReal x651=(gclwh5_10*x572);
IkReal x652=(gclwh7_10*x483);
IkReal x653=(gclwh13_10*x527);
IkReal x654=(gclwh13_10*x471);
IkReal x655=(gclwh7_10*x487);
IkReal x656=((0.014569245)*x543);
IkReal x657=(gclwh5_10*x506);
IkReal x658=((0.014569245)*x549);
IkReal x659=(gclwh15_9*x544);
IkReal x660=(gclwh11_10*x505);
IkReal x661=(gclwh15_10*x513);
IkReal x662=(gclwh9_10*x525);
IkReal x663=(gclwh13_15*x545);
IkReal x664=(gclwh7_7*x561);
IkReal x665=((0.019178145)*x539);
IkReal x666=(gclwh15_15*x494);
IkReal x667=(gclwh11_7*x557);
IkReal x668=(gclwh9_7*x537);
IkReal x669=(gclwh12_14*x561);
IkReal x670=(gclwh8_5*x494);
IkReal x671=(gclwh10_5*x555);
IkReal x672=((0.000818427337875)*x536);
IkReal x673=(gclwh6_5*x545);
IkReal x674=(gclwh14_14*x537);
IkReal x675=((0.000621742530375)*x573);
IkReal x676=(gclwh6_11*x471);
IkReal x677=((0.0072846225)*x512);
IkReal x678=((0.000621742530375)*x566);
IkReal x679=((0.000621742530375)*x609);
IkReal x680=(gclwh8_11*x513);
IkReal x681=(gclwh10_11*x506);
IkReal x682=(gclwh12_11*x487);
IkReal x683=(gclwh4_11*x505);
IkReal x684=(gclwh15_10*x525);
IkReal x685=((0.000621742530375)*x521);
IkReal x686=(gclwh7_10*x471);
IkReal x687=((0.000621742530375)*x542);
IkReal x688=(gclwh9_10*x513);
IkReal x689=(gclwh5_10*x505);
IkReal x690=((0.1707)*x504);
IkReal x691=(gclwh13_10*x487);
IkReal x692=((0.000621742530375)*x491);
IkReal x693=(r21*x467);
IkReal x694=((2.0)*x466);
IkReal x695=((1.0)*x467);
IkReal x696=(x490*x500);
IkReal x697=(x470*x575);
IkReal x698=(x488*x514);
IkReal x699=(x485*x617);
IkReal x700=(x469*x475);
IkReal x701=(x476*x562);
IkReal x702=(x500*x600);
IkReal x703=(x488*x596);
IkReal x704=(x470*x524);
IkReal x705=(x476*x518);
IkReal x706=(x485*x605);
IkReal x707=(x469*x563);
IkReal x708=(x500*x597);
IkReal x709=(x470*x611);
IkReal x710=(x488*x522);
IkReal x711=(x485*x495);
IkReal x712=(x469*x579);
IkReal x713=(x476*x604);
IkReal x714=(x485*x511);
IkReal x715=(x476*x590);
IkReal x716=(x469*x616);
IkReal x717=(x470*x598);
IkReal x718=(x488*x535);
IkReal x719=(x500*x591);
IkReal x720=((0.2247)*gclwh10_5*x476);
IkReal x721=((0.2247)*gclwh8_5*x488);
IkReal x722=((0.11235)*gclwh6_5*x470);
IkReal x723=((0.11235)*gclwh8_5*x485);
IkReal x724=((0.2247)*gclwh6_5*x469);
IkReal x725=((0.11235)*gclwh10_5*x500);
IkReal x726=(x471*x540);
IkReal x727=(gclwh14_2*rxp0_2*x468);
IkReal x728=(gclwh6_3*x693);
IkReal x729=(x505*x541);
IkReal x730=(x469*x568);
IkReal x731=(x500*x541);
IkReal x732=(x506*x551);
IkReal x733=((0.0072846225)*gclwh8_2*x479);
IkReal x734=(gclwh8_2*pp*x479);
IkReal x735=(x487*x578);
IkReal x736=(gclwh12_2*rxp1_2*x468);
IkReal x737=(x476*x613);
IkReal x738=(gclwh4_2*rxp2_2*x468);
IkReal x739=(x488*x586);
IkReal x740=((0.1707)*pp*x501);
IkReal x741=(x470*x529);
IkReal x742=((4.0)*gclwh9_10*x488);
IkReal x743=((4.0)*gclwh11_10*x476);
IkReal x744=(x476*x486);
IkReal x745=(x471*x472);
IkReal x746=(x488*x510);
IkReal x747=(gclwh7_1*x693);
IkReal x748=(x505*x581);
IkReal x749=(gclwh15_0*rxp0_2*x468);
IkReal x750=(x500*x581);
IkReal x751=(x506*x507);
IkReal x752=((0.0072846225)*gclwh9_0*x479);
IkReal x753=(gclwh9_0*pp*x479);
IkReal x754=(gclwh15_1*pp*x513);
IkReal x755=(gclwh13_0*rxp1_2*x468);
IkReal x756=(gclwh5_0*rxp2_2*x468);
IkReal x757=(x469*x529);
IkReal x758=(x487*x538);
IkReal x759=((0.2247)*gclwh9_7*x488);
IkReal x760=((0.11235)*gclwh7_7*x470);
IkReal x761=((0.2247)*gclwh11_7*x476);
IkReal x762=((0.11235)*gclwh11_7*x500);
IkReal x763=((0.2247)*gclwh7_7*x469);
IkReal x764=((0.11235)*gclwh9_7*x485);
IkReal x765=((0.11235)*gclwh12_14*x470);
IkReal x766=(x488*x605);
IkReal x767=((0.11235)*gclwh4_14*x500);
IkReal x768=(x469*x524);
IkReal x769=((0.11235)*gclwh14_14*x485);
IkReal x770=(x476*x600);
IkReal x771=(gclwh14_8*npx*x468);
IkReal x772=(gclwh14_2*pp*x479);
IkReal x773=(gclwh12_3*x693);
IkReal x774=(gclwh3_2*pz*x487);
IkReal x775=((0.08535)*gclwh12_8*x470);
IkReal x776=(x476*x490);
IkReal x777=(gclwh6_2*rxp1_2*x468);
IkReal x778=(gclwh3_3*x693);
IkReal x779=(x467*x569);
IkReal x780=(x492*x573);
IkReal x781=((0.0072846225)*gclwh14_2*x479);
IkReal x782=(gclwh4_3*r22*x467);
IkReal x783=((0.0072846225)*gclwh1_2*x479);
IkReal x784=(x469*x575);
IkReal x785=(gclwh12_8*npy*x468);
IkReal x786=(gclwh4_8*npz*x468);
IkReal x787=(x468*x497);
IkReal x788=((0.08535)*gclwh14_8*x485);
IkReal x789=(x488*x617);
IkReal x790=(gclwh6_3*pp*x471);
IkReal x791=(x468*x615);
IkReal x792=((0.0072846225)*pz*x480);
IkReal x793=(x487*x606);
IkReal x794=(x487*x502);
IkReal x795=(x467*x484);
IkReal x796=((0.08535)*gclwh15_9*x485);
IkReal x797=(x500*x508);
IkReal x798=(x470*x502);
IkReal x799=(x487*x493);
IkReal x800=((0.0072846225)*gclwh0_0*x479);
IkReal x801=(x468*x496);
IkReal x802=(x505*x508);
IkReal x803=(gclwh2_1*x693);
IkReal x804=(x476*x591);
IkReal x805=(gclwh5_9*npz*x468);
IkReal x806=(x471*x556);
IkReal x807=(x469*x598);
IkReal x808=(x468*x587);
IkReal x809=(gclwh13_9*npy*x468);
IkReal x810=(x467*x612);
IkReal x811=(x491*x492);
IkReal x812=(gclwh15_9*npx*x468);
IkReal x813=((0.08535)*gclwh13_9*x470);
IkReal x814=(gclwh11_1*pp*x506);
IkReal x815=(x488*x511);
IkReal x816=(gclwh7_0*rxp1_2*x468);
IkReal x817=((0.0072846225)*gclwh15_0*x479);
IkReal x818=(gclwh6_2*npy*x694);
IkReal x819=(gclwh6_3*x469*x564);
IkReal x820=(gclwh6_2*x470*x534);
IkReal x821=(gclwh10_2*npz*x694);
IkReal x822=(gclwh8_2*npx*x694);
IkReal x823=(gclwh11_1*x476*x564);
IkReal x824=(gclwh7_0*npy*x694);
IkReal x825=(gclwh9_0*npx*x694);
IkReal x826=(gclwh11_1*r22*x695);
IkReal x827=((2.0)*x469*x556);
IkReal x828=(gclwh11_0*npz*x694);
IkReal x829=(gclwh7_0*x470*x534);
IkReal x830=(gclwh12_2*npy*x694);
IkReal x831=(gclwh3_2*npy*x694);
IkReal x832=(gclwh1_2*npx*x694);
IkReal x833=(gclwh14_3*x488*x564);
IkReal x834=(gclwh4_2*npz*x694);
IkReal x835=((2.0)*x476*x551);
IkReal x836=(gclwh12_2*x470*x534);
IkReal x837=(gclwh1_2*x479*x531);
IkReal x838=(gclwh3_3*x469*x564);
IkReal x839=(pz*x480*x531);
IkReal x840=(gclwh1_3*x488*x564);
IkReal x841=(gclwh3_2*x470*x534);
IkReal x842=((2.0)*x469*x540);
IkReal x843=(gclwh14_2*npx*x694);
IkReal x844=(x601*x695);
IkReal x845=(gclwh0_0*npx*x694);
IkReal x846=(gclwh2_0*npy*x694);
IkReal x847=((2.0)*x476*x507);
IkReal x848=((2.0)*x469*x472);
IkReal x849=(gclwh15_0*npx*x694);
IkReal x850=(gclwh2_1*x469*x564);
IkReal x851=(gclwh0_1*x488*x564);
IkReal x852=(gclwh5_0*npz*x694);
IkReal x853=(gclwh13_0*npy*x694);
IkReal x854=(gclwh0_0*x479*x531);
IkReal x855=(gclwh15_0*x479*x531);
IkReal x856=((1.0)*x470*x493);
IkReal x857=((1.0)*gclwh13_1*x693);
IkReal x858=(gclwh5_1*r22*x695);
IkReal x859=(gclwh15_1*x488*x564);
IkReal x860=(x670+x671);
IkReal x861=(x636+x637);
IkReal x862=(x663+x665);
IkReal x863=(x646+x645+x643+x730);
IkReal x864=(x661+x660+x662+x757);
IkReal x865=(x686+x684+x804+x807);
IkReal x866=(x676+x677+x776+x784);
IkReal x867=(x626+x706+x707+x705);
IkReal x868=(x674+x770+x768+x769);
IkReal x869=(x629+x711+x713+x712);
IkReal x870=(x664+x759+x760+x761);
IkReal x871=(x638+x720+x721+x722);
IkReal x872=(x683+x682+x681+x680+x789);
IkReal x873=(x689+x688+x690+x691+x815);
IkReal x874=(x647+x648+x650+x737+x739);
IkReal x875=(x654+x655+x657+x746+x744);
IkReal x876=(x623+x622+x699+x700+x701);
IkReal x877=(x625+x624+x702+x703+x704);
IkReal x878=(x630+x631+x715+x714+x716);
IkReal x879=(x640+x639+x723+x724+x725);
IkReal x880=(x627+x628+x710+x708+x709);
IkReal x881=(x668+x667+x764+x762+x763);
IkReal x882=(x669+x672+x765+x766+x767);
IkReal x883=((((4.0)*gclwh7_10*x469))+((gclwh15_10*x499))+((gclwh9_10*x582))+((gclwh11_10*x565))+((x486*x500))+((x485*x510)));
IkReal x884=(x651+x652+x653+x742+x743+x741);
IkReal x885=(x634+x635+x632+x633+x719+x718+x717);
IkReal x886=(x618+x619+x621+x620+x696+x697+x698);
IkReal x887=(x649+x736+x735+x738+x740+x819+x822+x821+x820);
IkReal x888=(x644+x642+x734+x733+x732+x731+x726+x727+x728+x729+x818);
IkReal x889=(x659+x755+x754+x756+x758+x829+x828+x827+x826+x825);
IkReal x890=(x656+x658+x751+x750+x753+x752+x747+x745+x748+x749+x823+x824);
IkReal x891=(x687+x692+x852+x853+x850+x851+x856+x857+x854+x855+x858+x859+x816+x817+x814+x812+x813+x811);
IkReal x892=(x468+x678+x675+x773+x772+x771+x777+x775+x774+x779+x778+x782+x783+x780+x781+x834+x830+x831+x832+x833);
IkReal x893=(x679+x791+x790+x793+x792+x786+x787+x785+x788+x835+x836+x837+x838+x839+x841+x840+x843+x842+x844);
IkReal x894=(x468+x685+x795+x794+x797+x796+x799+x798+x810+x845+x847+x846+x849+x848+x809+x808+x805+x806+x801+x800+x803+x802);
op[35]=((-0.01366176)+(((-1.0)*x883))+x884);
op[36]=((0.392270175)+(((-1.0)*x886))+x876);
op[37]=((((-0.0066566880405)*x480))+(((-0.9138)*pp*x480))+(((1.8276)*gclwh3_2*x469))+(((-0.9138)*gclwh3_2*x470))+((gclwh14_2*x608))+(((0.0066566880405)*gclwh3_2*r21))+(((1.8276)*gclwh12_2*x469))+(((-1.8276)*gclwh14_2*x488))+((gclwh1_2*x608))+(((-0.15598566)*x497))+((gclwh6_2*x547))+(((1.8276)*gclwh1_2*x488))+(((1.8276)*gclwh4_2*x476))+(((0.9138)*gclwh14_2*x485))+(((-0.15598566)*x615))+(((-0.9138)*gclwh12_2*x470))+(((-0.0066566880405)*x503))+(((-0.9138)*gclwh1_2*x485))+x867+(((-1.0)*x877)));
op[38]=((((-0.8988)*gclwh14_14*x488))+((x485*x596))+(((-1.0)*x500*x518))+(((0.1456071)*x519))+(((-0.0032737093515)*x536))+(((-0.1456071)*x593))+(((-0.1456071)*x478))+((gclwh14_14*x532))+(((-1.0)*x470*x563))+(((0.8988)*gclwh4_14*x476))+(((0.8988)*gclwh12_14*x469))+(((-1.0)*gclwh12_14*x610)));
op[39]=((-0.00506895)+((gclwh12_11*x607))+(((-0.02913849)*x512))+(((0.6828)*x558))+((gclwh8_11*x528))+((x470*x475))+((gclwh4_11*x482))+(((-1.0)*gclwh6_11*x592))+(((-8.0)*gclwh4_11*x476))+(((-8.0)*gclwh12_11*x469))+((x500*x562))+(((-1.0)*x485*x514))+(((8.0)*gclwh14_11*x488)));
op[40]=((0.023396725)+x886+(((-1.0)*x876)));
op[41]=((((0.0608)*gclwh14_2*x485))+(((-1.0)*x867))+(((-0.1216)*gclwh14_2*x488))+(((-0.01037856)*x615))+(((-0.000442905048)*x480))+(((0.1216)*gclwh12_2*x469))+(((0.1216)*gclwh1_2*x488))+((gclwh6_2*x602))+(((-0.0608)*pp*x480))+(((0.1216)*gclwh4_2*x476))+((gclwh3_2*x530))+((gclwh14_2*x559))+((gclwh1_2*x559))+(((-0.0608)*gclwh12_2*x470))+(((-0.0608)*gclwh3_2*x470))+(((-0.000442905048)*x503))+x877+(((-0.01037856)*x497))+(((0.1216)*gclwh3_2*x469))+(((-0.0608)*gclwh1_2*x485)));
op[42]=((((0.15598566)*x587))+(((0.0066566880405)*x584))+(((-1.0)*gclwh7_0*x547))+(((0.15598566)*x496))+(((-0.9138)*gclwh0_0*x485))+(((0.0066566880405)*x548))+(((-1.8276)*gclwh13_0*x469))+(((0.9138)*gclwh13_0*x470))+(((-1.0)*x880))+(((1.8276)*gclwh0_0*x488))+(((-1.8276)*gclwh5_0*x476))+(((1.8276)*gclwh15_0*x488))+(((0.9138)*gclwh5_0*x500))+x869+(((1.8276)*gclwh2_0*x469))+(((-1.0)*gclwh15_0*x608))+((gclwh0_0*x608))+(((-0.9138)*gclwh2_0*x470))+(((-0.9138)*gclwh15_0*x485))+(((0.0066566880405)*x576)));
op[43]=((0.392270175)+x885+(((-1.0)*x878)));
op[44]=((0.00506895)+((x500*x590))+(((-8.0)*gclwh5_10*x476))+((gclwh5_10*x482))+(((-8.0)*gclwh13_10*x469))+(((8.0)*gclwh15_10*x488))+(((0.6828)*x504))+(((-1.0)*gclwh7_10*x592))+(((-0.02913849)*gclwh15_10*r20))+((x470*x616))+((gclwh13_10*x607))+((gclwh9_10*x528))+(((-1.0)*x485*x535)));
op[45]=((((-0.8988)*gclwh5_15*x476))+((x470*x579))+(((-0.1456071)*x614))+(((0.8988)*gclwh15_15*x488))+((gclwh13_15*x610))+(((-1.0)*gclwh15_15*x532))+(((0.0032737093515)*x577))+(((0.1456071)*x473))+(((-0.8988)*gclwh13_15*x469))+((x500*x604))+(((0.1456071)*x603))+(((-1.0)*x485*x522)));
op[46]=((((-0.1216)*gclwh13_0*x469))+((gclwh13_0*x530))+(((-1.0)*x869))+(((0.1216)*gclwh15_0*x488))+(((-0.1216)*gclwh5_0*x476))+(((0.01037856)*x496))+(((-0.0608)*gclwh2_0*x470))+(((0.1216)*gclwh2_0*x469))+(((-1.0)*gclwh7_0*x602))+(((0.1216)*gclwh0_0*x488))+((gclwh2_0*x530))+(((-0.0608)*gclwh15_0*x485))+(((0.0608)*gclwh13_0*x470))+(((-0.0608)*gclwh0_0*x485))+(((-1.0)*gclwh15_0*x559))+(((0.01037856)*x587))+x880+(((0.0608)*gclwh5_0*x500))+(((0.000442905048)*x548))+((gclwh0_0*x559)));
op[47]=((0.023396725)+(((-1.0)*x885))+x878);
op[48]=((((0.4569)*gclwh8_12*x485))+(((-0.9138)*gclwh10_12*x476))+(((-1.0)*x861))+(((0.9138)*gclwh6_12*x469))+(((-0.9138)*gclwh8_12*x488))+((gclwh8_12*x567))+((gclwh14_8*x595))+(((0.4569)*gclwh10_12*x500))+x641+(((-0.07799283)*x523))+(((-0.07799283)*x498))+(((-0.00332834402025)*x553))+x871+(((-0.4569)*gclwh6_12*x470))+((gclwh10_12*x515))+(((-1.0)*x879)));
op[49]=((((-1.0)*x863))+(((0.42819102)*gclwh6_3*x469))+(((-1.0)*gclwh10_11*x500))+(((-1.0)*x887))+(((-1.0)*gclwh4_3*x570))+((gclwh6_11*x470))+(((0.036546103557)*x501))+(((-0.2068108875)*gclwh6_3*x470))+(((-1.0)*gclwh8_11*x485))+(((-1.0)*gclwh12_3*x571))+x874+x888+(((-1.0)*gclwh6_3*x509)));
op[50]=((0.09583455)+(((-4.0)*gclwh6_11*x469))+((gclwh12_11*x527))+(((-1.0)*gclwh14_11*x499))+((gclwh6_11*x483))+(((4.0)*gclwh10_11*x476))+(((-1.0)*x485*x586))+(((-1.0)*gclwh10_11*x565))+((x470*x568))+((gclwh4_11*x572))+(((-1.0)*gclwh8_11*x582))+(((-1.0)*x500*x613))+(((4.0)*gclwh8_11*x488)));
op[51]=((((-1.0)*gclwh8_2*x526))+(((0.03835629)*x517))+((gclwh6_2*x599))+(((0.4265)*gclwh6_2*x470))+(((-1.0)*gclwh14_2*x574))+(((-1.0)*gclwh14_14*x554))+(((-1.0)*gclwh14_8*x516))+(((-1.0)*gclwh10_2*x585))+(((-0.4265)*gclwh10_2*x500))+(((0.08318211)*x523))+(((0.03835629)*gclwh4_14*rxp2_2))+(((0.08318211)*x498))+((gclwh12_2*x533))+(((0.853)*gclwh10_2*x476))+(((0.853)*gclwh8_2*x488))+(((-0.853)*gclwh6_2*x469))+((gclwh4_2*x589))+(((-0.4265)*gclwh8_2*x485)));
op[52]=((((0.0304)*gclwh8_12*x485))+(((0.0608)*gclwh6_12*x469))+(((0.00518928)*x498))+((gclwh8_12*x550))+(((0.000221452524)*gclwh10_12*r22))+(((-1.0)*x641))+(((-1.0)*gclwh14_8*x583))+x861+x871+(((-0.000221452524)*x553))+(((0.0304)*gclwh10_12*x500))+(((-0.0304)*gclwh6_12*x470))+(((-0.0608)*gclwh10_12*x476))+(((-0.0608)*gclwh8_12*x488))+(((0.00518928)*x523))+(((-1.0)*x879)));
op[53]=((((0.01252412)*gclwh6_3*x469))+((gclwh8_11*x485))+((gclwh10_11*x500))+(((-1.0)*x887))+(((0.0010225625)*gclwh6_3*x470))+(((-1.0)*gclwh6_3*x474))+(((-1.0)*gclwh4_3*x489))+(((-1.0)*gclwh6_11*x470))+(((0.001068933642)*x501))+x863+x888+(((-1.0)*gclwh12_3*x520))+(((-1.0)*x874)));
op[54]=(((gclwh11_10*x500))+((gclwh11_1*x594))+(((-1.0)*gclwh7_10*x470))+(((-1.0)*gclwh7_1*x509))+((gclwh9_10*x485))+(((0.42819102)*gclwh7_1*x469))+(((-1.0)*x889))+(((-0.42819102)*gclwh11_1*x476))+(((-1.0)*gclwh13_1*x571))+(((-1.0)*gclwh5_1*x570))+x864+x890+(((-0.2068108875)*gclwh7_1*x470))+(((0.2068108875)*gclwh11_1*x500))+(((0.036546103557)*x552))+(((-1.0)*x875)));
op[55]=((((-1.0)*x862))+(((0.9138)*gclwh7_13*x469))+(((0.4569)*gclwh9_13*x485))+(((-0.4569)*gclwh7_13*x470))+(((0.00332834402025)*x481))+((x481*x560))+(((-1.0)*x881))+((gclwh9_13*x567))+x666+(((-0.9138)*gclwh9_13*x488))+(((-0.07799283)*x543))+(((-0.07799283)*x549))+((gclwh15_9*x595))+(((-0.9138)*gclwh11_13*x476))+x870+(((-0.00332834402025)*x580)));
op[56]=(((gclwh13_0*x533))+(((-1.0)*gclwh15_0*x574))+(((-0.4265)*gclwh9_0*x485))+((gclwh5_0*x589))+((gclwh15_9*x516))+(((0.853)*gclwh11_0*x476))+(((-1.0)*gclwh11_0*x585))+(((0.853)*gclwh9_0*x488))+(((-0.03835629)*x539))+((gclwh7_0*x599))+(((-1.0)*gclwh9_0*x526))+(((-0.08318211)*x543))+(((-0.08318211)*x549))+(((-0.4265)*gclwh11_0*x500))+(((-0.853)*gclwh7_0*x469))+(((0.4265)*gclwh7_0*x470))+(((-0.03835629)*gclwh13_15*rxp1_2))+((gclwh15_15*x554)));
op[57]=((0.09583455)+(((-1.0)*x883))+x884);
op[58]=((((-0.0010225625)*gclwh11_1*x500))+(((-1.0)*x864))+(((0.0010225625)*gclwh7_1*x470))+(((-1.0)*gclwh11_10*x500))+(((0.01252412)*gclwh7_1*x469))+((gclwh7_10*x470))+(((-1.0)*gclwh7_1*x474))+(((-1.0)*x889))+(((0.001068933642)*x552))+(((-1.0)*gclwh9_10*x485))+x875+x890+((gclwh11_1*x546))+(((-1.0)*gclwh13_1*x520))+(((-0.01252412)*gclwh11_1*x476))+(((-1.0)*gclwh5_1*x489)));
op[59]=((((-1.0)*gclwh15_9*x583))+(((-0.0304)*gclwh7_13*x470))+(((0.0304)*pp*x481))+(((0.00518928)*x549))+(((0.00518928)*x543))+(((0.0608)*gclwh7_13*x469))+((gclwh9_13*x550))+(((0.000221452524)*x481))+(((-0.0608)*gclwh11_13*x476))+(((-0.000221452524)*x580))+(((-1.0)*x881))+(((-1.0)*x666))+x862+x870+(((0.0304)*gclwh9_13*x485))+(((-0.0608)*gclwh9_13*x488)));
op[60]=((((0.9138)*gclwh4_8*x476))+(((0.07799283)*x519))+(((-0.4569)*gclwh4_8*x500))+((gclwh14_8*x567))+(((-0.07799283)*x593))+(((-1.0)*gclwh4_8*x515))+(((-0.00332834402025)*x566))+(((-1.0)*x882))+(((0.4569)*gclwh14_8*x485))+(((-0.07799283)*x478))+(((-0.9138)*gclwh14_8*x488))+(((-0.4569)*gclwh12_8*x470))+x868+x860+(((0.9138)*gclwh12_8*x469))+(((-1.0)*x673)));
op[61]=((0.2213801325)+((gclwh3_3*x509))+(((-1.0)*x866))+(((-0.42819102)*gclwh14_3*x488))+(((-0.2068108875)*gclwh12_3*x470))+(((0.00155960496929498)*x569))+(((-0.2213801325)*gclwh1_3*x485))+(((-1.0)*gclwh12_3*x509))+((gclwh6_3*x571))+(((-1.0)*gclwh4_3*x594))+(((-1.0)*x893))+((gclwh12_11*x470))+(((-1.0)*gclwh14_11*x485))+(((0.42819102)*gclwh12_3*x469))+(((-0.2068108875)*gclwh4_3*x500))+(((-0.2213801325)*gclwh3_3*x470))+(((0.2068108875)*gclwh14_3*x485))+(((0.00155960496929498)*x601))+(((0.42819102)*gclwh1_3*x488))+x872+x892+(((0.42819102)*gclwh4_3*x476))+((gclwh4_11*x500))+(((0.42819102)*gclwh3_3*x469)));
op[62]=((0.053024565)+x886+(((-1.0)*x876)));
op[63]=((((-1.0)*x867))+(((0.4265)*gclwh12_2*x470))+(((-1.0)*gclwh6_2*x533))+(((0.00354979654425)*x566))+(((0.4265)*gclwh3_2*x470))+(((-1.0)*gclwh3_2*x599))+(((-1.0)*gclwh1_2*x526))+(((-0.4265)*gclwh14_2*x485))+(((-0.853)*gclwh3_2*x469))+(((0.4873)*gclwh4_8*x500))+(((0.4873)*gclwh12_8*x470))+(((-0.9746)*gclwh12_8*x469))+(((0.00310689149625)*x480))+(((0.00310689149625)*x503))+(((0.853)*gclwh14_2*x488))+(((-0.00354979654425)*x609))+(((-1.0)*gclwh14_2*x526))+(((0.9746)*gclwh14_8*x488))+((gclwh10_2*x589))+(((-0.853)*gclwh12_2*x469))+(((-0.4873)*gclwh14_8*x485))+(((0.4265)*pp*x480))+x877+(((-0.853)*gclwh1_2*x488))+(((0.4265)*gclwh1_2*x485))+(((0.07280355)*x497))+(((-0.853)*gclwh4_2*x476))+(((-0.9746)*gclwh4_8*x476))+(((0.00354979654425)*x573)));
op[64]=((((-1.0)*x868))+(((0.00518928)*x519))+(((-0.0304)*gclwh14_8*x485))+(((-0.0608)*gclwh12_8*x469))+(((0.000221452524)*x573))+(((0.0304)*gclwh12_8*x470))+(((-0.0608)*gclwh4_8*x476))+(((-1.0)*gclwh8_12*x583))+(((-1.0)*gclwh14_8*x550))+x860+x882+(((-0.00518928)*x478))+(((0.0304)*gclwh4_8*x500))+(((0.000221452524)*x566))+(((0.0608)*gclwh14_8*x488))+(((-1.0)*x673)));
op[65]=((-0.0135466825)+(((-1.0)*gclwh12_11*x470))+((gclwh6_3*x520))+(((4.561674317235e-5)*x569))+(((0.01252412)*gclwh3_3*x469))+(((0.0010225625)*gclwh4_3*x500))+(((4.561674317235e-5)*x601))+(((0.01252412)*gclwh1_3*x488))+(((-0.0135466825)*gclwh1_3*x485))+(((-0.0135466825)*gclwh3_3*x470))+(((0.01252412)*gclwh12_3*x469))+(((-1.0)*x893))+(((-1.0)*gclwh4_11*x500))+(((0.01252412)*gclwh4_3*x476))+((gclwh3_3*x474))+(((-1.0)*gclwh4_3*x546))+(((-0.0010225625)*gclwh14_3*x485))+(((0.0010225625)*gclwh12_3*x470))+(((-1.0)*gclwh12_3*x474))+x866+x892+((gclwh14_11*x485))+(((-1.0)*x872))+(((-0.01252412)*gclwh14_3*x488)));
op[66]=((-0.2213801325)+(((0.2068108875)*gclwh5_1*x500))+(((-1.0)*x865))+((gclwh11_1*x570))+(((-0.42819102)*gclwh5_1*x476))+(((-0.00155960496929498)*x484))+(((-1.0)*gclwh15_10*x485))+((gclwh2_1*x509))+(((-1.0)*x891))+(((-0.2213801325)*gclwh0_1*x485))+(((-0.42819102)*gclwh13_1*x469))+(((0.42819102)*gclwh2_1*x469))+((gclwh5_10*x500))+(((0.00155960496929498)*x612))+(((0.42819102)*gclwh15_1*x488))+(((0.2068108875)*gclwh13_1*x470))+(((-0.2213801325)*gclwh2_1*x470))+((gclwh13_10*x470))+x873+x894+(((-1.0)*gclwh7_1*x571))+((gclwh13_1*x509))+(((0.42819102)*gclwh0_1*x488))+(((-0.2068108875)*pp*x484))+((gclwh5_1*x594)));
op[67]=((((0.9138)*gclwh15_9*x488))+((x488*x495))+(((0.00332834402025)*x542))+((gclwh5_15*x557))+(((0.00332834402025)*x491))+(((-1.0)*gclwh9_7*x494))+(((-1.0)*gclwh11_7*x555))+(((0.11235)*gclwh13_15*x470))+((gclwh7_7*x545))+(((-0.9138)*gclwh13_9*x469))+(((0.07799283)*x603))+(((-1.0)*gclwh15_15*x537))+(((-0.07799283)*x614))+(((0.11235)*gclwh5_15*x500))+(((-0.9138)*gclwh5_9*x476))+(((-0.00332834402025)*x521))+(((0.07799283)*x473))+(((-1.0)*x469*x611))+(((-1.0)*x476*x597))+((x491*x560))+(((-0.4569)*gclwh15_9*x485))+(((-0.11235)*gclwh15_15*x485))+(((0.4569)*gclwh13_9*x470))+((gclwh13_15*x561)));
op[68]=((((-0.00310689149625)*x548))+(((-1.0)*x869))+((gclwh15_0*x526))+(((-0.9746)*gclwh5_9*x476))+(((-0.4265)*gclwh13_0*x470))+(((-0.07280355)*x496))+(((-0.00310689149625)*x584))+(((0.4265)*gclwh0_0*x485))+(((0.853)*gclwh5_0*x476))+(((-1.0)*gclwh0_0*x526))+(((0.9746)*gclwh15_9*x488))+(((0.853)*gclwh13_0*x469))+(((-0.4265)*gclwh5_0*x500))+(((-0.853)*gclwh0_0*x488))+(((0.4265)*gclwh2_0*x470))+(((-0.9746)*gclwh13_9*x469))+(((-0.853)*gclwh15_0*x488))+(((0.4873)*pp*x491))+((gclwh7_0*x533))+x880+(((-0.00310689149625)*x576))+(((-0.00354979654425)*x521))+(((0.4873)*gclwh13_9*x470))+(((-0.07280355)*x587))+(((-0.4873)*gclwh15_9*x485))+(((0.00354979654425)*x542))+(((-0.853)*gclwh2_0*x469))+(((0.4265)*gclwh15_0*x485))+(((0.00354979654425)*x491)));
op[69]=((0.053024565)+(((-1.0)*x885))+x878);
op[70]=((0.0135466825)+((gclwh13_1*x474))+(((0.01252412)*gclwh15_1*x488))+(((-1.0)*gclwh7_1*x520))+(((-1.0)*gclwh5_10*x500))+(((-0.01252412)*gclwh13_1*x469))+((gclwh15_10*x485))+(((-1.0)*x891))+(((4.561674317235e-5)*x612))+(((-0.0135466825)*gclwh0_1*x485))+((gclwh11_1*x489))+((gclwh2_1*x474))+(((-0.01252412)*gclwh5_1*x476))+(((-4.561674317235e-5)*x484))+((gclwh5_1*x546))+(((0.0010225625)*pp*x484))+(((-1.0)*gclwh13_10*x470))+(((0.01252412)*gclwh0_1*x488))+x865+x894+(((-0.0135466825)*gclwh2_1*x470))+(((-0.0010225625)*gclwh5_1*x500))+(((-0.0010225625)*gclwh13_1*x470))+(((0.01252412)*gclwh2_1*x469))+(((-1.0)*x873)));
IkReal x895=((0.0304)*pp);
IkReal x896=(gclwh13_9*r21);
IkReal x897=(gclwh5_9*r22);
IkReal x898=((0.0608)*pz);
IkReal x899=(gclwh15_9*r20);
IkReal x900=((0.2247)*pz);
IkReal x901=(gclwh13_15*r21);
IkReal x902=(gclwh15_15*r20);
IkReal x903=((0.11235)*pp);
IkReal x904=(gclwh5_15*r22);
op[71]=((((-1.0)*x903*x904))+(((-0.000221452524)*x897))+(((-0.000221452524)*x896))+(((0.00518928)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh15_9*npx*x898))+(((-0.019178145)*gclwh11_7*rxp2_2))+(((-1.0)*x895*x897))+(((-1.0)*x895*x896))+((x895*x899))+((x902*x903))+(((0.00518928)*gclwh9_13*rxp0_2))+((gclwh5_15*npz*x900))+((gclwh13_15*npy*x900))+(((-0.000818427337875)*x901))+(((-0.000818427337875)*x904))+((gclwh13_9*npy*x898))+(((0.000818427337875)*x902))+(((0.019178145)*gclwh7_7*rxp1_2))+(((0.000221452524)*x899))+(((-1.0)*x901*x903))+(((-0.019178145)*gclwh9_7*rxp0_2))+(((-0.00518928)*gclwh7_13*rxp1_2))+((gclwh5_9*npz*x898))+(((-1.0)*gclwh15_15*npx*x900)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x905=htj1*htj1;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+x905),-1);
if(!x906.valid){
continue;
}
cj1array[numsolutions]=((x906.value)*(((1.0)+(((-1.0)*x905)))));
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x907.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x907.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x908=htj2*htj2;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+x908),-1);
if(!x909.valid){
continue;
}
cj2array[numsolutions]=((x909.value)*(((1.0)+(((-1.0)*x908)))));
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x910.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x910.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x911=htj3*htj3;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+x911),-1);
if(!x912.valid){
continue;
}
cj3array[numsolutions]=((x912.value)*(((1.0)+(((-1.0)*x911)))));
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x913.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x913.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x914=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x914);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(r22,-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917=IKPowWithIntegerCheck(sj3,-1);
if(!x917.valid){
continue;
}
sj4array[0]=((x916.value)*(x917.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
IkReal x919=((16.0)*sj4);
IkReal x920=(cj1*cj2);
IkReal x921=((4.0)*sj3);
IkReal x922=((8.0)*sj4);
IkReal x923=((4.0)*cj4);
IkReal x924=(sj1*sj2);
IkReal x925=((4.0)*sj4);
IkReal x926=(cj3*r02);
IkReal x927=((16.0)*sj3);
IkReal x928=((8.0)*sj3);
IkReal x929=((12.0)*cj4);
IkReal x930=((12.0)*sj4);
IkReal x931=(cj3*r12);
IkReal x932=(r11*x921);
IkReal x933=(r01*x921);
IkReal x934=(r01*x924);
IkReal x935=(cj3*cj4*r01);
IkReal x936=(cj3*cj4*r11);
IkReal x937=(cj3*r10*x923);
IkReal x938=(x930*x931);
IkReal x939=(cj3*r00*x923);
IkReal x940=(x926*x930);
IkReal x941=(r00*x924*x925);
IkReal x942=(r02*x924*x929);
IkReal x943=(r00*x920*x925);
IkReal x944=(r02*x920*x929);
IkReal x945=(r10*x924*x925);
IkReal x946=(r12*x920*x929);
IkReal x947=(r12*x924*x929);
IkReal x948=(r10*x920*x925);
IkReal x949=(x932+x943);
IkReal x950=(x933+x945);
IkReal x951=(x937+x941);
IkReal x952=(x938+x944);
IkReal x953=(x939+x948);
IkReal x954=(x940+x947);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r11*x919*x920))+(((-16.0)*x935))+((r11*x919*x924))+(((-1.0)*r00*x927)))))))+(IKabs(((((-8.0)*x935))+(((-1.0)*r00*x928))+((r11*x922*x924))+(((-1.0)*r11*x920*x922)))))+(((0.5)*(IKabs(((((-1.0)*r10*x927))+((r01*x919*x920))+(((-1.0)*x919*x934))+(((-16.0)*x936)))))))+(((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x949+x942)))))+(((0.5)*(IKabs(((((-1.0)*x925*x926))+((r12*x920*x923))+(((-1.0)*r12*x923*x924))+(((-1.0)*x953))+x950)))))+(((0.5)*(IKabs(((((-1.0)*x925*x931))+(((-1.0)*r02*x920*x923))+((r02*x923*x924))+(((-1.0)*x951))+x949)))))+(IKabs(((((-1.0)*r10*x928))+(((-8.0)*x936))+((r01*x920*x922))+(((-1.0)*x922*x934)))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x950))+x953+x946)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x952))+x951+x942)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x954))+x950+x946))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x955=(r10*sj3);
IkReal x956=(r01*sj4);
IkReal x957=(cj1*cj2);
IkReal x958=(cj3*cj4);
IkReal x959=(sj1*sj2);
IkReal x960=(cj4*r02);
IkReal x961=((4.0)*r11*sj3);
IkReal x962=(cj3*r12*sj4);
IkReal x963=((4.0)*r00*sj4);
IkReal x964=((4.0)*r10*x958);
IkReal x965=((12.0)*x962);
IkReal x966=((4.0)*x962);
IkReal x967=(x957*x963);
IkReal x968=(x959*x963);
IkReal x969=((12.0)*x959*x960);
IkReal x970=((12.0)*x957*x960);
IkReal x971=((4.0)*x959*x960);
IkReal x972=((4.0)*x957*x960);
IkReal x973=(x961+x967);
IkReal x974=(x964+x968);
IkReal x975=(x972+x966);
IkReal x976=(x970+x965);
IkReal x977=((((-8.0)*x955))+(((8.0)*x956*x957))+(((-8.0)*x956*x959))+(((-8.0)*r11*x958)));
op[0]=(x971+x973+(((-1.0)*x974))+(((-1.0)*x975)));
op[1]=x977;
op[2]=(x973+x969+(((-1.0)*x974))+(((-1.0)*x976)));
op[3]=((((-16.0)*r11*x958))+(((-16.0)*x956*x959))+(((-16.0)*x955))+(((16.0)*x956*x957)));
op[4]=(x974+x969+(((-1.0)*x973))+(((-1.0)*x976)));
op[5]=x977;
op[6]=(x971+x974+(((-1.0)*x975))+(((-1.0)*x973)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x978=(cj1*cj2);
IkReal x979=((4.0)*cj4);
IkReal x980=(sj1*sj2);
IkReal x981=((4.0)*sj4);
IkReal x982=(r00*sj3);
IkReal x983=(cj3*r02);
IkReal x984=((4.0)*r01*sj3);
IkReal x985=((16.0)*r11*sj4);
IkReal x986=(cj3*cj4*r01);
IkReal x987=((12.0)*cj4*r12);
IkReal x988=((8.0)*r11*sj4);
IkReal x989=(cj3*r00*x979);
IkReal x990=((12.0)*sj4*x983);
IkReal x991=(x981*x983);
IkReal x992=(r10*x978*x981);
IkReal x993=(r10*x980*x981);
IkReal x994=(x978*x987);
IkReal x995=(x980*x987);
IkReal x996=(r12*x978*x979);
IkReal x997=(r12*x979*x980);
IkReal x998=(x993+x984);
IkReal x999=(x992+x989);
IkReal x1000=(x991+x997);
IkReal x1001=(x990+x995);
IkReal x1002=((((-1.0)*x978*x988))+(((-8.0)*x982))+(((-8.0)*x986))+((x980*x988)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1000))+(((-1.0)*x999))+x996+x998))))+(((-1.0)*x1000))+(((htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x998))+x994+x999))))+(((-1.0)*x998))+((x1002*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x999))+x994+x998))))+((htj5*x1002))+x996+x999+(((htj5*htj5*htj5)*(((((-16.0)*x982))+(((-16.0)*x986))+(((-1.0)*x978*x985))+((x980*x985)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1003=(cj5*sj4);
IkReal x1004=(sj4*sj5);
if( IKabs((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003))))+IKsqr(((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003))), ((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1005=IKcos(j0);
IkReal x1006=IKsin(j0);
IkReal x1007=(r02*sj4);
IkReal x1008=((1.0)*sj3);
IkReal x1009=(r12*sj4);
IkReal x1010=((0.21325)*cj2);
IkReal x1011=((1.0)*cj3);
IkReal x1012=((1.0)*sj2);
IkReal x1013=(r11*sj5);
IkReal x1014=(cj5*r01);
IkReal x1015=(cj5*r11);
IkReal x1016=(r00*sj5);
IkReal x1017=((1.0)*cj2);
IkReal x1018=(r10*sj5);
IkReal x1019=((1.0)*cj4);
IkReal x1020=(cj1*x1006);
IkReal x1021=(cj4*cj5*r00);
IkReal x1022=(cj1*x1005);
IkReal x1023=(cj4*cj5*r10);
IkReal x1024=(cj4*r01*sj5);
IkReal x1025=((0.21325)*sj1*sj2);
IkReal x1026=(sj1*x1005);
IkReal x1027=((1.0)*cj5*sj4);
IkReal x1028=(sj1*x1006);
evalcond[0]=(x1005+((sj4*x1013))+(((-1.0)*r10*x1027))+(((-1.0)*r12*x1019)));
evalcond[1]=((((-1.0)*x1006))+(((-1.0)*r02*x1019))+((r01*sj4*sj5))+(((-1.0)*r00*x1027)));
evalcond[2]=(((x1010*x1022))+(((-0.11235)*x1006))+(((-1.0)*x1005*x1025))+(((-1.0)*px))+(((0.24365)*x1022))+(((-0.08535)*x1016))+(((-0.08535)*x1014)));
evalcond[3]=(((x1010*x1020))+(((-1.0)*py))+(((0.24365)*x1020))+(((0.11235)*x1005))+(((-0.08535)*x1018))+(((-0.08535)*x1015))+(((-1.0)*x1006*x1025)));
evalcond[4]=(((cj3*x1007))+((sj3*x1014))+((sj3*x1016))+(((-1.0)*x1017*x1022))+(((-1.0)*x1011*x1021))+((cj3*x1024))+((sj2*x1026)));
evalcond[5]=(((cj3*x1009))+((cj3*cj4*x1013))+((sj3*x1015))+((sj3*x1018))+(((-1.0)*x1017*x1020))+(((-1.0)*x1011*x1023))+((sj2*x1028)));
evalcond[6]=(((cj3*x1014))+((cj3*x1016))+(((-1.0)*x1007*x1008))+(((-1.0)*x1008*x1024))+(((-1.0)*x1017*x1026))+((sj3*x1021))+(((-1.0)*x1012*x1022)));
evalcond[7]=((((-1.0)*cj4*x1008*x1013))+(((-1.0)*x1008*x1009))+((cj3*x1018))+((cj3*x1015))+(((-1.0)*x1017*x1028))+((sj3*x1023))+(((-1.0)*x1012*x1020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(cj3,-1);
if(!x1029.valid){
continue;
}
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(r22,-1);
if(!x1030.valid){
continue;
}
sj4array[0]=((-1.0)*(x1029.value)*(x1030.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1031=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1031);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1031);
IkReal x1032=((16.0)*sj4);
IkReal x1033=(cj1*cj2);
IkReal x1034=((4.0)*sj3);
IkReal x1035=((8.0)*sj4);
IkReal x1036=((4.0)*cj4);
IkReal x1037=(sj1*sj2);
IkReal x1038=((4.0)*sj4);
IkReal x1039=(cj3*r02);
IkReal x1040=((16.0)*sj3);
IkReal x1041=((8.0)*sj3);
IkReal x1042=((12.0)*cj4);
IkReal x1043=((12.0)*sj4);
IkReal x1044=(cj3*r12);
IkReal x1045=(r11*x1034);
IkReal x1046=(r01*x1034);
IkReal x1047=(r01*x1037);
IkReal x1048=(cj3*cj4*r01);
IkReal x1049=(cj3*cj4*r11);
IkReal x1050=(cj3*r10*x1036);
IkReal x1051=(x1043*x1044);
IkReal x1052=(cj3*r00*x1036);
IkReal x1053=(x1039*x1043);
IkReal x1054=(r00*x1037*x1038);
IkReal x1055=(r02*x1037*x1042);
IkReal x1056=(r00*x1033*x1038);
IkReal x1057=(r02*x1033*x1042);
IkReal x1058=(r10*x1037*x1038);
IkReal x1059=(r12*x1033*x1042);
IkReal x1060=(r12*x1037*x1042);
IkReal x1061=(r10*x1033*x1038);
IkReal x1062=(x1056+x1045);
IkReal x1063=(x1058+x1046);
IkReal x1064=(x1050+x1054);
IkReal x1065=(x1051+x1057);
IkReal x1066=(x1052+x1061);
IkReal x1067=(x1053+x1060);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r00*x1040))+((r11*x1032*x1037))+(((-16.0)*x1048))+(((-1.0)*r11*x1032*x1033)))))))+(((0.5)*(IKabs((x1063+(((-1.0)*x1038*x1039))+(((-1.0)*r12*x1036*x1037))+(((-1.0)*x1066))+((r12*x1033*x1036)))))))+(((0.5)*(IKabs(((((-1.0)*x1032*x1047))+(((-1.0)*r10*x1040))+(((-16.0)*x1049))+((r01*x1032*x1033)))))))+(((0.5)*(IKabs((x1059+x1066+(((-1.0)*x1067))+(((-1.0)*x1063)))))))+(((0.5)*(IKabs((x1055+x1064+(((-1.0)*x1065))+(((-1.0)*x1062)))))))+(IKabs(((((-8.0)*x1049))+(((-1.0)*r10*x1041))+(((-1.0)*x1035*x1047))+((r01*x1033*x1035)))))+(((0.5)*(IKabs((x1062+(((-1.0)*x1038*x1044))+(((-1.0)*r02*x1033*x1036))+(((-1.0)*x1064))+((r02*x1036*x1037)))))))+(((0.5)*(IKabs((x1059+x1063+(((-1.0)*x1066))+(((-1.0)*x1067)))))))+(IKabs(((((-1.0)*r00*x1041))+(((-8.0)*x1048))+((r11*x1035*x1037))+(((-1.0)*r11*x1033*x1035)))))+(((0.5)*(IKabs((x1055+x1062+(((-1.0)*x1064))+(((-1.0)*x1065))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1068=(r10*sj3);
IkReal x1069=(r01*sj4);
IkReal x1070=(cj1*cj2);
IkReal x1071=(cj3*cj4);
IkReal x1072=(sj1*sj2);
IkReal x1073=(cj4*r02);
IkReal x1074=((4.0)*r11*sj3);
IkReal x1075=(cj3*r12*sj4);
IkReal x1076=((4.0)*r00*sj4);
IkReal x1077=((4.0)*r10*x1071);
IkReal x1078=((12.0)*x1075);
IkReal x1079=((4.0)*x1075);
IkReal x1080=(x1070*x1076);
IkReal x1081=(x1072*x1076);
IkReal x1082=((12.0)*x1072*x1073);
IkReal x1083=((12.0)*x1070*x1073);
IkReal x1084=((4.0)*x1072*x1073);
IkReal x1085=((4.0)*x1070*x1073);
IkReal x1086=(x1074+x1080);
IkReal x1087=(x1077+x1081);
IkReal x1088=(x1079+x1085);
IkReal x1089=(x1078+x1083);
IkReal x1090=((((8.0)*x1069*x1070))+(((-8.0)*x1069*x1072))+(((-8.0)*x1068))+(((-8.0)*r11*x1071)));
op[0]=(x1086+x1084+(((-1.0)*x1087))+(((-1.0)*x1088)));
op[1]=x1090;
op[2]=(x1086+x1082+(((-1.0)*x1087))+(((-1.0)*x1089)));
op[3]=((((16.0)*x1069*x1070))+(((-16.0)*r11*x1071))+(((-16.0)*x1068))+(((-16.0)*x1069*x1072)));
op[4]=(x1087+x1082+(((-1.0)*x1086))+(((-1.0)*x1089)));
op[5]=x1090;
op[6]=(x1087+x1084+(((-1.0)*x1086))+(((-1.0)*x1088)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1091=(cj1*cj2);
IkReal x1092=((4.0)*cj4);
IkReal x1093=(sj1*sj2);
IkReal x1094=((4.0)*sj4);
IkReal x1095=(r00*sj3);
IkReal x1096=(cj3*r02);
IkReal x1097=((4.0)*r01*sj3);
IkReal x1098=((16.0)*r11*sj4);
IkReal x1099=(cj3*cj4*r01);
IkReal x1100=((12.0)*cj4*r12);
IkReal x1101=((8.0)*r11*sj4);
IkReal x1102=(cj3*r00*x1092);
IkReal x1103=((12.0)*sj4*x1096);
IkReal x1104=(x1094*x1096);
IkReal x1105=(r10*x1091*x1094);
IkReal x1106=(r10*x1093*x1094);
IkReal x1107=(x1091*x1100);
IkReal x1108=(x1093*x1100);
IkReal x1109=(r12*x1091*x1092);
IkReal x1110=(r12*x1092*x1093);
IkReal x1111=(x1106+x1097);
IkReal x1112=(x1105+x1102);
IkReal x1113=(x1104+x1110);
IkReal x1114=(x1103+x1108);
IkReal x1115=((((-1.0)*x1091*x1101))+((x1093*x1101))+(((-8.0)*x1099))+(((-8.0)*x1095)));
j5evalpoly[0]=(x1109+x1112+(((htj5*htj5*htj5)*(((((-1.0)*x1091*x1098))+(((-16.0)*x1095))+(((-16.0)*x1099))+((x1093*x1098))))))+(((htj5*htj5*htj5*htj5)*((x1107+x1111+(((-1.0)*x1114))+(((-1.0)*x1112))))))+(((htj5*htj5)*((x1107+x1112+(((-1.0)*x1114))+(((-1.0)*x1111))))))+((x1115*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1113))+(((-1.0)*x1111))+((htj5*x1115))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1109+x1111+(((-1.0)*x1112))+(((-1.0)*x1113)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1116=(cj5*sj4);
IkReal x1117=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1117))+(((-1.0)*r00*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1117))+((cj4*r12))+((r10*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1117))+(((-1.0)*r00*x1116))))+IKsqr(((((-1.0)*r11*x1117))+((cj4*r12))+((r10*x1116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1117))+(((-1.0)*r00*x1116))), ((((-1.0)*r11*x1117))+((cj4*r12))+((r10*x1116))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1118=IKcos(j0);
IkReal x1119=IKsin(j0);
IkReal x1120=(r02*sj4);
IkReal x1121=((1.0)*sj3);
IkReal x1122=(r12*sj4);
IkReal x1123=((0.21325)*cj2);
IkReal x1124=((1.0)*cj3);
IkReal x1125=((1.0)*sj2);
IkReal x1126=(r11*sj5);
IkReal x1127=(cj5*r01);
IkReal x1128=(cj5*r11);
IkReal x1129=(r00*sj5);
IkReal x1130=((1.0)*cj2);
IkReal x1131=(r10*sj5);
IkReal x1132=((1.0)*cj4);
IkReal x1133=(cj1*x1119);
IkReal x1134=(cj4*cj5*r00);
IkReal x1135=(cj1*x1118);
IkReal x1136=(cj4*cj5*r10);
IkReal x1137=(cj4*r01*sj5);
IkReal x1138=((0.21325)*sj1*sj2);
IkReal x1139=(sj1*x1118);
IkReal x1140=((1.0)*cj5*sj4);
IkReal x1141=(sj1*x1119);
evalcond[0]=(x1118+(((-1.0)*r12*x1132))+((sj4*x1126))+(((-1.0)*r10*x1140)));
evalcond[1]=((((-1.0)*r00*x1140))+(((-1.0)*x1119))+((r01*sj4*sj5))+(((-1.0)*r02*x1132)));
evalcond[2]=((((-0.08535)*x1129))+(((-0.08535)*x1127))+(((0.24365)*x1135))+(((-0.11235)*x1119))+(((-1.0)*px))+(((-1.0)*x1118*x1138))+((x1123*x1135)));
evalcond[3]=((((-0.08535)*x1128))+(((-0.08535)*x1131))+(((0.24365)*x1133))+(((-1.0)*py))+(((0.11235)*x1118))+((x1123*x1133))+(((-1.0)*x1119*x1138)));
evalcond[4]=(((cj3*x1137))+(((-1.0)*x1130*x1135))+((sj2*x1139))+((sj3*x1129))+((sj3*x1127))+(((-1.0)*x1124*x1134))+((cj3*x1120)));
evalcond[5]=(((cj3*cj4*x1126))+(((-1.0)*x1130*x1133))+((sj2*x1141))+((sj3*x1128))+((sj3*x1131))+(((-1.0)*x1124*x1136))+((cj3*x1122)));
evalcond[6]=((((-1.0)*x1121*x1137))+(((-1.0)*x1130*x1139))+(((-1.0)*x1120*x1121))+((sj3*x1134))+(((-1.0)*x1125*x1135))+((cj3*x1127))+((cj3*x1129)));
evalcond[7]=((((-1.0)*cj4*x1121*x1126))+((cj3*x1131))+(((-1.0)*x1121*x1122))+(((-1.0)*x1130*x1141))+((sj3*x1136))+(((-1.0)*x1125*x1133))+((cj3*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(r22,-1);
if(!x1144.valid){
continue;
}
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(sj3,-1);
if(!x1145.valid){
continue;
}
sj4array[0]=((x1144.value)*(x1145.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1147=((4.0)*r01);
IkReal x1148=((16.0)*r00);
IkReal x1149=(cj3*sj2);
IkReal x1150=((8.0)*r00);
IkReal x1151=(cj2*cj3);
IkReal x1152=(cj4*r01);
IkReal x1153=((16.0)*cj1);
IkReal x1154=((8.0)*sj1);
IkReal x1155=((16.0)*sj1);
IkReal x1156=((8.0)*cj1);
IkReal x1157=(sj2*sj3);
IkReal x1158=(cj2*sj3);
IkReal x1159=(sj1*x1158);
IkReal x1160=((4.0)*cj4*r00);
IkReal x1161=(((cj1*x1147*x1157))+((sj1*x1147*x1149))+((sj1*x1157*x1160))+((x1147*x1159)));
IkReal x1162=(((sj1*x1151*x1160))+((cj1*x1147*x1151))+((cj1*x1149*x1160))+((cj1*x1158*x1160)));
IkReal x1163=(x1162+(((-1.0)*x1161)));
IkReal x1164=((((-1.0)*x1152*x1154*x1157))+((sj1*x1149*x1150))+((x1149*x1152*x1156))+(((-1.0)*cj1*x1150*x1151))+((x1150*x1159))+((cj1*x1150*x1157))+((x1151*x1152*x1154))+((x1152*x1156*x1158)));
IkReal x1165=(x1161+(((-1.0)*x1162)));
op[0]=x1163;
op[1]=x1164;
op[2]=x1163;
op[3]=((((-1.0)*cj1*x1148*x1151))+((sj1*x1148*x1149))+((cj1*x1148*x1157))+((x1149*x1152*x1153))+((x1148*x1159))+((x1151*x1152*x1155))+((x1152*x1153*x1158))+(((-1.0)*x1152*x1155*x1157)));
op[4]=x1165;
op[5]=x1164;
op[6]=x1165;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1166=(cj5*sj4);
IkReal x1167=(sj4*sj5);
if( IKabs((((r01*x1167))+(((-1.0)*r00*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1166))+(((-1.0)*r11*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1167))+(((-1.0)*r00*x1166))))+IKsqr((((r10*x1166))+(((-1.0)*r11*x1167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1167))+(((-1.0)*r00*x1166))), (((r10*x1166))+(((-1.0)*r11*x1167))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1168=IKcos(j0);
IkReal x1169=IKsin(j0);
IkReal x1170=((0.21325)*cj2);
IkReal x1171=((1.0)*cj3);
IkReal x1172=((1.0)*sj2);
IkReal x1173=(r11*sj5);
IkReal x1174=(cj5*r01);
IkReal x1175=(r01*sj5);
IkReal x1176=((0.21325)*sj2);
IkReal x1177=(cj5*r11);
IkReal x1178=(r00*sj5);
IkReal x1179=(cj3*cj4);
IkReal x1180=((1.0)*cj2);
IkReal x1181=(r10*sj5);
IkReal x1182=(cj1*x1169);
IkReal x1183=(cj4*cj5*r00);
IkReal x1184=(cj1*x1168);
IkReal x1185=(cj4*cj5*r10);
IkReal x1186=((1.0)*cj4*sj3);
IkReal x1187=(sj1*x1168);
IkReal x1188=((1.0)*cj5*sj4);
IkReal x1189=(sj1*x1169);
evalcond[0]=(x1168+(((-1.0)*r10*x1188))+((sj4*x1173)));
evalcond[1]=(((sj4*x1175))+(((-1.0)*x1169))+(((-1.0)*r00*x1188)));
evalcond[2]=((((-1.0)*x1171*x1183))+((sj3*x1178))+((sj3*x1174))+((x1175*x1179))+(((-1.0)*x1180*x1184))+((sj2*x1187)));
evalcond[3]=((((-1.0)*x1171*x1185))+((sj3*x1177))+((x1173*x1179))+(((-1.0)*x1180*x1182))+((sj3*x1181))+((sj2*x1189)));
evalcond[4]=((((-1.0)*x1175*x1186))+(((-1.0)*x1172*x1184))+(((-1.0)*x1180*x1187))+((sj3*x1183))+((cj3*x1174))+((cj3*x1178)));
evalcond[5]=((((-1.0)*x1172*x1182))+(((-1.0)*x1180*x1189))+((sj3*x1185))+(((-1.0)*x1173*x1186))+((cj3*x1177))+((cj3*x1181)));
evalcond[6]=((((-1.0)*x1176*x1187))+(((-0.08535)*x1174))+(((-0.08535)*x1178))+(((0.24365)*x1184))+(((-1.0)*px))+((x1170*x1184))+(((-0.11235)*x1169)));
evalcond[7]=((((-1.0)*x1176*x1189))+(((-0.08535)*x1181))+(((-0.08535)*x1177))+(((0.24365)*x1182))+(((-1.0)*py))+((x1170*x1182))+(((0.11235)*x1168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(cj3,-1);
if(!x1190.valid){
continue;
}
CheckValue<IkReal> x1191=IKPowWithIntegerCheck(r22,-1);
if(!x1191.valid){
continue;
}
sj4array[0]=((-1.0)*(x1190.value)*(x1191.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1192=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1192);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1192);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1193=((4.0)*r01);
IkReal x1194=((16.0)*r00);
IkReal x1195=(cj3*sj2);
IkReal x1196=((8.0)*r00);
IkReal x1197=(cj2*cj3);
IkReal x1198=(cj4*r01);
IkReal x1199=((16.0)*cj1);
IkReal x1200=((8.0)*sj1);
IkReal x1201=((16.0)*sj1);
IkReal x1202=((8.0)*cj1);
IkReal x1203=(sj2*sj3);
IkReal x1204=(cj2*sj3);
IkReal x1205=(sj1*x1204);
IkReal x1206=((4.0)*cj4*r00);
IkReal x1207=(((sj1*x1203*x1206))+((cj1*x1193*x1203))+((x1193*x1205))+((sj1*x1193*x1195)));
IkReal x1208=(((cj1*x1204*x1206))+((cj1*x1195*x1206))+((cj1*x1193*x1197))+((sj1*x1197*x1206)));
IkReal x1209=(x1208+(((-1.0)*x1207)));
IkReal x1210=((((-1.0)*x1198*x1200*x1203))+((x1195*x1198*x1202))+((cj1*x1196*x1203))+((sj1*x1195*x1196))+((x1197*x1198*x1200))+(((-1.0)*cj1*x1196*x1197))+((x1198*x1202*x1204))+((x1196*x1205)));
IkReal x1211=(x1207+(((-1.0)*x1208)));
op[0]=x1209;
op[1]=x1210;
op[2]=x1209;
op[3]=((((-1.0)*x1198*x1201*x1203))+((x1198*x1199*x1204))+(((-1.0)*cj1*x1194*x1197))+((sj1*x1194*x1195))+((cj1*x1194*x1203))+((x1194*x1205))+((x1197*x1198*x1201))+((x1195*x1198*x1199)));
op[4]=x1211;
op[5]=x1210;
op[6]=x1211;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1212=(cj5*sj4);
IkReal x1213=(sj4*sj5);
if( IKabs((((r01*x1213))+(((-1.0)*r00*x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1212))+(((-1.0)*r11*x1213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1213))+(((-1.0)*r00*x1212))))+IKsqr((((r10*x1212))+(((-1.0)*r11*x1213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1213))+(((-1.0)*r00*x1212))), (((r10*x1212))+(((-1.0)*r11*x1213))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1214=IKcos(j0);
IkReal x1215=IKsin(j0);
IkReal x1216=((0.21325)*cj2);
IkReal x1217=((1.0)*cj3);
IkReal x1218=((1.0)*sj2);
IkReal x1219=(r11*sj5);
IkReal x1220=(cj5*r01);
IkReal x1221=(r01*sj5);
IkReal x1222=((0.21325)*sj2);
IkReal x1223=(cj5*r11);
IkReal x1224=(r00*sj5);
IkReal x1225=(cj3*cj4);
IkReal x1226=((1.0)*cj2);
IkReal x1227=(r10*sj5);
IkReal x1228=(cj1*x1215);
IkReal x1229=(cj4*cj5*r00);
IkReal x1230=(cj1*x1214);
IkReal x1231=(cj4*cj5*r10);
IkReal x1232=((1.0)*cj4*sj3);
IkReal x1233=(sj1*x1214);
IkReal x1234=((1.0)*cj5*sj4);
IkReal x1235=(sj1*x1215);
evalcond[0]=(x1214+((sj4*x1219))+(((-1.0)*r10*x1234)));
evalcond[1]=((((-1.0)*r00*x1234))+((sj4*x1221))+(((-1.0)*x1215)));
evalcond[2]=(((sj2*x1233))+((sj3*x1224))+((sj3*x1220))+(((-1.0)*x1226*x1230))+((x1221*x1225))+(((-1.0)*x1217*x1229)));
evalcond[3]=(((sj2*x1235))+((x1219*x1225))+((sj3*x1227))+((sj3*x1223))+(((-1.0)*x1226*x1228))+(((-1.0)*x1217*x1231)));
evalcond[4]=(((cj3*x1224))+((cj3*x1220))+(((-1.0)*x1218*x1230))+((sj3*x1229))+(((-1.0)*x1226*x1233))+(((-1.0)*x1221*x1232)));
evalcond[5]=(((cj3*x1227))+((cj3*x1223))+((sj3*x1231))+(((-1.0)*x1218*x1228))+(((-1.0)*x1226*x1235))+(((-1.0)*x1219*x1232)));
evalcond[6]=(((x1216*x1230))+(((-1.0)*x1222*x1233))+(((-1.0)*px))+(((-0.11235)*x1215))+(((-0.08535)*x1220))+(((-0.08535)*x1224))+(((0.24365)*x1230)));
evalcond[7]=(((x1216*x1228))+(((-1.0)*x1222*x1235))+(((-1.0)*py))+(((-0.08535)*x1227))+(((-0.08535)*x1223))+(((0.24365)*x1228))+(((0.11235)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1238 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1238.valid){
continue;
}
IkReal x1236=((1.0)*(x1238.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1239=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1239.valid){
continue;
}
if( (((-1.0)*(x1239.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1239.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1237=((-1.0)*(IKasin(((-1.0)*(x1239.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1237))+(((-1.0)*x1236)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1236))+(((1.0)*x1237)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1240=cj5*cj5;
IkReal x1241=r21*r21;
IkReal x1242=(sj3*x1240);
IkReal x1243=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1241))+((x1242*(r20*r20)))+(((-1.0)*x1241*x1242)));
j4eval[0]=x1243;
j4eval[1]=IKsign(x1243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1244=cj5*cj5;
IkReal x1245=r21*r21;
IkReal x1246=((1.0)*cj3);
IkReal x1247=(cj3*x1244);
IkReal x1248=((((-1.0)*x1245*x1246))+(((-1.0)*x1244*x1246*(r20*r20)))+((x1245*x1247))+(((-1.0)*x1246*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1248;
j4eval[1]=IKsign(x1248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1249=cj1*cj1;
IkReal x1250=cj2*cj2;
IkReal x1251=(cj1*sj1*sj2);
IkReal x1252=(cj2*x1249);
IkReal x1253=(x1249*x1250);
j0eval[0]=((4.18279977479812)+x1249+(((-6.54807030503047)*cj2*x1251))+(((6.54807030503047)*x1253))+(((-3.27403515251523)*x1250))+(((-7.48153495812743)*x1251))+(((7.48153495812743)*x1252)));
j0eval[1]=IKsign(((23239234.0)+(((-36380450.0)*cj2*x1251))+(((41566690.0)*x1252))+(((-18190225.0)*x1250))+(((5555904.0)*x1249))+(((-41566690.0)*x1251))+(((36380450.0)*x1253))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1254=((1.0)*cj5);
IkReal x1255=((1.0)*sj5);
IkReal x1256=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1256;
j0eval[1]=((IKabs(((((-1.0)*r11*x1254))+(((-1.0)*r10*x1255)))))+(IKabs(((((-1.0)*r00*x1255))+(((-1.0)*r01*x1254))))));
j0eval[2]=IKsign(x1256);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1257=cj5*cj5;
IkReal x1258=r21*r21;
IkReal x1259=(sj1*sj2);
IkReal x1260=(r21*sj5);
IkReal x1261=(cj5*r20);
IkReal x1262=(cj1*cj2);
IkReal x1263=(x1258+(r22*r22)+(((-1.0)*x1257*x1258))+(((-2.0)*x1260*x1261))+((x1257*(r20*r20))));
j4eval[0]=x1263;
j4eval[1]=IKsign(x1263);
j4eval[2]=((IKabs((((x1261*x1262))+((x1259*x1260))+(((-1.0)*x1259*x1261))+(((-1.0)*x1260*x1262)))))+(IKabs((((r22*x1259))+(((-1.0)*r22*x1262))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1264=(cj5*r01);
IkReal x1265=((4873.0)*cj1);
IkReal x1266=(r00*sj5);
IkReal x1267=(cj1*cj2);
IkReal x1268=((20000.0)*px);
IkReal x1269=(sj1*sj2);
IkReal x1270=((2558.0)*x1269);
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(((((2247.0)*x1269))+(((-2247.0)*x1267))),-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck((x1269+(((-1.0)*x1267))),-1);
if(!x1272.valid){
continue;
}
if( IKabs(((x1271.value)*(((((-1.0)*x1264*x1265))+((x1264*x1270))+(((-1.0)*x1268*x1269))+((x1266*x1270))+(((-2558.0)*x1264*x1267))+(((-2558.0)*x1266*x1267))+((x1267*x1268))+(((-1.0)*x1265*x1266)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1272.value)*(((((-1.0)*x1264))+(((-1.0)*x1266)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1271.value)*(((((-1.0)*x1264*x1265))+((x1264*x1270))+(((-1.0)*x1268*x1269))+((x1266*x1270))+(((-2558.0)*x1264*x1267))+(((-2558.0)*x1266*x1267))+((x1267*x1268))+(((-1.0)*x1265*x1266))))))+IKsqr(((x1272.value)*(((((-1.0)*x1264))+(((-1.0)*x1266))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1271.value)*(((((-1.0)*x1264*x1265))+((x1264*x1270))+(((-1.0)*x1268*x1269))+((x1266*x1270))+(((-2558.0)*x1264*x1267))+(((-2558.0)*x1266*x1267))+((x1267*x1268))+(((-1.0)*x1265*x1266))))), ((x1272.value)*(((((-1.0)*x1264))+(((-1.0)*x1266))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1273=IKcos(j0);
IkReal x1274=IKsin(j0);
IkReal x1275=(cj5*r01);
IkReal x1276=(r00*sj5);
IkReal x1277=(cj5*r11);
IkReal x1278=((1.0)*cj2);
IkReal x1279=(r10*sj5);
IkReal x1280=((0.21325)*cj1*cj2);
IkReal x1281=(cj1*x1273);
IkReal x1282=(cj1*x1274);
IkReal x1283=(sj1*sj2*x1273);
IkReal x1284=(sj1*sj2*x1274);
evalcond[0]=(x1275+x1276+x1283+(((-1.0)*x1278*x1281)));
evalcond[1]=(x1279+x1277+x1284+(((-1.0)*x1278*x1282)));
evalcond[2]=((((-0.21325)*x1283))+(((-0.08535)*x1275))+(((-0.08535)*x1276))+(((-1.0)*px))+(((0.24365)*x1281))+((x1273*x1280))+(((-0.11235)*x1274)));
evalcond[3]=((((-0.21325)*x1284))+(((-0.08535)*x1279))+(((-0.08535)*x1277))+(((-1.0)*py))+(((0.24365)*x1282))+(((0.11235)*x1273))+((x1274*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1285=((1.0)*cj5);
IkReal x1286=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1285)));
j4eval[0]=x1286;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1285))))));
j4eval[2]=IKsign(x1286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1287=((1.0)*cj5);
IkReal x1288=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1287)));
j4eval[0]=x1288;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1287))))));
j4eval[2]=IKsign(x1288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1289=((1.0)*sj0);
IkReal x1290=((1.0)*cj0);
IkReal x1291=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1291;
j4eval[1]=((IKabs(((((-1.0)*r02*x1290))+(((-1.0)*r12*x1289)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1290))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1289))))));
j4eval[2]=IKsign(x1291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1292=((1.0)*sj0);
IkReal x1293=((1.0)*cj0);
CheckValue<IkReal> x1294 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1292))+(((-1.0)*r02*x1293)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1293))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1294.valid){
continue;
}
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1294.value)+(((1.5707963267949)*(x1295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1296=IKsin(j4);
IkReal x1297=IKcos(j4);
IkReal x1298=(cj5*r10);
IkReal x1299=(r01*sj5);
IkReal x1300=((1.0)*cj2);
IkReal x1301=(cj5*r00);
IkReal x1302=((1.0)*sj0);
IkReal x1303=(cj5*r20);
IkReal x1304=(cj1*sj2);
IkReal x1305=((1.0)*x1297);
IkReal x1306=((1.0)*x1296);
IkReal x1307=(sj5*x1296);
evalcond[0]=((((-1.0)*r22*x1305))+((r21*x1307))+(((-1.0)*x1303*x1306)));
evalcond[1]=(cj0+((r11*x1307))+(((-1.0)*r12*x1305))+(((-1.0)*x1298*x1306)));
evalcond[2]=(((x1296*x1299))+(((-1.0)*r02*x1305))+(((-1.0)*x1302))+(((-1.0)*x1301*x1306)));
evalcond[3]=((((-1.0)*r22*x1306))+((sj1*sj2))+((x1297*x1303))+(((-1.0)*cj1*x1300))+(((-1.0)*r21*sj5*x1305)));
evalcond[4]=((((-1.0)*cj0*x1304))+(((-1.0)*cj0*sj1*x1300))+(((-1.0)*x1299*x1305))+(((-1.0)*r02*x1306))+((x1297*x1301)));
evalcond[5]=(((x1297*x1298))+(((-1.0)*sj0*sj1*x1300))+(((-1.0)*r12*x1306))+(((-1.0)*r11*sj5*x1305))+(((-1.0)*x1302*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1308=((1.0)*cj5);
CheckValue<IkReal> x1309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1308)))),-1);
if(!x1309.valid){
continue;
}
CheckValue<IkReal> x1310 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1309.value)))+(x1310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1311=IKsin(j4);
IkReal x1312=IKcos(j4);
IkReal x1313=(cj5*r10);
IkReal x1314=(r01*sj5);
IkReal x1315=((1.0)*cj2);
IkReal x1316=(cj5*r00);
IkReal x1317=((1.0)*sj0);
IkReal x1318=(cj5*r20);
IkReal x1319=(cj1*sj2);
IkReal x1320=((1.0)*x1312);
IkReal x1321=((1.0)*x1311);
IkReal x1322=(sj5*x1311);
evalcond[0]=((((-1.0)*r22*x1320))+((r21*x1322))+(((-1.0)*x1318*x1321)));
evalcond[1]=(cj0+(((-1.0)*x1313*x1321))+((r11*x1322))+(((-1.0)*r12*x1320)));
evalcond[2]=(((x1311*x1314))+(((-1.0)*x1317))+(((-1.0)*r02*x1320))+(((-1.0)*x1316*x1321)));
evalcond[3]=((((-1.0)*r22*x1321))+((sj1*sj2))+(((-1.0)*r21*sj5*x1320))+(((-1.0)*cj1*x1315))+((x1312*x1318)));
evalcond[4]=((((-1.0)*x1314*x1320))+(((-1.0)*cj0*x1319))+(((-1.0)*r02*x1321))+((x1312*x1316))+(((-1.0)*cj0*sj1*x1315)));
evalcond[5]=((((-1.0)*x1317*x1319))+(((-1.0)*sj0*sj1*x1315))+(((-1.0)*r12*x1321))+(((-1.0)*r11*sj5*x1320))+((x1312*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1323=((1.0)*cj5);
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1323))+(((-1.0)*r00*sj5)))),-1);
if(!x1324.valid){
continue;
}
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1324.value)))+(x1325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1326=IKsin(j4);
IkReal x1327=IKcos(j4);
IkReal x1328=(cj5*r10);
IkReal x1329=(r01*sj5);
IkReal x1330=((1.0)*cj2);
IkReal x1331=(cj5*r00);
IkReal x1332=((1.0)*sj0);
IkReal x1333=(cj5*r20);
IkReal x1334=(cj1*sj2);
IkReal x1335=((1.0)*x1327);
IkReal x1336=((1.0)*x1326);
IkReal x1337=(sj5*x1326);
evalcond[0]=((((-1.0)*r22*x1335))+((r21*x1337))+(((-1.0)*x1333*x1336)));
evalcond[1]=(((r11*x1337))+cj0+(((-1.0)*x1328*x1336))+(((-1.0)*r12*x1335)));
evalcond[2]=(((x1326*x1329))+(((-1.0)*x1331*x1336))+(((-1.0)*r02*x1335))+(((-1.0)*x1332)));
evalcond[3]=((((-1.0)*cj1*x1330))+(((-1.0)*r22*x1336))+(((-1.0)*r21*sj5*x1335))+((sj1*sj2))+((x1327*x1333)));
evalcond[4]=((((-1.0)*cj0*sj1*x1330))+(((-1.0)*x1329*x1335))+((x1327*x1331))+(((-1.0)*r02*x1336))+(((-1.0)*cj0*x1334)));
evalcond[5]=(((x1327*x1328))+(((-1.0)*x1332*x1334))+(((-1.0)*r11*sj5*x1335))+(((-1.0)*r12*x1336))+(((-1.0)*sj0*sj1*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1338=cj5*cj5;
IkReal x1339=r21*r21;
IkReal x1340=(sj1*sj2);
IkReal x1341=(r21*sj5);
IkReal x1342=(cj1*cj2);
IkReal x1343=(cj5*r20);
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal((((r22*x1340))+(((-1.0)*r22*x1342)))),IkReal(((((-1.0)*x1341*x1342))+((x1340*x1341))+((x1342*x1343))+(((-1.0)*x1340*x1343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
CheckValue<IkReal> x1345=IKPowWithIntegerCheck(IKsign((x1339+(r22*r22)+((x1338*(r20*r20)))+(((-1.0)*x1338*x1339))+(((-2.0)*x1341*x1343)))),-1);
if(!x1345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1344.value)+(((1.5707963267949)*(x1345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1346=IKsin(j4);
IkReal x1347=IKcos(j4);
IkReal x1348=(r21*sj5);
IkReal x1349=(cj5*r20);
IkReal x1350=((1.0)*x1347);
IkReal x1351=((1.0)*x1346);
evalcond[0]=(((x1346*x1348))+(((-1.0)*r22*x1350))+(((-1.0)*x1349*x1351)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1347*x1349))+(((-1.0)*r22*x1351))+(((-1.0)*x1348*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1352=(cj5*sj4);
IkReal x1353=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1352))+(((-1.0)*cj4*r02))+((r01*x1353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1352))+(((-1.0)*r11*x1353))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1352))+(((-1.0)*cj4*r02))+((r01*x1353))))+IKsqr((((r10*x1352))+(((-1.0)*r11*x1353))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1352))+(((-1.0)*cj4*r02))+((r01*x1353))), (((r10*x1352))+(((-1.0)*r11*x1353))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1354=IKcos(j0);
IkReal x1355=IKsin(j0);
IkReal x1356=(cj4*cj5);
IkReal x1357=((0.21325)*cj2);
IkReal x1358=(cj5*r01);
IkReal x1359=((1.0)*sj2);
IkReal x1360=(r11*sj5);
IkReal x1361=((1.0)*sj4);
IkReal x1362=(r00*sj5);
IkReal x1363=(cj5*r11);
IkReal x1364=((1.0)*cj2);
IkReal x1365=((1.0)*cj4);
IkReal x1366=((0.21325)*sj2);
IkReal x1367=(r01*sj5);
IkReal x1368=(r10*sj5);
IkReal x1369=(cj1*x1355);
IkReal x1370=(cj1*x1354);
IkReal x1371=(sj1*x1354);
IkReal x1372=(sj1*x1355);
evalcond[0]=(x1354+(((-1.0)*r12*x1365))+((sj4*x1360))+(((-1.0)*cj5*r10*x1361)));
evalcond[1]=((((-1.0)*x1355))+(((-1.0)*r02*x1365))+((sj4*x1367))+(((-1.0)*cj5*r00*x1361)));
evalcond[2]=(x1358+x1362+((sj2*x1371))+(((-1.0)*x1364*x1370)));
evalcond[3]=(x1363+x1368+(((-1.0)*x1364*x1369))+((sj2*x1372)));
evalcond[4]=((((-1.0)*r02*x1361))+(((-1.0)*x1365*x1367))+(((-1.0)*x1364*x1371))+(((-1.0)*x1359*x1370))+((r00*x1356)));
evalcond[5]=(((r10*x1356))+(((-1.0)*r12*x1361))+(((-1.0)*x1359*x1369))+(((-1.0)*x1364*x1372))+(((-1.0)*x1360*x1365)));
evalcond[6]=((((-0.11235)*x1355))+(((-1.0)*px))+(((-0.08535)*x1358))+(((-0.08535)*x1362))+(((-1.0)*x1366*x1371))+((x1357*x1370))+(((0.24365)*x1370)));
evalcond[7]=(((x1357*x1369))+(((0.11235)*x1354))+(((0.24365)*x1369))+(((-1.0)*py))+(((-0.08535)*x1363))+(((-0.08535)*x1368))+(((-1.0)*x1366*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1373=((1.0)*cj5);
IkReal x1374=((1.0)*sj5);
CheckValue<IkReal> x1375 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1374))+(((-1.0)*r11*x1373)))),IkReal(((((-1.0)*r00*x1374))+(((-1.0)*r01*x1373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1376.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1375.value)+(((1.5707963267949)*(x1376.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1377=IKcos(j0);
IkReal x1378=IKsin(j0);
IkReal x1379=(cj5*r01);
IkReal x1380=(r00*sj5);
IkReal x1381=(cj5*r11);
IkReal x1382=((1.0)*cj2);
IkReal x1383=(r10*sj5);
IkReal x1384=((0.21325)*cj1*cj2);
IkReal x1385=(cj1*x1377);
IkReal x1386=(cj1*x1378);
IkReal x1387=(sj1*sj2*x1377);
IkReal x1388=(sj1*sj2*x1378);
evalcond[0]=(x1379+x1387+x1380+(((-1.0)*x1382*x1385)));
evalcond[1]=(x1388+x1381+x1383+(((-1.0)*x1382*x1386)));
evalcond[2]=((((-0.11235)*x1378))+(((-0.21325)*x1387))+(((-0.08535)*x1380))+(((-1.0)*px))+(((0.24365)*x1385))+(((-0.08535)*x1379))+((x1377*x1384)));
evalcond[3]=((((-0.21325)*x1388))+(((-0.08535)*x1381))+(((-0.08535)*x1383))+(((0.11235)*x1377))+(((-1.0)*py))+(((0.24365)*x1386))+((x1378*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1389=((1.0)*cj5);
IkReal x1390=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1389)));
j4eval[0]=x1390;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1389))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1391=((1.0)*cj5);
IkReal x1392=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1391)));
j4eval[0]=x1392;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1391))))));
j4eval[2]=IKsign(x1392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1393=((1.0)*sj0);
IkReal x1394=((1.0)*cj0);
IkReal x1395=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1395;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1393))+(((-1.0)*r01*sj5*x1394)))))+(IKabs(((((-1.0)*r12*x1393))+(((-1.0)*r02*x1394))))));
j4eval[2]=IKsign(x1395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1396=((1.0)*sj0);
IkReal x1397=((1.0)*cj0);
CheckValue<IkReal> x1398 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1396))+(((-1.0)*r02*x1397)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1396))+(((-1.0)*r01*sj5*x1397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1398.value)+(((1.5707963267949)*(x1399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKsin(j4);
IkReal x1401=IKcos(j4);
IkReal x1402=(cj5*r10);
IkReal x1403=(r01*sj5);
IkReal x1404=((1.0)*cj2);
IkReal x1405=(cj5*r00);
IkReal x1406=((1.0)*sj0);
IkReal x1407=(cj5*r20);
IkReal x1408=(cj1*sj2);
IkReal x1409=((1.0)*x1401);
IkReal x1410=((1.0)*x1400);
IkReal x1411=(sj5*x1400);
evalcond[0]=(((r21*x1411))+(((-1.0)*r22*x1409))+(((-1.0)*x1407*x1410)));
evalcond[1]=((((-1.0)*r12*x1409))+cj0+((r11*x1411))+(((-1.0)*x1402*x1410)));
evalcond[2]=((((-1.0)*x1406))+(((-1.0)*r02*x1409))+(((-1.0)*x1405*x1410))+((x1400*x1403)));
evalcond[3]=((((-1.0)*cj1*x1404))+(((-1.0)*r22*x1410))+((sj1*sj2))+((x1401*x1407))+(((-1.0)*r21*sj5*x1409)));
evalcond[4]=((((-1.0)*cj0*sj1*x1404))+(((-1.0)*r02*x1410))+(((-1.0)*cj0*x1408))+(((-1.0)*x1403*x1409))+((x1401*x1405)));
evalcond[5]=((((-1.0)*r11*sj5*x1409))+(((-1.0)*x1406*x1408))+(((-1.0)*sj0*sj1*x1404))+(((-1.0)*r12*x1410))+((x1401*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1412=((1.0)*cj5);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1412))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1412)))),-1);
if(!x1414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1413.value)+(((1.5707963267949)*(x1414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1415=IKsin(j4);
IkReal x1416=IKcos(j4);
IkReal x1417=(cj5*r10);
IkReal x1418=(r01*sj5);
IkReal x1419=((1.0)*cj2);
IkReal x1420=(cj5*r00);
IkReal x1421=((1.0)*sj0);
IkReal x1422=(cj5*r20);
IkReal x1423=(cj1*sj2);
IkReal x1424=((1.0)*x1416);
IkReal x1425=((1.0)*x1415);
IkReal x1426=(sj5*x1415);
evalcond[0]=(((r21*x1426))+(((-1.0)*x1422*x1425))+(((-1.0)*r22*x1424)));
evalcond[1]=(((r11*x1426))+cj0+(((-1.0)*x1417*x1425))+(((-1.0)*r12*x1424)));
evalcond[2]=(((x1415*x1418))+(((-1.0)*x1420*x1425))+(((-1.0)*r02*x1424))+(((-1.0)*x1421)));
evalcond[3]=((((-1.0)*r21*sj5*x1424))+(((-1.0)*cj1*x1419))+((sj1*sj2))+(((-1.0)*r22*x1425))+((x1416*x1422)));
evalcond[4]=((((-1.0)*cj0*x1423))+(((-1.0)*x1418*x1424))+(((-1.0)*cj0*sj1*x1419))+(((-1.0)*r02*x1425))+((x1416*x1420)));
evalcond[5]=((((-1.0)*r11*sj5*x1424))+(((-1.0)*x1421*x1423))+(((-1.0)*sj0*sj1*x1419))+((x1416*x1417))+(((-1.0)*r12*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1427=((1.0)*cj5);
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1427)))),-1);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1428.value)))+(x1429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1430=IKsin(j4);
IkReal x1431=IKcos(j4);
IkReal x1432=(cj5*r10);
IkReal x1433=(r01*sj5);
IkReal x1434=((1.0)*cj2);
IkReal x1435=(cj5*r00);
IkReal x1436=((1.0)*sj0);
IkReal x1437=(cj5*r20);
IkReal x1438=(cj1*sj2);
IkReal x1439=((1.0)*x1431);
IkReal x1440=((1.0)*x1430);
IkReal x1441=(sj5*x1430);
evalcond[0]=((((-1.0)*r22*x1439))+((r21*x1441))+(((-1.0)*x1437*x1440)));
evalcond[1]=((((-1.0)*r12*x1439))+((r11*x1441))+cj0+(((-1.0)*x1432*x1440)));
evalcond[2]=(((x1430*x1433))+(((-1.0)*x1436))+(((-1.0)*r02*x1439))+(((-1.0)*x1435*x1440)));
evalcond[3]=((((-1.0)*r22*x1440))+(((-1.0)*cj1*x1434))+((sj1*sj2))+(((-1.0)*r21*sj5*x1439))+((x1431*x1437)));
evalcond[4]=((((-1.0)*cj0*sj1*x1434))+(((-1.0)*cj0*x1438))+(((-1.0)*r02*x1440))+(((-1.0)*x1433*x1439))+((x1431*x1435)));
evalcond[5]=((((-1.0)*x1436*x1438))+(((-1.0)*r12*x1440))+(((-1.0)*r11*sj5*x1439))+(((-1.0)*sj0*sj1*x1434))+((x1431*x1432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1442=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1442;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1442);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1443=r21*r21;
IkReal x1444=cj5*cj5;
IkReal x1445=(sj1*sj2);
IkReal x1446=(r21*sj5);
IkReal x1447=(cj5*r20);
IkReal x1448=(cj1*cj2);
IkReal x1449=(((x1443*x1444))+(((2.0)*x1446*x1447))+(((-1.0)*x1443))+(((-1.0)*x1444*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x1449;
j4eval[1]=((IKabs((((x1445*x1446))+(((-1.0)*x1446*x1448))+(((-1.0)*x1445*x1447))+((x1447*x1448)))))+(IKabs((((r22*x1445))+(((-1.0)*r22*x1448))))));
j4eval[2]=IKsign(x1449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1450=((4873.0)*cj1);
IkReal x1451=(cj5*r01);
IkReal x1452=(r00*sj5);
IkReal x1453=(cj1*cj2);
IkReal x1454=((20000.0)*px);
IkReal x1455=(sj1*sj2);
IkReal x1456=((5972.0)*x1455);
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(((((2247.0)*x1455))+(((-2247.0)*x1453))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(((((-1.0)*x1453))+x1455),-1);
if(!x1458.valid){
continue;
}
if( IKabs(((x1457.value)*(((((5972.0)*x1452*x1453))+((x1450*x1451))+((x1450*x1452))+(((-1.0)*x1454*x1455))+(((5972.0)*x1451*x1453))+(((-1.0)*x1452*x1456))+(((-1.0)*x1451*x1456))+((x1453*x1454)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1458.value)*((x1451+x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1457.value)*(((((5972.0)*x1452*x1453))+((x1450*x1451))+((x1450*x1452))+(((-1.0)*x1454*x1455))+(((5972.0)*x1451*x1453))+(((-1.0)*x1452*x1456))+(((-1.0)*x1451*x1456))+((x1453*x1454))))))+IKsqr(((x1458.value)*((x1451+x1452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1457.value)*(((((5972.0)*x1452*x1453))+((x1450*x1451))+((x1450*x1452))+(((-1.0)*x1454*x1455))+(((5972.0)*x1451*x1453))+(((-1.0)*x1452*x1456))+(((-1.0)*x1451*x1456))+((x1453*x1454))))), ((x1458.value)*((x1451+x1452))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1459=IKcos(j0);
IkReal x1460=IKsin(j0);
IkReal x1461=(cj1*cj2);
IkReal x1462=((1.0)*cj5);
IkReal x1463=(sj1*sj2);
IkReal x1464=(r00*sj5);
IkReal x1465=(r10*sj5);
IkReal x1466=((0.24365)*cj1);
IkReal x1467=((0.08535)*cj5);
IkReal x1468=((0.21325)*x1460);
IkReal x1469=((0.21325)*x1459);
evalcond[0]=(((x1459*x1463))+(((-1.0)*r01*x1462))+(((-1.0)*x1464))+(((-1.0)*x1459*x1461)));
evalcond[1]=((((-1.0)*x1460*x1461))+((x1460*x1463))+(((-1.0)*r11*x1462))+(((-1.0)*x1465)));
evalcond[2]=(((x1459*x1466))+(((-0.08535)*x1464))+((x1461*x1469))+(((-1.0)*x1463*x1469))+(((-1.0)*px))+(((-1.0)*r01*x1467))+(((-0.11235)*x1460)));
evalcond[3]=((((-0.08535)*x1465))+((x1461*x1468))+(((-1.0)*x1463*x1468))+(((-1.0)*py))+((x1460*x1466))+(((-1.0)*r11*x1467))+(((0.11235)*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1470=((1.0)*cj5);
IkReal x1471=((((-1.0)*r01*x1470))+(((-1.0)*r00*sj5)));
j4eval[0]=x1471;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1470)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1472=((1.0)*cj5);
IkReal x1473=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1472)));
j4eval[0]=x1473;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1472))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1474=((1.0)*sj0);
IkReal x1475=((1.0)*cj0);
IkReal x1476=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1476;
j4eval[1]=((IKabs(((((-1.0)*r12*x1474))+(((-1.0)*r02*x1475)))))+(IKabs(((((-1.0)*r11*sj5*x1474))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1475))))));
j4eval[2]=IKsign(x1476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1477=((1.0)*sj0);
IkReal x1478=((1.0)*cj0);
CheckValue<IkReal> x1479 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1477))+(((-1.0)*r02*x1478)))),IkReal(((((-1.0)*r11*sj5*x1477))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1479.valid){
continue;
}
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1479.value)+(((1.5707963267949)*(x1480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1481=IKsin(j4);
IkReal x1482=IKcos(j4);
IkReal x1483=(cj5*r00);
IkReal x1484=(cj5*r10);
IkReal x1485=(r21*sj5);
IkReal x1486=((1.0)*cj2);
IkReal x1487=((1.0)*sj0);
IkReal x1488=(cj1*sj2);
IkReal x1489=(cj5*r20);
IkReal x1490=((1.0)*x1482);
IkReal x1491=((1.0)*x1481);
IkReal x1492=(sj5*x1481);
IkReal x1493=(sj5*x1482);
evalcond[0]=(((x1481*x1485))+(((-1.0)*r22*x1490))+(((-1.0)*x1489*x1491)));
evalcond[1]=((((-1.0)*r12*x1490))+cj0+(((-1.0)*x1484*x1491))+((r11*x1492)));
evalcond[2]=((((-1.0)*x1487))+((r01*x1492))+(((-1.0)*r02*x1490))+(((-1.0)*x1483*x1491)));
evalcond[3]=(((x1482*x1485))+(((-1.0)*cj1*x1486))+((sj1*sj2))+((r22*x1481))+(((-1.0)*x1489*x1490)));
evalcond[4]=(((r01*x1493))+(((-1.0)*cj0*x1488))+(((-1.0)*cj0*sj1*x1486))+(((-1.0)*x1483*x1490))+((r02*x1481)));
evalcond[5]=((((-1.0)*sj0*sj1*x1486))+(((-1.0)*x1487*x1488))+((r12*x1481))+(((-1.0)*x1484*x1490))+((r11*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1494=((1.0)*cj5);
CheckValue<IkReal> x1495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1494)))),-1);
if(!x1495.valid){
continue;
}
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1494))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1495.value)))+(x1496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1497=IKsin(j4);
IkReal x1498=IKcos(j4);
IkReal x1499=(cj5*r00);
IkReal x1500=(cj5*r10);
IkReal x1501=(r21*sj5);
IkReal x1502=((1.0)*cj2);
IkReal x1503=((1.0)*sj0);
IkReal x1504=(cj1*sj2);
IkReal x1505=(cj5*r20);
IkReal x1506=((1.0)*x1498);
IkReal x1507=((1.0)*x1497);
IkReal x1508=(sj5*x1497);
IkReal x1509=(sj5*x1498);
evalcond[0]=((((-1.0)*r22*x1506))+((x1497*x1501))+(((-1.0)*x1505*x1507)));
evalcond[1]=(((r11*x1508))+cj0+(((-1.0)*x1500*x1507))+(((-1.0)*r12*x1506)));
evalcond[2]=((((-1.0)*x1503))+(((-1.0)*x1499*x1507))+((r01*x1508))+(((-1.0)*r02*x1506)));
evalcond[3]=((((-1.0)*cj1*x1502))+((x1498*x1501))+((sj1*sj2))+((r22*x1497))+(((-1.0)*x1505*x1506)));
evalcond[4]=((((-1.0)*x1499*x1506))+((r01*x1509))+(((-1.0)*cj0*x1504))+(((-1.0)*cj0*sj1*x1502))+((r02*x1497)));
evalcond[5]=((((-1.0)*sj0*sj1*x1502))+((r11*x1509))+((r12*x1497))+(((-1.0)*x1500*x1506))+(((-1.0)*x1503*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1510=((1.0)*cj5);
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1510))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1510))+(((-1.0)*r00*sj5)))),-1);
if(!x1512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1511.value)+(((1.5707963267949)*(x1512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1513=IKsin(j4);
IkReal x1514=IKcos(j4);
IkReal x1515=(cj5*r00);
IkReal x1516=(cj5*r10);
IkReal x1517=(r21*sj5);
IkReal x1518=((1.0)*cj2);
IkReal x1519=((1.0)*sj0);
IkReal x1520=(cj1*sj2);
IkReal x1521=(cj5*r20);
IkReal x1522=((1.0)*x1514);
IkReal x1523=((1.0)*x1513);
IkReal x1524=(sj5*x1513);
IkReal x1525=(sj5*x1514);
evalcond[0]=(((x1513*x1517))+(((-1.0)*r22*x1522))+(((-1.0)*x1521*x1523)));
evalcond[1]=((((-1.0)*r12*x1522))+cj0+((r11*x1524))+(((-1.0)*x1516*x1523)));
evalcond[2]=((((-1.0)*x1519))+(((-1.0)*x1515*x1523))+((r01*x1524))+(((-1.0)*r02*x1522)));
evalcond[3]=(((x1514*x1517))+(((-1.0)*cj1*x1518))+((sj1*sj2))+((r22*x1513))+(((-1.0)*x1521*x1522)));
evalcond[4]=((((-1.0)*x1515*x1522))+((r01*x1525))+(((-1.0)*cj0*x1520))+((r02*x1513))+(((-1.0)*cj0*sj1*x1518)));
evalcond[5]=((((-1.0)*sj0*sj1*x1518))+((r12*x1513))+((r11*x1525))+(((-1.0)*x1519*x1520))+(((-1.0)*x1516*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1526=r21*r21;
IkReal x1527=cj5*cj5;
IkReal x1528=(sj1*sj2);
IkReal x1529=(r21*sj5);
IkReal x1530=(cj1*cj2);
IkReal x1531=(cj5*r20);
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1530))+((r22*x1528)))),IkReal(((((-1.0)*x1529*x1530))+((x1528*x1529))+((x1530*x1531))+(((-1.0)*x1528*x1531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign(((((2.0)*x1529*x1531))+((x1526*x1527))+(((-1.0)*(r22*r22)))+(((-1.0)*x1527*(r20*r20)))+(((-1.0)*x1526)))),-1);
if(!x1533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1532.value)+(((1.5707963267949)*(x1533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1534=IKsin(j4);
IkReal x1535=IKcos(j4);
IkReal x1536=(r21*sj5);
IkReal x1537=(cj5*r20);
IkReal x1538=((1.0)*x1535);
evalcond[0]=((((-1.0)*r22*x1538))+(((-1.0)*x1534*x1537))+((x1534*x1536)));
evalcond[1]=((((-1.0)*x1537*x1538))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1535*x1536))+((r22*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1539=(cj5*sj4);
IkReal x1540=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1539))+((r01*x1540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1539))+(((-1.0)*r11*x1540))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1539))+((r01*x1540))))+IKsqr((((r10*x1539))+(((-1.0)*r11*x1540))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1539))+((r01*x1540))), (((r10*x1539))+(((-1.0)*r11*x1540))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1541=IKcos(j0);
IkReal x1542=IKsin(j0);
IkReal x1543=((0.21325)*cj2);
IkReal x1544=((1.0)*sj2);
IkReal x1545=(r11*sj5);
IkReal x1546=(r00*sj5);
IkReal x1547=(cj5*r11);
IkReal x1548=((0.21325)*sj2);
IkReal x1549=((1.0)*r10);
IkReal x1550=((1.0)*cj2);
IkReal x1551=(cj5*r01);
IkReal x1552=(cj5*sj4);
IkReal x1553=((1.0)*cj4);
IkReal x1554=(r01*sj5);
IkReal x1555=(cj1*x1542);
IkReal x1556=(cj1*x1541);
IkReal x1557=(cj5*x1553);
IkReal x1558=(sj1*x1541);
IkReal x1559=(sj1*x1542);
evalcond[0]=((((-1.0)*x1549*x1552))+((sj4*x1545))+x1541+(((-1.0)*r12*x1553)));
evalcond[1]=((((-1.0)*x1542))+(((-1.0)*r00*x1552))+((sj4*x1554))+(((-1.0)*r02*x1553)));
evalcond[2]=((((-1.0)*x1546))+(((-1.0)*x1551))+(((-1.0)*x1550*x1556))+((sj2*x1558)));
evalcond[3]=((((-1.0)*x1547))+(((-1.0)*x1550*x1555))+((sj2*x1559))+(((-1.0)*sj5*x1549)));
evalcond[4]=(((r02*sj4))+(((-1.0)*x1544*x1556))+(((-1.0)*x1550*x1558))+(((-1.0)*r00*x1557))+((cj4*x1554)));
evalcond[5]=(((cj4*x1545))+(((-1.0)*cj4*cj5*x1549))+(((-1.0)*x1544*x1555))+(((-1.0)*x1550*x1559))+((r12*sj4)));
evalcond[6]=((((-0.11235)*x1542))+(((0.24365)*x1556))+(((-0.08535)*x1546))+(((-0.08535)*x1551))+(((-1.0)*x1548*x1558))+((x1543*x1556))+(((-1.0)*px)));
evalcond[7]=((((0.24365)*x1555))+(((-0.08535)*x1547))+(((-1.0)*x1548*x1559))+(((0.11235)*x1541))+((x1543*x1555))+(((-1.0)*py))+(((-0.08535)*r10*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1561.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1560.value)+(((1.5707963267949)*(x1561.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1562=IKcos(j0);
IkReal x1563=IKsin(j0);
IkReal x1564=(cj1*cj2);
IkReal x1565=((1.0)*cj5);
IkReal x1566=(sj1*sj2);
IkReal x1567=(r00*sj5);
IkReal x1568=(r10*sj5);
IkReal x1569=((0.24365)*cj1);
IkReal x1570=((0.08535)*cj5);
IkReal x1571=((0.21325)*x1563);
IkReal x1572=((0.21325)*x1562);
evalcond[0]=((((-1.0)*r01*x1565))+((x1562*x1566))+(((-1.0)*x1562*x1564))+(((-1.0)*x1567)));
evalcond[1]=(((x1563*x1566))+(((-1.0)*r11*x1565))+(((-1.0)*x1568))+(((-1.0)*x1563*x1564)));
evalcond[2]=((((-0.08535)*x1567))+(((-1.0)*x1566*x1572))+(((-1.0)*px))+(((-1.0)*r01*x1570))+((x1562*x1569))+(((-0.11235)*x1563))+((x1564*x1572)));
evalcond[3]=((((-0.08535)*x1568))+(((-1.0)*x1566*x1571))+(((0.11235)*x1562))+(((-1.0)*py))+(((-1.0)*r11*x1570))+((x1563*x1569))+((x1564*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1573=((1.0)*cj5);
IkReal x1574=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1573)));
j4eval[0]=x1574;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1573)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1575=((1.0)*cj5);
IkReal x1576=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1575)));
j4eval[0]=x1576;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1575))))));
j4eval[2]=IKsign(x1576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1577=((1.0)*sj0);
IkReal x1578=((1.0)*cj0);
IkReal x1579=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1579;
j4eval[1]=((IKabs(((((-1.0)*r02*x1578))+(((-1.0)*r12*x1577)))))+(IKabs(((((-1.0)*r01*sj5*x1578))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1577))))));
j4eval[2]=IKsign(x1579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1580=((1.0)*sj0);
IkReal x1581=((1.0)*cj0);
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1581))+(((-1.0)*r12*x1580)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1581))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1582.value)+(((1.5707963267949)*(x1583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1584=IKsin(j4);
IkReal x1585=IKcos(j4);
IkReal x1586=(cj5*r00);
IkReal x1587=(cj5*r10);
IkReal x1588=(r21*sj5);
IkReal x1589=((1.0)*cj2);
IkReal x1590=((1.0)*sj0);
IkReal x1591=(cj1*sj2);
IkReal x1592=(cj5*r20);
IkReal x1593=((1.0)*x1585);
IkReal x1594=((1.0)*x1584);
IkReal x1595=(sj5*x1584);
IkReal x1596=(sj5*x1585);
evalcond[0]=((((-1.0)*x1592*x1594))+((x1584*x1588))+(((-1.0)*r22*x1593)));
evalcond[1]=(cj0+((r11*x1595))+(((-1.0)*x1587*x1594))+(((-1.0)*r12*x1593)));
evalcond[2]=((((-1.0)*x1590))+((r01*x1595))+(((-1.0)*r02*x1593))+(((-1.0)*x1586*x1594)));
evalcond[3]=((((-1.0)*x1592*x1593))+((sj1*sj2))+((r22*x1584))+(((-1.0)*cj1*x1589))+((x1585*x1588)));
evalcond[4]=(((r01*x1596))+(((-1.0)*cj0*x1591))+((r02*x1584))+(((-1.0)*x1586*x1593))+(((-1.0)*cj0*sj1*x1589)));
evalcond[5]=((((-1.0)*sj0*sj1*x1589))+((r12*x1584))+((r11*x1596))+(((-1.0)*x1590*x1591))+(((-1.0)*x1587*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=((1.0)*cj5);
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1597)))),-1);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1597))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1598.value)))+(x1599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1600=IKsin(j4);
IkReal x1601=IKcos(j4);
IkReal x1602=(cj5*r00);
IkReal x1603=(cj5*r10);
IkReal x1604=(r21*sj5);
IkReal x1605=((1.0)*cj2);
IkReal x1606=((1.0)*sj0);
IkReal x1607=(cj1*sj2);
IkReal x1608=(cj5*r20);
IkReal x1609=((1.0)*x1601);
IkReal x1610=((1.0)*x1600);
IkReal x1611=(sj5*x1600);
IkReal x1612=(sj5*x1601);
evalcond[0]=(((x1600*x1604))+(((-1.0)*r22*x1609))+(((-1.0)*x1608*x1610)));
evalcond[1]=(cj0+((r11*x1611))+(((-1.0)*x1603*x1610))+(((-1.0)*r12*x1609)));
evalcond[2]=(((r01*x1611))+(((-1.0)*x1606))+(((-1.0)*x1602*x1610))+(((-1.0)*r02*x1609)));
evalcond[3]=((((-1.0)*cj1*x1605))+((sj1*sj2))+((x1601*x1604))+((r22*x1600))+(((-1.0)*x1608*x1609)));
evalcond[4]=(((r01*x1612))+(((-1.0)*cj0*sj1*x1605))+(((-1.0)*x1602*x1609))+((r02*x1600))+(((-1.0)*cj0*x1607)));
evalcond[5]=(((r11*x1612))+(((-1.0)*sj0*sj1*x1605))+((r12*x1600))+(((-1.0)*x1603*x1609))+(((-1.0)*x1606*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=((1.0)*cj5);
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1613))+(((-1.0)*r00*sj5)))),-1);
if(!x1615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1614.value)+(((1.5707963267949)*(x1615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1616=IKsin(j4);
IkReal x1617=IKcos(j4);
IkReal x1618=(cj5*r00);
IkReal x1619=(cj5*r10);
IkReal x1620=(r21*sj5);
IkReal x1621=((1.0)*cj2);
IkReal x1622=((1.0)*sj0);
IkReal x1623=(cj1*sj2);
IkReal x1624=(cj5*r20);
IkReal x1625=((1.0)*x1617);
IkReal x1626=((1.0)*x1616);
IkReal x1627=(sj5*x1616);
IkReal x1628=(sj5*x1617);
evalcond[0]=((((-1.0)*r22*x1625))+(((-1.0)*x1624*x1626))+((x1616*x1620)));
evalcond[1]=((((-1.0)*r12*x1625))+(((-1.0)*x1619*x1626))+cj0+((r11*x1627)));
evalcond[2]=(((r01*x1627))+(((-1.0)*x1622))+(((-1.0)*r02*x1625))+(((-1.0)*x1618*x1626)));
evalcond[3]=(((x1617*x1620))+((sj1*sj2))+(((-1.0)*x1624*x1625))+((r22*x1616))+(((-1.0)*cj1*x1621)));
evalcond[4]=(((r01*x1628))+(((-1.0)*cj0*sj1*x1621))+(((-1.0)*cj0*x1623))+((r02*x1616))+(((-1.0)*x1618*x1625)));
evalcond[5]=((((-1.0)*x1619*x1625))+((r12*x1616))+((r11*x1628))+(((-1.0)*x1622*x1623))+(((-1.0)*sj0*sj1*x1621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1629=((1.0)*cj5);
IkReal x1630=((1.0)*sj5);
IkReal x1631=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1631;
j0eval[1]=((IKabs(((((-1.0)*r11*x1629))+(((-1.0)*r10*x1630)))))+(IKabs(((((-1.0)*r00*x1630))+(((-1.0)*r01*x1629))))));
j0eval[2]=IKsign(x1631);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1632=r21*r21;
IkReal x1633=cj5*cj5;
IkReal x1634=(cj2*sj1);
IkReal x1635=(cj1*sj2);
IkReal x1636=(r21*sj5);
IkReal x1637=((1.0)*cj5*r20);
IkReal x1638=((((2.0)*cj5*r20*x1636))+(((-1.0)*x1632))+(((-1.0)*(r22*r22)))+((x1632*x1633))+(((-1.0)*x1633*(r20*r20))));
j4eval[0]=x1638;
j4eval[1]=((IKabs((((r22*x1634))+((r22*x1635)))))+(IKabs(((((-1.0)*x1635*x1637))+(((-1.0)*x1634*x1637))+((x1635*x1636))+((x1634*x1636))))));
j4eval[2]=IKsign(x1638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1639=cj1*cj1;
IkReal x1640=(cj2*sj2);
IkReal x1641=(cj2*sj1);
IkReal x1642=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x1641))+x1640+x1642+(((-2.0)*x1639*x1640))+(((-1.14255568581477)*cj1*x1641))+(((-1.14255568581477)*sj2*x1639)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x1641)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1643=cj1*cj1;
IkReal x1644=(cj2*sj1);
IkReal x1645=(cj1*sj1);
IkReal x1646=(cj5*r01);
IkReal x1647=(cj1*sj2);
IkReal x1648=((20000.0)*py);
IkReal x1649=(r00*sj5);
IkReal x1650=((1707.0)*cj5*r11);
IkReal x1651=(sj2*x1643);
IkReal x1652=((1707.0)*r10*sj5);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(((((-8530.0)*cj1*cj2*x1644))+(((4265.0)*cj2*sj2))+(((-4873.0)*cj1*x1644))+(((-4873.0)*x1651))+(((4265.0)*x1645))+(((-8530.0)*cj2*x1651))),-1);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(((((-1.0)*x1644))+(((-1.0)*x1647))),-1);
if(!x1654.valid){
continue;
}
if( IKabs(((x1653.value)*(((((-1.0)*x1644*x1652))+(((-1.0)*x1644*x1650))+(((-1.0)*x1647*x1648))+(((2247.0)*x1646))+(((2247.0)*x1649))+(((-1.0)*x1644*x1648))+(((-1.0)*x1647*x1652))+(((-1.0)*x1647*x1650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1654.value)*(((((-1.0)*x1649))+(((-1.0)*x1646)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1653.value)*(((((-1.0)*x1644*x1652))+(((-1.0)*x1644*x1650))+(((-1.0)*x1647*x1648))+(((2247.0)*x1646))+(((2247.0)*x1649))+(((-1.0)*x1644*x1648))+(((-1.0)*x1647*x1652))+(((-1.0)*x1647*x1650))))))+IKsqr(((x1654.value)*(((((-1.0)*x1649))+(((-1.0)*x1646))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1653.value)*(((((-1.0)*x1644*x1652))+(((-1.0)*x1644*x1650))+(((-1.0)*x1647*x1648))+(((2247.0)*x1646))+(((2247.0)*x1649))+(((-1.0)*x1644*x1648))+(((-1.0)*x1647*x1652))+(((-1.0)*x1647*x1650))))), ((x1654.value)*(((((-1.0)*x1649))+(((-1.0)*x1646))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1655=IKcos(j0);
IkReal x1656=IKsin(j0);
IkReal x1657=((0.21325)*cj2);
IkReal x1658=(cj5*r01);
IkReal x1659=((1.0)*sj2);
IkReal x1660=(r00*sj5);
IkReal x1661=(cj5*r11);
IkReal x1662=(r10*sj5);
IkReal x1663=(cj1*x1656);
IkReal x1664=(cj1*x1655);
IkReal x1665=((0.21325)*sj1*sj2);
IkReal x1666=((1.0)*cj2*sj1);
evalcond[0]=(x1660+x1658+(((-1.0)*x1655*x1666))+(((-1.0)*x1659*x1664)));
evalcond[1]=((((-1.0)*x1656*x1666))+x1662+x1661+(((-1.0)*x1659*x1663)));
evalcond[2]=((((-0.08535)*x1660))+(((-0.08535)*x1658))+(((-0.11235)*x1656))+(((-1.0)*x1655*x1665))+(((0.24365)*x1664))+(((-1.0)*px))+((x1657*x1664)));
evalcond[3]=((((-0.08535)*x1662))+(((-0.08535)*x1661))+(((-1.0)*x1656*x1665))+(((0.24365)*x1663))+(((-1.0)*py))+(((0.11235)*x1655))+((x1657*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1667=((1.0)*cj5);
IkReal x1668=((((-1.0)*r01*x1667))+(((-1.0)*r00*sj5)));
j4eval[0]=x1668;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1667)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1669=((1.0)*cj5);
IkReal x1670=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1669)));
j4eval[0]=x1670;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1669))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1671=((1.0)*sj0);
IkReal x1672=((1.0)*cj0);
IkReal x1673=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1673;
j4eval[1]=((IKabs(((((-1.0)*r02*x1672))+(((-1.0)*r12*x1671)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1671))+(((-1.0)*r01*sj5*x1672))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=((1.0)*sj0);
IkReal x1675=((1.0)*cj0);
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1675))+(((-1.0)*r12*x1674)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1674))+(((-1.0)*r01*sj5*x1675))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1676.value)+(((1.5707963267949)*(x1677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1678=IKsin(j4);
IkReal x1679=IKcos(j4);
IkReal x1680=(cj5*r00);
IkReal x1681=(cj5*r10);
IkReal x1682=(r21*sj5);
IkReal x1683=(sj1*sj2);
IkReal x1684=(cj5*r20);
IkReal x1685=((1.0)*x1679);
IkReal x1686=((1.0)*cj1*cj2);
IkReal x1687=((1.0)*x1678);
IkReal x1688=(sj5*x1678);
IkReal x1689=(sj5*x1679);
evalcond[0]=((((-1.0)*r22*x1685))+((x1678*x1682))+(((-1.0)*x1684*x1687)));
evalcond[1]=((((-1.0)*r12*x1685))+((r11*x1688))+(((-1.0)*x1681*x1687))+cj0);
evalcond[2]=((((-1.0)*sj0))+((r01*x1688))+(((-1.0)*x1680*x1687))+(((-1.0)*r02*x1685)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1679*x1682))+((r22*x1678))+(((-1.0)*x1684*x1685)));
evalcond[4]=(((r02*x1678))+((r01*x1689))+(((-1.0)*x1680*x1685))+(((-1.0)*cj0*x1686))+((cj0*x1683)));
evalcond[5]=(((r11*x1689))+(((-1.0)*x1681*x1685))+(((-1.0)*sj0*x1686))+((sj0*x1683))+((r12*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1690=((1.0)*cj5);
CheckValue<IkReal> x1691 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1690))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1691.valid){
continue;
}
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1690)))),-1);
if(!x1692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1691.value)+(((1.5707963267949)*(x1692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1693=IKsin(j4);
IkReal x1694=IKcos(j4);
IkReal x1695=(cj5*r00);
IkReal x1696=(cj5*r10);
IkReal x1697=(r21*sj5);
IkReal x1698=(sj1*sj2);
IkReal x1699=(cj5*r20);
IkReal x1700=((1.0)*x1694);
IkReal x1701=((1.0)*cj1*cj2);
IkReal x1702=((1.0)*x1693);
IkReal x1703=(sj5*x1693);
IkReal x1704=(sj5*x1694);
evalcond[0]=((((-1.0)*x1699*x1702))+((x1693*x1697))+(((-1.0)*r22*x1700)));
evalcond[1]=(cj0+((r11*x1703))+(((-1.0)*x1696*x1702))+(((-1.0)*r12*x1700)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1703))+(((-1.0)*r02*x1700))+(((-1.0)*x1695*x1702)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1699*x1700))+((cj1*sj2))+((r22*x1693))+((x1694*x1697)));
evalcond[4]=(((r01*x1704))+((r02*x1693))+((cj0*x1698))+(((-1.0)*cj0*x1701))+(((-1.0)*x1695*x1700)));
evalcond[5]=(((r12*x1693))+((sj0*x1698))+((r11*x1704))+(((-1.0)*sj0*x1701))+(((-1.0)*x1696*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1705=((1.0)*cj5);
CheckValue<IkReal> x1706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1706.valid){
continue;
}
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1705)))),-1);
if(!x1707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1706.value)+(((1.5707963267949)*(x1707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1708=IKsin(j4);
IkReal x1709=IKcos(j4);
IkReal x1710=(cj5*r00);
IkReal x1711=(cj5*r10);
IkReal x1712=(r21*sj5);
IkReal x1713=(sj1*sj2);
IkReal x1714=(cj5*r20);
IkReal x1715=((1.0)*x1709);
IkReal x1716=((1.0)*cj1*cj2);
IkReal x1717=((1.0)*x1708);
IkReal x1718=(sj5*x1708);
IkReal x1719=(sj5*x1709);
evalcond[0]=((((-1.0)*x1714*x1717))+(((-1.0)*r22*x1715))+((x1708*x1712)));
evalcond[1]=(cj0+((r11*x1718))+(((-1.0)*x1711*x1717))+(((-1.0)*r12*x1715)));
evalcond[2]=((((-1.0)*x1710*x1717))+(((-1.0)*sj0))+((r01*x1718))+(((-1.0)*r02*x1715)));
evalcond[3]=((((-1.0)*x1714*x1715))+((cj2*sj1))+((r22*x1708))+((x1709*x1712))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x1710*x1715))+((r02*x1708))+((cj0*x1713))+((r01*x1719))+(((-1.0)*cj0*x1716)));
evalcond[5]=(((r12*x1708))+((r11*x1719))+(((-1.0)*x1711*x1715))+(((-1.0)*sj0*x1716))+((sj0*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1720=r21*r21;
IkReal x1721=cj5*cj5;
IkReal x1722=(cj2*sj1);
IkReal x1723=(cj1*sj2);
IkReal x1724=(r21*sj5);
IkReal x1725=((1.0)*cj5*r20);
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal((((r22*x1722))+((r22*x1723)))),IkReal((((x1723*x1724))+((x1722*x1724))+(((-1.0)*x1722*x1725))+(((-1.0)*x1723*x1725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
CheckValue<IkReal> x1727=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1721*(r20*r20)))+((x1720*x1721))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x1724))+(((-1.0)*x1720)))),-1);
if(!x1727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1726.value)+(((1.5707963267949)*(x1727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1728=IKsin(j4);
IkReal x1729=IKcos(j4);
IkReal x1730=(r21*sj5);
IkReal x1731=(cj5*r20);
IkReal x1732=((1.0)*x1729);
evalcond[0]=(((x1728*x1730))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1732)));
evalcond[1]=((((-1.0)*x1731*x1732))+((cj2*sj1))+((cj1*sj2))+((x1729*x1730))+((r22*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1733=(cj5*sj4);
IkReal x1734=(sj4*sj5);
if( IKabs((((r01*x1734))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1734))+((r10*x1733))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1734))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1733))))+IKsqr(((((-1.0)*r11*x1734))+((r10*x1733))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1734))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1733))), ((((-1.0)*r11*x1734))+((r10*x1733))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1735=IKcos(j0);
IkReal x1736=IKsin(j0);
IkReal x1737=((0.21325)*cj2);
IkReal x1738=(cj5*r01);
IkReal x1739=((1.0)*sj2);
IkReal x1740=(r11*sj5);
IkReal x1741=((0.21325)*sj2);
IkReal x1742=(r00*sj5);
IkReal x1743=(cj5*r11);
IkReal x1744=((1.0)*cj2);
IkReal x1745=((1.0)*cj4);
IkReal x1746=(r01*sj5);
IkReal x1747=(r10*sj5);
IkReal x1748=(cj1*x1736);
IkReal x1749=(cj1*x1735);
IkReal x1750=(cj5*x1745);
IkReal x1751=(sj1*x1735);
IkReal x1752=((1.0)*cj5*sj4);
IkReal x1753=(sj1*x1736);
evalcond[0]=((((-1.0)*r12*x1745))+x1735+((sj4*x1740))+(((-1.0)*r10*x1752)));
evalcond[1]=(((sj4*x1746))+(((-1.0)*r00*x1752))+(((-1.0)*x1736))+(((-1.0)*r02*x1745)));
evalcond[2]=(x1738+x1742+(((-1.0)*x1739*x1749))+(((-1.0)*x1744*x1751)));
evalcond[3]=(x1747+x1743+(((-1.0)*x1739*x1748))+(((-1.0)*x1744*x1753)));
evalcond[4]=(((cj4*x1746))+((r02*sj4))+(((-1.0)*r00*x1750))+(((-1.0)*x1744*x1749))+((sj2*x1751)));
evalcond[5]=(((cj4*x1740))+(((-1.0)*r10*x1750))+((r12*sj4))+(((-1.0)*x1744*x1748))+((sj2*x1753)));
evalcond[6]=((((-0.08535)*x1742))+(((-0.11235)*x1736))+(((0.24365)*x1749))+(((-1.0)*px))+(((-0.08535)*x1738))+((x1737*x1749))+(((-1.0)*x1741*x1751)));
evalcond[7]=((((0.11235)*x1735))+(((-0.08535)*x1747))+(((-0.08535)*x1743))+(((0.24365)*x1748))+(((-1.0)*py))+((x1737*x1748))+(((-1.0)*x1741*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1754=((1.0)*cj5);
IkReal x1755=((1.0)*sj5);
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1754))+(((-1.0)*r10*x1755)))),IkReal(((((-1.0)*r01*x1754))+(((-1.0)*r00*x1755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1757.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1756.value)+(((1.5707963267949)*(x1757.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1758=IKcos(j0);
IkReal x1759=IKsin(j0);
IkReal x1760=((0.21325)*cj2);
IkReal x1761=(cj5*r01);
IkReal x1762=((1.0)*sj2);
IkReal x1763=(r00*sj5);
IkReal x1764=(cj5*r11);
IkReal x1765=(r10*sj5);
IkReal x1766=(cj1*x1759);
IkReal x1767=(cj1*x1758);
IkReal x1768=((0.21325)*sj1*sj2);
IkReal x1769=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x1762*x1767))+x1763+x1761+(((-1.0)*x1758*x1769)));
evalcond[1]=((((-1.0)*x1762*x1766))+x1764+x1765+(((-1.0)*x1759*x1769)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*x1758*x1768))+(((-0.11235)*x1759))+(((0.24365)*x1767))+(((-0.08535)*x1763))+(((-0.08535)*x1761))+((x1760*x1767)));
evalcond[3]=((((-1.0)*x1759*x1768))+(((-1.0)*py))+(((0.11235)*x1758))+(((0.24365)*x1766))+(((-0.08535)*x1764))+(((-0.08535)*x1765))+((x1760*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1770=((1.0)*cj5);
IkReal x1771=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1770)));
j4eval[0]=x1771;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1770))))));
j4eval[2]=IKsign(x1771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1772=((1.0)*cj5);
IkReal x1773=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1772)));
j4eval[0]=x1773;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1772))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1774=((1.0)*sj0);
IkReal x1775=((1.0)*cj0);
IkReal x1776=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1776;
j4eval[1]=((IKabs(((((-1.0)*r02*x1775))+(((-1.0)*r12*x1774)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1775))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1774))))));
j4eval[2]=IKsign(x1776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1777=((1.0)*sj0);
IkReal x1778=((1.0)*cj0);
CheckValue<IkReal> x1779 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1778))+(((-1.0)*r12*x1777)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1778))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1779.valid){
continue;
}
CheckValue<IkReal> x1780=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1779.value)+(((1.5707963267949)*(x1780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1781=IKsin(j4);
IkReal x1782=IKcos(j4);
IkReal x1783=(cj5*r00);
IkReal x1784=(cj5*r10);
IkReal x1785=(r21*sj5);
IkReal x1786=(sj1*sj2);
IkReal x1787=(cj5*r20);
IkReal x1788=((1.0)*x1782);
IkReal x1789=((1.0)*cj1*cj2);
IkReal x1790=((1.0)*x1781);
IkReal x1791=(sj5*x1781);
IkReal x1792=(sj5*x1782);
evalcond[0]=((((-1.0)*x1787*x1790))+(((-1.0)*r22*x1788))+((x1781*x1785)));
evalcond[1]=(cj0+(((-1.0)*r12*x1788))+(((-1.0)*x1784*x1790))+((r11*x1791)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1791))+(((-1.0)*r02*x1788))+(((-1.0)*x1783*x1790)));
evalcond[3]=(((x1782*x1785))+((cj2*sj1))+(((-1.0)*x1787*x1788))+((cj1*sj2))+((r22*x1781)));
evalcond[4]=((((-1.0)*x1783*x1788))+(((-1.0)*cj0*x1789))+((r02*x1781))+((r01*x1792))+((cj0*x1786)));
evalcond[5]=((((-1.0)*sj0*x1789))+((sj0*x1786))+((r12*x1781))+(((-1.0)*x1784*x1788))+((r11*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1793=((1.0)*cj5);
CheckValue<IkReal> x1794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1793)))),-1);
if(!x1794.valid){
continue;
}
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1794.value)))+(x1795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1796=IKsin(j4);
IkReal x1797=IKcos(j4);
IkReal x1798=(cj5*r00);
IkReal x1799=(cj5*r10);
IkReal x1800=(r21*sj5);
IkReal x1801=(sj1*sj2);
IkReal x1802=(cj5*r20);
IkReal x1803=((1.0)*x1797);
IkReal x1804=((1.0)*cj1*cj2);
IkReal x1805=((1.0)*x1796);
IkReal x1806=(sj5*x1796);
IkReal x1807=(sj5*x1797);
evalcond[0]=((((-1.0)*x1802*x1805))+((x1796*x1800))+(((-1.0)*r22*x1803)));
evalcond[1]=(cj0+(((-1.0)*x1799*x1805))+((r11*x1806))+(((-1.0)*r12*x1803)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1798*x1805))+(((-1.0)*r02*x1803))+((r01*x1806)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1802*x1803))+((x1797*x1800))+((r22*x1796)));
evalcond[4]=((((-1.0)*cj0*x1804))+(((-1.0)*x1798*x1803))+((cj0*x1801))+((r02*x1796))+((r01*x1807)));
evalcond[5]=(((sj0*x1801))+(((-1.0)*x1799*x1803))+(((-1.0)*sj0*x1804))+((r12*x1796))+((r11*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1808=((1.0)*cj5);
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1808))+(((-1.0)*r00*sj5)))),-1);
if(!x1809.valid){
continue;
}
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1809.value)))+(x1810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1811=IKsin(j4);
IkReal x1812=IKcos(j4);
IkReal x1813=(cj5*r00);
IkReal x1814=(cj5*r10);
IkReal x1815=(r21*sj5);
IkReal x1816=(sj1*sj2);
IkReal x1817=(cj5*r20);
IkReal x1818=((1.0)*x1812);
IkReal x1819=((1.0)*cj1*cj2);
IkReal x1820=((1.0)*x1811);
IkReal x1821=(sj5*x1811);
IkReal x1822=(sj5*x1812);
evalcond[0]=((((-1.0)*x1817*x1820))+((x1811*x1815))+(((-1.0)*r22*x1818)));
evalcond[1]=(cj0+(((-1.0)*r12*x1818))+((r11*x1821))+(((-1.0)*x1814*x1820)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1813*x1820))+(((-1.0)*r02*x1818))+((r01*x1821)));
evalcond[3]=(((r22*x1811))+((cj2*sj1))+((cj1*sj2))+((x1812*x1815))+(((-1.0)*x1817*x1818)));
evalcond[4]=((((-1.0)*cj0*x1819))+((r02*x1811))+((cj0*x1816))+(((-1.0)*x1813*x1818))+((r01*x1822)));
evalcond[5]=(((sj0*x1816))+(((-1.0)*x1814*x1818))+(((-1.0)*sj0*x1819))+((r11*x1822))+((r12*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1823=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1823;
j0eval[1]=IKsign(x1823);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1824=cj5*cj5;
IkReal x1825=r21*r21;
IkReal x1826=(cj2*sj1);
IkReal x1827=(cj1*sj2);
IkReal x1828=(r21*sj5);
IkReal x1829=((1.0)*cj5*r20);
IkReal x1830=(((x1824*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x1828))+x1825+(((-1.0)*x1824*x1825)));
j4eval[0]=x1830;
j4eval[1]=IKsign(x1830);
j4eval[2]=((IKabs((((x1826*x1828))+((x1827*x1828))+(((-1.0)*x1826*x1829))+(((-1.0)*x1827*x1829)))))+(IKabs((((r22*x1827))+((r22*x1826))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1831=cj1*cj1;
IkReal x1832=(cj2*sj2);
IkReal x1833=(cj2*sj1);
IkReal x1834=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x1833))+x1832+x1834+(((-1.14255568581477)*sj2*x1831))+(((-1.14255568581477)*cj1*x1833))+(((-2.0)*x1831*x1832)));
j0eval[1]=((((-1.0)*x1833))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1835=cj1*cj1;
IkReal x1836=(cj2*sj1);
IkReal x1837=(cj1*sj1);
IkReal x1838=(cj1*sj2);
IkReal x1839=((20000.0)*py);
IkReal x1840=(r00*sj5);
IkReal x1841=(cj5*r01);
IkReal x1842=((1707.0)*cj5*r11);
IkReal x1843=(sj2*x1835);
IkReal x1844=((1707.0)*r10*sj5);
CheckValue<IkReal> x1845=IKPowWithIntegerCheck(((((4265.0)*cj2*sj2))+(((-4873.0)*cj1*x1836))+(((-4873.0)*x1843))+(((4265.0)*x1837))+(((-8530.0)*cj1*cj2*x1836))+(((-8530.0)*cj2*x1843))),-1);
if(!x1845.valid){
continue;
}
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(((((-1.0)*x1838))+(((-1.0)*x1836))),-1);
if(!x1846.valid){
continue;
}
if( IKabs(((x1845.value)*(((((-2247.0)*x1841))+(((-2247.0)*x1840))+(((-1.0)*x1836*x1839))+(((-1.0)*x1838*x1839))+(((-1.0)*x1836*x1842))+(((-1.0)*x1836*x1844))+(((-1.0)*x1838*x1844))+(((-1.0)*x1838*x1842)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1846.value)*((x1841+x1840)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1845.value)*(((((-2247.0)*x1841))+(((-2247.0)*x1840))+(((-1.0)*x1836*x1839))+(((-1.0)*x1838*x1839))+(((-1.0)*x1836*x1842))+(((-1.0)*x1836*x1844))+(((-1.0)*x1838*x1844))+(((-1.0)*x1838*x1842))))))+IKsqr(((x1846.value)*((x1841+x1840))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1845.value)*(((((-2247.0)*x1841))+(((-2247.0)*x1840))+(((-1.0)*x1836*x1839))+(((-1.0)*x1838*x1839))+(((-1.0)*x1836*x1842))+(((-1.0)*x1836*x1844))+(((-1.0)*x1838*x1844))+(((-1.0)*x1838*x1842))))), ((x1846.value)*((x1841+x1840))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1847=IKcos(j0);
IkReal x1848=IKsin(j0);
IkReal x1849=((0.21325)*cj2);
IkReal x1850=((1.0)*sj2);
IkReal x1851=(r00*sj5);
IkReal x1852=((1.0)*cj5);
IkReal x1853=(r10*sj5);
IkReal x1854=((0.08535)*cj5);
IkReal x1855=(cj1*x1848);
IkReal x1856=(cj1*x1847);
IkReal x1857=((0.21325)*sj1*sj2);
IkReal x1858=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x1851))+(((-1.0)*x1850*x1856))+(((-1.0)*r01*x1852))+(((-1.0)*x1847*x1858)));
evalcond[1]=((((-1.0)*x1848*x1858))+(((-1.0)*x1853))+(((-1.0)*x1850*x1855))+(((-1.0)*r11*x1852)));
evalcond[2]=((((-0.11235)*x1848))+(((0.24365)*x1856))+((x1849*x1856))+(((-1.0)*r01*x1854))+(((-1.0)*px))+(((-1.0)*x1847*x1857))+(((-0.08535)*x1851)));
evalcond[3]=((((-1.0)*x1848*x1857))+(((0.24365)*x1855))+((x1849*x1855))+(((0.11235)*x1847))+(((-1.0)*py))+(((-1.0)*r11*x1854))+(((-0.08535)*x1853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1859=((1.0)*cj5);
IkReal x1860=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1859)));
j4eval[0]=x1860;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1859))))));
j4eval[2]=IKsign(x1860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1861=((1.0)*cj5);
IkReal x1862=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1861)));
j4eval[0]=x1862;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1861))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1863=((1.0)*sj0);
IkReal x1864=((1.0)*cj0);
IkReal x1865=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1865;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x1864))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1863)))))+(IKabs(((((-1.0)*r02*x1864))+(((-1.0)*r12*x1863))))));
j4eval[2]=IKsign(x1865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1866=((1.0)*sj0);
IkReal x1867=((1.0)*cj0);
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1867))+(((-1.0)*r12*x1866)))),IkReal(((((-1.0)*r01*sj5*x1867))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1868.value)+(((1.5707963267949)*(x1869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1870=IKsin(j4);
IkReal x1871=IKcos(j4);
IkReal x1872=(cj5*r10);
IkReal x1873=(sj1*sj2);
IkReal x1874=(r01*sj5);
IkReal x1875=(cj5*r00);
IkReal x1876=(cj5*r20);
IkReal x1877=((1.0)*x1871);
IkReal x1878=((1.0)*cj1*cj2);
IkReal x1879=((1.0)*x1870);
IkReal x1880=(sj5*x1870);
evalcond[0]=(((r21*x1880))+(((-1.0)*x1876*x1879))+(((-1.0)*r22*x1877)));
evalcond[1]=((((-1.0)*x1872*x1879))+cj0+(((-1.0)*r12*x1877))+((r11*x1880)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1877))+((x1870*x1874))+(((-1.0)*x1875*x1879)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1879))+((x1871*x1876))+((cj1*sj2))+(((-1.0)*r21*sj5*x1877)));
evalcond[4]=((((-1.0)*x1874*x1877))+(((-1.0)*r02*x1879))+((x1871*x1875))+(((-1.0)*cj0*x1878))+((cj0*x1873)));
evalcond[5]=(((x1871*x1872))+((sj0*x1873))+(((-1.0)*sj0*x1878))+(((-1.0)*r12*x1879))+(((-1.0)*r11*sj5*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1881=((1.0)*cj5);
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1881))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1881)))),-1);
if(!x1883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1882.value)+(((1.5707963267949)*(x1883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1884=IKsin(j4);
IkReal x1885=IKcos(j4);
IkReal x1886=(cj5*r10);
IkReal x1887=(sj1*sj2);
IkReal x1888=(r01*sj5);
IkReal x1889=(cj5*r00);
IkReal x1890=(cj5*r20);
IkReal x1891=((1.0)*x1885);
IkReal x1892=((1.0)*cj1*cj2);
IkReal x1893=((1.0)*x1884);
IkReal x1894=(sj5*x1884);
evalcond[0]=((((-1.0)*x1890*x1893))+(((-1.0)*r22*x1891))+((r21*x1894)));
evalcond[1]=(cj0+((r11*x1894))+(((-1.0)*r12*x1891))+(((-1.0)*x1886*x1893)));
evalcond[2]=((((-1.0)*r02*x1891))+(((-1.0)*sj0))+(((-1.0)*x1889*x1893))+((x1884*x1888)));
evalcond[3]=(((cj2*sj1))+((x1885*x1890))+((cj1*sj2))+(((-1.0)*r21*sj5*x1891))+(((-1.0)*r22*x1893)));
evalcond[4]=((((-1.0)*r02*x1893))+(((-1.0)*x1888*x1891))+(((-1.0)*cj0*x1892))+((x1885*x1889))+((cj0*x1887)));
evalcond[5]=((((-1.0)*r12*x1893))+(((-1.0)*sj0*x1892))+(((-1.0)*r11*sj5*x1891))+((x1885*x1886))+((sj0*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1895=((1.0)*cj5);
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1895)))),-1);
if(!x1897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1896.value)+(((1.5707963267949)*(x1897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1898=IKsin(j4);
IkReal x1899=IKcos(j4);
IkReal x1900=(cj5*r10);
IkReal x1901=(sj1*sj2);
IkReal x1902=(r01*sj5);
IkReal x1903=(cj5*r00);
IkReal x1904=(cj5*r20);
IkReal x1905=((1.0)*x1899);
IkReal x1906=((1.0)*cj1*cj2);
IkReal x1907=((1.0)*x1898);
IkReal x1908=(sj5*x1898);
evalcond[0]=((((-1.0)*r22*x1905))+((r21*x1908))+(((-1.0)*x1904*x1907)));
evalcond[1]=(cj0+(((-1.0)*x1900*x1907))+(((-1.0)*r12*x1905))+((r11*x1908)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1903*x1907))+((x1898*x1902))+(((-1.0)*r02*x1905)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1907))+((x1899*x1904))+(((-1.0)*r21*sj5*x1905)));
evalcond[4]=((((-1.0)*x1902*x1905))+((cj0*x1901))+((x1899*x1903))+(((-1.0)*cj0*x1906))+(((-1.0)*r02*x1907)));
evalcond[5]=((((-1.0)*r11*sj5*x1905))+((sj0*x1901))+(((-1.0)*r12*x1907))+((x1899*x1900))+(((-1.0)*sj0*x1906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1909=cj5*cj5;
IkReal x1910=r21*r21;
IkReal x1911=(cj2*sj1);
IkReal x1912=(cj1*sj2);
IkReal x1913=(r21*sj5);
IkReal x1914=((1.0)*cj5*r20);
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((((r22*x1911))+((r22*x1912)))),IkReal(((((-1.0)*x1911*x1914))+((x1912*x1913))+((x1911*x1913))+(((-1.0)*x1912*x1914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(IKsign((((x1909*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x1913))+x1910+(((-1.0)*x1909*x1910)))),-1);
if(!x1916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1915.value)+(((1.5707963267949)*(x1916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1917=IKsin(j4);
IkReal x1918=IKcos(j4);
IkReal x1919=(r21*sj5);
IkReal x1920=(cj5*r20);
IkReal x1921=((1.0)*x1918);
IkReal x1922=((1.0)*x1917);
evalcond[0]=(((x1917*x1919))+(((-1.0)*r22*x1921))+(((-1.0)*x1920*x1922)));
evalcond[1]=(((cj2*sj1))+((x1918*x1920))+((cj1*sj2))+(((-1.0)*r22*x1922))+(((-1.0)*x1919*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1923=(cj5*sj4);
IkReal x1924=(sj4*sj5);
if( IKabs((((r01*x1924))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1923))+(((-1.0)*r11*x1924))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1924))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1923))))+IKsqr((((r10*x1923))+(((-1.0)*r11*x1924))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1924))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1923))), (((r10*x1923))+(((-1.0)*r11*x1924))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1925=IKcos(j0);
IkReal x1926=IKsin(j0);
IkReal x1927=(cj4*cj5);
IkReal x1928=((0.21325)*cj2);
IkReal x1929=((1.0)*sj2);
IkReal x1930=(r11*sj5);
IkReal x1931=(r00*sj5);
IkReal x1932=(cj5*r11);
IkReal x1933=((1.0)*sj4);
IkReal x1934=((1.0)*sj5);
IkReal x1935=((1.0)*cj2);
IkReal x1936=(cj5*r01);
IkReal x1937=((1.0)*cj4);
IkReal x1938=((0.21325)*sj2);
IkReal x1939=(cj1*x1926);
IkReal x1940=(cj1*x1925);
IkReal x1941=(sj1*x1925);
IkReal x1942=(sj1*x1926);
evalcond[0]=((((-1.0)*cj5*r10*x1933))+((sj4*x1930))+(((-1.0)*r12*x1937))+x1925);
evalcond[1]=((((-1.0)*x1926))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x1933))+(((-1.0)*r02*x1937)));
evalcond[2]=((((-1.0)*x1929*x1940))+(((-1.0)*x1936))+(((-1.0)*x1931))+(((-1.0)*x1935*x1941)));
evalcond[3]=((((-1.0)*x1932))+(((-1.0)*r10*x1934))+(((-1.0)*x1935*x1942))+(((-1.0)*x1929*x1939)));
evalcond[4]=(((r00*x1927))+((sj2*x1941))+(((-1.0)*cj4*r01*x1934))+(((-1.0)*x1935*x1940))+(((-1.0)*r02*x1933)));
evalcond[5]=((((-1.0)*x1930*x1937))+((sj2*x1942))+(((-1.0)*r12*x1933))+((r10*x1927))+(((-1.0)*x1935*x1939)));
evalcond[6]=((((-0.08535)*x1936))+(((-0.08535)*x1931))+(((-1.0)*px))+(((-1.0)*x1938*x1941))+(((-0.11235)*x1926))+(((0.24365)*x1940))+((x1928*x1940)));
evalcond[7]=((((-0.08535)*x1932))+(((-1.0)*py))+(((-1.0)*x1938*x1942))+(((0.24365)*x1939))+(((-0.08535)*r10*sj5))+((x1928*x1939))+(((0.11235)*x1925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1944.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1943.value)+(((1.5707963267949)*(x1944.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1945=IKcos(j0);
IkReal x1946=IKsin(j0);
IkReal x1947=((0.21325)*cj2);
IkReal x1948=((1.0)*sj2);
IkReal x1949=(r00*sj5);
IkReal x1950=((1.0)*cj5);
IkReal x1951=(r10*sj5);
IkReal x1952=((0.08535)*cj5);
IkReal x1953=(cj1*x1946);
IkReal x1954=(cj1*x1945);
IkReal x1955=((0.21325)*sj1*sj2);
IkReal x1956=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x1948*x1954))+(((-1.0)*x1945*x1956))+(((-1.0)*x1949))+(((-1.0)*r01*x1950)));
evalcond[1]=((((-1.0)*x1948*x1953))+(((-1.0)*x1946*x1956))+(((-1.0)*x1951))+(((-1.0)*r11*x1950)));
evalcond[2]=((((-1.0)*x1945*x1955))+(((-1.0)*px))+(((0.24365)*x1954))+(((-1.0)*r01*x1952))+((x1947*x1954))+(((-0.08535)*x1949))+(((-0.11235)*x1946)));
evalcond[3]=((((0.11235)*x1945))+(((-1.0)*py))+(((0.24365)*x1953))+(((-1.0)*x1946*x1955))+(((-1.0)*r11*x1952))+((x1947*x1953))+(((-0.08535)*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1957=((1.0)*cj5);
IkReal x1958=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1957)));
j4eval[0]=x1958;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1957))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1959=((1.0)*cj5);
IkReal x1960=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1959)));
j4eval[0]=x1960;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1959)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1961=((1.0)*sj0);
IkReal x1962=((1.0)*cj0);
IkReal x1963=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1963;
j4eval[1]=((IKabs(((((-1.0)*r02*x1962))+(((-1.0)*r12*x1961)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1961))+(((-1.0)*r01*sj5*x1962))))));
j4eval[2]=IKsign(x1963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1964=((1.0)*sj0);
IkReal x1965=((1.0)*cj0);
CheckValue<IkReal> x1966 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1965))+(((-1.0)*r12*x1964)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1964))+(((-1.0)*r01*sj5*x1965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1966.valid){
continue;
}
CheckValue<IkReal> x1967=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1966.value)+(((1.5707963267949)*(x1967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1968=IKsin(j4);
IkReal x1969=IKcos(j4);
IkReal x1970=(cj5*r10);
IkReal x1971=(sj1*sj2);
IkReal x1972=(r01*sj5);
IkReal x1973=(cj5*r00);
IkReal x1974=(cj5*r20);
IkReal x1975=((1.0)*x1969);
IkReal x1976=((1.0)*cj1*cj2);
IkReal x1977=((1.0)*x1968);
IkReal x1978=(sj5*x1968);
evalcond[0]=((((-1.0)*x1974*x1977))+(((-1.0)*r22*x1975))+((r21*x1978)));
evalcond[1]=(cj0+((r11*x1978))+(((-1.0)*x1970*x1977))+(((-1.0)*r12*x1975)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1975))+(((-1.0)*x1973*x1977))+((x1968*x1972)));
evalcond[3]=(((x1969*x1974))+((cj2*sj1))+(((-1.0)*r21*sj5*x1975))+((cj1*sj2))+(((-1.0)*r22*x1977)));
evalcond[4]=(((x1969*x1973))+(((-1.0)*cj0*x1976))+(((-1.0)*r02*x1977))+(((-1.0)*x1972*x1975))+((cj0*x1971)));
evalcond[5]=(((x1969*x1970))+((sj0*x1971))+(((-1.0)*r11*sj5*x1975))+(((-1.0)*sj0*x1976))+(((-1.0)*r12*x1977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1979=((1.0)*cj5);
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1979)))),-1);
if(!x1980.valid){
continue;
}
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1980.value)))+(x1981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1982=IKsin(j4);
IkReal x1983=IKcos(j4);
IkReal x1984=(cj5*r10);
IkReal x1985=(sj1*sj2);
IkReal x1986=(r01*sj5);
IkReal x1987=(cj5*r00);
IkReal x1988=(cj5*r20);
IkReal x1989=((1.0)*x1983);
IkReal x1990=((1.0)*cj1*cj2);
IkReal x1991=((1.0)*x1982);
IkReal x1992=(sj5*x1982);
evalcond[0]=(((r21*x1992))+(((-1.0)*r22*x1989))+(((-1.0)*x1988*x1991)));
evalcond[1]=(((r11*x1992))+cj0+(((-1.0)*r12*x1989))+(((-1.0)*x1984*x1991)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1989))+(((-1.0)*x1987*x1991))+((x1982*x1986)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1989))+(((-1.0)*r22*x1991))+((x1983*x1988)));
evalcond[4]=((((-1.0)*x1986*x1989))+(((-1.0)*cj0*x1990))+(((-1.0)*r02*x1991))+((cj0*x1985))+((x1983*x1987)));
evalcond[5]=((((-1.0)*r11*sj5*x1989))+(((-1.0)*sj0*x1990))+((sj0*x1985))+(((-1.0)*r12*x1991))+((x1983*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1993=((1.0)*cj5);
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1993)))),-1);
if(!x1995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1994.value)+(((1.5707963267949)*(x1995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1996=IKsin(j4);
IkReal x1997=IKcos(j4);
IkReal x1998=(cj5*r10);
IkReal x1999=(sj1*sj2);
IkReal x2000=(r01*sj5);
IkReal x2001=(cj5*r00);
IkReal x2002=(cj5*r20);
IkReal x2003=((1.0)*x1997);
IkReal x2004=((1.0)*cj1*cj2);
IkReal x2005=((1.0)*x1996);
IkReal x2006=(sj5*x1996);
evalcond[0]=(((r21*x2006))+(((-1.0)*r22*x2003))+(((-1.0)*x2002*x2005)));
evalcond[1]=(((r11*x2006))+(((-1.0)*x1998*x2005))+cj0+(((-1.0)*r12*x2003)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2001*x2005))+(((-1.0)*r02*x2003))+((x1996*x2000)));
evalcond[3]=(((x1997*x2002))+((cj2*sj1))+(((-1.0)*r22*x2005))+((cj1*sj2))+(((-1.0)*r21*sj5*x2003)));
evalcond[4]=(((x1997*x2001))+((cj0*x1999))+(((-1.0)*x2000*x2003))+(((-1.0)*r02*x2005))+(((-1.0)*cj0*x2004)));
evalcond[5]=(((sj0*x1999))+(((-1.0)*r12*x2005))+(((-1.0)*r11*sj5*x2003))+(((-1.0)*sj0*x2004))+((x1997*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2007=cj1*cj1;
IkReal x2008=cj2*cj2;
IkReal x2009=(cj1*cj5);
IkReal x2010=((7280355.0)*cj2);
IkReal x2011=(r10*sj5);
IkReal x2012=((8318211.0)*cj1);
IkReal x2013=((97460000.0)*cj1);
IkReal x2014=(sj1*sj2);
IkReal x2015=((85300000.0)*px);
IkReal x2016=(cj1*cj2);
IkReal x2017=((85300000.0)*py);
IkReal x2018=(r00*sj5);
IkReal x2019=((7280355.0)*cj5);
IkReal x2020=((3835629.0)*cj5);
CheckValue<IkReal> x2021=IKPowWithIntegerCheck(IKsign(((23239234.0)+(((41566690.0)*cj2*x2007))+(((5555904.0)*x2007))+(((-36380450.0)*x2014*x2016))+(((36380450.0)*x2007*x2008))+(((-41566690.0)*cj1*x2014))+(((-18190225.0)*x2008)))),-1);
if(!x2021.valid){
continue;
}
CheckValue<IkReal> x2022 = IKatan2WithCheck(IkReal((((cj1*x2010*x2011))+((py*x2013))+(((-1.0)*r01*x2020))+(((-1.0)*r11*x2014*x2019))+((x2016*x2017))+((r11*x2009*x2010))+(((-3835629.0)*x2018))+((x2011*x2012))+(((-1.0)*x2014*x2017))+(((-44940000.0)*px))+(((-7280355.0)*x2011*x2014))+(((8318211.0)*r11*x2009)))),IkReal((((cj1*x2010*x2018))+((x2015*x2016))+((px*x2013))+((r11*x2020))+((r01*x2009*x2010))+(((-1.0)*x2014*x2015))+(((-7280355.0)*x2014*x2018))+(((44940000.0)*py))+(((3835629.0)*x2011))+((x2012*x2018))+(((-1.0)*r01*x2014*x2019))+(((8318211.0)*r01*x2009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2022.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2021.value)))+(x2022.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2023=IKcos(j0);
IkReal x2024=IKsin(j0);
IkReal x2025=(sj1*sj2);
IkReal x2026=((0.08535)*sj5);
IkReal x2027=((0.08535)*cj5);
IkReal x2028=((0.21325)*x2024);
IkReal x2029=(cj1*x2023);
evalcond[0]=((((-0.11235)*x2024))+(((0.24365)*x2029))+(((-1.0)*r01*x2027))+(((-1.0)*r00*x2026))+(((0.21325)*cj2*x2029))+(((-0.21325)*x2023*x2025))+(((-1.0)*px)));
evalcond[1]=((((0.24365)*cj1*x2024))+(((-1.0)*r10*x2026))+((cj1*cj2*x2028))+(((0.11235)*x2023))+(((-1.0)*r11*x2027))+(((-1.0)*x2025*x2028))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2030=((1.0)*cj5);
IkReal x2031=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2030)));
j4eval[0]=x2031;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2030)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2032=((1.0)*cj5);
IkReal x2033=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2032)));
j4eval[0]=x2033;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2032))))));
j4eval[2]=IKsign(x2033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2034=((1.0)*sj0);
IkReal x2035=((1.0)*cj0);
IkReal x2036=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2036;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2034))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2035)))))+(IKabs(((((-1.0)*r12*x2034))+(((-1.0)*r02*x2035))))));
j4eval[2]=IKsign(x2036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2037=((-1.0)*r20);
IkReal x2039 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2039)==0){
continue;
}
IkReal x2038=pow(x2039,-0.5);
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2037),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
IkReal gconst0=((-1.0)*(x2040.value));
IkReal gconst1=(r21*x2038);
IkReal gconst2=(x2037*x2038);
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2041.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2042=((-1.0)*r20);
IkReal x2043=x2038;
CheckValue<IkReal> x2045 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2042),IKFAST_ATAN2_MAGTHRESH);
if(!x2045.valid){
continue;
}
IkReal x2044=((-1.0)*(x2045.value));
sj5=gconst1;
cj5=gconst2;
j5=x2044;
IkReal gconst0=x2044;
IkReal gconst1=(r21*x2043);
IkReal gconst2=(x2042*x2043);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2046=((-1.0)*r20);
IkReal x2047=x2038;
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2046),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
IkReal x2048=((-1.0)*(x2049.value));
sj5=gconst1;
cj5=gconst2;
j5=x2048;
IkReal gconst0=x2048;
IkReal gconst1=(r21*x2047);
IkReal gconst2=(x2046*x2047);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2050=((-1.0)*r20);
IkReal x2051=x2038;
CheckValue<IkReal> x2053 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2050),IKFAST_ATAN2_MAGTHRESH);
if(!x2053.valid){
continue;
}
IkReal x2052=((-1.0)*(x2053.value));
sj5=gconst1;
cj5=gconst2;
j5=x2052;
IkReal gconst0=x2052;
IkReal gconst1=(r21*x2051);
IkReal gconst2=(x2050*x2051);
IkReal x2054=r22*r22;
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2054))),-1);
if(!x2058.valid){
continue;
}
IkReal x2055=x2058.value;
IkReal x2056=(sj3*x2055);
IkReal x2057=(((sj3*x2054))+((x2056*(r20*r20*r20*r20)))+(((2.0)*x2056*(r20*r20)*(r21*r21)))+((x2056*(r21*r21*r21*r21))));
j4eval[0]=x2057;
j4eval[1]=IKsign(x2057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2059=gconst1*gconst1;
IkReal x2060=r21*r21;
IkReal x2061=gconst2*gconst2;
IkReal x2062=r20*r20;
IkReal x2063=(gconst2*r20);
IkReal x2064=(cj1*cj2);
IkReal x2065=(sj1*sj2);
IkReal x2066=(gconst1*r21);
IkReal x2067=(cj3*gconst2);
IkReal x2068=(cj3*r20);
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2061*x2062))+(((-2.0)*sj3*x2063*x2066))+((sj3*x2059*x2060)))),-1);
if(!x2069.valid){
continue;
}
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal((((r22*x2065))+(((-1.0)*r22*x2064))+((r21*r22*x2067))+((gconst1*r22*x2068)))),IkReal(((((-1.0)*gconst1*x2062*x2067))+(((-1.0)*x2063*x2065))+(((-1.0)*x2064*x2066))+((r21*x2059*x2068))+((gconst1*x2060*x2067))+((x2063*x2064))+(((-1.0)*r21*x2061*x2068))+((x2065*x2066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2069.value)))+(x2070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2071=IKsin(j4);
IkReal x2072=IKcos(j4);
IkReal x2073=(cj3*gconst1);
IkReal x2074=(gconst1*r01);
IkReal x2075=(gconst1*r11);
IkReal x2076=(sj1*sj2);
IkReal x2077=(cj3*gconst2);
IkReal x2078=(gconst1*sj3);
IkReal x2079=(gconst2*sj3);
IkReal x2080=((1.0)*sj0);
IkReal x2081=(cj1*sj2);
IkReal x2082=((1.0)*x2072);
IkReal x2083=((1.0)*x2071);
IkReal x2084=((1.0)*cj1*cj2);
IkReal x2085=(cj3*x2071);
IkReal x2086=((1.0)*cj2*sj1);
IkReal x2087=(x2072*x2079);
evalcond[0]=((((-1.0)*r22*x2082))+(((-1.0)*gconst2*r20*x2083))+((gconst1*r21*x2071)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x2083))+((x2071*x2075))+(((-1.0)*r12*x2082)));
evalcond[2]=((((-1.0)*r02*x2082))+(((-1.0)*x2080))+((x2071*x2074))+(((-1.0)*gconst2*r00*x2083)));
evalcond[3]=(((cj2*sj1))+x2081+((r20*x2078))+(((-1.0)*r20*x2077*x2082))+((r21*x2072*x2073))+((r22*x2085))+((r21*x2079)));
evalcond[4]=((((-1.0)*r21*x2078*x2082))+x2076+((r20*x2087))+(((-1.0)*x2084))+((r20*x2073))+(((-1.0)*r22*sj3*x2083))+((r21*x2077)));
evalcond[5]=((((-1.0)*r00*x2077*x2082))+((r02*x2085))+((r01*x2072*x2073))+(((-1.0)*cj0*x2084))+((r01*x2079))+((r00*x2078))+((cj0*x2076)));
evalcond[6]=(((r11*x2072*x2073))+(((-1.0)*cj1*cj2*x2080))+((r11*x2079))+((sj0*x2076))+((r10*x2078))+(((-1.0)*r10*x2077*x2082))+((r12*x2085)));
evalcond[7]=((((-1.0)*sj3*x2074*x2082))+(((-1.0)*cj0*x2086))+(((-1.0)*r02*sj3*x2083))+(((-1.0)*cj0*x2081))+((r01*x2077))+((r00*x2073))+((r00*x2087)));
evalcond[8]=(((r11*x2077))+(((-1.0)*r12*sj3*x2083))+(((-1.0)*cj2*sj1*x2080))+((r10*x2087))+((r10*x2073))+(((-1.0)*sj3*x2075*x2082))+(((-1.0)*x2080*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2088=((1.0)*gconst2);
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2088))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
CheckValue<IkReal> x2090=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x2088)))),-1);
if(!x2090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2089.value)+(((1.5707963267949)*(x2090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2091=IKsin(j4);
IkReal x2092=IKcos(j4);
IkReal x2093=(cj3*gconst1);
IkReal x2094=(gconst1*r01);
IkReal x2095=(gconst1*r11);
IkReal x2096=(sj1*sj2);
IkReal x2097=(cj3*gconst2);
IkReal x2098=(gconst1*sj3);
IkReal x2099=(gconst2*sj3);
IkReal x2100=((1.0)*sj0);
IkReal x2101=(cj1*sj2);
IkReal x2102=((1.0)*x2092);
IkReal x2103=((1.0)*x2091);
IkReal x2104=((1.0)*cj1*cj2);
IkReal x2105=(cj3*x2091);
IkReal x2106=((1.0)*cj2*sj1);
IkReal x2107=(x2092*x2099);
evalcond[0]=((((-1.0)*r22*x2102))+((gconst1*r21*x2091))+(((-1.0)*gconst2*r20*x2103)));
evalcond[1]=((((-1.0)*r12*x2102))+cj0+((x2091*x2095))+(((-1.0)*gconst2*r10*x2103)));
evalcond[2]=((((-1.0)*r02*x2102))+(((-1.0)*x2100))+((x2091*x2094))+(((-1.0)*gconst2*r00*x2103)));
evalcond[3]=(((cj2*sj1))+((r20*x2098))+x2101+((r21*x2092*x2093))+(((-1.0)*r20*x2097*x2102))+((r22*x2105))+((r21*x2099)));
evalcond[4]=(((r20*x2107))+(((-1.0)*r21*x2098*x2102))+((r20*x2093))+(((-1.0)*x2104))+x2096+((r21*x2097))+(((-1.0)*r22*sj3*x2103)));
evalcond[5]=((((-1.0)*r00*x2097*x2102))+((r02*x2105))+((r01*x2092*x2093))+((r01*x2099))+((r00*x2098))+((cj0*x2096))+(((-1.0)*cj0*x2104)));
evalcond[6]=(((sj0*x2096))+((r12*x2105))+(((-1.0)*cj1*cj2*x2100))+((r10*x2098))+(((-1.0)*r10*x2097*x2102))+((r11*x2092*x2093))+((r11*x2099)));
evalcond[7]=((((-1.0)*sj3*x2094*x2102))+(((-1.0)*cj0*x2101))+((r01*x2097))+((r00*x2093))+((r00*x2107))+(((-1.0)*r02*sj3*x2103))+(((-1.0)*cj0*x2106)));
evalcond[8]=((((-1.0)*x2100*x2101))+(((-1.0)*sj3*x2095*x2102))+((r10*x2093))+((r10*x2107))+(((-1.0)*r12*sj3*x2103))+(((-1.0)*cj2*sj1*x2100))+((r11*x2097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2108=((1.0)*gconst2);
CheckValue<IkReal> x2109=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x2108)))),-1);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2108))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2109.value)))+(x2110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2111=IKsin(j4);
IkReal x2112=IKcos(j4);
IkReal x2113=(cj3*gconst1);
IkReal x2114=(gconst1*r01);
IkReal x2115=(gconst1*r11);
IkReal x2116=(sj1*sj2);
IkReal x2117=(cj3*gconst2);
IkReal x2118=(gconst1*sj3);
IkReal x2119=(gconst2*sj3);
IkReal x2120=((1.0)*sj0);
IkReal x2121=(cj1*sj2);
IkReal x2122=((1.0)*x2112);
IkReal x2123=((1.0)*x2111);
IkReal x2124=((1.0)*cj1*cj2);
IkReal x2125=(cj3*x2111);
IkReal x2126=((1.0)*cj2*sj1);
IkReal x2127=(x2112*x2119);
evalcond[0]=(((gconst1*r21*x2111))+(((-1.0)*r22*x2122))+(((-1.0)*gconst2*r20*x2123)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x2123))+((x2111*x2115))+(((-1.0)*r12*x2122)));
evalcond[2]=((((-1.0)*gconst2*r00*x2123))+(((-1.0)*r02*x2122))+((x2111*x2114))+(((-1.0)*x2120)));
evalcond[3]=(((cj2*sj1))+((r21*x2119))+x2121+((r20*x2118))+((r21*x2112*x2113))+((r22*x2125))+(((-1.0)*r20*x2117*x2122)));
evalcond[4]=(((r21*x2117))+((r20*x2127))+x2116+((r20*x2113))+(((-1.0)*r22*sj3*x2123))+(((-1.0)*x2124))+(((-1.0)*r21*x2118*x2122)));
evalcond[5]=(((r01*x2112*x2113))+((r01*x2119))+((r00*x2118))+((cj0*x2116))+((r02*x2125))+(((-1.0)*r00*x2117*x2122))+(((-1.0)*cj0*x2124)));
evalcond[6]=((((-1.0)*r10*x2117*x2122))+((sj0*x2116))+((r11*x2112*x2113))+((r12*x2125))+(((-1.0)*cj1*cj2*x2120))+((r10*x2118))+((r11*x2119)));
evalcond[7]=((((-1.0)*sj3*x2114*x2122))+((r01*x2117))+((r00*x2113))+(((-1.0)*r02*sj3*x2123))+(((-1.0)*cj0*x2121))+((r00*x2127))+(((-1.0)*cj0*x2126)));
evalcond[8]=((((-1.0)*r12*sj3*x2123))+((r10*x2127))+(((-1.0)*x2120*x2121))+((r10*x2113))+(((-1.0)*sj3*x2115*x2122))+(((-1.0)*cj2*sj1*x2120))+((r11*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2128=((-1.0)*r21);
IkReal x2130 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2130)==0){
continue;
}
IkReal x2129=pow(x2130,-0.5);
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal(x2128),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2131.value))));
IkReal gconst4=(x2128*x2129);
IkReal gconst5=((1.0)*r20*x2129);
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2132.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2133=((-1.0)*r21);
CheckValue<IkReal> x2136 = IKatan2WithCheck(IkReal(x2133),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2136.valid){
continue;
}
IkReal x2134=((1.0)*(x2136.value));
IkReal x2135=x2129;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2134)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2134)));
IkReal gconst4=(x2133*x2135);
IkReal gconst5=((1.0)*r20*x2135);
IkReal x2137=r22*r22;
IkReal x2138=((1.0)*x2137);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(((-1.0)+x2137),-1);
if(!x2142.valid){
continue;
}
IkReal x2139=x2142.value;
if((((1.0)+(((-1.0)*x2138)))) < -0.00001)
continue;
IkReal x2140=IKsqrt(((1.0)+(((-1.0)*x2138))));
IkReal x2141=(cj0*x2139*x2140);
j4eval[0]=((IKabs(((((-1.0)*x2138*x2141))+x2141)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2143=((-1.0)*r21);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(x2143),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
IkReal x2144=((1.0)*(x2146.value));
IkReal x2145=x2129;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2144)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2144)));
IkReal gconst4=(x2143*x2145);
IkReal gconst5=((1.0)*r20*x2145);
IkReal x2147=r22*r22;
IkReal x2148=((1.0)*x2147);
CheckValue<IkReal> x2152=IKPowWithIntegerCheck(((-1.0)+x2147),-1);
if(!x2152.valid){
continue;
}
IkReal x2149=x2152.value;
if((((1.0)+(((-1.0)*x2148)))) < -0.00001)
continue;
IkReal x2150=IKsqrt(((1.0)+(((-1.0)*x2148))));
IkReal x2151=(sj0*x2149*x2150);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2148*x2151))+x2151))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2153=((-1.0)*r21);
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(x2153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
IkReal x2154=((1.0)*(x2156.value));
IkReal x2155=x2129;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2154)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2154)));
IkReal gconst4=(x2153*x2155);
IkReal gconst5=((1.0)*r20*x2155);
IkReal x2157=r22*r22;
IkReal x2158=(r12*sj0);
IkReal x2159=(cj0*r02);
CheckValue<IkReal> x2163=IKPowWithIntegerCheck(((-1.0)+x2157),-1);
if(!x2163.valid){
continue;
}
IkReal x2160=x2163.value;
if((((1.0)+(((-1.0)*x2157)))) < -0.00001)
continue;
IkReal x2161=IKsqrt(((1.0)+(((-1.0)*x2157))));
IkReal x2162=(r22*x2160*x2161);
j4eval[0]=0;
j4eval[1]=((IKabs((((x2158*x2162))+((x2159*x2162)))))+(IKabs(((((-1.0)*x2158))+(((-1.0)*x2159))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2164=((1.0)*sj0);
IkReal x2165=((1.0)*gconst4);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2164)))),IkReal(((((-1.0)*gconst4*r11*x2164))+((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x2165))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2165))+(((-1.0)*gconst5*r21)))),-1);
if(!x2167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2166.value)+(((1.5707963267949)*(x2167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2168=IKsin(j4);
IkReal x2169=IKcos(j4);
IkReal x2170=(gconst5*sj3);
IkReal x2171=(cj3*gconst5);
IkReal x2172=(gconst4*r11);
IkReal x2173=(sj1*sj2);
IkReal x2174=(cj2*sj1);
IkReal x2175=((1.0)*sj0);
IkReal x2176=(gconst4*r01);
IkReal x2177=(gconst4*r21);
IkReal x2178=((1.0)*cj0);
IkReal x2179=(cj1*sj2);
IkReal x2180=(gconst4*sj3);
IkReal x2181=(cj3*gconst4);
IkReal x2182=((1.0)*x2169);
IkReal x2183=((1.0)*cj1*cj2);
IkReal x2184=(cj3*x2168);
IkReal x2185=(cj3*x2169);
IkReal x2186=((1.0)*gconst5*x2168);
IkReal x2187=((1.0)*sj3*x2168);
evalcond[0]=((((-1.0)*r20*x2186))+(((-1.0)*r22*x2182))+((x2168*x2177)));
evalcond[1]=(cj0+(((-1.0)*r10*x2186))+(((-1.0)*r12*x2182))+((x2168*x2172)));
evalcond[2]=((((-1.0)*r02*x2182))+(((-1.0)*x2175))+((x2168*x2176))+(((-1.0)*r00*x2186)));
evalcond[3]=(((r22*x2184))+((r21*x2170))+x2174+x2179+((r20*x2180))+((x2177*x2185))+(((-1.0)*r20*x2171*x2182)));
evalcond[4]=(((r21*x2171))+x2173+((r20*x2181))+(((-1.0)*r22*x2187))+(((-1.0)*sj3*x2177*x2182))+(((-1.0)*x2183))+((r20*x2169*x2170)));
evalcond[5]=(((r01*x2170))+(((-1.0)*r00*x2171*x2182))+((cj0*x2173))+(((-1.0)*cj1*cj2*x2178))+((x2176*x2185))+((r02*x2184))+((r00*x2180)));
evalcond[6]=(((r11*x2170))+((x2172*x2185))+(((-1.0)*r10*x2171*x2182))+((r12*x2184))+(((-1.0)*cj1*cj2*x2175))+((sj0*x2173))+((r10*x2180)));
evalcond[7]=((((-1.0)*x2178*x2179))+((r01*x2171))+(((-1.0)*x2174*x2178))+((r00*x2169*x2170))+(((-1.0)*sj3*x2176*x2182))+(((-1.0)*r02*x2187))+((r00*x2181)));
evalcond[8]=((((-1.0)*x2174*x2175))+((r11*x2171))+(((-1.0)*sj3*x2172*x2182))+(((-1.0)*x2175*x2179))+(((-1.0)*r12*x2187))+((r10*x2169*x2170))+((r10*x2181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2188=((1.0)*gconst5);
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2188))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2188))+(((-1.0)*gconst4*r10)))),-1);
if(!x2190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2189.value)+(((1.5707963267949)*(x2190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2191=IKsin(j4);
IkReal x2192=IKcos(j4);
IkReal x2193=(gconst5*sj3);
IkReal x2194=(cj3*gconst5);
IkReal x2195=(gconst4*r11);
IkReal x2196=(sj1*sj2);
IkReal x2197=(cj2*sj1);
IkReal x2198=((1.0)*sj0);
IkReal x2199=(gconst4*r01);
IkReal x2200=(gconst4*r21);
IkReal x2201=((1.0)*cj0);
IkReal x2202=(cj1*sj2);
IkReal x2203=(gconst4*sj3);
IkReal x2204=(cj3*gconst4);
IkReal x2205=((1.0)*x2192);
IkReal x2206=((1.0)*cj1*cj2);
IkReal x2207=(cj3*x2191);
IkReal x2208=(cj3*x2192);
IkReal x2209=((1.0)*gconst5*x2191);
IkReal x2210=((1.0)*sj3*x2191);
evalcond[0]=((((-1.0)*r22*x2205))+((x2191*x2200))+(((-1.0)*r20*x2209)));
evalcond[1]=(((x2191*x2195))+cj0+(((-1.0)*r10*x2209))+(((-1.0)*r12*x2205)));
evalcond[2]=(((x2191*x2199))+(((-1.0)*x2198))+(((-1.0)*r00*x2209))+(((-1.0)*r02*x2205)));
evalcond[3]=(x2202+((r20*x2203))+((x2200*x2208))+x2197+(((-1.0)*r20*x2194*x2205))+((r21*x2193))+((r22*x2207)));
evalcond[4]=(((r20*x2192*x2193))+((r20*x2204))+(((-1.0)*x2206))+(((-1.0)*sj3*x2200*x2205))+(((-1.0)*r22*x2210))+x2196+((r21*x2194)));
evalcond[5]=(((r02*x2207))+((r00*x2203))+(((-1.0)*cj1*cj2*x2201))+((x2199*x2208))+((cj0*x2196))+(((-1.0)*r00*x2194*x2205))+((r01*x2193)));
evalcond[6]=(((r12*x2207))+((sj0*x2196))+(((-1.0)*cj1*cj2*x2198))+((r10*x2203))+((r11*x2193))+((x2195*x2208))+(((-1.0)*r10*x2194*x2205)));
evalcond[7]=(((r00*x2204))+(((-1.0)*x2197*x2201))+((r00*x2192*x2193))+(((-1.0)*x2201*x2202))+(((-1.0)*r02*x2210))+(((-1.0)*sj3*x2199*x2205))+((r01*x2194)));
evalcond[8]=((((-1.0)*x2197*x2198))+(((-1.0)*r12*x2210))+(((-1.0)*x2198*x2202))+((r10*x2204))+((r11*x2194))+(((-1.0)*sj3*x2195*x2205))+((r10*x2192*x2193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2211=((1.0)*gconst5);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2211))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
CheckValue<IkReal> x2213=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x2211)))),-1);
if(!x2213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2212.value)+(((1.5707963267949)*(x2213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2214=IKsin(j4);
IkReal x2215=IKcos(j4);
IkReal x2216=(gconst5*sj3);
IkReal x2217=(cj3*gconst5);
IkReal x2218=(gconst4*r11);
IkReal x2219=(sj1*sj2);
IkReal x2220=(cj2*sj1);
IkReal x2221=((1.0)*sj0);
IkReal x2222=(gconst4*r01);
IkReal x2223=(gconst4*r21);
IkReal x2224=((1.0)*cj0);
IkReal x2225=(cj1*sj2);
IkReal x2226=(gconst4*sj3);
IkReal x2227=(cj3*gconst4);
IkReal x2228=((1.0)*x2215);
IkReal x2229=((1.0)*cj1*cj2);
IkReal x2230=(cj3*x2214);
IkReal x2231=(cj3*x2215);
IkReal x2232=((1.0)*gconst5*x2214);
IkReal x2233=((1.0)*sj3*x2214);
evalcond[0]=(((x2214*x2223))+(((-1.0)*r20*x2232))+(((-1.0)*r22*x2228)));
evalcond[1]=((((-1.0)*r10*x2232))+cj0+((x2214*x2218))+(((-1.0)*r12*x2228)));
evalcond[2]=(((x2214*x2222))+(((-1.0)*r02*x2228))+(((-1.0)*r00*x2232))+(((-1.0)*x2221)));
evalcond[3]=((((-1.0)*r20*x2217*x2228))+x2225+x2220+((r22*x2230))+((r20*x2226))+((r21*x2216))+((x2223*x2231)));
evalcond[4]=(x2219+(((-1.0)*r22*x2233))+(((-1.0)*x2229))+((r20*x2227))+(((-1.0)*sj3*x2223*x2228))+((r21*x2217))+((r20*x2215*x2216)));
evalcond[5]=((((-1.0)*cj1*cj2*x2224))+((r01*x2216))+((r02*x2230))+((x2222*x2231))+((cj0*x2219))+((r00*x2226))+(((-1.0)*r00*x2217*x2228)));
evalcond[6]=((((-1.0)*r10*x2217*x2228))+(((-1.0)*cj1*cj2*x2221))+((r10*x2226))+((r11*x2216))+((x2218*x2231))+((sj0*x2219))+((r12*x2230)));
evalcond[7]=(((r01*x2217))+(((-1.0)*sj3*x2222*x2228))+(((-1.0)*x2224*x2225))+(((-1.0)*x2220*x2224))+(((-1.0)*r02*x2233))+((r00*x2215*x2216))+((r00*x2227)));
evalcond[8]=(((r10*x2215*x2216))+(((-1.0)*x2220*x2221))+((r10*x2227))+(((-1.0)*sj3*x2218*x2228))+(((-1.0)*x2221*x2225))+((r11*x2217))+(((-1.0)*r12*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2234=((-1.0)*r10);
IkReal x2236 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2236)==0){
continue;
}
IkReal x2235=pow(x2236,-0.5);
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2234),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2237.value));
IkReal gconst7=(r11*x2235);
IkReal gconst8=(x2234*x2235);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2238.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2239=((-1.0)*r10);
IkReal x2240=x2235;
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2239),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
IkReal x2241=((-1.0)*(x2242.value));
sj5=gconst7;
cj5=gconst8;
j5=x2241;
IkReal gconst6=x2241;
IkReal gconst7=(r11*x2240);
IkReal gconst8=(x2239*x2240);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2243=((1.0)*sj0);
IkReal x2244=((1.0)*gconst7);
CheckValue<IkReal> x2245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x2244)))),-1);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2243)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x2243))+((cj0*gconst8*r00))+(((-1.0)*cj0*r01*x2244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2245.value)))+(x2246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2247=IKsin(j4);
IkReal x2248=IKcos(j4);
IkReal x2249=(gconst7*sj3);
IkReal x2250=(cj3*gconst8);
IkReal x2251=(cj3*gconst7);
IkReal x2252=(sj1*sj2);
IkReal x2253=(cj2*sj1);
IkReal x2254=((1.0)*sj0);
IkReal x2255=((1.0)*cj0);
IkReal x2256=(gconst8*sj3);
IkReal x2257=(cj1*sj2);
IkReal x2258=((1.0)*x2248);
IkReal x2259=((1.0)*x2247);
IkReal x2260=((1.0)*cj1*cj2);
IkReal x2261=(cj3*x2247);
IkReal x2262=(gconst7*x2247);
IkReal x2263=(x2248*x2256);
evalcond[0]=((((-1.0)*r22*x2258))+((r21*x2262))+(((-1.0)*gconst8*r20*x2259)));
evalcond[1]=(cj0+(((-1.0)*gconst8*r10*x2259))+(((-1.0)*r12*x2258))+((r11*x2262)));
evalcond[2]=(((r01*x2262))+(((-1.0)*gconst8*r00*x2259))+(((-1.0)*r02*x2258))+(((-1.0)*x2254)));
evalcond[3]=(x2257+x2253+((r22*x2261))+((r20*x2249))+((r21*x2248*x2251))+((r21*x2256))+(((-1.0)*r20*x2250*x2258)));
evalcond[4]=(x2252+((r20*x2251))+((r20*x2263))+(((-1.0)*x2260))+((r21*x2250))+(((-1.0)*r22*sj3*x2259))+(((-1.0)*r21*x2249*x2258)));
evalcond[5]=((((-1.0)*cj1*cj2*x2255))+((r01*x2248*x2251))+((cj0*x2252))+((r02*x2261))+((r00*x2249))+((r01*x2256))+(((-1.0)*r00*x2250*x2258)));
evalcond[6]=((((-1.0)*cj1*cj2*x2254))+((r10*x2249))+(((-1.0)*r10*x2250*x2258))+((r12*x2261))+((sj0*x2252))+((r11*x2248*x2251))+((r11*x2256)));
evalcond[7]=(((r00*x2263))+(((-1.0)*x2255*x2257))+(((-1.0)*x2253*x2255))+(((-1.0)*r02*sj3*x2259))+((r00*x2251))+((r01*x2250))+(((-1.0)*r01*x2249*x2258)));
evalcond[8]=(((r10*x2251))+(((-1.0)*r12*sj3*x2259))+(((-1.0)*x2253*x2254))+(((-1.0)*r11*x2249*x2258))+((r10*x2263))+((r11*x2250))+(((-1.0)*x2254*x2257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2264=((1.0)*gconst8);
CheckValue<IkReal> x2265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2264))+(((-1.0)*gconst7*r00)))),-1);
if(!x2265.valid){
continue;
}
CheckValue<IkReal> x2266 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x2264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2265.value)))+(x2266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2267=IKsin(j4);
IkReal x2268=IKcos(j4);
IkReal x2269=(gconst7*sj3);
IkReal x2270=(cj3*gconst8);
IkReal x2271=(cj3*gconst7);
IkReal x2272=(sj1*sj2);
IkReal x2273=(cj2*sj1);
IkReal x2274=((1.0)*sj0);
IkReal x2275=((1.0)*cj0);
IkReal x2276=(gconst8*sj3);
IkReal x2277=(cj1*sj2);
IkReal x2278=((1.0)*x2268);
IkReal x2279=((1.0)*x2267);
IkReal x2280=((1.0)*cj1*cj2);
IkReal x2281=(cj3*x2267);
IkReal x2282=(gconst7*x2267);
IkReal x2283=(x2268*x2276);
evalcond[0]=((((-1.0)*gconst8*r20*x2279))+(((-1.0)*r22*x2278))+((r21*x2282)));
evalcond[1]=(((r11*x2282))+cj0+(((-1.0)*gconst8*r10*x2279))+(((-1.0)*r12*x2278)));
evalcond[2]=(((r01*x2282))+(((-1.0)*gconst8*r00*x2279))+(((-1.0)*r02*x2278))+(((-1.0)*x2274)));
evalcond[3]=(((r21*x2276))+x2277+x2273+((r21*x2268*x2271))+(((-1.0)*r20*x2270*x2278))+((r20*x2269))+((r22*x2281)));
evalcond[4]=(((r21*x2270))+x2272+(((-1.0)*x2280))+((r20*x2283))+(((-1.0)*r22*sj3*x2279))+((r20*x2271))+(((-1.0)*r21*x2269*x2278)));
evalcond[5]=(((r00*x2269))+((r01*x2276))+(((-1.0)*cj1*cj2*x2275))+((r01*x2268*x2271))+((cj0*x2272))+(((-1.0)*r00*x2270*x2278))+((r02*x2281)));
evalcond[6]=(((sj0*x2272))+(((-1.0)*cj1*cj2*x2274))+((r12*x2281))+((r10*x2269))+(((-1.0)*r10*x2270*x2278))+((r11*x2276))+((r11*x2268*x2271)));
evalcond[7]=(((r01*x2270))+((r00*x2271))+(((-1.0)*x2275*x2277))+(((-1.0)*r02*sj3*x2279))+(((-1.0)*x2273*x2275))+(((-1.0)*r01*x2269*x2278))+((r00*x2283)));
evalcond[8]=(((r10*x2283))+(((-1.0)*x2274*x2277))+(((-1.0)*x2273*x2274))+(((-1.0)*r12*sj3*x2279))+((r10*x2271))+((r11*x2270))+(((-1.0)*r11*x2269*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2284=((-1.0)*r11);
IkReal x2286 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2286)==0){
continue;
}
IkReal x2285=pow(x2286,-0.5);
CheckValue<IkReal> x2287 = IKatan2WithCheck(IkReal(x2284),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2287.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2287.value))));
IkReal gconst10=(x2284*x2285);
IkReal gconst11=((1.0)*r10*x2285);
CheckValue<IkReal> x2288 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2288.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2288.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2289=((-1.0)*r11);
CheckValue<IkReal> x2292 = IKatan2WithCheck(IkReal(x2289),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2292.valid){
continue;
}
IkReal x2290=((1.0)*(x2292.value));
IkReal x2291=x2285;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2290)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2290)));
IkReal gconst10=(x2289*x2291);
IkReal gconst11=((1.0)*r10*x2291);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2293=((-1.0)*r11);
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(x2293),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
IkReal x2294=((1.0)*(x2296.value));
IkReal x2295=x2285;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2294)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2294)));
IkReal gconst10=(x2293*x2295);
IkReal gconst11=((1.0)*r10*x2295);
IkReal x2297=r12*r12;
IkReal x2298=((1.0)*sj0);
IkReal x2299=(cj0*r02);
IkReal x2300=x2285;
j4eval[0]=((IKabs((((sj0*x2297*x2300))+((r12*x2299*x2300))+(((-1.0)*x2298*x2300)))))+(IKabs(((((-1.0)*x2299))+(((-1.0)*r12*x2298))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2301=((-1.0)*r11);
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal(x2301),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
IkReal x2302=((1.0)*(x2304.value));
IkReal x2303=x2285;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2302)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2302)));
IkReal gconst10=(x2301*x2303);
IkReal gconst11=((1.0)*r10*x2303);
IkReal x2305=((1.0)*cj3);
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2310.valid){
continue;
}
IkReal x2306=x2310.value;
IkReal x2307=(cj3*x2306);
IkReal x2308=(x2305*x2306);
IkReal x2309=((((-1.0)*x2308*(r11*r11)*(r21*r21)))+(((-1.0)*x2308*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x2307))+(((-1.0)*x2305*(r22*r22))));
j4eval[0]=x2309;
j4eval[1]=IKsign(x2309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2311=gconst10*gconst10;
IkReal x2312=r21*r21;
IkReal x2313=gconst11*gconst11;
IkReal x2314=r20*r20;
IkReal x2315=((1.0)*cj3);
IkReal x2316=(r20*sj3);
IkReal x2317=(gconst10*gconst11);
IkReal x2318=(cj2*sj1);
IkReal x2319=(gconst10*r21);
IkReal x2320=(cj1*sj2);
IkReal x2321=((1.0)*gconst11*r20);
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal((((r22*x2320))+((gconst11*r21*r22*sj3))+((r22*x2318))+((gconst10*r22*x2316)))),IkReal(((((-1.0)*x2318*x2321))+((x2319*x2320))+(((-1.0)*x2320*x2321))+((sj3*x2312*x2317))+((x2318*x2319))+((r21*x2311*x2316))+(((-1.0)*r21*x2313*x2316))+(((-1.0)*sj3*x2314*x2317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2313*x2314*x2315))+(((2.0)*cj3*r20*r21*x2317))+(((-1.0)*x2315*(r22*r22)))+(((-1.0)*x2311*x2312*x2315)))),-1);
if(!x2323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2322.value)+(((1.5707963267949)*(x2323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2324=IKsin(j4);
IkReal x2325=IKcos(j4);
IkReal x2326=(cj3*r10);
IkReal x2327=(gconst11*r20);
IkReal x2328=(gconst11*sj3);
IkReal x2329=(sj1*sj2);
IkReal x2330=(gconst11*r00);
IkReal x2331=(cj3*r11);
IkReal x2332=(gconst10*sj3);
IkReal x2333=(cj2*sj1);
IkReal x2334=(cj3*r01);
IkReal x2335=((1.0)*sj0);
IkReal x2336=(cj1*sj2);
IkReal x2337=(cj3*r21);
IkReal x2338=(cj3*gconst10);
IkReal x2339=((1.0)*cj0);
IkReal x2340=((1.0)*x2325);
IkReal x2341=((1.0)*x2324);
IkReal x2342=((1.0)*cj1*cj2);
IkReal x2343=(cj3*x2324);
IkReal x2344=(gconst10*x2324);
IkReal x2345=(gconst10*x2325);
evalcond[0]=((((-1.0)*x2327*x2341))+(((-1.0)*r22*x2340))+((r21*x2344)));
evalcond[1]=((((-1.0)*gconst11*r10*x2341))+cj0+((r11*x2344))+(((-1.0)*r12*x2340)));
evalcond[2]=((((-1.0)*x2335))+((r01*x2344))+(((-1.0)*x2330*x2341))+(((-1.0)*r02*x2340)));
evalcond[3]=(x2333+x2336+((r21*x2328))+((r22*x2343))+(((-1.0)*cj3*x2327*x2340))+((x2337*x2345))+((r20*x2332)));
evalcond[4]=((((-1.0)*r21*x2332*x2340))+x2329+((gconst11*x2337))+(((-1.0)*r22*sj3*x2341))+((sj3*x2325*x2327))+(((-1.0)*x2342))+((r20*x2338)));
evalcond[5]=(((cj0*x2329))+((x2334*x2345))+(((-1.0)*cj1*cj2*x2339))+((r00*x2332))+((r01*x2328))+(((-1.0)*cj3*x2330*x2340))+((r02*x2343)));
evalcond[6]=(((x2331*x2345))+(((-1.0)*cj1*cj2*x2335))+((r12*x2343))+((r11*x2328))+((sj0*x2329))+(((-1.0)*gconst11*x2326*x2340))+((r10*x2332)));
evalcond[7]=((((-1.0)*r02*sj3*x2341))+((r00*x2325*x2328))+(((-1.0)*x2333*x2339))+((r00*x2338))+(((-1.0)*r01*x2332*x2340))+((gconst11*x2334))+(((-1.0)*x2336*x2339)));
evalcond[8]=(((r10*x2325*x2328))+((gconst10*x2326))+(((-1.0)*x2333*x2335))+((gconst11*x2331))+(((-1.0)*r11*x2332*x2340))+(((-1.0)*x2335*x2336))+(((-1.0)*r12*sj3*x2341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2346=((1.0)*sj0);
IkReal x2347=((1.0)*gconst10);
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2346)))),IkReal(((((-1.0)*gconst10*r11*x2346))+(((-1.0)*cj0*r01*x2347))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2347))+(((-1.0)*gconst11*r21)))),-1);
if(!x2349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2348.value)+(((1.5707963267949)*(x2349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2350=IKsin(j4);
IkReal x2351=IKcos(j4);
IkReal x2352=(cj3*r10);
IkReal x2353=(gconst11*r20);
IkReal x2354=(gconst11*sj3);
IkReal x2355=(sj1*sj2);
IkReal x2356=(gconst11*r00);
IkReal x2357=(cj3*r11);
IkReal x2358=(gconst10*sj3);
IkReal x2359=(cj2*sj1);
IkReal x2360=(cj3*r01);
IkReal x2361=((1.0)*sj0);
IkReal x2362=(cj1*sj2);
IkReal x2363=(cj3*r21);
IkReal x2364=(cj3*gconst10);
IkReal x2365=((1.0)*cj0);
IkReal x2366=((1.0)*x2351);
IkReal x2367=((1.0)*x2350);
IkReal x2368=((1.0)*cj1*cj2);
IkReal x2369=(cj3*x2350);
IkReal x2370=(gconst10*x2350);
IkReal x2371=(gconst10*x2351);
evalcond[0]=((((-1.0)*r22*x2366))+(((-1.0)*x2353*x2367))+((r21*x2370)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2367))+(((-1.0)*r12*x2366))+((r11*x2370)));
evalcond[2]=((((-1.0)*x2361))+(((-1.0)*x2356*x2367))+((r01*x2370))+(((-1.0)*r02*x2366)));
evalcond[3]=((((-1.0)*cj3*x2353*x2366))+x2362+x2359+((r22*x2369))+((r20*x2358))+((x2363*x2371))+((r21*x2354)));
evalcond[4]=(((r20*x2364))+((gconst11*x2363))+(((-1.0)*r22*sj3*x2367))+x2355+(((-1.0)*x2368))+((sj3*x2351*x2353))+(((-1.0)*r21*x2358*x2366)));
evalcond[5]=(((cj0*x2355))+((r00*x2358))+((r01*x2354))+((r02*x2369))+(((-1.0)*cj1*cj2*x2365))+((x2360*x2371))+(((-1.0)*cj3*x2356*x2366)));
evalcond[6]=(((sj0*x2355))+((r12*x2369))+((r10*x2358))+((r11*x2354))+(((-1.0)*cj1*cj2*x2361))+(((-1.0)*gconst11*x2352*x2366))+((x2357*x2371)));
evalcond[7]=(((gconst11*x2360))+(((-1.0)*r02*sj3*x2367))+(((-1.0)*x2359*x2365))+(((-1.0)*x2362*x2365))+((r00*x2351*x2354))+(((-1.0)*r01*x2358*x2366))+((r00*x2364)));
evalcond[8]=((((-1.0)*r12*sj3*x2367))+((gconst10*x2352))+((r10*x2351*x2354))+(((-1.0)*x2359*x2361))+((gconst11*x2357))+(((-1.0)*r11*x2358*x2366))+(((-1.0)*x2361*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2372=((1.0)*gconst11);
CheckValue<IkReal> x2373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x2372)))),-1);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x2372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2373.value)))+(x2374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2375=IKsin(j4);
IkReal x2376=IKcos(j4);
IkReal x2377=(cj3*r10);
IkReal x2378=(gconst11*r20);
IkReal x2379=(gconst11*sj3);
IkReal x2380=(sj1*sj2);
IkReal x2381=(gconst11*r00);
IkReal x2382=(cj3*r11);
IkReal x2383=(gconst10*sj3);
IkReal x2384=(cj2*sj1);
IkReal x2385=(cj3*r01);
IkReal x2386=((1.0)*sj0);
IkReal x2387=(cj1*sj2);
IkReal x2388=(cj3*r21);
IkReal x2389=(cj3*gconst10);
IkReal x2390=((1.0)*cj0);
IkReal x2391=((1.0)*x2376);
IkReal x2392=((1.0)*x2375);
IkReal x2393=((1.0)*cj1*cj2);
IkReal x2394=(cj3*x2375);
IkReal x2395=(gconst10*x2375);
IkReal x2396=(gconst10*x2376);
evalcond[0]=((((-1.0)*x2378*x2392))+(((-1.0)*r22*x2391))+((r21*x2395)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2392))+((r11*x2395))+(((-1.0)*r12*x2391)));
evalcond[2]=((((-1.0)*x2381*x2392))+(((-1.0)*r02*x2391))+((r01*x2395))+(((-1.0)*x2386)));
evalcond[3]=(x2384+x2387+((r20*x2383))+((r22*x2394))+(((-1.0)*cj3*x2378*x2391))+((x2388*x2396))+((r21*x2379)));
evalcond[4]=(((gconst11*x2388))+x2380+(((-1.0)*r22*sj3*x2392))+((r20*x2389))+(((-1.0)*x2393))+(((-1.0)*r21*x2383*x2391))+((sj3*x2376*x2378)));
evalcond[5]=(((x2385*x2396))+((r00*x2383))+((r02*x2394))+((cj0*x2380))+(((-1.0)*cj3*x2381*x2391))+(((-1.0)*cj1*cj2*x2390))+((r01*x2379)));
evalcond[6]=(((r12*x2394))+(((-1.0)*gconst11*x2377*x2391))+((x2382*x2396))+((r10*x2383))+(((-1.0)*cj1*cj2*x2386))+((sj0*x2380))+((r11*x2379)));
evalcond[7]=(((r00*x2376*x2379))+(((-1.0)*r01*x2383*x2391))+((gconst11*x2385))+((r00*x2389))+(((-1.0)*r02*sj3*x2392))+(((-1.0)*x2384*x2390))+(((-1.0)*x2387*x2390)));
evalcond[8]=(((r10*x2376*x2379))+((gconst11*x2382))+((gconst10*x2377))+(((-1.0)*x2386*x2387))+(((-1.0)*r12*sj3*x2392))+(((-1.0)*x2384*x2386))+(((-1.0)*r11*x2383*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2397=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2397;
j4eval[1]=IKsign(x2397);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2398=((1.0)*cj5);
IkReal x2399=((((-1.0)*r01*x2398))+(((-1.0)*r00*sj5)));
j4eval[0]=x2399;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2398)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2400=cj5*cj5;
IkReal x2401=(cj3*r21);
IkReal x2402=(cj5*sj5);
IkReal x2403=((1.0)*cj3);
IkReal x2404=((((-1.0)*r10*r20*x2400*x2403))+((cj3*r11*r20*x2402))+(((-1.0)*r11*x2401))+(((-1.0)*r12*r22*x2403))+((r10*x2401*x2402))+((r11*x2400*x2401)));
j4eval[0]=x2404;
j4eval[1]=IKsign(x2404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2405=cj5*cj5;
IkReal x2406=((1.0)*cj3);
IkReal x2407=(r10*r21);
IkReal x2408=(cj5*sj5);
IkReal x2409=(r11*r21);
IkReal x2410=(r11*r20);
IkReal x2411=(r22*sj3);
IkReal x2412=(r10*r20);
IkReal x2413=((1.0)*sj3*x2405);
CheckValue<IkReal> x2414=IKPowWithIntegerCheck(IKsign((((cj3*x2405*x2409))+((cj3*x2408*x2410))+((cj3*x2407*x2408))+(((-1.0)*x2406*x2409))+(((-1.0)*r12*r22*x2406))+(((-1.0)*x2405*x2406*x2412)))),-1);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal((((r10*sj5*x2411))+((cj5*r11*x2411)))),IkReal((((sj3*x2408*x2409))+(((-1.0)*x2407*x2413))+((sj3*x2407))+(((-1.0)*sj3*x2408*x2412))+(((-1.0)*x2410*x2413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2414.value)))+(x2415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2416=IKsin(j4);
IkReal x2417=IKcos(j4);
IkReal x2418=(sj1*sj2);
IkReal x2419=(cj5*sj3);
IkReal x2420=(cj5*r10);
IkReal x2421=(r00*sj5);
IkReal x2422=(r11*sj5);
IkReal x2423=(cj3*cj5);
IkReal x2424=((1.0)*cj1);
IkReal x2425=(cj3*sj5);
IkReal x2426=(r21*sj5);
IkReal x2427=(cj2*sj1);
IkReal x2428=(sj3*sj5);
IkReal x2429=(r01*sj5);
IkReal x2430=(cj2*x2424);
IkReal x2431=((1.0)*x2417);
IkReal x2432=((1.0)*x2416);
IkReal x2433=(cj3*x2416);
IkReal x2434=(cj3*x2417);
evalcond[0]=((((-1.0)*r22*x2431))+((x2416*x2426))+(((-1.0)*cj5*r20*x2432)));
evalcond[1]=((((-1.0)*cj5*r00*x2432))+((x2416*x2429))+(((-1.0)*r02*x2431)));
evalcond[2]=((1.0)+(((-1.0)*x2420*x2432))+((x2416*x2422))+(((-1.0)*r12*x2431)));
evalcond[3]=(((r11*x2419))+((r12*x2433))+((r10*x2428))+(((-1.0)*cj3*x2420*x2431))+((x2422*x2434)));
evalcond[4]=((((-1.0)*r12*sj3*x2432))+(((-1.0)*sj3*x2422*x2431))+((r10*x2425))+((r10*x2417*x2419))+((r11*x2423)));
evalcond[5]=(x2427+((r21*x2419))+((cj1*sj2))+((r22*x2433))+((r21*x2417*x2425))+((r20*x2428))+(((-1.0)*r20*x2423*x2431)));
evalcond[6]=(x2418+((r01*x2417*x2425))+(((-1.0)*x2430))+((r01*x2419))+((r02*x2433))+(((-1.0)*r00*x2423*x2431))+((sj3*x2421)));
evalcond[7]=(x2418+((r21*x2423))+(((-1.0)*x2430))+((r20*x2425))+(((-1.0)*r22*sj3*x2432))+(((-1.0)*sj3*x2426*x2431))+((r20*x2417*x2419)));
evalcond[8]=(((r00*x2417*x2419))+((r01*x2423))+(((-1.0)*x2427))+(((-1.0)*sj2*x2424))+((cj3*x2421))+(((-1.0)*r01*x2428*x2431))+(((-1.0)*r02*sj3*x2432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2435=((1.0)*cj5);
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2435)))),-1);
if(!x2436.valid){
continue;
}
CheckValue<IkReal> x2437 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2436.value)))+(x2437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2438=IKsin(j4);
IkReal x2439=IKcos(j4);
IkReal x2440=(sj1*sj2);
IkReal x2441=(cj5*sj3);
IkReal x2442=(cj5*r10);
IkReal x2443=(r00*sj5);
IkReal x2444=(r11*sj5);
IkReal x2445=(cj3*cj5);
IkReal x2446=((1.0)*cj1);
IkReal x2447=(cj3*sj5);
IkReal x2448=(r21*sj5);
IkReal x2449=(cj2*sj1);
IkReal x2450=(sj3*sj5);
IkReal x2451=(r01*sj5);
IkReal x2452=(cj2*x2446);
IkReal x2453=((1.0)*x2439);
IkReal x2454=((1.0)*x2438);
IkReal x2455=(cj3*x2438);
IkReal x2456=(cj3*x2439);
evalcond[0]=((((-1.0)*r22*x2453))+(((-1.0)*cj5*r20*x2454))+((x2438*x2448)));
evalcond[1]=((((-1.0)*cj5*r00*x2454))+(((-1.0)*r02*x2453))+((x2438*x2451)));
evalcond[2]=((1.0)+(((-1.0)*x2442*x2454))+(((-1.0)*r12*x2453))+((x2438*x2444)));
evalcond[3]=(((r10*x2450))+((x2444*x2456))+((r12*x2455))+(((-1.0)*cj3*x2442*x2453))+((r11*x2441)));
evalcond[4]=((((-1.0)*sj3*x2444*x2453))+((r10*x2447))+((r10*x2439*x2441))+(((-1.0)*r12*sj3*x2454))+((r11*x2445)));
evalcond[5]=(x2449+((r22*x2455))+((cj1*sj2))+((r21*x2439*x2447))+(((-1.0)*r20*x2445*x2453))+((r20*x2450))+((r21*x2441)));
evalcond[6]=(((r02*x2455))+((sj3*x2443))+x2440+(((-1.0)*r00*x2445*x2453))+((r01*x2439*x2447))+((r01*x2441))+(((-1.0)*x2452)));
evalcond[7]=(x2440+(((-1.0)*r22*sj3*x2454))+((r20*x2439*x2441))+(((-1.0)*x2452))+((r20*x2447))+((r21*x2445))+(((-1.0)*sj3*x2448*x2453)));
evalcond[8]=((((-1.0)*r02*sj3*x2454))+((r00*x2439*x2441))+(((-1.0)*x2449))+((r01*x2445))+(((-1.0)*r01*x2450*x2453))+(((-1.0)*sj2*x2446))+((cj3*x2443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2457.valid){
continue;
}
CheckValue<IkReal> x2458 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2457.value)))+(x2458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2459=IKsin(j4);
IkReal x2460=IKcos(j4);
IkReal x2461=(sj1*sj2);
IkReal x2462=(cj5*sj3);
IkReal x2463=(cj5*r10);
IkReal x2464=(r00*sj5);
IkReal x2465=(r11*sj5);
IkReal x2466=(cj3*cj5);
IkReal x2467=((1.0)*cj1);
IkReal x2468=(cj3*sj5);
IkReal x2469=(r21*sj5);
IkReal x2470=(cj2*sj1);
IkReal x2471=(sj3*sj5);
IkReal x2472=(r01*sj5);
IkReal x2473=(cj2*x2467);
IkReal x2474=((1.0)*x2460);
IkReal x2475=((1.0)*x2459);
IkReal x2476=(cj3*x2459);
IkReal x2477=(cj3*x2460);
evalcond[0]=(((x2459*x2469))+(((-1.0)*r22*x2474))+(((-1.0)*cj5*r20*x2475)));
evalcond[1]=((((-1.0)*cj5*r00*x2475))+((x2459*x2472))+(((-1.0)*r02*x2474)));
evalcond[2]=((1.0)+((x2459*x2465))+(((-1.0)*r12*x2474))+(((-1.0)*x2463*x2475)));
evalcond[3]=(((r12*x2476))+(((-1.0)*cj3*x2463*x2474))+((r10*x2471))+((r11*x2462))+((x2465*x2477)));
evalcond[4]=(((r10*x2460*x2462))+((r11*x2466))+(((-1.0)*r12*sj3*x2475))+(((-1.0)*sj3*x2465*x2474))+((r10*x2468)));
evalcond[5]=((((-1.0)*r20*x2466*x2474))+x2470+((cj1*sj2))+((r21*x2462))+((r20*x2471))+((r21*x2460*x2468))+((r22*x2476)));
evalcond[6]=(((r01*x2462))+x2461+(((-1.0)*x2473))+((sj3*x2464))+((r02*x2476))+(((-1.0)*r00*x2466*x2474))+((r01*x2460*x2468)));
evalcond[7]=((((-1.0)*r22*sj3*x2475))+x2461+((r20*x2468))+(((-1.0)*x2473))+((r21*x2466))+((r20*x2460*x2462))+(((-1.0)*sj3*x2469*x2474)));
evalcond[8]=(((r01*x2466))+((cj3*x2464))+(((-1.0)*x2470))+((r00*x2460*x2462))+(((-1.0)*sj2*x2467))+(((-1.0)*r02*sj3*x2475))+(((-1.0)*r01*x2471*x2474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2478=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2478;
j4eval[1]=IKsign(x2478);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2479=((1.0)*cj5);
IkReal x2480=((((-1.0)*r21*x2479))+(((-1.0)*r20*sj5)));
j4eval[0]=x2480;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2479))))));
j4eval[2]=IKsign(x2480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2481=cj5*cj5;
IkReal x2482=(cj3*r21);
IkReal x2483=(cj5*sj5);
IkReal x2484=((1.0)*cj3);
IkReal x2485=((((-1.0)*r12*r22*x2484))+((r11*x2481*x2482))+(((-1.0)*r10*r20*x2481*x2484))+((r10*x2482*x2483))+((cj3*r11*r20*x2483))+(((-1.0)*r11*x2482)));
j4eval[0]=x2485;
j4eval[1]=IKsign(x2485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2486=cj5*cj5;
IkReal x2487=((1.0)*cj3);
IkReal x2488=(r10*r21);
IkReal x2489=(cj5*sj5);
IkReal x2490=(r11*r21);
IkReal x2491=(r11*r20);
IkReal x2492=(r22*sj3);
IkReal x2493=(r10*r20);
IkReal x2494=((1.0)*sj3*x2486);
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2487))+((cj3*x2488*x2489))+(((-1.0)*x2486*x2487*x2493))+(((-1.0)*x2487*x2490))+((cj3*x2486*x2490))+((cj3*x2489*x2491)))),-1);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal((((cj5*r11*x2492))+((r10*sj5*x2492)))),IkReal((((sj3*x2488))+(((-1.0)*sj3*x2489*x2493))+(((-1.0)*x2491*x2494))+(((-1.0)*x2488*x2494))+((sj3*x2489*x2490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2495.value)))+(x2496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2497=IKsin(j4);
IkReal x2498=IKcos(j4);
IkReal x2499=(cj2*sj1);
IkReal x2500=(cj1*sj2);
IkReal x2501=(cj5*sj3);
IkReal x2502=(cj5*r10);
IkReal x2503=(r00*sj5);
IkReal x2504=(sj1*sj2);
IkReal x2505=(r11*sj5);
IkReal x2506=(cj3*cj5);
IkReal x2507=(cj3*sj5);
IkReal x2508=(r21*sj5);
IkReal x2509=(cj1*cj2);
IkReal x2510=(sj3*sj5);
IkReal x2511=(r01*sj5);
IkReal x2512=((1.0)*x2498);
IkReal x2513=((1.0)*x2497);
IkReal x2514=(cj3*x2497);
IkReal x2515=(cj3*x2498);
IkReal x2516=(x2500+x2499);
evalcond[0]=(((x2497*x2508))+(((-1.0)*cj5*r20*x2513))+(((-1.0)*r22*x2512)));
evalcond[1]=(((x2497*x2511))+(((-1.0)*cj5*r00*x2513))+(((-1.0)*r02*x2512)));
evalcond[2]=((-1.0)+((x2497*x2505))+(((-1.0)*x2502*x2513))+(((-1.0)*r12*x2512)));
evalcond[3]=(((r10*x2510))+((x2505*x2515))+(((-1.0)*cj3*x2502*x2512))+((r11*x2501))+((r12*x2514)));
evalcond[4]=((((-1.0)*sj3*x2505*x2512))+((r10*x2507))+((r10*x2498*x2501))+((r11*x2506))+(((-1.0)*r12*sj3*x2513)));
evalcond[5]=(x2516+((r22*x2514))+(((-1.0)*r20*x2506*x2512))+((r21*x2498*x2507))+((r21*x2501))+((r20*x2510)));
evalcond[6]=(x2509+(((-1.0)*r00*x2506*x2512))+((r02*x2514))+((sj3*x2503))+(((-1.0)*x2504))+((r01*x2498*x2507))+((r01*x2501)));
evalcond[7]=(x2516+(((-1.0)*r01*x2510*x2512))+(((-1.0)*r02*sj3*x2513))+((r00*x2498*x2501))+((cj3*x2503))+((r01*x2506)));
evalcond[8]=(x2504+(((-1.0)*sj3*x2508*x2512))+(((-1.0)*x2509))+((r21*x2506))+(((-1.0)*r22*sj3*x2513))+((r20*x2507))+((r20*x2498*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2517=((1.0)*cj5);
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2517))+(((-1.0)*r20*sj5)))),-1);
if(!x2519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2518.value)+(((1.5707963267949)*(x2519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2520=IKsin(j4);
IkReal x2521=IKcos(j4);
IkReal x2522=(cj2*sj1);
IkReal x2523=(cj1*sj2);
IkReal x2524=(cj5*sj3);
IkReal x2525=(cj5*r10);
IkReal x2526=(r00*sj5);
IkReal x2527=(sj1*sj2);
IkReal x2528=(r11*sj5);
IkReal x2529=(cj3*cj5);
IkReal x2530=(cj3*sj5);
IkReal x2531=(r21*sj5);
IkReal x2532=(cj1*cj2);
IkReal x2533=(sj3*sj5);
IkReal x2534=(r01*sj5);
IkReal x2535=((1.0)*x2521);
IkReal x2536=((1.0)*x2520);
IkReal x2537=(cj3*x2520);
IkReal x2538=(cj3*x2521);
IkReal x2539=(x2523+x2522);
evalcond[0]=((((-1.0)*cj5*r20*x2536))+((x2520*x2531))+(((-1.0)*r22*x2535)));
evalcond[1]=((((-1.0)*r02*x2535))+((x2520*x2534))+(((-1.0)*cj5*r00*x2536)));
evalcond[2]=((-1.0)+(((-1.0)*x2525*x2536))+(((-1.0)*r12*x2535))+((x2520*x2528)));
evalcond[3]=(((r10*x2533))+((r11*x2524))+(((-1.0)*cj3*x2525*x2535))+((r12*x2537))+((x2528*x2538)));
evalcond[4]=(((r10*x2530))+((r11*x2529))+((r10*x2521*x2524))+(((-1.0)*sj3*x2528*x2535))+(((-1.0)*r12*sj3*x2536)));
evalcond[5]=(x2539+((r20*x2533))+((r21*x2521*x2530))+((r22*x2537))+((r21*x2524))+(((-1.0)*r20*x2529*x2535)));
evalcond[6]=(x2532+(((-1.0)*x2527))+(((-1.0)*r00*x2529*x2535))+((sj3*x2526))+((r01*x2524))+((r02*x2537))+((r01*x2521*x2530)));
evalcond[7]=(x2539+((cj3*x2526))+(((-1.0)*r02*sj3*x2536))+(((-1.0)*r01*x2533*x2535))+((r01*x2529))+((r00*x2521*x2524)));
evalcond[8]=(x2527+(((-1.0)*r22*sj3*x2536))+((r20*x2530))+(((-1.0)*sj3*x2531*x2535))+((r20*x2521*x2524))+(((-1.0)*x2532))+((r21*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
CheckValue<IkReal> x2541=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2540.value)+(((1.5707963267949)*(x2541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2542=IKsin(j4);
IkReal x2543=IKcos(j4);
IkReal x2544=(cj2*sj1);
IkReal x2545=(cj1*sj2);
IkReal x2546=(cj5*sj3);
IkReal x2547=(cj5*r10);
IkReal x2548=(r00*sj5);
IkReal x2549=(sj1*sj2);
IkReal x2550=(r11*sj5);
IkReal x2551=(cj3*cj5);
IkReal x2552=(cj3*sj5);
IkReal x2553=(r21*sj5);
IkReal x2554=(cj1*cj2);
IkReal x2555=(sj3*sj5);
IkReal x2556=(r01*sj5);
IkReal x2557=((1.0)*x2543);
IkReal x2558=((1.0)*x2542);
IkReal x2559=(cj3*x2542);
IkReal x2560=(cj3*x2543);
IkReal x2561=(x2545+x2544);
evalcond[0]=(((x2542*x2553))+(((-1.0)*cj5*r20*x2558))+(((-1.0)*r22*x2557)));
evalcond[1]=((((-1.0)*cj5*r00*x2558))+((x2542*x2556))+(((-1.0)*r02*x2557)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2557))+((x2542*x2550))+(((-1.0)*x2547*x2558)));
evalcond[3]=((((-1.0)*cj3*x2547*x2557))+((r11*x2546))+((r12*x2559))+((x2550*x2560))+((r10*x2555)));
evalcond[4]=(((r10*x2543*x2546))+((r11*x2551))+(((-1.0)*sj3*x2550*x2557))+(((-1.0)*r12*sj3*x2558))+((r10*x2552)));
evalcond[5]=(x2561+((r21*x2546))+((r22*x2559))+(((-1.0)*r20*x2551*x2557))+((r20*x2555))+((r21*x2543*x2552)));
evalcond[6]=(x2554+(((-1.0)*r00*x2551*x2557))+((sj3*x2548))+(((-1.0)*x2549))+((r01*x2546))+((r02*x2559))+((r01*x2543*x2552)));
evalcond[7]=(((cj3*x2548))+x2561+((r00*x2543*x2546))+((r01*x2551))+(((-1.0)*r01*x2555*x2557))+(((-1.0)*r02*sj3*x2558)));
evalcond[8]=(x2549+(((-1.0)*x2554))+(((-1.0)*r22*sj3*x2558))+((r20*x2552))+((r20*x2543*x2546))+((r21*x2551))+(((-1.0)*sj3*x2553*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2562=((-1.0)*r00);
IkReal x2564 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2564)==0){
continue;
}
IkReal x2563=pow(x2564,-0.5);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2562),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2565.value));
IkReal gconst13=(r01*x2563);
IkReal gconst14=(x2562*x2563);
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2566.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2567=((-1.0)*r00);
IkReal x2568=x2563;
CheckValue<IkReal> x2570 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2567),IKFAST_ATAN2_MAGTHRESH);
if(!x2570.valid){
continue;
}
IkReal x2569=((-1.0)*(x2570.value));
sj5=gconst13;
cj5=gconst14;
j5=x2569;
IkReal gconst12=x2569;
IkReal gconst13=(r01*x2568);
IkReal gconst14=(x2567*x2568);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2571=((1.0)*sj0);
IkReal x2572=((1.0)*cj0);
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2571))+(((-1.0)*r02*x2572)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*gconst13*r01*x2572))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x2571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x2574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2573.value)+(((1.5707963267949)*(x2574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2575=IKsin(j4);
IkReal x2576=IKcos(j4);
IkReal x2577=((1.0)*r22);
IkReal x2578=((1.0)*r12);
IkReal x2579=(gconst13*sj3);
IkReal x2580=(gconst13*r01);
IkReal x2581=(sj1*sj2);
IkReal x2582=(gconst14*sj3);
IkReal x2583=(cj2*sj1);
IkReal x2584=((1.0)*sj0);
IkReal x2585=(cj3*gconst13);
IkReal x2586=(cj3*gconst14);
IkReal x2587=((1.0)*cj0);
IkReal x2588=((1.0)*gconst14);
IkReal x2589=(cj1*sj2);
IkReal x2590=(sj3*x2575);
IkReal x2591=((1.0)*cj1*cj2);
IkReal x2592=(cj3*x2576);
IkReal x2593=(cj3*x2575);
IkReal x2594=(gconst13*x2575);
IkReal x2595=((1.0)*x2576);
IkReal x2596=(x2575*x2588);
evalcond[0]=((((-1.0)*r20*x2596))+((r21*x2594))+(((-1.0)*x2576*x2577)));
evalcond[1]=(cj0+((r11*x2594))+(((-1.0)*r10*x2596))+(((-1.0)*x2576*x2578)));
evalcond[2]=((((-1.0)*r00*x2596))+(((-1.0)*r02*x2595))+(((-1.0)*x2584))+((x2575*x2580)));
evalcond[3]=(((r22*x2593))+x2583+x2589+((r21*x2576*x2585))+(((-1.0)*r20*x2586*x2595))+((r20*x2579))+((r21*x2582)));
evalcond[4]=(x2581+((r20*x2576*x2582))+((r20*x2585))+(((-1.0)*r21*x2579*x2595))+(((-1.0)*x2591))+(((-1.0)*x2577*x2590))+((r21*x2586)));
evalcond[5]=((((-1.0)*r00*x2586*x2595))+((r01*x2582))+(((-1.0)*cj1*cj2*x2587))+((cj0*x2581))+((x2580*x2592))+((r00*x2579))+((r02*x2593)));
evalcond[6]=(((r10*x2579))+(((-1.0)*cj1*cj2*x2584))+((r11*x2576*x2585))+(((-1.0)*r10*x2586*x2595))+((r12*x2593))+((r11*x2582))+((sj0*x2581)));
evalcond[7]=(((r01*x2586))+((r00*x2585))+(((-1.0)*r01*x2579*x2595))+(((-1.0)*r02*x2590))+(((-1.0)*x2587*x2589))+(((-1.0)*x2583*x2587))+((r00*x2576*x2582)));
evalcond[8]=((((-1.0)*r11*x2579*x2595))+((r10*x2576*x2582))+(((-1.0)*x2578*x2590))+((r10*x2585))+((r11*x2586))+(((-1.0)*x2584*x2589))+(((-1.0)*x2583*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2597=((1.0)*gconst14);
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x2597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x2597)))),-1);
if(!x2599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2598.value)+(((1.5707963267949)*(x2599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2600=IKsin(j4);
IkReal x2601=IKcos(j4);
IkReal x2602=((1.0)*r22);
IkReal x2603=((1.0)*r12);
IkReal x2604=(gconst13*sj3);
IkReal x2605=(gconst13*r01);
IkReal x2606=(sj1*sj2);
IkReal x2607=(gconst14*sj3);
IkReal x2608=(cj2*sj1);
IkReal x2609=((1.0)*sj0);
IkReal x2610=(cj3*gconst13);
IkReal x2611=(cj3*gconst14);
IkReal x2612=((1.0)*cj0);
IkReal x2613=((1.0)*gconst14);
IkReal x2614=(cj1*sj2);
IkReal x2615=(sj3*x2600);
IkReal x2616=((1.0)*cj1*cj2);
IkReal x2617=(cj3*x2601);
IkReal x2618=(cj3*x2600);
IkReal x2619=(gconst13*x2600);
IkReal x2620=((1.0)*x2601);
IkReal x2621=(x2600*x2613);
evalcond[0]=((((-1.0)*x2601*x2602))+((r21*x2619))+(((-1.0)*r20*x2621)));
evalcond[1]=((((-1.0)*x2601*x2603))+cj0+(((-1.0)*r10*x2621))+((r11*x2619)));
evalcond[2]=((((-1.0)*r00*x2621))+((x2600*x2605))+(((-1.0)*r02*x2620))+(((-1.0)*x2609)));
evalcond[3]=(((r20*x2604))+(((-1.0)*r20*x2611*x2620))+((r21*x2601*x2610))+((r21*x2607))+((r22*x2618))+x2608+x2614);
evalcond[4]=(((r20*x2610))+(((-1.0)*x2602*x2615))+((r20*x2601*x2607))+(((-1.0)*r21*x2604*x2620))+(((-1.0)*x2616))+((r21*x2611))+x2606);
evalcond[5]=((((-1.0)*cj1*cj2*x2612))+(((-1.0)*r00*x2611*x2620))+((r02*x2618))+((x2605*x2617))+((cj0*x2606))+((r01*x2607))+((r00*x2604)));
evalcond[6]=(((r10*x2604))+(((-1.0)*r10*x2611*x2620))+((sj0*x2606))+((r11*x2601*x2610))+((r12*x2618))+((r11*x2607))+(((-1.0)*cj1*cj2*x2609)));
evalcond[7]=(((r00*x2610))+((r01*x2611))+(((-1.0)*x2608*x2612))+((r00*x2601*x2607))+(((-1.0)*x2612*x2614))+(((-1.0)*r02*x2615))+(((-1.0)*r01*x2604*x2620)));
evalcond[8]=((((-1.0)*x2608*x2609))+(((-1.0)*x2609*x2614))+(((-1.0)*x2603*x2615))+((r11*x2611))+((r10*x2610))+((r10*x2601*x2607))+(((-1.0)*r11*x2604*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2622=((-1.0)*r01);
IkReal x2624 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2624)==0){
continue;
}
IkReal x2623=pow(x2624,-0.5);
CheckValue<IkReal> x2625 = IKatan2WithCheck(IkReal(x2622),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2625.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2625.value))));
IkReal gconst16=(x2622*x2623);
IkReal gconst17=((1.0)*r00*x2623);
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2627=((-1.0)*r01);
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(x2627),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
IkReal x2628=((1.0)*(x2630.value));
IkReal x2629=x2623;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2628)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2628)));
IkReal gconst16=(x2627*x2629);
IkReal gconst17=((1.0)*r00*x2629);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2631=((-1.0)*r01);
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(x2631),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
IkReal x2632=((1.0)*(x2634.value));
IkReal x2633=x2623;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2632)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2632)));
IkReal gconst16=(x2631*x2633);
IkReal gconst17=((1.0)*r00*x2633);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2635=((-1.0)*r01);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(x2635),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
IkReal x2636=((1.0)*(x2638.value));
IkReal x2637=x2623;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2636)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2636)));
IkReal gconst16=(x2635*x2637);
IkReal gconst17=((1.0)*r00*x2637);
IkReal x2639=r02*r02;
IkReal x2640=(r12*sj0);
IkReal x2641=((1.0)*cj0);
IkReal x2642=x2623;
j4eval[0]=((IKabs(((((-1.0)*r02*x2641))+(((-1.0)*x2640)))))+(IKabs((((cj0*x2639*x2642))+(((-1.0)*x2641*x2642))+((r02*x2640*x2642))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2643=((1.0)*sj0);
IkReal x2644=((1.0)*cj0);
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2643))+(((-1.0)*r02*x2644)))),IkReal(((((-1.0)*gconst16*r11*x2643))+(((-1.0)*gconst16*r01*x2644))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2645.value)))+(x2646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2647=IKsin(j4);
IkReal x2648=IKcos(j4);
IkReal x2649=(cj3*gconst17);
IkReal x2650=(gconst16*r21);
IkReal x2651=(gconst17*sj3);
IkReal x2652=(gconst16*r20);
IkReal x2653=(sj1*sj2);
IkReal x2654=(gconst16*r10);
IkReal x2655=(cj2*sj1);
IkReal x2656=(gconst16*sj3);
IkReal x2657=((1.0)*cj0);
IkReal x2658=((1.0)*sj0);
IkReal x2659=(cj1*sj2);
IkReal x2660=((1.0)*x2648);
IkReal x2661=(gconst16*x2647);
IkReal x2662=(cj3*x2648);
IkReal x2663=(cj3*x2647);
IkReal x2664=((1.0)*cj1*cj2);
IkReal x2665=((1.0)*gconst17*x2647);
IkReal x2666=((1.0)*sj3*x2647);
evalcond[0]=((((-1.0)*r20*x2665))+((x2647*x2650))+(((-1.0)*r22*x2660)));
evalcond[1]=((((-1.0)*r12*x2660))+cj0+((r11*x2661))+(((-1.0)*r10*x2665)));
evalcond[2]=((((-1.0)*r00*x2665))+(((-1.0)*r02*x2660))+(((-1.0)*x2658))+((r01*x2661)));
evalcond[3]=(((r21*x2651))+((r22*x2663))+((x2650*x2662))+((sj3*x2652))+(((-1.0)*r20*x2649*x2660))+x2659+x2655);
evalcond[4]=(((r21*x2649))+((r20*x2648*x2651))+(((-1.0)*sj3*x2650*x2660))+(((-1.0)*x2664))+((cj3*x2652))+(((-1.0)*r22*x2666))+x2653);
evalcond[5]=(((r02*x2663))+((cj0*x2653))+(((-1.0)*r00*x2649*x2660))+((r00*x2656))+((gconst16*r01*x2662))+((r01*x2651))+(((-1.0)*cj1*cj2*x2657)));
evalcond[6]=(((sj0*x2653))+((r11*x2651))+((r12*x2663))+(((-1.0)*cj1*cj2*x2658))+(((-1.0)*r10*x2649*x2660))+((sj3*x2654))+((gconst16*r11*x2662)));
evalcond[7]=((((-1.0)*r02*x2666))+((r00*x2648*x2651))+((r01*x2649))+(((-1.0)*x2657*x2659))+(((-1.0)*r01*x2656*x2660))+((cj3*gconst16*r00))+(((-1.0)*x2655*x2657)));
evalcond[8]=((((-1.0)*r12*x2666))+(((-1.0)*r11*x2656*x2660))+((r11*x2649))+(((-1.0)*x2658*x2659))+((r10*x2648*x2651))+((cj3*x2654))+(((-1.0)*x2655*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2667=((1.0)*gconst17);
CheckValue<IkReal> x2668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2667))+(((-1.0)*gconst16*r10)))),-1);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x2667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2668.value)))+(x2669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2670=IKsin(j4);
IkReal x2671=IKcos(j4);
IkReal x2672=(cj3*gconst17);
IkReal x2673=(gconst16*r21);
IkReal x2674=(gconst17*sj3);
IkReal x2675=(gconst16*r20);
IkReal x2676=(sj1*sj2);
IkReal x2677=(gconst16*r10);
IkReal x2678=(cj2*sj1);
IkReal x2679=(gconst16*sj3);
IkReal x2680=((1.0)*cj0);
IkReal x2681=((1.0)*sj0);
IkReal x2682=(cj1*sj2);
IkReal x2683=((1.0)*x2671);
IkReal x2684=(gconst16*x2670);
IkReal x2685=(cj3*x2671);
IkReal x2686=(cj3*x2670);
IkReal x2687=((1.0)*cj1*cj2);
IkReal x2688=((1.0)*gconst17*x2670);
IkReal x2689=((1.0)*sj3*x2670);
evalcond[0]=((((-1.0)*r22*x2683))+((x2670*x2673))+(((-1.0)*r20*x2688)));
evalcond[1]=((((-1.0)*r12*x2683))+((r11*x2684))+cj0+(((-1.0)*r10*x2688)));
evalcond[2]=((((-1.0)*r02*x2683))+((r01*x2684))+(((-1.0)*r00*x2688))+(((-1.0)*x2681)));
evalcond[3]=(((x2673*x2685))+((r21*x2674))+((r22*x2686))+(((-1.0)*r20*x2672*x2683))+((sj3*x2675))+x2678+x2682);
evalcond[4]=(((r21*x2672))+(((-1.0)*sj3*x2673*x2683))+(((-1.0)*r22*x2689))+(((-1.0)*x2687))+((r20*x2671*x2674))+((cj3*x2675))+x2676);
evalcond[5]=(((r02*x2686))+(((-1.0)*cj1*cj2*x2680))+(((-1.0)*r00*x2672*x2683))+((gconst16*r01*x2685))+((cj0*x2676))+((r00*x2679))+((r01*x2674)));
evalcond[6]=(((sj0*x2676))+(((-1.0)*cj1*cj2*x2681))+((gconst16*r11*x2685))+(((-1.0)*r10*x2672*x2683))+((sj3*x2677))+((r12*x2686))+((r11*x2674)));
evalcond[7]=((((-1.0)*r02*x2689))+(((-1.0)*x2680*x2682))+((r00*x2671*x2674))+(((-1.0)*r01*x2679*x2683))+((r01*x2672))+((cj3*gconst16*r00))+(((-1.0)*x2678*x2680)));
evalcond[8]=((((-1.0)*r12*x2689))+(((-1.0)*r11*x2679*x2683))+(((-1.0)*x2681*x2682))+((r10*x2671*x2674))+((cj3*x2677))+((r11*x2672))+(((-1.0)*x2678*x2681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2690=((1.0)*gconst17);
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x2690)))),-1);
if(!x2691.valid){
continue;
}
CheckValue<IkReal> x2692 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2690))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2691.value)))+(x2692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2693=IKsin(j4);
IkReal x2694=IKcos(j4);
IkReal x2695=(cj3*gconst17);
IkReal x2696=(gconst16*r21);
IkReal x2697=(gconst17*sj3);
IkReal x2698=(gconst16*r20);
IkReal x2699=(sj1*sj2);
IkReal x2700=(gconst16*r10);
IkReal x2701=(cj2*sj1);
IkReal x2702=(gconst16*sj3);
IkReal x2703=((1.0)*cj0);
IkReal x2704=((1.0)*sj0);
IkReal x2705=(cj1*sj2);
IkReal x2706=((1.0)*x2694);
IkReal x2707=(gconst16*x2693);
IkReal x2708=(cj3*x2694);
IkReal x2709=(cj3*x2693);
IkReal x2710=((1.0)*cj1*cj2);
IkReal x2711=((1.0)*gconst17*x2693);
IkReal x2712=((1.0)*sj3*x2693);
evalcond[0]=((((-1.0)*r22*x2706))+(((-1.0)*r20*x2711))+((x2693*x2696)));
evalcond[1]=(((r11*x2707))+cj0+(((-1.0)*r10*x2711))+(((-1.0)*r12*x2706)));
evalcond[2]=(((r01*x2707))+(((-1.0)*r02*x2706))+(((-1.0)*x2704))+(((-1.0)*r00*x2711)));
evalcond[3]=(x2705+x2701+((r22*x2709))+(((-1.0)*r20*x2695*x2706))+((sj3*x2698))+((r21*x2697))+((x2696*x2708)));
evalcond[4]=(((r20*x2694*x2697))+(((-1.0)*x2710))+(((-1.0)*sj3*x2696*x2706))+((r21*x2695))+(((-1.0)*r22*x2712))+((cj3*x2698))+x2699);
evalcond[5]=(((r00*x2702))+(((-1.0)*cj1*cj2*x2703))+((cj0*x2699))+((r01*x2697))+(((-1.0)*r00*x2695*x2706))+((r02*x2709))+((gconst16*r01*x2708)));
evalcond[6]=(((r12*x2709))+(((-1.0)*cj1*cj2*x2704))+((sj0*x2699))+((gconst16*r11*x2708))+((sj3*x2700))+((r11*x2697))+(((-1.0)*r10*x2695*x2706)));
evalcond[7]=((((-1.0)*r01*x2702*x2706))+(((-1.0)*r02*x2712))+((r01*x2695))+((r00*x2694*x2697))+(((-1.0)*x2701*x2703))+((cj3*gconst16*r00))+(((-1.0)*x2703*x2705)));
evalcond[8]=(((r10*x2694*x2697))+(((-1.0)*x2704*x2705))+((cj3*x2700))+(((-1.0)*x2701*x2704))+((r11*x2695))+(((-1.0)*r12*x2712))+(((-1.0)*r11*x2702*x2706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2713=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2713;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2714=((1.0)*cj5);
IkReal x2715=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2714)));
j4eval[0]=x2715;
j4eval[1]=((IKabs(((((-1.0)*r20*x2714))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2716=cj5*cj5;
IkReal x2717=(cj3*r01);
IkReal x2718=(cj5*sj5);
IkReal x2719=((1.0)*cj3);
IkReal x2720=(((cj3*r00*r21*x2718))+(((-1.0)*r00*r20*x2716*x2719))+(((-1.0)*r21*x2717))+((r20*x2717*x2718))+((r21*x2716*x2717))+(((-1.0)*r02*r22*x2719)));
j4eval[0]=x2720;
j4eval[1]=IKsign(x2720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2721=cj5*cj5;
IkReal x2722=(cj3*r20);
IkReal x2723=(r21*sj3);
IkReal x2724=((1.0)*cj3);
IkReal x2725=(r01*r21);
IkReal x2726=(r01*sj3);
IkReal x2727=(r00*sj5);
IkReal x2728=(cj5*r01*sj5);
IkReal x2729=((1.0)*x2721);
CheckValue<IkReal> x2730 = IKatan2WithCheck(IkReal((((r22*sj3*x2727))+((cj5*r22*x2726)))),IkReal(((((-1.0)*cj5*r20*sj3*x2727))+(((-1.0)*r00*x2723*x2729))+((r00*x2723))+(((-1.0)*r20*x2726*x2729))+((x2723*x2728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2730.valid){
continue;
}
CheckValue<IkReal> x2731=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2724*x2725))+((cj3*x2721*x2725))+(((-1.0)*r00*x2722*x2729))+(((-1.0)*r02*r22*x2724))+((cj3*cj5*r21*x2727))+((x2722*x2728)))),-1);
if(!x2731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2730.value)+(((1.5707963267949)*(x2731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2732=IKsin(j4);
IkReal x2733=IKcos(j4);
IkReal x2734=(sj1*sj2);
IkReal x2735=(r11*sj5);
IkReal x2736=(cj5*r10);
IkReal x2737=(cj5*r01);
IkReal x2738=(cj5*r00);
IkReal x2739=((1.0)*cj1);
IkReal x2740=(cj3*sj5);
IkReal x2741=(r21*sj5);
IkReal x2742=(cj5*sj3);
IkReal x2743=(sj3*sj5);
IkReal x2744=(cj2*sj1);
IkReal x2745=(r01*sj5);
IkReal x2746=(cj3*cj5);
IkReal x2747=(cj5*r20);
IkReal x2748=(cj2*x2739);
IkReal x2749=((1.0)*x2733);
IkReal x2750=((1.0)*x2732);
IkReal x2751=(cj3*x2733);
IkReal x2752=(sj3*x2733);
IkReal x2753=(cj3*x2732);
evalcond[0]=((((-1.0)*x2747*x2750))+((x2732*x2741))+(((-1.0)*r22*x2749)));
evalcond[1]=((((-1.0)*x2736*x2750))+((x2732*x2735))+(((-1.0)*r12*x2749)));
evalcond[2]=((-1.0)+(((-1.0)*x2738*x2750))+(((-1.0)*r02*x2749))+((x2732*x2745)));
evalcond[3]=((((-1.0)*cj3*x2738*x2749))+((sj3*x2737))+((r01*x2733*x2740))+((r00*x2743))+((r02*x2753)));
evalcond[4]=((((-1.0)*r02*sj3*x2750))+((x2738*x2752))+((cj3*x2737))+((r00*x2740))+(((-1.0)*r01*x2743*x2749)));
evalcond[5]=(x2744+((r21*x2742))+((r22*x2753))+(((-1.0)*r20*x2746*x2749))+((cj1*sj2))+((r21*x2733*x2740))+((r20*x2743)));
evalcond[6]=(x2734+(((-1.0)*cj3*x2736*x2749))+((r11*x2742))+((r12*x2753))+((r10*x2743))+(((-1.0)*x2748))+((x2735*x2751)));
evalcond[7]=(x2734+((r21*x2746))+(((-1.0)*sj3*x2741*x2749))+((r20*x2740))+(((-1.0)*r22*sj3*x2750))+(((-1.0)*x2748))+((r20*x2733*x2742)));
evalcond[8]=(((r11*x2746))+(((-1.0)*sj2*x2739))+((r10*x2740))+(((-1.0)*sj3*x2735*x2749))+(((-1.0)*r12*sj3*x2750))+((x2736*x2752))+(((-1.0)*x2744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2754=((1.0)*cj5);
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2754)))),-1);
if(!x2756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2755.value)+(((1.5707963267949)*(x2756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2757=IKsin(j4);
IkReal x2758=IKcos(j4);
IkReal x2759=(sj1*sj2);
IkReal x2760=(r11*sj5);
IkReal x2761=(cj5*r10);
IkReal x2762=(cj5*r01);
IkReal x2763=(cj5*r00);
IkReal x2764=((1.0)*cj1);
IkReal x2765=(cj3*sj5);
IkReal x2766=(r21*sj5);
IkReal x2767=(cj5*sj3);
IkReal x2768=(sj3*sj5);
IkReal x2769=(cj2*sj1);
IkReal x2770=(r01*sj5);
IkReal x2771=(cj3*cj5);
IkReal x2772=(cj5*r20);
IkReal x2773=(cj2*x2764);
IkReal x2774=((1.0)*x2758);
IkReal x2775=((1.0)*x2757);
IkReal x2776=(cj3*x2758);
IkReal x2777=(sj3*x2758);
IkReal x2778=(cj3*x2757);
evalcond[0]=(((x2757*x2766))+(((-1.0)*x2772*x2775))+(((-1.0)*r22*x2774)));
evalcond[1]=(((x2757*x2760))+(((-1.0)*r12*x2774))+(((-1.0)*x2761*x2775)));
evalcond[2]=((-1.0)+(((-1.0)*x2763*x2775))+((x2757*x2770))+(((-1.0)*r02*x2774)));
evalcond[3]=(((r00*x2768))+((r01*x2758*x2765))+((sj3*x2762))+(((-1.0)*cj3*x2763*x2774))+((r02*x2778)));
evalcond[4]=(((x2763*x2777))+((r00*x2765))+((cj3*x2762))+(((-1.0)*r02*sj3*x2775))+(((-1.0)*r01*x2768*x2774)));
evalcond[5]=(x2769+((r22*x2778))+((cj1*sj2))+((r20*x2768))+(((-1.0)*r20*x2771*x2774))+((r21*x2758*x2765))+((r21*x2767)));
evalcond[6]=(x2759+((r10*x2768))+(((-1.0)*x2773))+(((-1.0)*cj3*x2761*x2774))+((x2760*x2776))+((r12*x2778))+((r11*x2767)));
evalcond[7]=(x2759+((r20*x2758*x2767))+((r20*x2765))+(((-1.0)*x2773))+((r21*x2771))+(((-1.0)*r22*sj3*x2775))+(((-1.0)*sj3*x2766*x2774)));
evalcond[8]=((((-1.0)*sj3*x2760*x2774))+(((-1.0)*x2769))+((r11*x2771))+((x2761*x2777))+(((-1.0)*r12*sj3*x2775))+((r10*x2765))+(((-1.0)*sj2*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2779.valid){
continue;
}
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2779.value)))+(x2780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2781=IKsin(j4);
IkReal x2782=IKcos(j4);
IkReal x2783=(sj1*sj2);
IkReal x2784=(r11*sj5);
IkReal x2785=(cj5*r10);
IkReal x2786=(cj5*r01);
IkReal x2787=(cj5*r00);
IkReal x2788=((1.0)*cj1);
IkReal x2789=(cj3*sj5);
IkReal x2790=(r21*sj5);
IkReal x2791=(cj5*sj3);
IkReal x2792=(sj3*sj5);
IkReal x2793=(cj2*sj1);
IkReal x2794=(r01*sj5);
IkReal x2795=(cj3*cj5);
IkReal x2796=(cj5*r20);
IkReal x2797=(cj2*x2788);
IkReal x2798=((1.0)*x2782);
IkReal x2799=((1.0)*x2781);
IkReal x2800=(cj3*x2782);
IkReal x2801=(sj3*x2782);
IkReal x2802=(cj3*x2781);
evalcond[0]=(((x2781*x2790))+(((-1.0)*x2796*x2799))+(((-1.0)*r22*x2798)));
evalcond[1]=(((x2781*x2784))+(((-1.0)*x2785*x2799))+(((-1.0)*r12*x2798)));
evalcond[2]=((-1.0)+((x2781*x2794))+(((-1.0)*x2787*x2799))+(((-1.0)*r02*x2798)));
evalcond[3]=(((r02*x2802))+(((-1.0)*cj3*x2787*x2798))+((sj3*x2786))+((r00*x2792))+((r01*x2782*x2789)));
evalcond[4]=((((-1.0)*r02*sj3*x2799))+((cj3*x2786))+((x2787*x2801))+((r00*x2789))+(((-1.0)*r01*x2792*x2798)));
evalcond[5]=(x2793+((r21*x2782*x2789))+((r21*x2791))+((cj1*sj2))+((r22*x2802))+(((-1.0)*r20*x2795*x2798))+((r20*x2792)));
evalcond[6]=(x2783+((r12*x2802))+(((-1.0)*x2797))+((r11*x2791))+(((-1.0)*cj3*x2785*x2798))+((x2784*x2800))+((r10*x2792)));
evalcond[7]=(x2783+(((-1.0)*x2797))+((r21*x2795))+(((-1.0)*r22*sj3*x2799))+((r20*x2782*x2791))+(((-1.0)*sj3*x2790*x2798))+((r20*x2789)));
evalcond[8]=(((x2785*x2801))+(((-1.0)*sj2*x2788))+((r11*x2795))+(((-1.0)*x2793))+(((-1.0)*r12*sj3*x2799))+(((-1.0)*sj3*x2784*x2798))+((r10*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2803=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2803;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2804=((1.0)*cj5);
IkReal x2805=((((-1.0)*r21*x2804))+(((-1.0)*r20*sj5)));
j4eval[0]=x2805;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2804))+((r11*sj5))))));
j4eval[2]=IKsign(x2805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2806=cj5*cj5;
IkReal x2807=(cj3*r01);
IkReal x2808=(cj5*sj5);
IkReal x2809=((1.0)*cj3);
IkReal x2810=(((r20*x2807*x2808))+((cj3*r00*r21*x2808))+(((-1.0)*r02*r22*x2809))+(((-1.0)*r21*x2807))+((r21*x2806*x2807))+(((-1.0)*r00*r20*x2806*x2809)));
j4eval[0]=x2810;
j4eval[1]=IKsign(x2810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2811=cj5*cj5;
IkReal x2812=(cj3*r20);
IkReal x2813=(r21*sj3);
IkReal x2814=((1.0)*cj3);
IkReal x2815=(r01*r21);
IkReal x2816=(r01*sj3);
IkReal x2817=(r00*sj5);
IkReal x2818=(cj5*r01*sj5);
IkReal x2819=((1.0)*x2811);
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign((((cj3*x2811*x2815))+((x2812*x2818))+(((-1.0)*r02*r22*x2814))+(((-1.0)*r00*x2812*x2819))+(((-1.0)*x2814*x2815))+((cj3*cj5*r21*x2817)))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal((((cj5*r22*x2816))+((r22*sj3*x2817)))),IkReal((((r00*x2813))+((x2813*x2818))+(((-1.0)*r00*x2813*x2819))+(((-1.0)*r20*x2816*x2819))+(((-1.0)*cj5*r20*sj3*x2817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2820.value)))+(x2821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2822=IKsin(j4);
IkReal x2823=IKcos(j4);
IkReal x2824=(cj2*sj1);
IkReal x2825=(cj1*sj2);
IkReal x2826=(r11*sj5);
IkReal x2827=(cj5*r10);
IkReal x2828=(sj1*sj2);
IkReal x2829=(cj5*r01);
IkReal x2830=(cj5*r00);
IkReal x2831=(cj3*sj5);
IkReal x2832=(r21*sj5);
IkReal x2833=(cj1*cj2);
IkReal x2834=(cj5*sj3);
IkReal x2835=(sj3*sj5);
IkReal x2836=(r01*sj5);
IkReal x2837=(cj3*cj5);
IkReal x2838=(cj5*r20);
IkReal x2839=((1.0)*x2823);
IkReal x2840=((1.0)*x2822);
IkReal x2841=(cj3*x2823);
IkReal x2842=(sj3*x2823);
IkReal x2843=(cj3*x2822);
IkReal x2844=(x2824+x2825);
evalcond[0]=(((x2822*x2832))+(((-1.0)*r22*x2839))+(((-1.0)*x2838*x2840)));
evalcond[1]=(((x2822*x2826))+(((-1.0)*r12*x2839))+(((-1.0)*x2827*x2840)));
evalcond[2]=((1.0)+(((-1.0)*x2830*x2840))+((x2822*x2836))+(((-1.0)*r02*x2839)));
evalcond[3]=(((r01*x2823*x2831))+((sj3*x2829))+(((-1.0)*cj3*x2830*x2839))+((r00*x2835))+((r02*x2843)));
evalcond[4]=((((-1.0)*r02*sj3*x2840))+((cj3*x2829))+(((-1.0)*r01*x2835*x2839))+((x2830*x2842))+((r00*x2831)));
evalcond[5]=((((-1.0)*r20*x2837*x2839))+((r20*x2835))+((r22*x2843))+((r21*x2823*x2831))+x2844+((r21*x2834)));
evalcond[6]=(((r10*x2835))+(((-1.0)*cj3*x2827*x2839))+((r12*x2843))+(((-1.0)*x2828))+((x2826*x2841))+x2833+((r11*x2834)));
evalcond[7]=(((r10*x2831))+(((-1.0)*r12*sj3*x2840))+(((-1.0)*sj3*x2826*x2839))+((x2827*x2842))+x2844+((r11*x2837)));
evalcond[8]=((((-1.0)*x2833))+((r20*x2823*x2834))+((r20*x2831))+(((-1.0)*sj3*x2832*x2839))+(((-1.0)*r22*sj3*x2840))+x2828+((r21*x2837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2845=((1.0)*cj5);
CheckValue<IkReal> x2846 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2846.valid){
continue;
}
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2845))+(((-1.0)*r20*sj5)))),-1);
if(!x2847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2846.value)+(((1.5707963267949)*(x2847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2848=IKsin(j4);
IkReal x2849=IKcos(j4);
IkReal x2850=(cj2*sj1);
IkReal x2851=(cj1*sj2);
IkReal x2852=(r11*sj5);
IkReal x2853=(cj5*r10);
IkReal x2854=(sj1*sj2);
IkReal x2855=(cj5*r01);
IkReal x2856=(cj5*r00);
IkReal x2857=(cj3*sj5);
IkReal x2858=(r21*sj5);
IkReal x2859=(cj1*cj2);
IkReal x2860=(cj5*sj3);
IkReal x2861=(sj3*sj5);
IkReal x2862=(r01*sj5);
IkReal x2863=(cj3*cj5);
IkReal x2864=(cj5*r20);
IkReal x2865=((1.0)*x2849);
IkReal x2866=((1.0)*x2848);
IkReal x2867=(cj3*x2849);
IkReal x2868=(sj3*x2849);
IkReal x2869=(cj3*x2848);
IkReal x2870=(x2851+x2850);
evalcond[0]=((((-1.0)*x2864*x2866))+((x2848*x2858))+(((-1.0)*r22*x2865)));
evalcond[1]=((((-1.0)*r12*x2865))+(((-1.0)*x2853*x2866))+((x2848*x2852)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2865))+(((-1.0)*x2856*x2866))+((x2848*x2862)));
evalcond[3]=(((r00*x2861))+(((-1.0)*cj3*x2856*x2865))+((sj3*x2855))+((r02*x2869))+((r01*x2849*x2857)));
evalcond[4]=(((cj3*x2855))+(((-1.0)*r02*sj3*x2866))+((x2856*x2868))+((r00*x2857))+(((-1.0)*r01*x2861*x2865)));
evalcond[5]=(((r21*x2849*x2857))+((r22*x2869))+((r21*x2860))+(((-1.0)*r20*x2863*x2865))+((r20*x2861))+x2870);
evalcond[6]=(((x2852*x2867))+(((-1.0)*cj3*x2853*x2865))+((r10*x2861))+((r12*x2869))+((r11*x2860))+(((-1.0)*x2854))+x2859);
evalcond[7]=(((x2853*x2868))+(((-1.0)*sj3*x2852*x2865))+((r11*x2863))+x2870+(((-1.0)*r12*sj3*x2866))+((r10*x2857)));
evalcond[8]=((((-1.0)*r22*sj3*x2866))+((r20*x2857))+((r21*x2863))+(((-1.0)*sj3*x2858*x2865))+((r20*x2849*x2860))+(((-1.0)*x2859))+x2854);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2871.value)+(((1.5707963267949)*(x2872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2873=IKsin(j4);
IkReal x2874=IKcos(j4);
IkReal x2875=(cj2*sj1);
IkReal x2876=(cj1*sj2);
IkReal x2877=(r11*sj5);
IkReal x2878=(cj5*r10);
IkReal x2879=(sj1*sj2);
IkReal x2880=(cj5*r01);
IkReal x2881=(cj5*r00);
IkReal x2882=(cj3*sj5);
IkReal x2883=(r21*sj5);
IkReal x2884=(cj1*cj2);
IkReal x2885=(cj5*sj3);
IkReal x2886=(sj3*sj5);
IkReal x2887=(r01*sj5);
IkReal x2888=(cj3*cj5);
IkReal x2889=(cj5*r20);
IkReal x2890=((1.0)*x2874);
IkReal x2891=((1.0)*x2873);
IkReal x2892=(cj3*x2874);
IkReal x2893=(sj3*x2874);
IkReal x2894=(cj3*x2873);
IkReal x2895=(x2876+x2875);
evalcond[0]=((((-1.0)*r22*x2890))+(((-1.0)*x2889*x2891))+((x2873*x2883)));
evalcond[1]=((((-1.0)*x2878*x2891))+((x2873*x2877))+(((-1.0)*r12*x2890)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2890))+((x2873*x2887))+(((-1.0)*x2881*x2891)));
evalcond[3]=(((sj3*x2880))+((r01*x2874*x2882))+((r00*x2886))+(((-1.0)*cj3*x2881*x2890))+((r02*x2894)));
evalcond[4]=(((cj3*x2880))+(((-1.0)*r02*sj3*x2891))+((r00*x2882))+(((-1.0)*r01*x2886*x2890))+((x2881*x2893)));
evalcond[5]=(((r20*x2886))+((r22*x2894))+((r21*x2885))+((r21*x2874*x2882))+x2895+(((-1.0)*r20*x2888*x2890)));
evalcond[6]=((((-1.0)*x2879))+((r11*x2885))+((r12*x2894))+((r10*x2886))+(((-1.0)*cj3*x2878*x2890))+x2884+((x2877*x2892)));
evalcond[7]=((((-1.0)*r12*sj3*x2891))+(((-1.0)*sj3*x2877*x2890))+((r11*x2888))+((x2878*x2893))+((r10*x2882))+x2895);
evalcond[8]=(((r20*x2882))+((r20*x2874*x2885))+(((-1.0)*r22*sj3*x2891))+((r21*x2888))+(((-1.0)*x2884))+(((-1.0)*sj3*x2883*x2890))+x2879);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2896=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2896);
rxp1_1=(px*r21);
rxp1_2=(r11*x2896);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2897=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2897);
rxp1_1=(px*r21);
rxp1_2=(r11*x2897);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2898=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x2898)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2898)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2899=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2899);
rxp1_1=(px*r21);
rxp1_2=(r11*x2899);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2901=IKPowWithIntegerCheck(r02,-1);
if(!x2901.valid){
continue;
}
IkReal x2900=x2901.value;
CheckValue<IkReal> x2902=IKPowWithIntegerCheck(cj3,-1);
if(!x2902.valid){
continue;
}
if( IKabs((x2900*(x2902.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x2900)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2900*(x2902.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x2900))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2900*(x2902.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x2900));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2903=IKsin(j4);
IkReal x2904=IKcos(j4);
IkReal x2905=(cj5*r10);
IkReal x2906=(sj1*sj2);
IkReal x2907=(cj5*sj3);
IkReal x2908=(r11*sj5);
IkReal x2909=(cj3*cj5);
IkReal x2910=(cj3*sj5);
IkReal x2911=(r21*sj5);
IkReal x2912=(cj2*sj1);
IkReal x2913=((1.0)*sj0);
IkReal x2914=((1.0)*cj0);
IkReal x2915=(sj3*sj5);
IkReal x2916=(cj1*sj2);
IkReal x2917=((1.0)*cj1*cj2);
IkReal x2918=((1.0)*x2903);
IkReal x2919=(r20*x2904);
IkReal x2920=(cj3*x2904);
IkReal x2921=(sj3*x2904);
evalcond[0]=((((-1.0)*r02*x2904))+(((-1.0)*x2913)));
evalcond[1]=((((-1.0)*cj5*r20*x2918))+((x2903*x2911)));
evalcond[2]=(cj0+((x2903*x2908))+(((-1.0)*x2905*x2918)));
evalcond[3]=(((cj0*x2906))+((cj3*r02*x2903))+(((-1.0)*cj1*cj2*x2914)));
evalcond[4]=((((-1.0)*x2912*x2914))+(((-1.0)*x2914*x2916))+(((-1.0)*r02*sj3*x2918)));
evalcond[5]=(((r20*x2915))+((r21*x2907))+(((-1.0)*x2909*x2919))+((r21*x2904*x2910))+x2912+x2916);
evalcond[6]=((((-1.0)*x2911*x2921))+((r20*x2910))+((x2907*x2919))+((r21*x2909))+x2906+(((-1.0)*x2917)));
evalcond[7]=((((-1.0)*x2905*x2920))+((x2908*x2920))+(((-1.0)*cj1*cj2*x2913))+((r11*x2907))+((r10*x2915))+((sj0*x2906)));
evalcond[8]=((((-1.0)*x2913*x2916))+(((-1.0)*x2912*x2913))+((x2905*x2921))+((r11*x2909))+(((-1.0)*x2908*x2921))+((r10*x2910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2922=((1.0)*sj3);
IkReal x2923=((1.0)*cj5);
CheckValue<IkReal> x2924=IKPowWithIntegerCheck(((((-1.0)*r10*x2923))+((r11*sj5))),-1);
if(!x2924.valid){
continue;
}
CheckValue<IkReal> x2925=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2923))),-1);
if(!x2925.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2924.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2925.value)*(((((-1.0)*r20*sj5*x2922))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2922)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2924.value)))+IKsqr(((x2925.value)*(((((-1.0)*r20*sj5*x2922))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2922))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2924.value)), ((x2925.value)*(((((-1.0)*r20*sj5*x2922))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2922))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2926=IKsin(j4);
IkReal x2927=IKcos(j4);
IkReal x2928=(cj5*r10);
IkReal x2929=(sj1*sj2);
IkReal x2930=(cj5*sj3);
IkReal x2931=(r11*sj5);
IkReal x2932=(cj3*cj5);
IkReal x2933=(cj3*sj5);
IkReal x2934=(r21*sj5);
IkReal x2935=(cj2*sj1);
IkReal x2936=((1.0)*sj0);
IkReal x2937=((1.0)*cj0);
IkReal x2938=(sj3*sj5);
IkReal x2939=(cj1*sj2);
IkReal x2940=((1.0)*cj1*cj2);
IkReal x2941=((1.0)*x2926);
IkReal x2942=(r20*x2927);
IkReal x2943=(cj3*x2927);
IkReal x2944=(sj3*x2927);
evalcond[0]=((((-1.0)*x2936))+(((-1.0)*r02*x2927)));
evalcond[1]=((((-1.0)*cj5*r20*x2941))+((x2926*x2934)));
evalcond[2]=(cj0+((x2926*x2931))+(((-1.0)*x2928*x2941)));
evalcond[3]=((((-1.0)*cj1*cj2*x2937))+((cj0*x2929))+((cj3*r02*x2926)));
evalcond[4]=((((-1.0)*x2935*x2937))+(((-1.0)*r02*sj3*x2941))+(((-1.0)*x2937*x2939)));
evalcond[5]=(((r21*x2927*x2933))+((r21*x2930))+(((-1.0)*x2932*x2942))+((r20*x2938))+x2939+x2935);
evalcond[6]=(((r21*x2932))+(((-1.0)*x2934*x2944))+(((-1.0)*x2940))+((r20*x2933))+((x2930*x2942))+x2929);
evalcond[7]=((((-1.0)*cj1*cj2*x2936))+(((-1.0)*x2928*x2943))+((sj0*x2929))+((r10*x2938))+((x2931*x2943))+((r11*x2930)));
evalcond[8]=(((r10*x2933))+(((-1.0)*x2931*x2944))+(((-1.0)*x2936*x2939))+(((-1.0)*x2935*x2936))+((x2928*x2944))+((r11*x2932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2945=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2945.valid){
continue;
}
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(r02,-1);
if(!x2946.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2945.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x2946.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2945.value)))+IKsqr(((-1.0)*sj0*(x2946.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2945.value)), ((-1.0)*sj0*(x2946.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2947=IKsin(j4);
IkReal x2948=IKcos(j4);
IkReal x2949=(cj5*r10);
IkReal x2950=(sj1*sj2);
IkReal x2951=(cj5*sj3);
IkReal x2952=(r11*sj5);
IkReal x2953=(cj3*cj5);
IkReal x2954=(cj3*sj5);
IkReal x2955=(r21*sj5);
IkReal x2956=(cj2*sj1);
IkReal x2957=((1.0)*sj0);
IkReal x2958=((1.0)*cj0);
IkReal x2959=(sj3*sj5);
IkReal x2960=(cj1*sj2);
IkReal x2961=((1.0)*cj1*cj2);
IkReal x2962=((1.0)*x2947);
IkReal x2963=(r20*x2948);
IkReal x2964=(cj3*x2948);
IkReal x2965=(sj3*x2948);
evalcond[0]=((((-1.0)*x2957))+(((-1.0)*r02*x2948)));
evalcond[1]=(((x2947*x2955))+(((-1.0)*cj5*r20*x2962)));
evalcond[2]=(cj0+((x2947*x2952))+(((-1.0)*x2949*x2962)));
evalcond[3]=(((cj3*r02*x2947))+(((-1.0)*cj1*cj2*x2958))+((cj0*x2950)));
evalcond[4]=((((-1.0)*x2956*x2958))+(((-1.0)*x2958*x2960))+(((-1.0)*r02*sj3*x2962)));
evalcond[5]=(((r21*x2948*x2954))+((r21*x2951))+((r20*x2959))+(((-1.0)*x2953*x2963))+x2956+x2960);
evalcond[6]=(((r21*x2953))+(((-1.0)*x2961))+((r20*x2954))+((x2951*x2963))+x2950+(((-1.0)*x2955*x2965)));
evalcond[7]=(((sj0*x2950))+(((-1.0)*cj1*cj2*x2957))+((r10*x2959))+((x2952*x2964))+((r11*x2951))+(((-1.0)*x2949*x2964)));
evalcond[8]=((((-1.0)*x2957*x2960))+((r10*x2954))+((x2949*x2965))+(((-1.0)*x2956*x2957))+((r11*x2953))+(((-1.0)*x2952*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2966=((1.0)*sj0);
IkReal x2967=((1.0)*cj0);
CheckValue<IkReal> x2968 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2967))+(((-1.0)*r12*x2966)))),IkReal(((((-1.0)*r11*sj5*x2966))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2968.value)+(((1.5707963267949)*(x2969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2970=IKsin(j4);
IkReal x2971=IKcos(j4);
IkReal x2972=(r11*sj5);
IkReal x2973=(cj5*r10);
IkReal x2974=(sj1*sj2);
IkReal x2975=(cj5*sj3);
IkReal x2976=((1.0)*sj0);
IkReal x2977=(cj3*cj5);
IkReal x2978=(cj3*sj5);
IkReal x2979=(r21*sj5);
IkReal x2980=(cj2*sj1);
IkReal x2981=(sj3*sj5);
IkReal x2982=(r01*sj5);
IkReal x2983=((1.0)*cj0);
IkReal x2984=(cj1*sj2);
IkReal x2985=((1.0)*x2971);
IkReal x2986=((1.0)*x2970);
IkReal x2987=(cj3*x2971);
IkReal x2988=((1.0)*cj1*cj2);
IkReal x2989=(cj3*x2970);
evalcond[0]=(((x2970*x2979))+(((-1.0)*r22*x2985))+(((-1.0)*cj5*r20*x2986)));
evalcond[1]=(((x2970*x2972))+cj0+(((-1.0)*r12*x2985))+(((-1.0)*x2973*x2986)));
evalcond[2]=(((x2970*x2982))+(((-1.0)*cj5*r00*x2986))+(((-1.0)*x2976))+(((-1.0)*r02*x2985)));
evalcond[3]=(((r20*x2981))+((r22*x2989))+x2980+x2984+((r21*x2971*x2978))+(((-1.0)*r20*x2977*x2985))+((r21*x2975)));
evalcond[4]=((((-1.0)*sj3*x2979*x2985))+((r20*x2971*x2975))+(((-1.0)*r22*sj3*x2986))+(((-1.0)*x2988))+((r20*x2978))+x2974+((r21*x2977)));
evalcond[5]=(((cj0*x2974))+((r01*x2975))+((r00*x2981))+((r01*x2971*x2978))+(((-1.0)*r00*x2977*x2985))+((r02*x2989))+(((-1.0)*cj1*cj2*x2983)));
evalcond[6]=((((-1.0)*cj1*cj2*x2976))+((r12*x2989))+((r11*x2975))+((sj0*x2974))+((x2972*x2987))+(((-1.0)*cj3*x2973*x2985))+((r10*x2981)));
evalcond[7]=(((r00*x2971*x2975))+(((-1.0)*r02*sj3*x2986))+((r01*x2977))+(((-1.0)*r01*x2981*x2985))+((r00*x2978))+(((-1.0)*x2980*x2983))+(((-1.0)*x2983*x2984)));
evalcond[8]=((((-1.0)*x2976*x2980))+(((-1.0)*x2976*x2984))+(((-1.0)*r12*sj3*x2986))+((r10*x2978))+(((-1.0)*sj3*x2972*x2985))+((sj3*x2971*x2973))+((r11*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2990=((1.0)*cj5);
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
CheckValue<IkReal> x2992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2990)))),-1);
if(!x2992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2991.value)+(((1.5707963267949)*(x2992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2993=IKsin(j4);
IkReal x2994=IKcos(j4);
IkReal x2995=(r11*sj5);
IkReal x2996=(cj5*r10);
IkReal x2997=(sj1*sj2);
IkReal x2998=(cj5*sj3);
IkReal x2999=((1.0)*sj0);
IkReal x3000=(cj3*cj5);
IkReal x3001=(cj3*sj5);
IkReal x3002=(r21*sj5);
IkReal x3003=(cj2*sj1);
IkReal x3004=(sj3*sj5);
IkReal x3005=(r01*sj5);
IkReal x3006=((1.0)*cj0);
IkReal x3007=(cj1*sj2);
IkReal x3008=((1.0)*x2994);
IkReal x3009=((1.0)*x2993);
IkReal x3010=(cj3*x2994);
IkReal x3011=((1.0)*cj1*cj2);
IkReal x3012=(cj3*x2993);
evalcond[0]=((((-1.0)*r22*x3008))+((x2993*x3002))+(((-1.0)*cj5*r20*x3009)));
evalcond[1]=(cj0+(((-1.0)*x2996*x3009))+(((-1.0)*r12*x3008))+((x2993*x2995)));
evalcond[2]=((((-1.0)*x2999))+(((-1.0)*r02*x3008))+(((-1.0)*cj5*r00*x3009))+((x2993*x3005)));
evalcond[3]=(x3007+x3003+((r21*x2994*x3001))+((r22*x3012))+(((-1.0)*r20*x3000*x3008))+((r20*x3004))+((r21*x2998)));
evalcond[4]=((((-1.0)*r22*sj3*x3009))+(((-1.0)*sj3*x3002*x3008))+(((-1.0)*x3011))+((r20*x3001))+((r21*x3000))+((r20*x2994*x2998))+x2997);
evalcond[5]=(((r01*x2994*x3001))+((cj0*x2997))+((r00*x3004))+((r01*x2998))+(((-1.0)*cj1*cj2*x3006))+(((-1.0)*r00*x3000*x3008))+((r02*x3012)));
evalcond[6]=((((-1.0)*cj3*x2996*x3008))+((x2995*x3010))+((sj0*x2997))+((r10*x3004))+((r12*x3012))+(((-1.0)*cj1*cj2*x2999))+((r11*x2998)));
evalcond[7]=(((r01*x3000))+((r00*x3001))+(((-1.0)*x3003*x3006))+(((-1.0)*r01*x3004*x3008))+(((-1.0)*r02*sj3*x3009))+(((-1.0)*x3006*x3007))+((r00*x2994*x2998)));
evalcond[8]=((((-1.0)*sj3*x2995*x3008))+(((-1.0)*r12*sj3*x3009))+((r10*x3001))+((sj3*x2994*x2996))+((r11*x3000))+(((-1.0)*x2999*x3003))+(((-1.0)*x2999*x3007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3013=((1.0)*cj5);
CheckValue<IkReal> x3014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3014.valid){
continue;
}
CheckValue<IkReal> x3015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3013)))),-1);
if(!x3015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3014.value)+(((1.5707963267949)*(x3015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3016=IKsin(j4);
IkReal x3017=IKcos(j4);
IkReal x3018=(r11*sj5);
IkReal x3019=(cj5*r10);
IkReal x3020=(sj1*sj2);
IkReal x3021=(cj5*sj3);
IkReal x3022=((1.0)*sj0);
IkReal x3023=(cj3*cj5);
IkReal x3024=(cj3*sj5);
IkReal x3025=(r21*sj5);
IkReal x3026=(cj2*sj1);
IkReal x3027=(sj3*sj5);
IkReal x3028=(r01*sj5);
IkReal x3029=((1.0)*cj0);
IkReal x3030=(cj1*sj2);
IkReal x3031=((1.0)*x3017);
IkReal x3032=((1.0)*x3016);
IkReal x3033=(cj3*x3017);
IkReal x3034=((1.0)*cj1*cj2);
IkReal x3035=(cj3*x3016);
evalcond[0]=((((-1.0)*cj5*r20*x3032))+(((-1.0)*r22*x3031))+((x3016*x3025)));
evalcond[1]=((((-1.0)*x3019*x3032))+cj0+((x3016*x3018))+(((-1.0)*r12*x3031)));
evalcond[2]=((((-1.0)*x3022))+(((-1.0)*r02*x3031))+((x3016*x3028))+(((-1.0)*cj5*r00*x3032)));
evalcond[3]=(((r21*x3017*x3024))+x3030+x3026+(((-1.0)*r20*x3023*x3031))+((r20*x3027))+((r21*x3021))+((r22*x3035)));
evalcond[4]=((((-1.0)*sj3*x3025*x3031))+x3020+((r20*x3017*x3021))+((r20*x3024))+(((-1.0)*r22*sj3*x3032))+((r21*x3023))+(((-1.0)*x3034)));
evalcond[5]=(((r02*x3035))+(((-1.0)*r00*x3023*x3031))+(((-1.0)*cj1*cj2*x3029))+((r00*x3027))+((r01*x3021))+((cj0*x3020))+((r01*x3017*x3024)));
evalcond[6]=(((r10*x3027))+((x3018*x3033))+((r11*x3021))+((sj0*x3020))+((r12*x3035))+(((-1.0)*cj1*cj2*x3022))+(((-1.0)*cj3*x3019*x3031)));
evalcond[7]=((((-1.0)*r02*sj3*x3032))+(((-1.0)*x3029*x3030))+(((-1.0)*x3026*x3029))+(((-1.0)*r01*x3027*x3031))+((r00*x3024))+((r00*x3017*x3021))+((r01*x3023)));
evalcond[8]=(((r10*x3024))+((r11*x3023))+((sj3*x3017*x3019))+(((-1.0)*sj3*x3018*x3031))+(((-1.0)*r12*sj3*x3032))+(((-1.0)*x3022*x3026))+(((-1.0)*x3022*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3036=cj5*cj5;
IkReal x3037=r21*r21;
IkReal x3038=r20*r20;
IkReal x3039=(r20*r21);
IkReal x3040=((1.0)*cj3);
IkReal x3041=((1.0)*cj5);
IkReal x3042=(cj1*sj2);
IkReal x3043=(cj5*sj5);
IkReal x3044=(sj3*sj5);
IkReal x3045=(cj2*sj1);
IkReal x3046=(r21*sj5);
CheckValue<IkReal> x3047=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x3039*x3043))+(((-1.0)*x3036*x3038*x3040))+((cj3*x3036*x3037))+(((-1.0)*x3037*x3040))+(((-1.0)*x3040*(r22*r22))))),-1);
if(!x3047.valid){
continue;
}
CheckValue<IkReal> x3048 = IKatan2WithCheck(IkReal((((r22*x3042))+((r22*x3045))+((cj5*r21*r22*sj3))+((r20*r22*x3044)))),IkReal(((((-1.0)*x3038*x3041*x3044))+((x3042*x3046))+(((-2.0)*sj3*x3036*x3039))+(((-1.0)*r20*x3041*x3045))+(((-1.0)*r20*x3041*x3042))+((sj3*x3037*x3043))+((sj3*x3039))+((x3045*x3046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3047.value)))+(x3048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3049=IKsin(j4);
IkReal x3050=IKcos(j4);
IkReal x3051=(cj3*r21);
IkReal x3052=(r21*sj5);
IkReal x3053=(r20*sj5);
IkReal x3054=(cj5*r20);
IkReal x3055=((1.0)*x3050);
IkReal x3056=((1.0)*x3049);
evalcond[0]=((((-1.0)*x3054*x3056))+((x3049*x3052))+(((-1.0)*r22*x3055)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x3050*x3051))+(((-1.0)*cj3*x3054*x3055))+((cj3*r22*x3049))+((sj3*x3053)));
evalcond[2]=(((cj3*x3053))+(((-1.0)*r22*sj3*x3056))+(((-1.0)*sj3*x3052*x3055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x3051))+((sj3*x3050*x3054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3057=(cj5*sj4);
IkReal x3058=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x3057))+(((-1.0)*cj4*r02))+((r01*x3058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3057))+(((-1.0)*r11*x3058))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3057))+(((-1.0)*cj4*r02))+((r01*x3058))))+IKsqr((((r10*x3057))+(((-1.0)*r11*x3058))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x3057))+(((-1.0)*cj4*r02))+((r01*x3058))), (((r10*x3057))+(((-1.0)*r11*x3058))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3059=IKcos(j0);
IkReal x3060=IKsin(j0);
IkReal x3061=(r02*sj4);
IkReal x3062=((1.0)*sj3);
IkReal x3063=(r12*sj4);
IkReal x3064=((0.21325)*cj2);
IkReal x3065=((1.0)*cj3);
IkReal x3066=((1.0)*sj2);
IkReal x3067=(r11*sj5);
IkReal x3068=(cj5*r01);
IkReal x3069=(cj5*r11);
IkReal x3070=(r00*sj5);
IkReal x3071=((1.0)*cj2);
IkReal x3072=(r10*sj5);
IkReal x3073=((1.0)*cj4);
IkReal x3074=(cj1*x3060);
IkReal x3075=(cj4*cj5*r00);
IkReal x3076=(cj1*x3059);
IkReal x3077=(cj4*cj5*r10);
IkReal x3078=(cj4*r01*sj5);
IkReal x3079=((0.21325)*sj1*sj2);
IkReal x3080=(sj1*x3059);
IkReal x3081=((1.0)*cj5*sj4);
IkReal x3082=(sj1*x3060);
evalcond[0]=(x3059+(((-1.0)*r12*x3073))+(((-1.0)*r10*x3081))+((sj4*x3067)));
evalcond[1]=((((-1.0)*x3060))+(((-1.0)*r02*x3073))+((r01*sj4*sj5))+(((-1.0)*r00*x3081)));
evalcond[2]=((((0.24365)*x3076))+(((-0.08535)*x3068))+(((-1.0)*x3059*x3079))+(((-1.0)*px))+((x3064*x3076))+(((-0.11235)*x3060))+(((-0.08535)*x3070)));
evalcond[3]=((((0.24365)*x3074))+(((-0.08535)*x3069))+(((0.11235)*x3059))+(((-1.0)*x3060*x3079))+(((-1.0)*py))+((x3064*x3074))+(((-0.08535)*x3072)));
evalcond[4]=(((sj3*x3068))+((cj3*x3061))+((sj3*x3070))+((cj3*x3078))+(((-1.0)*x3071*x3076))+(((-1.0)*x3065*x3075))+((sj2*x3080)));
evalcond[5]=(((cj3*cj4*x3067))+((sj3*x3069))+((cj3*x3063))+((sj3*x3072))+(((-1.0)*x3071*x3074))+(((-1.0)*x3065*x3077))+((sj2*x3082)));
evalcond[6]=((((-1.0)*x3066*x3076))+(((-1.0)*x3061*x3062))+((cj3*x3068))+(((-1.0)*x3071*x3080))+(((-1.0)*x3062*x3078))+((sj3*x3075))+((cj3*x3070)));
evalcond[7]=((((-1.0)*x3066*x3074))+(((-1.0)*x3062*x3063))+((cj3*x3069))+(((-1.0)*x3071*x3082))+((sj3*x3077))+((cj3*x3072))+(((-1.0)*cj4*x3062*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3083=cj5*cj5;
IkReal x3084=r21*r21;
IkReal x3085=r20*r20;
IkReal x3086=(r20*r21);
IkReal x3087=(sj1*sj2);
IkReal x3088=(r21*sj5);
IkReal x3089=(cj1*cj2);
IkReal x3090=(cj5*r20);
IkReal x3091=(cj5*sj5);
IkReal x3092=(cj3*r22);
IkReal x3093=(sj3*x3084);
CheckValue<IkReal> x3094=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x3086*x3091))+x3093+((sj3*x3083*x3085))+(((-1.0)*x3083*x3093)))),-1);
if(!x3094.valid){
continue;
}
CheckValue<IkReal> x3095 = IKatan2WithCheck(IkReal((((cj5*r21*x3092))+(((-1.0)*r22*x3089))+((r20*sj5*x3092))+((r22*x3087)))),IkReal((((cj3*x3086))+(((-1.0)*cj3*x3085*x3091))+(((-2.0)*cj3*x3083*x3086))+((cj3*x3084*x3091))+(((-1.0)*x3087*x3090))+((x3089*x3090))+((x3087*x3088))+(((-1.0)*x3088*x3089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3094.value)))+(x3095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3096=IKsin(j4);
IkReal x3097=IKcos(j4);
IkReal x3098=(cj3*r21);
IkReal x3099=(r21*sj5);
IkReal x3100=(r20*sj5);
IkReal x3101=(cj5*r20);
IkReal x3102=((1.0)*x3097);
IkReal x3103=((1.0)*x3096);
evalcond[0]=(((x3096*x3099))+(((-1.0)*r22*x3102))+(((-1.0)*x3101*x3103)));
evalcond[1]=(((cj2*sj1))+((sj5*x3097*x3098))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x3101*x3102))+((sj3*x3100))+((cj3*r22*x3096)));
evalcond[2]=(((sj3*x3097*x3101))+((cj5*x3098))+(((-1.0)*r22*sj3*x3103))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x3100))+(((-1.0)*sj3*x3099*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3104=(cj5*sj4);
IkReal x3105=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3104))+((r01*x3105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3104))+(((-1.0)*r11*x3105))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3104))+((r01*x3105))))+IKsqr((((r10*x3104))+(((-1.0)*r11*x3105))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3104))+((r01*x3105))), (((r10*x3104))+(((-1.0)*r11*x3105))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3106=IKcos(j0);
IkReal x3107=IKsin(j0);
IkReal x3108=(r02*sj4);
IkReal x3109=((1.0)*sj3);
IkReal x3110=(r12*sj4);
IkReal x3111=((0.21325)*cj2);
IkReal x3112=((1.0)*cj3);
IkReal x3113=((1.0)*sj2);
IkReal x3114=(r11*sj5);
IkReal x3115=(cj5*r01);
IkReal x3116=(cj5*r11);
IkReal x3117=(r00*sj5);
IkReal x3118=((1.0)*cj2);
IkReal x3119=(r10*sj5);
IkReal x3120=((1.0)*cj4);
IkReal x3121=(cj1*x3107);
IkReal x3122=(cj4*cj5*r00);
IkReal x3123=(cj1*x3106);
IkReal x3124=(cj4*cj5*r10);
IkReal x3125=(cj4*r01*sj5);
IkReal x3126=((0.21325)*sj1*sj2);
IkReal x3127=(sj1*x3106);
IkReal x3128=((1.0)*cj5*sj4);
IkReal x3129=(sj1*x3107);
evalcond[0]=(x3106+(((-1.0)*r10*x3128))+(((-1.0)*r12*x3120))+((sj4*x3114)));
evalcond[1]=((((-1.0)*r02*x3120))+(((-1.0)*x3107))+((r01*sj4*sj5))+(((-1.0)*r00*x3128)));
evalcond[2]=((((-0.08535)*x3117))+(((-0.08535)*x3115))+(((0.24365)*x3123))+(((-0.11235)*x3107))+(((-1.0)*px))+((x3111*x3123))+(((-1.0)*x3106*x3126)));
evalcond[3]=((((-0.08535)*x3116))+(((-0.08535)*x3119))+(((0.24365)*x3121))+(((0.11235)*x3106))+(((-1.0)*py))+(((-1.0)*x3107*x3126))+((x3111*x3121)));
evalcond[4]=(((sj3*x3115))+((sj3*x3117))+((cj3*x3125))+(((-1.0)*x3112*x3122))+((cj3*x3108))+((sj2*x3127))+(((-1.0)*x3118*x3123)));
evalcond[5]=(((cj3*x3110))+((sj3*x3119))+((sj3*x3116))+(((-1.0)*x3112*x3124))+((cj3*cj4*x3114))+((sj2*x3129))+(((-1.0)*x3118*x3121)));
evalcond[6]=((((-1.0)*x3109*x3125))+((cj3*x3117))+((cj3*x3115))+(((-1.0)*x3113*x3123))+(((-1.0)*x3108*x3109))+((sj3*x3122))+(((-1.0)*x3118*x3127)));
evalcond[7]=((((-1.0)*cj4*x3109*x3114))+((cj3*x3119))+((cj3*x3116))+(((-1.0)*x3113*x3121))+(((-1.0)*x3109*x3110))+((sj3*x3124))+(((-1.0)*x3118*x3129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur3 (94c2520780dab5c33308281144de298b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
