/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-03-25 10:39:34.691710
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.08535)*x4);
x13=((0.08535)*x2);
x14=((0.21325)*x2);
x15=((1.0)*x2);
x16=((1.0)*x6);
x17=((1.0)*x11);
x18=((0.3484)*x6);
x19=((1.0)*x4);
x20=((1.0)*x9);
x21=((0.3484)*x5);
x22=((1.0)*x5);
x23=((0.21325)*x4);
x24=(x0*x1);
x25=(x10*x9);
x26=(x1*x10);
x27=(x0*x9);
x28=(x10*x3);
x29=(x0*x3);
x30=(x1*x4);
x31=(x19*x29);
x32=(x19*x28);
x33=(x30+((x2*x3)));
x34=(((x1*x15))+(((-1.0)*x19*x3)));
x35=(x33*x5);
x36=(x34*x6);
x37=((((-1.0)*x31))+((x2*x24)));
x38=((((-1.0)*x32))+((x2*x26)));
x39=((((-1.0)*x15*x29))+(((-1.0)*x19*x24)));
x40=((((-1.0)*x15*x28))+(((-1.0)*x19*x26)));
x41=(x37*x5);
x42=(x38*x5);
x43=(x40*x6);
x44=(((x34*x5))+((x6*(((((-1.0)*x1*x19))+(((-1.0)*x15*x3)))))));
x45=(x41+((x39*x6)));
x46=(x42+x43);
x47=(((x6*(((((-1.0)*x15*x24))+x31))))+((x39*x5)));
x48=(((x6*(((((-1.0)*x15*x26))+x32))))+((x40*x5)));
x49=(x45*x9);
eerot[0]=(((x47*x8))+((x7*((x49+((x10*x11)))))));
eerot[1]=(((x47*x7))+((x8*(((((-1.0)*x20*x45))+(((-1.0)*x10*x17)))))));
eerot[2]=(x25+((x11*(((((-1.0)*x22*x37))+(((-1.0)*x16*x39)))))));
eetrans[0]=((((0.11)*x10))+((x5*((((x12*x24))+((x13*x29))))))+(((-0.24365)*x24))+((x23*x29))+(((-1.0)*x14*x24))+((x11*(((((-1.0)*x18*x39))+(((-1.0)*x21*x37))))))+((x6*(((((-1.0)*x12*x29))+((x13*x24))))))+(((0.3484)*x25)));
eerot[3]=(((x48*x8))+((x7*(((((-1.0)*x0*x11))+((x46*x9)))))));
eerot[4]=(((x8*(((((-1.0)*x20*x46))+((x0*x17))))))+((x48*x7)));
eerot[5]=((((-1.0)*x0*x20))+((x11*(((((-1.0)*x22*x38))+(((-1.0)*x16*x40)))))));
eetrans[1]=(((x11*(((((-1.0)*x18*x40))+(((-1.0)*x21*x38))))))+(((-0.3484)*x27))+(((-0.11)*x0))+(((-0.24365)*x26))+((x23*x28))+((x6*(((((-1.0)*x12*x28))+((x13*x26))))))+(((-1.0)*x14*x26))+((x5*((((x12*x26))+((x13*x28)))))));
eerot[6]=(((x7*x9*((x36+x35))))+((x44*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x36))+(((-1.0)*x35))))))+((x44*x7)));
eerot[8]=(x11*(((((-1.0)*x22*x33))+(((-1.0)*x16*x34)))));
IkReal x50=((1.0)*x1);
eetrans[2]=((0.1519)+(((-0.24365)*x3))+(((-1.0)*x14*x3))+((x5*(((((-1.0)*x13*x50))+((x12*x3))))))+((x6*((((x1*x12))+((x13*x3))))))+(((-1.0)*x23*x50))+((x11*(((((-1.0)*x18*x34))+(((-1.0)*x21*x33)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.3484)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.3484)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1519)+pz+(((-0.3484)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.1707)*npx);
IkReal x55=((0.1707)*npy);
IkReal x56=((0.08535)*r22);
IkReal x57=((0.08535)*r21);
IkReal x58=((-0.08535)*r20);
IkReal x59=((-1.0)*r20);
IkReal x60=((-1.0)*rxp0_2);
IkReal x61=((-0.08535)*r21);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*rxp1_2);
IkReal x64=((-1.0)*npx);
IkReal x65=((-1.0)*r22);
IkReal x66=((-1.0)*npz);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x54;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x59;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x54;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x59;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x55;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x55;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x56;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x66;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x56;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x63;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x63;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x59;
matrixinvcoeffs[133]=x64;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x59;
matrixinvcoeffs[151]=x64;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x66;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x56;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x66;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x62;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x63;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x64;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x59;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x60;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pp*pp;
IkReal x68=pz*pz;
IkReal x69=((0.1707)*pz);
IkReal x70=(pp*r21);
IkReal x71=((0.1707)*rxp1_2);
IkReal x72=(gclwh13_1*pp);
IkReal x73=(gclwh5_1*rxp2_2);
IkReal x74=(npy*pz);
IkReal x75=(pz*r20);
IkReal x76=(npz*pz);
IkReal x77=((0.000221452524)*r22);
IkReal x78=((0.22)*gclwh12_14);
IkReal x79=((0.014569245)*r21);
IkReal x80=(gclwh8_12*r20);
IkReal x81=(gclwh15_1*r20);
IkReal x82=(pp*r20);
IkReal x83=((0.22)*gclwh15_15);
IkReal x84=((0.00097973905125)*rxp1_2);
IkReal x85=((2.0)*gclwh11_10);
IkReal x86=(gclwh12_11*rxp1_2);
IkReal x87=(pp*r22);
IkReal x88=((0.0072846225)*r21);
IkReal x89=((0.3414)*rxp0_2);
IkReal x90=((0.014569245)*r20);
IkReal x91=((4.18103640120938e-5)*r21);
IkReal x92=((2.0)*gclwh4_11);
IkReal x93=(gclwh9_13*rxp0_2);
IkReal x94=(gclwh2_0*pz);
IkReal x95=(gclwh5_9*r22);
IkReal x96=(gclwh8_2*rxp0_2);
IkReal x97=(npx*pz);
IkReal x98=((0.014569245)*rxp1_2);
IkReal x99=((0.15598566)*rxp0_2);
IkReal x100=(gclwh13_0*pz);
IkReal x101=((0.018777)*rxp2_2);
IkReal x102=((0.0072846225)*r22);
IkReal x103=(gclwh14_14*rxp0_2);
IkReal x104=(gclwh13_0*rxp1_2);
IkReal x105=((0.1707)*pp);
IkReal x106=((0.00518928)*rxp1_2);
IkReal x107=((0.1707)*rxp2_2);
IkReal x108=(gclwh5_0*pz);
IkReal x109=((2.0)*gclwh9_10);
IkReal x110=((0.03645690896625)*rxp2_2);
IkReal x111=((2.0)*gclwh15_10);
IkReal x112=(gclwh13_1*r21);
IkReal x113=((2.0)*pp);
IkReal x114=(gclwh12_2*rxp1_2);
IkReal x115=(gclwh14_8*rxp0_2);
IkReal x116=(gclwh15_1*rxp0_2);
IkReal x117=(gclwh4_3*rxp2_2);
IkReal x118=((0.00332834402025)*r22);
IkReal x119=(gclwh12_14*rxp1_2);
IkReal x120=(gclwh4_2*pz);
IkReal x121=((4.18103640120938e-5)*r22);
IkReal x122=(gclwh10_2*r22);
IkReal x123=((0.03645690896625)*rxp1_2);
IkReal x124=(gclwh15_9*r20);
IkReal x125=(gclwh10_3*rxp2_2);
IkReal x126=((0.014569245)*r22);
IkReal x127=((0.000801308475)*r21);
IkReal x128=(gclwh4_8*rxp2_2);
IkReal x129=((2.0)*gclwh10_11);
IkReal x130=((0.0072846225)*r20);
IkReal x131=((0.02913849)*r21);
IkReal x132=((4.0)*gclwh11_10);
IkReal x133=(gclwh6_12*r21);
IkReal x134=((0.00310689149625)*r20);
IkReal x135=(gclwh13_9*r21);
IkReal x136=(gclwh12_8*r21);
IkReal x137=((4.18103640120938e-5)*r20);
IkReal x138=((0.3414)*rxp1_2);
IkReal x139=((2.0)*gclwh7_10);
IkReal x140=((1.0)*pp);
IkReal x141=(gclwh4_11*rxp2_2);
IkReal x142=((0.07280355)*rxp1_2);
IkReal x143=((0.00155579859013472)*r22);
IkReal x144=((1.0)*pz);
IkReal x145=(gclwh8_2*r20);
IkReal x146=((0.15598566)*rxp2_2);
IkReal x147=((4.0)*gclwh8_11);
IkReal x148=((0.000801308475)*r20);
IkReal x149=(gclwh7_0*pz);
IkReal x150=(gclwh15_9*rxp0_2);
IkReal x151=(gclwh10_2*pz);
IkReal x152=((0.00160261695)*r22);
IkReal x153=((4.0)*gclwh9_10);
IkReal x154=((0.6828)*rxp0_2);
IkReal x155=(gclwh5_9*rxp2_2);
IkReal x156=(gclwh9_13*r20);
IkReal x157=(gclwh6_2*r21);
IkReal x158=((0.00310689149625)*r21);
IkReal x159=((0.018777)*rxp0_2);
IkReal x160=((0.00310689149625)*r22);
IkReal x161=((0.00155579859013472)*r20);
IkReal x162=((0.1707)*rxp0_2);
IkReal x163=((0.08318211)*rxp1_2);
IkReal x164=((2.0)*gclwh6_11);
IkReal x165=((0.018777)*rxp1_2);
IkReal x166=(gclwh11_1*rxp2_2);
IkReal x167=((0.22)*gclwh4_14);
IkReal x168=(gclwh11_13*rxp2_2);
IkReal x169=(gclwh10_12*rxp2_2);
IkReal x170=(gclwh4_8*r22);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=((0.00160261695)*r20);
IkReal x173=(gclwh14_8*r20);
IkReal x174=(gclwh6_2*pz);
IkReal x175=((2.0)*gclwh5_10);
IkReal x176=((0.22)*gclwh5_15);
IkReal x177=(gclwh7_13*r21);
IkReal x178=((0.07280355)*rxp0_2);
IkReal x179=(gclwh11_0*pz);
IkReal x180=((0.02913849)*r22);
IkReal x181=(gclwh14_2*rxp0_2);
IkReal x182=(gclwh14_3*rxp0_2);
IkReal x183=((0.00155579859013472)*r21);
IkReal x184=((0.000801308475)*r22);
IkReal x185=((2.0)*gclwh8_11);
IkReal x186=((0.22)*gclwh14_14);
IkReal x187=((0.07280355)*rxp2_2);
IkReal x188=((4.0)*gclwh10_11);
IkReal x189=((0.22)*gclwh13_15);
IkReal x190=((4.0)*gclwh6_11);
IkReal x191=((0.02913849)*r20);
IkReal x192=((0.3414)*rxp2_2);
IkReal x193=((2.0)*gclwh13_10);
IkReal x194=((0.07799283)*rxp1_2);
IkReal x195=((0.00160261695)*r21);
IkReal x196=((4.0)*gclwh7_10);
IkReal x197=(gclwh4_14*rxp2_2);
IkReal x198=(gclwh8_12*rxp0_2);
IkReal x199=((2.0)*gclwh14_11);
IkReal x200=(gclwh12_2*pz);
IkReal x201=((0.018777)*x103);
IkReal x202=(gclwh6_5*x127);
IkReal x203=((0.018777)*x119);
IkReal x204=(gclwh10_5*x184);
IkReal x205=(gclwh8_5*x148);
IkReal x206=(gclwh4_14*x101);
IkReal x207=((0.014569245)*x128);
IkReal x208=(gclwh6_11*x88);
IkReal x209=(gclwh12_8*x98);
IkReal x210=(gclwh4_11*x107);
IkReal x211=(gclwh12_11*x71);
IkReal x212=(gclwh14_11*x162);
IkReal x213=(gclwh10_11*x102);
IkReal x214=((0.014569245)*x115);
IkReal x215=(gclwh8_11*x130);
IkReal x216=(gclwh13_9*x98);
IkReal x217=((0.014569245)*x155);
IkReal x218=(gclwh11_10*x102);
IkReal x219=(gclwh15_10*x162);
IkReal x220=(gclwh9_10*x130);
IkReal x221=(gclwh13_10*x71);
IkReal x222=(gclwh7_10*x88);
IkReal x223=((0.014569245)*x150);
IkReal x224=(gclwh5_10*x107);
IkReal x225=(gclwh15_15*x159);
IkReal x226=(gclwh7_7*x127);
IkReal x227=(gclwh5_15*x101);
IkReal x228=(gclwh9_7*x148);
IkReal x229=(gclwh13_15*x165);
IkReal x230=(gclwh11_7*x184);
IkReal x231=(gclwh14_14*x148);
IkReal x232=(gclwh10_5*x101);
IkReal x233=(gclwh8_5*x159);
IkReal x234=(gclwh4_14*x184);
IkReal x235=(gclwh12_14*x127);
IkReal x236=(gclwh6_5*x165);
IkReal x237=(gclwh8_11*x162);
IkReal x238=(gclwh10_11*x107);
IkReal x239=(gclwh12_11*x88);
IkReal x240=((0.000621742530375)*x170);
IkReal x241=(gclwh4_11*x102);
IkReal x242=((0.000621742530375)*x136);
IkReal x243=((0.000621742530375)*x173);
IkReal x244=(gclwh6_11*x71);
IkReal x245=(gclwh14_11*x130);
IkReal x246=(gclwh9_10*x162);
IkReal x247=((0.000621742530375)*x124);
IkReal x248=(gclwh5_10*x102);
IkReal x249=(gclwh11_10*x107);
IkReal x250=(gclwh13_10*x88);
IkReal x251=((0.000621742530375)*x135);
IkReal x252=(gclwh15_10*x130);
IkReal x253=(gclwh7_10*x71);
IkReal x254=((0.000621742530375)*x95);
IkReal x255=(gclwh7_7*x165);
IkReal x256=(gclwh5_15*x184);
IkReal x257=(gclwh13_15*x127);
IkReal x258=(gclwh15_15*x148);
IkReal x259=(gclwh9_7*x159);
IkReal x260=(gclwh11_7*x101);
IkReal x261=(gclwh14_11*x89);
IkReal x262=(gclwh10_11*x126);
IkReal x263=(gclwh8_11*x90);
IkReal x264=((0.037554)*x103);
IkReal x265=((0.037554)*x197);
IkReal x266=((0.037554)*x119);
IkReal x267=((0.3414)*x141);
IkReal x268=((0.3414)*x86);
IkReal x269=(gclwh6_11*x79);
IkReal x270=((0.037554)*gclwh13_15*rxp1_2);
IkReal x271=((0.037554)*gclwh5_15*rxp2_2);
IkReal x272=((0.037554)*gclwh15_15*rxp0_2);
IkReal x273=(gclwh15_10*x89);
IkReal x274=(gclwh9_10*x90);
IkReal x275=(gclwh11_10*x126);
IkReal x276=((0.0608)*x74);
IkReal x277=(gclwh15_1*x97);
IkReal x278=((2.0)*x68);
IkReal x279=((1.0)*x67);
IkReal x280=(r20*x67);
IkReal x281=(r21*x67);
IkReal x282=((0.11)*gclwh6_5*x70);
IkReal x283=((0.22)*gclwh8_5*x97);
IkReal x284=((0.22)*gclwh10_5*x76);
IkReal x285=((0.11)*gclwh10_5*x87);
IkReal x286=((0.22)*gclwh6_5*x74);
IkReal x287=((0.11)*gclwh8_5*x82);
IkReal x288=(gclwh12_3*pp*x71);
IkReal x289=(x181*x69);
IkReal x290=(gclwh6_3*x281);
IkReal x291=(x102*x151);
IkReal x292=(x129*x76);
IkReal x293=(x185*x97);
IkReal x294=(x151*x87);
IkReal x295=(x105*x117);
IkReal x296=((0.0072846225)*gclwh8_2*x75);
IkReal x297=(gclwh8_2*pp*x75);
IkReal x298=(x174*x88);
IkReal x299=(x164*x74);
IkReal x300=(x114*x69);
IkReal x301=(gclwh4_2*rxp2_2*x69);
IkReal x302=(x105*x182);
IkReal x303=(x71*x72);
IkReal x304=(gclwh7_1*x281);
IkReal x305=(x102*x179);
IkReal x306=(gclwh15_0*rxp0_2*x69);
IkReal x307=(x179*x87);
IkReal x308=(x105*x73);
IkReal x309=(x139*x74);
IkReal x310=((0.0072846225)*gclwh9_0*x75);
IkReal x311=(gclwh9_0*pp*x75);
IkReal x312=(x76*x85);
IkReal x313=(x109*x97);
IkReal x314=(x105*x116);
IkReal x315=(x104*x69);
IkReal x316=(gclwh5_0*rxp2_2*x69);
IkReal x317=(x149*x88);
IkReal x318=((0.11)*gclwh7_7*x70);
IkReal x319=((0.22)*gclwh9_7*x97);
IkReal x320=((0.22)*gclwh11_7*x76);
IkReal x321=((0.22)*gclwh7_7*x74);
IkReal x322=((0.11)*gclwh11_7*x87);
IkReal x323=((0.11)*gclwh9_7*x82);
IkReal x324=(x167*x76);
IkReal x325=(x74*x78);
IkReal x326=((0.11)*gclwh14_14*x82);
IkReal x327=((0.11)*gclwh4_14*x87);
IkReal x328=((0.11)*gclwh12_14*x70);
IkReal x329=(x186*x97);
IkReal x330=(gclwh14_8*npx*x69);
IkReal x331=(gclwh14_2*pp*x75);
IkReal x332=(gclwh12_3*x281);
IkReal x333=(gclwh3_2*pz*x88);
IkReal x334=((0.08535)*gclwh12_8*x70);
IkReal x335=(gclwh6_2*rxp1_2*x69);
IkReal x336=(x105*x125);
IkReal x337=(gclwh3_3*x281);
IkReal x338=(gclwh1_3*x280);
IkReal x339=((0.08535)*gclwh4_8*x87);
IkReal x340=((0.0072846225)*gclwh14_2*x75);
IkReal x341=(x199*x97);
IkReal x342=(gclwh4_3*r22*x67);
IkReal x343=((0.0072846225)*gclwh1_2*x75);
IkReal x344=(gclwh12_8*npy*x69);
IkReal x345=(gclwh4_8*npz*x69);
IkReal x346=(x69*x96);
IkReal x347=(x76*x92);
IkReal x348=((0.08535)*gclwh14_8*x82);
IkReal x349=(gclwh6_3*pp*x71);
IkReal x350=(gclwh10_2*rxp2_2*x69);
IkReal x351=(x102*x120);
IkReal x352=(x200*x88);
IkReal x353=(x171*x74);
IkReal x354=(x100*x88);
IkReal x355=(x67*x81);
IkReal x356=((0.08535)*gclwh15_9*x82);
IkReal x357=(x108*x87);
IkReal x358=(x100*x70);
IkReal x359=(x88*x94);
IkReal x360=((0.0072846225)*gclwh0_0*x75);
IkReal x361=(gclwh9_0*rxp0_2*x69);
IkReal x362=(x111*x97);
IkReal x363=(x102*x108);
IkReal x364=(gclwh2_1*x281);
IkReal x365=(gclwh5_9*npz*x69);
IkReal x366=(gclwh7_1*pp*x71);
IkReal x367=(gclwh11_0*rxp2_2*x69);
IkReal x368=(gclwh13_9*npy*x69);
IkReal x369=(gclwh0_1*x280);
IkReal x370=((0.08535)*gclwh5_9*x87);
IkReal x371=(gclwh15_9*npx*x69);
IkReal x372=((0.08535)*gclwh13_9*x70);
IkReal x373=(x105*x166);
IkReal x374=(x175*x76);
IkReal x375=(x193*x74);
IkReal x376=(gclwh7_0*rxp1_2*x69);
IkReal x377=((0.0072846225)*gclwh15_0*x75);
IkReal x378=((0.11)*gclwh13_15*x70);
IkReal x379=((0.11)*gclwh5_15*x87);
IkReal x380=(x83*x97);
IkReal x381=(x176*x76);
IkReal x382=((0.11)*gclwh15_15*x82);
IkReal x383=(x189*x74);
IkReal x384=(x185*x82);
IkReal x385=(x129*x87);
IkReal x386=(x190*x74);
IkReal x387=(x147*x97);
IkReal x388=(x164*x70);
IkReal x389=(x188*x76);
IkReal x390=(x85*x87);
IkReal x391=(x196*x74);
IkReal x392=(x109*x82);
IkReal x393=(gclwh6_2*npy*x278);
IkReal x394=(gclwh10_3*x113*x76);
IkReal x395=(gclwh10_3*r22*x279);
IkReal x396=(gclwh6_3*x113*x74);
IkReal x397=(gclwh6_2*x144*x70);
IkReal x398=(gclwh10_2*npz*x278);
IkReal x399=(gclwh8_2*npx*x278);
IkReal x400=(gclwh11_1*x113*x76);
IkReal x401=(gclwh7_0*npy*x278);
IkReal x402=(gclwh9_0*npx*x278);
IkReal x403=(gclwh11_1*r22*x279);
IkReal x404=(gclwh7_1*x113*x74);
IkReal x405=(gclwh11_0*npz*x278);
IkReal x406=(gclwh7_0*x144*x70);
IkReal x407=(gclwh12_2*npy*x278);
IkReal x408=(gclwh3_2*npy*x278);
IkReal x409=(gclwh1_2*npx*x278);
IkReal x410=(gclwh14_3*x113*x97);
IkReal x411=(gclwh4_2*npz*x278);
IkReal x412=(gclwh4_3*x113*x76);
IkReal x413=(gclwh12_2*x144*x70);
IkReal x414=(gclwh1_2*x140*x75);
IkReal x415=(gclwh3_3*x113*x74);
IkReal x416=((1.0)*x120*x87);
IkReal x417=(gclwh1_3*x113*x97);
IkReal x418=(gclwh3_2*x144*x70);
IkReal x419=(gclwh12_3*x113*x74);
IkReal x420=(gclwh14_2*npx*x278);
IkReal x421=(gclwh14_3*r20*x279);
IkReal x422=(gclwh0_0*npx*x278);
IkReal x423=(gclwh2_0*npy*x278);
IkReal x424=(gclwh5_1*x113*x76);
IkReal x425=((2.0)*x72*x74);
IkReal x426=(gclwh15_0*npx*x278);
IkReal x427=(gclwh2_1*x113*x74);
IkReal x428=(gclwh0_1*x113*x97);
IkReal x429=(gclwh5_0*npz*x278);
IkReal x430=(gclwh13_0*npy*x278);
IkReal x431=(gclwh0_0*x140*x75);
IkReal x432=(gclwh15_0*x140*x75);
IkReal x433=((1.0)*x70*x94);
IkReal x434=(x112*x279);
IkReal x435=(gclwh5_1*r22*x279);
IkReal x436=(x113*x277);
IkReal x437=(x270+x271);
IkReal x438=(x265+x266);
IkReal x439=(x259+x260);
IkReal x440=(x232+x233);
IkReal x441=(x206+x203);
IkReal x442=(x229+x227);
IkReal x443=(x212+x213+x215+x299);
IkReal x444=(x309+x218+x219+x220);
IkReal x445=(x375+x374+x252+x253);
IkReal x446=(x353+x347+x245+x244);
IkReal x447=(x320+x319+x318+x226);
IkReal x448=(x202+x284+x283+x282);
IkReal x449=(x324+x325+x326+x231);
IkReal x450=(x382+x383+x381+x258);
IkReal x451=(x341+x238+x239+x237+x241);
IkReal x452=(x362+x250+x246+x249+x248);
IkReal x453=(x313+x312+x221+x222+x224);
IkReal x454=(x210+x211+x208+x292+x293);
IkReal x455=(x327+x328+x329+x234+x235);
IkReal x456=(x380+x379+x378+x256+x257);
IkReal x457=(x205+x204+x287+x286+x285);
IkReal x458=(x321+x322+x323+x228+x230);
IkReal x459=(x387+x388+x389+x267+x269+x268);
IkReal x460=(((gclwh7_10*x79))+((x153*x97))+((gclwh5_10*x192))+((x139*x70))+((x132*x76))+((gclwh13_10*x138)));
IkReal x461=(x386+x384+x385+x261+x263+x262);
IkReal x462=(x391+x390+x392+x274+x275+x273);
IkReal x463=(x315+x314+x317+x316+x223+x403+x402+x405+x404+x406);
IkReal x464=(x302+x300+x301+x395+x397+x396+x399+x398+x214+x298);
IkReal x465=(x394+x393+x207+x209+x290+x291+x294+x295+x296+x297+x289+x288);
IkReal x466=(x308+x306+x307+x304+x305+x303+x311+x310+x216+x217+x401+x400);
IkReal x467=(x377+x376+x373+x372+x371+x370+x254+x251+x429+x428+x427+x430+x431+x432+x433+x434+x435+x436);
IkReal x468=(x339+x338+x333+x332+x331+x330+x337+x336+x335+x334+x342+x343+x340+x242+x240+x407+x409+x408+x410+x411+x69);
IkReal x469=(x351+x350+x352+x346+x344+x345+x348+x349+x243+x412+x413+x416+x417+x414+x415+x418+x419+x421+x420);
IkReal x470=(x355+x354+x357+x356+x359+x358+x368+x369+x360+x361+x363+x364+x365+x366+x367+x247+x426+x425+x424+x423+x422+x69);
op[0]=((((0.9138)*gclwh10_12*x76))+(((-0.4569)*gclwh10_12*x87))+(((-1.0)*gclwh10_12*x118))+(((0.9138)*gclwh8_12*x97))+(((-1.0)*x201))+(((0.4569)*gclwh6_12*x70))+(((-1.0)*gclwh12_8*x194))+(((-1.0)*x457))+x448+x441+(((0.07799283)*x115))+(((0.00332834402025)*x133))+(((-0.4569)*pp*x80))+(((-0.00332834402025)*x80))+(((-0.9138)*gclwh6_12*x74))+(((-0.07799283)*x128)));
op[1]=((((0.03645690896625)*x182))+(((0.427145975)*gclwh6_3*x74))+(((-0.427145975)*gclwh10_3*x76))+(((-1.0)*x464))+((gclwh10_3*x143))+(((-1.0)*x454))+(((-1.0)*gclwh4_3*x110))+(((-1.0)*gclwh6_3*x183))+x443+x465+(((0.206288365)*gclwh10_3*x87))+(((-1.0)*gclwh6_11*x70))+(((-1.0)*gclwh12_3*x123))+((gclwh8_11*x82))+(((-0.206288365)*gclwh6_3*x70))+((gclwh10_11*x87)));
op[2]=((-0.09383)+(((-1.0)*x459))+x461);
op[3]=((((-0.08318211)*x115))+(((-1.0)*x438))+(((-1.0)*gclwh4_2*x187))+((gclwh8_2*x134))+(((-0.00310689149625)*x157))+(((0.00310689149625)*x122))+(((-0.853)*gclwh8_2*x97))+(((-0.853)*gclwh10_2*x76))+(((0.08318211)*x128))+(((-0.07280355)*x114))+x264+(((0.4265)*gclwh10_2*x87))+((gclwh12_8*x163))+(((0.853)*gclwh6_2*x74))+((gclwh14_2*x178))+(((0.4265)*gclwh8_2*x82))+(((-0.4265)*gclwh6_2*x70)));
op[4]=((((-1.0)*gclwh10_12*x77))+(((-1.0)*x441))+(((-0.0304)*gclwh10_12*x87))+((gclwh12_8*x106))+(((0.0304)*gclwh6_12*x70))+(((0.00518928)*x128))+(((-0.0304)*pp*x80))+(((-0.000221452524)*x80))+(((0.0608)*gclwh8_12*x97))+(((-1.0)*x457))+x201+x448+(((-0.00518928)*x115))+(((-1.0)*gclwh6_12*x276))+(((0.000221452524)*x133))+(((0.0608)*gclwh10_12*x76)));
op[5]=((((-1.0)*x443))+(((0.001545085)*gclwh6_3*x70))+(((-1.0)*gclwh8_11*x82))+((gclwh6_11*x70))+(((0.011479075)*gclwh6_3*x74))+(((-1.0)*gclwh10_11*x87))+((gclwh10_3*x121))+(((-0.00097973905125)*x117))+(((-1.0)*x464))+(((-1.0)*gclwh6_3*x91))+(((0.00097973905125)*x182))+(((-0.001545085)*gclwh10_3*x87))+x454+x465+(((-1.0)*gclwh12_3*x84))+(((-0.011479075)*gclwh10_3*x76)));
op[6]=((((-1.0)*x444))+(((-1.0)*gclwh13_1*x123))+((gclwh7_10*x70))+(((0.427145975)*gclwh7_1*x74))+(((-1.0)*gclwh7_1*x183))+(((0.206288365)*gclwh11_1*x87))+(((-0.03645690896625)*x73))+(((-1.0)*x463))+((gclwh11_1*x143))+x453+x466+(((0.03645690896625)*x116))+(((-0.427145975)*gclwh11_1*x76))+(((-1.0)*gclwh9_10*x82))+(((-1.0)*gclwh11_10*x87))+(((-0.206288365)*gclwh7_1*x70)));
op[7]=((((-0.4569)*gclwh11_13*x87))+(((-1.0)*gclwh11_13*x118))+(((-1.0)*gclwh13_9*x194))+(((-0.4569)*gclwh9_13*x82))+(((0.07799283)*x150))+(((0.00332834402025)*x177))+(((-1.0)*x458))+(((-0.00332834402025)*x156))+x447+x442+(((0.9138)*gclwh9_13*x97))+(((0.9138)*gclwh11_13*x76))+(((-0.07799283)*x155))+(((-1.0)*x225))+(((-0.9138)*gclwh7_13*x74))+(((0.4569)*gclwh7_13*x70)));
op[8]=((((-0.4265)*gclwh7_0*x70))+(((0.4265)*gclwh11_0*x87))+(((0.853)*gclwh7_0*x74))+(((-0.08318211)*x155))+(((-0.853)*gclwh11_0*x76))+(((0.08318211)*x150))+(((-1.0)*gclwh13_9*x163))+(((-0.07280355)*x104))+((gclwh15_0*x178))+(((0.4265)*gclwh9_0*x82))+x437+(((-1.0)*gclwh7_0*x158))+((gclwh9_0*x134))+(((-0.853)*gclwh9_0*x97))+(((-1.0)*x272))+(((-1.0)*gclwh5_0*x187))+((gclwh11_0*x160)));
op[9]=((-0.09383)+(((-1.0)*x460))+x462);
op[10]=((((-0.00097973905125)*x73))+(((-0.011479075)*gclwh11_1*x76))+(((0.011479075)*gclwh7_1*x74))+(((-0.001545085)*gclwh11_1*x87))+(((-1.0)*x463))+(((-1.0)*gclwh7_10*x70))+(((-1.0)*x453))+(((-1.0)*gclwh7_1*x91))+x444+x466+((gclwh11_10*x87))+((gclwh11_1*x121))+((gclwh9_10*x82))+(((0.00097973905125)*x116))+(((0.001545085)*gclwh7_1*x70))+(((-1.0)*gclwh13_1*x84)));
op[11]=((((-1.0)*x442))+(((-0.000221452524)*x156))+(((0.00518928)*x155))+(((-1.0)*gclwh11_13*x77))+(((-0.0304)*gclwh11_13*x87))+(((-1.0)*x458))+x225+x447+(((0.0608)*gclwh11_13*x76))+(((-1.0)*gclwh7_13*x276))+((gclwh13_9*x106))+(((0.0304)*gclwh7_13*x70))+(((0.0608)*gclwh9_13*x97))+(((-0.00518928)*x150))+(((-0.0304)*gclwh9_13*x82))+(((0.000221452524)*x177)));
op[12]=((((-1.0)*x449))+(((-0.9138)*gclwh14_8*x97))+(((-0.4569)*gclwh4_8*x87))+(((-1.0)*gclwh6_12*x194))+(((-1.0)*gclwh4_8*x118))+(((0.9138)*gclwh4_8*x76))+(((-0.4569)*gclwh12_8*x70))+(((0.07799283)*x169))+(((0.00332834402025)*x173))+(((-1.0)*x236))+x440+x455+(((0.4569)*gclwh14_8*x82))+(((0.07799283)*x198))+(((-0.00332834402025)*x136))+(((0.9138)*gclwh12_8*x74)));
op[13]=((-0.22085761)+(((0.427145975)*gclwh1_3*x97))+(((0.206288365)*gclwh14_3*x82))+(((0.427145975)*gclwh4_3*x76))+(((-1.0)*gclwh12_3*x183))+(((-1.0)*gclwh4_11*x87))+(((0.427145975)*gclwh12_3*x74))+(((-0.22085761)*gclwh3_3*x70))+(((-1.0)*x469))+(((-1.0)*gclwh12_11*x70))+((gclwh3_3*x183))+(((-1.0)*x451))+((gclwh14_11*x82))+((gclwh6_3*x123))+(((-1.0)*gclwh10_3*x110))+x446+x468+(((-0.206288365)*gclwh4_3*x87))+(((-0.206288365)*gclwh12_3*x70))+((gclwh1_3*x161))+((gclwh14_3*x161))+(((-0.22085761)*gclwh1_3*x82))+(((-1.0)*gclwh4_3*x143))+(((-0.427145975)*gclwh14_3*x97))+(((0.427145975)*gclwh3_3*x74)));
op[14]=((-0.05197952)+(((-1.0)*gclwh10_11*x192))+((gclwh6_11*x138))+((x199*x82))+(((-1.0)*gclwh12_11*x79))+(((4.0)*gclwh4_11*x76))+(((-1.0)*gclwh4_11*x126))+(((-1.0)*x87*x92))+((gclwh14_11*x90))+(((-4.0)*gclwh14_11*x97))+(((-1.0)*gclwh8_11*x89))+(((4.0)*gclwh12_11*x74))+(((-1.0)*x171*x70)));
op[15]=(((x186*x82))+(((-0.9746)*gclwh12_8*x74))+(((-0.4265)*gclwh4_2*x87))+(((-0.4265)*gclwh3_2*x70))+(((-0.4265)*gclwh1_2*x82))+(((0.4265)*gclwh14_2*x82))+(((-1.0)*gclwh12_2*x158))+((gclwh14_14*x172))+(((0.4873)*gclwh4_8*x87))+(((-0.00354979654425)*x173))+(((0.44)*gclwh12_14*x74))+(((-1.0)*gclwh4_2*x160))+(((-1.0)*x70*x78))+(((0.853)*gclwh3_2*x74))+(((-1.0)*gclwh12_14*x195))+(((-0.4265)*gclwh12_2*x70))+(((-1.0)*gclwh4_14*x152))+(((0.853)*gclwh1_2*x97))+(((-0.4873)*gclwh14_8*x82))+((gclwh14_2*x134))+(((0.9746)*gclwh14_8*x97))+(((0.4873)*gclwh12_8*x70))+(((-0.07280355)*x96))+(((0.853)*gclwh12_2*x74))+(((-1.0)*x167*x87))+(((-1.0)*gclwh10_2*x187))+(((0.00354979654425)*x170))+(((-0.9746)*gclwh4_8*x76))+(((-0.44)*gclwh14_14*x97))+((gclwh3_2*x158))+(((0.853)*gclwh4_2*x76))+((gclwh1_2*x134))+(((0.00354979654425)*x136))+((gclwh6_2*x142))+(((0.44)*gclwh4_14*x76))+(((-0.853)*gclwh14_2*x97)));
op[16]=((((0.00518928)*x198))+(((-0.0608)*gclwh4_8*x76))+(((-0.000221452524)*x173))+(((-1.0)*gclwh12_8*x276))+(((-1.0)*gclwh6_12*x106))+(((0.0608)*gclwh14_8*x97))+(((-1.0)*x455))+(((0.0304)*gclwh4_8*x87))+(((-1.0)*x236))+x449+x440+(((0.000221452524)*x136))+((gclwh4_8*x77))+(((-0.0304)*gclwh14_8*x82))+(((0.0304)*gclwh12_8*x70))+(((0.00518928)*x169)));
op[17]=((0.01302416)+(((0.011479075)*gclwh1_3*x97))+(((-1.0)*x446))+(((0.001545085)*gclwh12_3*x70))+(((0.001545085)*gclwh4_3*x87))+(((-0.01302416)*gclwh1_3*x82))+(((-1.0)*gclwh14_11*x82))+(((0.011479075)*gclwh3_3*x74))+(((0.011479075)*gclwh12_3*x74))+(((-1.0)*gclwh4_3*x121))+(((0.011479075)*gclwh4_3*x76))+((gclwh12_11*x70))+(((-1.0)*x469))+((gclwh14_3*x137))+((gclwh4_11*x87))+((gclwh3_3*x91))+(((-1.0)*gclwh12_3*x91))+x451+x468+(((-0.00097973905125)*x125))+((gclwh6_3*x84))+(((-0.001545085)*gclwh14_3*x82))+(((-0.01302416)*gclwh3_3*x70))+(((-0.011479075)*gclwh14_3*x97))+((gclwh1_3*x137)));
op[18]=((0.22085761)+(((0.206288365)*gclwh5_1*x87))+((gclwh15_10*x82))+(((-0.22085761)*gclwh0_1*x82))+(((-1.0)*gclwh13_10*x70))+(((0.427145975)*gclwh2_1*x74))+((gclwh5_1*x143))+(((-0.427145975)*gclwh5_1*x76))+(((-1.0)*gclwh7_1*x123))+(((-1.0)*gclwh5_10*x87))+(((0.206288365)*gclwh13_1*x70))+(((-0.427145975)*gclwh13_1*x74))+(((0.427145975)*gclwh0_1*x97))+(((-0.206288365)*pp*x81))+(((-1.0)*x467))+(((-1.0)*x452))+x445+x470+(((0.427145975)*x277))+((gclwh0_1*x161))+(((-0.22085761)*gclwh2_1*x70))+(((-0.00155579859013472)*x81))+((gclwh2_1*x183))+(((0.00155579859013472)*x112))+((gclwh11_1*x110)));
op[19]=((((-0.00332834402025)*x124))+(((-1.0)*x439))+(((-0.9138)*gclwh5_9*x76))+(((0.4569)*gclwh5_9*x87))+(((-0.07799283)*x93))+((gclwh7_13*x194))+(((-1.0)*x456))+x255+x450+(((-0.9138)*gclwh13_9*x74))+(((0.00332834402025)*x95))+(((-0.07799283)*x168))+(((0.9138)*gclwh15_9*x97))+(((-0.4569)*gclwh15_9*x82))+(((0.4569)*gclwh13_9*x70))+(((0.00332834402025)*x135)));
op[20]=((((-1.0)*gclwh5_15*x152))+(((0.00354979654425)*x95))+(((-0.00354979654425)*x124))+(((-0.44)*gclwh15_15*x97))+(((-0.4873)*gclwh15_9*x82))+(((0.4873)*gclwh13_9*x70))+(((-0.853)*gclwh5_0*x76))+((gclwh0_0*x134))+((x82*x83))+(((0.4873)*gclwh5_9*x87))+((gclwh5_0*x160))+((gclwh2_0*x158))+(((0.44)*gclwh5_15*x76))+(((-1.0)*gclwh15_0*x134))+(((0.44)*gclwh13_15*x74))+(((-0.9746)*gclwh13_9*x74))+(((-0.9746)*gclwh5_9*x76))+(((-0.4265)*gclwh15_0*x82))+(((0.853)*gclwh0_0*x97))+(((-0.4265)*gclwh0_0*x82))+(((-1.0)*gclwh7_0*x142))+(((0.4265)*gclwh5_0*x87))+(((0.9746)*gclwh15_9*x97))+(((-0.853)*gclwh13_0*x74))+((gclwh15_15*x172))+(((-0.4265)*gclwh2_0*x70))+(((-1.0)*gclwh13_15*x195))+(((-1.0)*x189*x70))+((gclwh9_0*x178))+((gclwh13_0*x158))+(((-1.0)*x176*x87))+(((0.00354979654425)*x135))+(((0.853)*gclwh2_0*x74))+(((0.4265)*gclwh13_0*x70))+((gclwh11_0*x187))+(((0.853)*gclwh15_0*x97)));
op[21]=((-0.05197952)+(((4.0)*gclwh15_10*x97))+((gclwh11_10*x192))+((x175*x87))+(((-1.0)*gclwh15_10*x90))+((gclwh5_10*x126))+((gclwh13_10*x79))+(((-1.0)*gclwh7_10*x138))+(((-4.0)*gclwh13_10*x74))+(((-1.0)*x111*x82))+((gclwh9_10*x89))+(((-4.0)*gclwh5_10*x76))+((x193*x70)));
op[22]=((-0.01302416)+(((-0.001545085)*gclwh5_1*x87))+((gclwh0_1*x137))+(((0.011479075)*x277))+(((-1.0)*x445))+((gclwh5_10*x87))+(((0.011479075)*gclwh0_1*x97))+(((-0.01302416)*gclwh2_1*x70))+((gclwh5_1*x121))+((gclwh13_10*x70))+(((0.00097973905125)*x166))+(((-0.001545085)*gclwh13_1*x70))+(((-1.0)*x467))+(((0.011479075)*gclwh2_1*x74))+x452+x470+(((-1.0)*gclwh7_1*x84))+(((0.001545085)*pp*x81))+((gclwh2_1*x91))+(((-4.18103640120938e-5)*x81))+(((-1.0)*gclwh15_10*x82))+(((-0.011479075)*gclwh5_1*x76))+(((-0.011479075)*gclwh13_1*x74))+((gclwh13_1*x91))+(((-0.01302416)*gclwh0_1*x82)));
op[23]=(((gclwh7_13*x106))+(((-1.0)*x439))+(((-1.0)*gclwh5_9*x77))+(((-0.00518928)*x93))+(((0.0304)*gclwh15_9*x82))+(((-1.0)*x450))+x255+x456+(((-0.0608)*gclwh15_9*x97))+(((-0.0304)*gclwh5_9*x87))+(((-0.0304)*gclwh13_9*x70))+(((0.000221452524)*x124))+((gclwh13_9*x276))+(((0.0608)*gclwh5_9*x76))+(((-0.00518928)*x168))+(((-0.000221452524)*x135)));
op[24]=((-0.201036)+(((-1.0)*x459))+x461);
op[25]=((((-1.0)*x438))+(((1.8276)*gclwh6_2*x74))+(((0.0066566880405)*x145))+(((-0.0066566880405)*x157))+(((0.9138)*gclwh8_2*x82))+(((-0.9138)*gclwh6_2*x70))+(((-1.0)*gclwh4_2*x146))+x264+(((-0.15598566)*x114))+((gclwh14_2*x99))+(((-1.8276)*gclwh8_2*x97))+(((-1.8276)*gclwh10_2*x76))+(((0.9138)*gclwh10_2*x87))+(((0.0066566880405)*x122)));
op[26]=((((-1.706)*gclwh10_12*x76))+(((-0.075108)*x197))+(((-1.706)*gclwh8_12*x97))+(((0.853)*pp*x80))+(((0.853)*gclwh10_12*x87))+(((-0.853)*gclwh6_12*x70))+(((0.0062137829925)*x80))+(((-0.075108)*x119))+(((0.0062137829925)*gclwh10_12*r22))+(((1.706)*gclwh6_12*x74))+(((0.075108)*x103))+(((-0.0062137829925)*x133)));
op[27]=((((-1.0)*x147*x82))+((gclwh6_11*x131))+(((-1.0)*gclwh10_11*x180))+(((-1.0)*x188*x87))+(((8.0)*gclwh10_11*x76))+(((-1.0)*gclwh14_11*x154))+((x190*x70))+(((8.0)*gclwh8_11*x97))+(((-1.0)*gclwh8_11*x191))+(((-8.0)*gclwh6_11*x74))+(((0.6828)*x141))+(((0.6828)*x86)));
op[28]=((-0.013376)+(((-1.0)*x461))+x459);
op[29]=((((-0.01037856)*gclwh4_2*rxp2_2))+(((0.01037856)*x181))+(((0.0608)*gclwh10_2*x87))+(((0.000442905048)*x145))+(((-0.1216)*gclwh10_2*x76))+(((-0.1216)*gclwh8_2*x97))+(((0.0608)*gclwh8_2*x82))+(((-0.0608)*gclwh6_2*x70))+x438+(((0.1216)*gclwh6_2*x74))+(((0.000442905048)*x122))+(((-0.01037856)*x114))+(((-1.0)*x264))+(((-0.000442905048)*x157)));
op[30]=((((-0.0066566880405)*gclwh7_0*r21))+(((-0.9138)*gclwh7_0*x70))+((gclwh15_0*x99))+(((-1.8276)*gclwh9_0*x97))+x437+(((-0.15598566)*x104))+(((-1.0)*x272))+(((-1.0)*gclwh5_0*x146))+(((0.0066566880405)*gclwh11_0*r22))+(((-1.8276)*gclwh11_0*x76))+(((0.0066566880405)*gclwh9_0*r20))+(((0.9138)*gclwh9_0*x82))+(((0.9138)*gclwh11_0*x87))+(((1.8276)*gclwh7_0*x74)));
op[31]=((-0.201036)+(((-1.0)*x460))+x462);
op[32]=(((gclwh11_10*x180))+(((-0.6828)*gclwh13_10*rxp1_2))+(((-1.0)*x196*x70))+((gclwh15_10*x154))+((x153*x82))+((gclwh9_10*x191))+(((-1.0)*gclwh7_10*x131))+(((-0.6828)*gclwh5_10*rxp2_2))+(((-8.0)*gclwh11_10*x76))+(((8.0)*gclwh7_10*x74))+((x132*x87))+(((-8.0)*gclwh9_10*x97)));
IkReal x471=pp*pp;
IkReal x472=pz*pz;
IkReal x473=((0.1707)*pz);
IkReal x474=(npy*pz);
IkReal x475=(pp*r21);
IkReal x476=((0.1707)*rxp1_2);
IkReal x477=(gclwh13_1*pp);
IkReal x478=(gclwh9_0*r20);
IkReal x479=(gclwh9_13*rxp0_2);
IkReal x480=(gclwh5_1*rxp2_2);
IkReal x481=((4.0)*gclwh12_11);
IkReal x482=(pp*r22);
IkReal x483=((0.44)*gclwh5_15);
IkReal x484=(gclwh10_12*rxp2_2);
IkReal x485=((0.0072846225)*pz);
IkReal x486=(gclwh4_2*r22);
IkReal x487=(npz*pz);
IkReal x488=(npx*pz);
IkReal x489=(gclwh11_13*r22);
IkReal x490=(gclwh15_10*r20);
IkReal x491=((0.014569245)*r21);
IkReal x492=(pp*r20);
IkReal x493=((0.22)*gclwh15_15);
IkReal x494=((2.0)*gclwh11_10);
IkReal x495=(gclwh14_2*pz);
IkReal x496=((0.0072846225)*r21);
IkReal x497=((2.0)*gclwh4_11);
IkReal x498=(gclwh2_0*r21);
IkReal x499=(gclwh9_0*rxp0_2);
IkReal x500=(gclwh5_9*r22);
IkReal x501=(gclwh8_2*rxp0_2);
IkReal x502=((0.00155579859013472)*r21);
IkReal x503=(gclwh12_8*rxp1_2);
IkReal x504=((0.3414)*rxp0_2);
IkReal x505=(gclwh4_14*r22);
IkReal x506=(gclwh13_0*pz);
IkReal x507=(gclwh12_2*r21);
IkReal x508=((0.018777)*rxp2_2);
IkReal x509=((0.6828)*rxp2_2);
IkReal x510=((0.0072846225)*r22);
IkReal x511=((1.0)*pz);
IkReal x512=(gclwh15_15*r20);
IkReal x513=((0.1707)*pp);
IkReal x514=((0.1707)*rxp2_2);
IkReal x515=(gclwh5_0*pz);
IkReal x516=((2.0)*gclwh9_10);
IkReal x517=((0.03645690896625)*rxp2_2);
IkReal x518=((2.0)*pp);
IkReal x519=(gclwh14_11*r20);
IkReal x520=(gclwh14_8*rxp0_2);
IkReal x521=(gclwh15_1*rxp0_2);
IkReal x522=((4.0)*gclwh14_11);
IkReal x523=((0.00332834402025)*r22);
IkReal x524=((0.037554)*rxp1_2);
IkReal x525=(gclwh13_1*rxp1_2);
IkReal x526=(gclwh5_10*r22);
IkReal x527=(gclwh6_12*rxp1_2);
IkReal x528=(gclwh15_0*rxp0_2);
IkReal x529=(gclwh15_9*r20);
IkReal x530=(gclwh10_3*rxp2_2);
IkReal x531=((0.000801308475)*r21);
IkReal x532=(gclwh4_8*rxp2_2);
IkReal x533=((2.0)*gclwh10_11);
IkReal x534=(gclwh9_10*r20);
IkReal x535=((0.00310689149625)*r20);
IkReal x536=((0.3414)*rxp1_2);
IkReal x537=((0.6828)*rxp0_2);
IkReal x538=((2.0)*gclwh7_10);
IkReal x539=(gclwh13_0*r21);
IkReal x540=((0.07280355)*rxp1_2);
IkReal x541=(gclwh4_3*r22);
IkReal x542=((0.44)*gclwh12_14);
IkReal x543=(gclwh7_0*r21);
IkReal x544=(gclwh15_9*rxp0_2);
IkReal x545=(gclwh10_2*r22);
IkReal x546=((0.44)*gclwh4_14);
IkReal x547=((0.00097973905125)*rxp1_2);
IkReal x548=(gclwh1_3*r20);
IkReal x549=(gclwh13_9*rxp1_2);
IkReal x550=((4.18103640120938e-5)*r21);
IkReal x551=((0.15598566)*rxp1_2);
IkReal x552=(gclwh5_0*r22);
IkReal x553=(gclwh5_9*rxp2_2);
IkReal x554=((0.000221452524)*r20);
IkReal x555=(gclwh4_3*rxp2_2);
IkReal x556=((0.00332834402025)*r21);
IkReal x557=(gclwh7_13*r21);
IkReal x558=(gclwh14_2*r20);
IkReal x559=((0.018777)*rxp0_2);
IkReal x560=((0.07280355)*rxp2_2);
IkReal x561=(gclwh10_3*r22);
IkReal x562=(gclwh15_15*rxp0_2);
IkReal x563=((0.00155579859013472)*r20);
IkReal x564=((4.0)*gclwh4_11);
IkReal x565=(gclwh5_15*r22);
IkReal x566=(gclwh1_2*r20);
IkReal x567=(gclwh12_8*r21);
IkReal x568=((0.1707)*rxp0_2);
IkReal x569=((0.00332834402025)*r20);
IkReal x570=((2.0)*gclwh6_11);
IkReal x571=((0.018777)*rxp1_2);
IkReal x572=((0.01037856)*rxp1_2);
IkReal x573=((0.22)*gclwh4_14);
IkReal x574=(gclwh14_3*rxp0_2);
IkReal x575=((0.3414)*rxp2_2);
IkReal x576=(gclwh4_8*r22);
IkReal x577=(gclwh13_15*r21);
IkReal x578=((2.0)*gclwh12_11);
IkReal x579=(gclwh11_0*r22);
IkReal x580=(gclwh6_2*r21);
IkReal x581=((0.03645690896625)*rxp1_2);
IkReal x582=((0.22)*gclwh5_15);
IkReal x583=((0.01037856)*rxp2_2);
IkReal x584=(gclwh11_0*pz);
IkReal x585=((0.44)*gclwh15_15);
IkReal x586=(gclwh10_2*pz);
IkReal x587=((0.44)*gclwh13_15);
IkReal x588=((0.000801308475)*r22);
IkReal x589=((2.0)*gclwh8_11);
IkReal x590=((4.0)*gclwh13_10);
IkReal x591=((0.15598566)*rxp2_2);
IkReal x592=((0.000442905048)*r20);
IkReal x593=((0.22)*gclwh12_14);
IkReal x594=((0.22)*gclwh14_14);
IkReal x595=((0.000801308475)*r20);
IkReal x596=((4.0)*gclwh5_10);
IkReal x597=((2.0)*gclwh5_10);
IkReal x598=((0.22)*gclwh13_15);
IkReal x599=((0.6828)*rxp1_2);
IkReal x600=(gclwh8_12*rxp0_2);
IkReal x601=(gclwh5_15*rxp2_2);
IkReal x602=((0.014569245)*r22);
IkReal x603=((0.02913849)*r21);
IkReal x604=((2.0)*gclwh13_10);
IkReal x605=(gclwh8_11*r20);
IkReal x606=(gclwh13_9*r21);
IkReal x607=(gclwh3_2*r21);
IkReal x608=(gclwh12_14*r21);
IkReal x609=(gclwh11_13*rxp2_2);
IkReal x610=(gclwh11_1*r22);
IkReal x611=((0.0066566880405)*r20);
IkReal x612=(gclwh14_8*r20);
IkReal x613=(gclwh14_14*r20);
IkReal x614=((0.44)*gclwh14_14);
IkReal x615=(gclwh7_13*rxp1_2);
IkReal x616=((2.0)*gclwh14_11);
IkReal x617=(gclwh8_11*x504);
IkReal x618=(gclwh10_11*x575);
IkReal x619=(gclwh12_11*x491);
IkReal x620=(gclwh4_11*x602);
IkReal x621=((0.014569245)*x519);
IkReal x622=(gclwh6_11*x536);
IkReal x623=((0.00160261695)*x608);
IkReal x624=((0.00160261695)*x505);
IkReal x625=((0.00160261695)*x613);
IkReal x626=((0.00160261695)*x565);
IkReal x627=((0.00160261695)*x577);
IkReal x628=((0.00160261695)*x512);
IkReal x629=(gclwh7_10*x536);
IkReal x630=((0.014569245)*x490);
IkReal x631=(gclwh13_10*x491);
IkReal x632=(gclwh11_10*x575);
IkReal x633=((0.014569245)*x526);
IkReal x634=(gclwh9_10*x504);
IkReal x635=(gclwh12_14*x571);
IkReal x636=(gclwh6_5*x531);
IkReal x637=(gclwh4_14*x508);
IkReal x638=(gclwh14_14*x559);
IkReal x639=(gclwh10_5*x588);
IkReal x640=(gclwh8_5*x595);
IkReal x641=((0.014569245)*x532);
IkReal x642=(gclwh14_11*x568);
IkReal x643=((0.014569245)*x503);
IkReal x644=(gclwh10_11*x510);
IkReal x645=((0.0072846225)*x605);
IkReal x646=(gclwh6_11*x496);
IkReal x647=(gclwh4_11*x514);
IkReal x648=((0.014569245)*x520);
IkReal x649=(gclwh12_11*x476);
IkReal x650=((0.037554)*x562);
IkReal x651=(gclwh13_15*x524);
IkReal x652=((0.037554)*x601);
IkReal x653=(gclwh5_10*x575);
IkReal x654=(gclwh7_10*x491);
IkReal x655=(gclwh13_10*x536);
IkReal x656=(gclwh13_10*x476);
IkReal x657=(gclwh7_10*x496);
IkReal x658=((0.014569245)*x549);
IkReal x659=(gclwh5_10*x514);
IkReal x660=((0.014569245)*x553);
IkReal x661=((0.014569245)*x544);
IkReal x662=(gclwh11_10*x510);
IkReal x663=(gclwh15_10*x568);
IkReal x664=((0.0072846225)*x534);
IkReal x665=(gclwh5_15*x508);
IkReal x666=(gclwh13_15*x571);
IkReal x667=(gclwh7_7*x531);
IkReal x668=(gclwh15_15*x559);
IkReal x669=(gclwh9_7*x595);
IkReal x670=(gclwh11_7*x588);
IkReal x671=((0.000801308475)*x505);
IkReal x672=(gclwh10_5*x508);
IkReal x673=(gclwh12_14*x531);
IkReal x674=(gclwh8_5*x559);
IkReal x675=(gclwh14_14*x595);
IkReal x676=(gclwh6_5*x571);
IkReal x677=((0.000621742530375)*x576);
IkReal x678=(gclwh6_11*x476);
IkReal x679=((0.0072846225)*x519);
IkReal x680=((0.000621742530375)*x567);
IkReal x681=((0.000621742530375)*x612);
IkReal x682=(gclwh8_11*x568);
IkReal x683=(gclwh10_11*x514);
IkReal x684=(gclwh12_11*x496);
IkReal x685=(gclwh4_11*x510);
IkReal x686=(r20*x471);
IkReal x687=(r21*x471);
IkReal x688=((2.0)*x472);
IkReal x689=(x482*x497);
IkReal x690=(x475*x578);
IkReal x691=(x488*x522);
IkReal x692=(x492*x616);
IkReal x693=(x474*x481);
IkReal x694=(x487*x564);
IkReal x695=(x482*x573);
IkReal x696=(x475*x593);
IkReal x697=(x488*x614);
IkReal x698=(x492*x594);
IkReal x699=(x487*x546);
IkReal x700=(x474*x542);
IkReal x701=(x488*x585);
IkReal x702=(x475*x598);
IkReal x703=(x482*x582);
IkReal x704=(x483*x487);
IkReal x705=(x474*x587);
IkReal x706=(x492*x493);
IkReal x707=(x490*x518);
IkReal x708=(x487*x596);
IkReal x709=(x474*x590);
IkReal x710=(x475*x604);
IkReal x711=((4.0)*gclwh15_10*x488);
IkReal x712=(x482*x597);
IkReal x713=((0.11)*gclwh6_5*x475);
IkReal x714=((0.22)*gclwh8_5*x488);
IkReal x715=((0.22)*gclwh10_5*x487);
IkReal x716=((0.11)*gclwh10_5*x482);
IkReal x717=((0.22)*gclwh6_5*x474);
IkReal x718=((0.11)*gclwh8_5*x492);
IkReal x719=(gclwh12_3*pp*x476);
IkReal x720=(gclwh14_2*rxp0_2*x473);
IkReal x721=(gclwh6_3*x687);
IkReal x722=(x485*x545);
IkReal x723=(x474*x570);
IkReal x724=(x482*x586);
IkReal x725=(x513*x555);
IkReal x726=(gclwh8_2*r20*x485);
IkReal x727=(gclwh8_2*pz*x492);
IkReal x728=(x485*x580);
IkReal x729=(gclwh12_2*rxp1_2*x473);
IkReal x730=(x487*x533);
IkReal x731=(gclwh4_2*rxp2_2*x473);
IkReal x732=(x488*x589);
IkReal x733=(x513*x574);
IkReal x734=(x475*x538);
IkReal x735=((4.0)*gclwh9_10*x488);
IkReal x736=((4.0)*gclwh11_10*x487);
IkReal x737=(x487*x494);
IkReal x738=(x476*x477);
IkReal x739=(x488*x516);
IkReal x740=(gclwh7_1*x687);
IkReal x741=(x485*x579);
IkReal x742=(x473*x528);
IkReal x743=(x482*x584);
IkReal x744=(x480*x513);
IkReal x745=(x478*x485);
IkReal x746=(pp*pz*x478);
IkReal x747=(x513*x521);
IkReal x748=(gclwh13_0*rxp1_2*x473);
IkReal x749=(gclwh5_0*rxp2_2*x473);
IkReal x750=(x474*x538);
IkReal x751=(x485*x543);
IkReal x752=((0.11)*gclwh7_7*x475);
IkReal x753=((0.22)*gclwh9_7*x488);
IkReal x754=((0.22)*gclwh11_7*x487);
IkReal x755=((0.22)*gclwh7_7*x474);
IkReal x756=((0.11)*gclwh11_7*x482);
IkReal x757=((0.11)*gclwh9_7*x492);
IkReal x758=((0.11)*gclwh4_14*x482);
IkReal x759=((0.11)*gclwh12_14*x475);
IkReal x760=(x488*x594);
IkReal x761=(x487*x573);
IkReal x762=(x474*x593);
IkReal x763=((0.11)*gclwh14_14*x492);
IkReal x764=(gclwh14_8*npx*x473);
IkReal x765=(x492*x495);
IkReal x766=(gclwh12_3*x687);
IkReal x767=(x485*x607);
IkReal x768=((0.08535)*gclwh12_8*x475);
IkReal x769=(x487*x497);
IkReal x770=(gclwh6_2*rxp1_2*x473);
IkReal x771=(x513*x530);
IkReal x772=(gclwh3_3*x687);
IkReal x773=(x471*x548);
IkReal x774=((0.08535)*gclwh4_8*x482);
IkReal x775=(x485*x558);
IkReal x776=(x471*x541);
IkReal x777=(x485*x566);
IkReal x778=(x474*x578);
IkReal x779=(gclwh12_8*npy*x473);
IkReal x780=(gclwh4_8*npz*x473);
IkReal x781=(x473*x501);
IkReal x782=((0.08535)*gclwh14_8*x492);
IkReal x783=(x488*x616);
IkReal x784=(gclwh6_3*pp*x476);
IkReal x785=(gclwh10_2*rxp2_2*x473);
IkReal x786=(x485*x486);
IkReal x787=(x485*x507);
IkReal x788=((1.0)*r22*x471);
IkReal x789=(gclwh6_2*npy*x688);
IkReal x790=(gclwh10_3*x487*x518);
IkReal x791=((1.0)*x471*x561);
IkReal x792=(gclwh6_3*x474*x518);
IkReal x793=(gclwh6_2*x475*x511);
IkReal x794=(gclwh10_2*npz*x688);
IkReal x795=(gclwh8_2*npx*x688);
IkReal x796=(gclwh11_1*x487*x518);
IkReal x797=(gclwh7_0*npy*x688);
IkReal x798=(gclwh9_0*npx*x688);
IkReal x799=((1.0)*x471*x610);
IkReal x800=(gclwh7_1*x474*x518);
IkReal x801=(gclwh11_0*npz*x688);
IkReal x802=(gclwh7_0*x475*x511);
IkReal x803=(gclwh12_2*npy*x688);
IkReal x804=(gclwh3_2*npy*x688);
IkReal x805=(gclwh1_2*npx*x688);
IkReal x806=(gclwh14_3*x488*x518);
IkReal x807=(gclwh4_2*npz*x688);
IkReal x808=(gclwh4_3*x487*x518);
IkReal x809=(gclwh12_2*x475*x511);
IkReal x810=(gclwh1_2*x492*x511);
IkReal x811=(gclwh3_3*x474*x518);
IkReal x812=(gclwh4_2*x482*x511);
IkReal x813=(gclwh1_3*x488*x518);
IkReal x814=(gclwh3_2*x475*x511);
IkReal x815=(gclwh12_3*x474*x518);
IkReal x816=(gclwh14_2*npx*x688);
IkReal x817=((1.0)*gclwh14_3*x686);
IkReal x818=(x665+x666);
IkReal x819=(x637+x635);
IkReal x820=(x651+x652);
IkReal x821=(x672+x674);
IkReal x822=(x663+x662+x664+x750);
IkReal x823=(x645+x644+x642+x723);
IkReal x824=(x678+x679+x778+x769);
IkReal x825=(x625+x698+x699+x700);
IkReal x826=(x636+x713+x715+x714);
IkReal x827=(x628+x706+x704+x705);
IkReal x828=(x667+x754+x753+x752);
IkReal x829=(x675+x761+x762+x763);
IkReal x830=(x683+x682+x685+x684+x783);
IkReal x831=(x647+x646+x649+x732+x730);
IkReal x832=(x656+x657+x659+x737+x739);
IkReal x833=(x621+x622+x694+x692+x693);
IkReal x834=(x669+x670+x755+x757+x756);
IkReal x835=(x624+x623+x695+x696+x697);
IkReal x836=(x629+x630+x708+x709+x707);
IkReal x837=(x673+x671+x759+x758+x760);
IkReal x838=(x627+x626+x702+x703+x701);
IkReal x839=(x640+x639+x718+x717+x716);
IkReal x840=((((0.014569245)*x534))+((gclwh11_10*x602))+(((4.0)*gclwh7_10*x474))+((x492*x516))+((x482*x494))+((gclwh15_10*x504)));
IkReal x841=(x653+x654+x655+x736+x735+x734);
IkReal x842=(x634+x632+x633+x631+x711+x710+x712);
IkReal x843=(x618+x619+x617+x620+x689+x690+x691);
IkReal x844=(x661+x751+x747+x748+x749+x799+x798+x801+x800+x802);
IkReal x845=(x648+x733+x731+x728+x729+x791+x793+x792+x795+x794);
IkReal x846=(x658+x660+x738+x746+x744+x745+x742+x743+x740+x741+x797+x796);
IkReal x847=(x643+x641+x719+x720+x721+x722+x724+x725+x726+x727+x790+x789);
IkReal x848=(x681+x779+x782+x780+x781+x786+x787+x784+x785+x816+x817+x814+x815+x812+x813+x810+x811+x809+x808);
IkReal x849=(x473+x677+x680+x773+x772+x771+x770+x777+x776+x775+x774+x768+x764+x765+x766+x767+x805+x804+x807+x806+x803);
op[33]=((((-1.706)*gclwh11_13*x487))+(((-0.075108)*x601))+(((0.0062137829925)*x489))+(((-0.075108)*gclwh13_15*rxp1_2))+(((0.853)*gclwh9_13*x492))+(((-1.706)*gclwh9_13*x488))+(((0.853)*gclwh11_13*x482))+(((-0.853)*gclwh7_13*x475))+(((0.0062137829925)*gclwh9_13*r20))+(((1.706)*gclwh7_13*x474))+(((-0.0062137829925)*x557))+(((0.075108)*x562)));
op[34]=((((0.000442905048)*x478))+(((-0.0608)*gclwh7_0*x475))+(((0.0608)*gclwh11_0*x482))+(((0.000442905048)*x579))+(((-1.0)*gclwh5_0*x583))+(((-1.0)*x820))+(((-0.000442905048)*x543))+(((0.0608)*pp*x478))+(((-0.1216)*gclwh9_0*x488))+(((0.1216)*gclwh7_0*x474))+(((-0.1216)*gclwh11_0*x487))+x650+(((-1.0)*gclwh13_0*x572))+(((0.01037856)*x528)));
op[35]=((-0.013376)+(((-1.0)*x840))+x841);
op[36]=((0.39331522)+(((-1.0)*x843))+x833);
op[37]=((((-0.15598566)*x501))+(((-0.9138)*gclwh1_2*x492))+(((0.0066566880405)*x558))+(((-0.0066566880405)*x486))+(((1.8276)*gclwh12_2*x474))+(((-0.9138)*gclwh3_2*x475))+(((-1.8276)*gclwh14_2*x488))+(((1.8276)*gclwh1_2*x488))+(((0.0066566880405)*x566))+(((-1.0)*x835))+((gclwh6_2*x551))+(((-0.9138)*gclwh12_2*x475))+(((0.9138)*gclwh14_2*x492))+(((-0.0066566880405)*x507))+x825+(((1.8276)*gclwh4_2*x487))+(((0.0066566880405)*x607))+(((1.8276)*gclwh3_2*x474))+(((-1.0)*gclwh10_2*x591))+(((-0.9138)*gclwh4_2*x482)));
op[38]=((((-0.0032052339)*x505))+(((-0.1456071)*x600))+(((-1.0)*x482*x546))+(((0.88)*gclwh4_14*x487))+((x492*x614))+(((-0.0032052339)*x608))+(((-0.88)*gclwh14_14*x488))+(((0.88)*gclwh12_14*x474))+(((0.1456071)*x527))+(((-0.1456071)*x484))+(((0.0032052339)*x613))+(((-1.0)*x475*x542)));
op[39]=((-0.00715904)+((gclwh12_11*x603))+(((-0.02913849)*x519))+((gclwh8_11*x537))+((x475*x481))+(((0.02913849)*gclwh4_11*r22))+((gclwh10_11*x509))+(((-1.0)*gclwh6_11*x599))+(((-8.0)*gclwh4_11*x487))+(((-1.0)*x492*x522))+((x482*x564))+(((-8.0)*gclwh12_11*x474))+(((8.0)*gclwh14_11*x488)));
op[40]=((0.02235168)+(((-1.0)*x833))+x843);
op[41]=((((-0.01037856)*x501))+(((-0.0608)*gclwh1_2*x492))+(((0.000442905048)*x558))+(((-0.1216)*gclwh14_2*x488))+(((-0.000442905048)*x486))+(((0.1216)*gclwh3_2*x474))+(((0.0608)*gclwh14_2*x492))+(((0.000442905048)*x607))+(((-1.0)*x825))+(((0.1216)*gclwh1_2*x488))+(((-1.0)*gclwh10_2*x583))+(((0.1216)*gclwh12_2*x474))+(((-0.0608)*gclwh12_2*x475))+(((0.000442905048)*x566))+(((-0.0608)*gclwh3_2*x475))+(((-0.000442905048)*x507))+(((0.1216)*gclwh4_2*x487))+((gclwh6_2*x572))+x835+(((-0.0608)*gclwh4_2*x482)));
op[42]=((((0.0066566880405)*x552))+(((-1.8276)*gclwh13_0*x474))+(((-1.0)*gclwh7_0*x551))+(((0.15598566)*x499))+(((-0.9138)*gclwh0_0*x492))+(((0.0066566880405)*x539))+(((0.0066566880405)*x498))+(((0.9138)*gclwh13_0*x475))+(((1.8276)*gclwh0_0*x488))+(((-1.8276)*gclwh5_0*x487))+(((0.9138)*gclwh5_0*x482))+(((1.8276)*gclwh15_0*x488))+(((-1.0)*x838))+((gclwh11_0*x591))+(((-1.0)*gclwh15_0*x611))+(((1.8276)*gclwh2_0*x474))+x827+((gclwh0_0*x611))+(((-0.9138)*gclwh15_0*x492))+(((-0.9138)*gclwh2_0*x475)));
op[43]=((0.39331522)+(((-1.0)*x836))+x842);
op[44]=((0.00715904)+((gclwh11_10*x509))+((x475*x590))+(((-8.0)*gclwh13_10*x474))+(((8.0)*gclwh15_10*x488))+(((-4.0)*pp*x490))+((x482*x596))+(((-1.0)*gclwh7_10*x599))+(((-8.0)*gclwh5_10*x487))+(((-0.02913849)*x490))+((gclwh13_10*x603))+((gclwh9_10*x537))+(((0.02913849)*x526)));
op[45]=((((-0.88)*gclwh5_15*x487))+(((0.88)*gclwh15_15*x488))+(((-0.1456071)*x615))+(((-0.88)*gclwh13_15*x474))+(((0.1456071)*x479))+((x475*x587))+(((0.0032052339)*x565))+(((-1.0)*x492*x585))+(((-0.0032052339)*x512))+((x482*x483))+(((0.1456071)*x609))+(((0.0032052339)*x577)));
op[46]=((((0.1216)*gclwh15_0*x488))+(((0.1216)*gclwh2_0*x474))+(((-0.1216)*gclwh13_0*x474))+(((-1.0)*gclwh15_0*x592))+(((0.000442905048)*x552))+(((0.01037856)*x499))+(((-0.0608)*gclwh15_0*x492))+(((-0.0608)*gclwh2_0*x475))+(((0.1216)*gclwh0_0*x488))+(((0.000442905048)*x498))+(((-1.0)*x827))+(((-0.0608)*gclwh0_0*x492))+(((0.0608)*gclwh13_0*x475))+(((-0.1216)*gclwh5_0*x487))+((gclwh0_0*x592))+x838+(((0.0608)*gclwh5_0*x482))+(((-1.0)*gclwh7_0*x572))+(((0.000442905048)*x539))+((gclwh11_0*x583)));
op[47]=((0.02235168)+(((-1.0)*x842))+x836);
op[48]=(((gclwh10_12*x523))+(((0.9138)*gclwh6_12*x474))+(((0.4569)*gclwh8_12*x492))+(((-0.07799283)*x503))+(((-0.9138)*gclwh10_12*x487))+(((-1.0)*x819))+(((-0.9138)*gclwh8_12*x488))+((gclwh8_12*x569))+(((0.07799283)*x520))+(((-1.0)*x839))+(((-1.0)*gclwh6_12*x556))+(((-0.07799283)*x532))+x638+(((0.4569)*gclwh10_12*x482))+x826+(((-0.4569)*gclwh6_12*x475)));
op[49]=((((0.03645690896625)*x574))+(((-0.427145975)*gclwh10_3*x487))+(((0.00155579859013472)*x561))+(((-1.0)*x823))+(((0.427145975)*gclwh6_3*x474))+(((-1.0)*gclwh8_11*x492))+(((-1.0)*gclwh4_3*x517))+(((-1.0)*gclwh12_3*x581))+(((-0.206288365)*gclwh6_3*x475))+((gclwh6_11*x475))+(((-1.0)*x845))+x831+x847+(((-1.0)*gclwh6_3*x502))+(((-1.0)*gclwh10_11*x482))+(((0.206288365)*gclwh10_3*x482)));
op[50]=((0.09383)+(((4.0)*gclwh10_11*x487))+(((-1.0)*x482*x533))+((gclwh12_11*x536))+(((-4.0)*gclwh6_11*x474))+((gclwh6_11*x491))+(((-1.0)*x492*x589))+(((-0.014569245)*x605))+((x475*x570))+((gclwh4_11*x575))+(((-1.0)*gclwh14_11*x504))+(((-1.0)*gclwh10_11*x602))+(((4.0)*gclwh8_11*x488)));
op[51]=((((-1.0)*gclwh8_2*x535))+(((-0.00310689149625)*x545))+(((-0.037554)*gclwh14_14*rxp0_2))+((gclwh4_2*x560))+((gclwh12_14*x524))+(((0.4265)*gclwh6_2*x475))+(((0.08318211)*x532))+((gclwh12_2*x540))+(((-0.07280355)*gclwh14_2*rxp0_2))+(((-0.853)*gclwh6_2*x474))+(((-0.4265)*gclwh10_2*x482))+(((0.853)*gclwh10_2*x487))+(((-0.4265)*gclwh8_2*x492))+(((0.037554)*gclwh4_14*rxp2_2))+(((0.853)*gclwh8_2*x488))+(((0.00310689149625)*x580))+(((-0.08318211)*x520))+(((0.08318211)*x503)));
op[52]=((((0.0608)*gclwh6_12*x474))+((gclwh8_12*x554))+(((-0.0608)*gclwh10_12*x487))+(((-1.0)*x638))+(((0.000221452524)*gclwh10_12*r22))+(((0.0304)*gclwh10_12*x482))+(((-0.000221452524)*gclwh6_12*r21))+(((0.00518928)*x503))+(((-1.0)*x839))+(((0.0304)*gclwh8_12*x492))+x819+x826+(((-0.0304)*gclwh6_12*x475))+(((-0.00518928)*x520))+(((-0.0608)*gclwh8_12*x488))+(((0.00518928)*x532)));
op[53]=((((0.001545085)*gclwh6_3*x475))+(((-1.0)*gclwh6_3*x550))+(((-1.0)*gclwh6_11*x475))+(((-1.0)*x845))+(((-1.0)*x831))+(((0.00097973905125)*x574))+(((-0.011479075)*gclwh10_3*x487))+(((-0.00097973905125)*x555))+((gclwh10_11*x482))+x823+x847+(((0.011479075)*gclwh6_3*x474))+(((-1.0)*gclwh12_3*x547))+(((-0.001545085)*gclwh10_3*x482))+(((4.18103640120938e-5)*x561))+((gclwh8_11*x492)));
op[54]=(((gclwh11_10*x482))+(((0.427145975)*gclwh7_1*x474))+((gclwh9_10*x492))+(((-1.0)*gclwh7_10*x475))+(((-0.206288365)*gclwh7_1*x475))+(((-1.0)*gclwh7_1*x502))+(((0.00155579859013472)*x610))+(((-0.427145975)*gclwh11_1*x487))+(((-0.03645690896625)*x480))+(((-1.0)*x844))+(((-1.0)*x832))+x822+x846+(((0.03645690896625)*x521))+(((-0.03645690896625)*x525))+(((0.206288365)*gclwh11_1*x482)));
op[55]=((((-0.4569)*gclwh7_13*x475))+(((0.00332834402025)*x489))+(((0.9138)*gclwh7_13*x474))+(((0.4569)*gclwh9_13*x492))+(((-1.0)*x818))+(((-0.07799283)*x553))+((gclwh9_13*x569))+(((-1.0)*gclwh7_13*x556))+(((0.07799283)*x544))+(((-1.0)*x834))+(((-0.9138)*gclwh11_13*x487))+x668+(((-0.9138)*gclwh9_13*x488))+(((-0.07799283)*x549))+x828+(((0.4569)*gclwh11_13*x482)));
op[56]=((((-0.07280355)*x528))+(((0.853)*gclwh11_0*x487))+(((0.853)*gclwh9_0*x488))+(((-0.4265)*pp*x478))+(((-1.0)*x820))+(((0.08318211)*x544))+(((0.00310689149625)*x543))+(((-0.853)*gclwh7_0*x474))+(((-0.4265)*gclwh11_0*x482))+(((-0.00310689149625)*x478))+x650+(((-0.08318211)*x549))+(((-0.00310689149625)*x579))+(((-0.08318211)*x553))+(((0.4265)*gclwh7_0*x475))+((gclwh5_0*x560))+((gclwh13_0*x540)));
op[57]=((0.09383)+(((-1.0)*x840))+x841);
op[58]=((((-0.011479075)*gclwh11_1*x487))+(((-1.0)*gclwh7_1*x550))+(((0.001545085)*gclwh7_1*x475))+(((0.011479075)*gclwh7_1*x474))+((gclwh7_10*x475))+(((-1.0)*x822))+(((4.18103640120938e-5)*x610))+(((-1.0)*gclwh11_10*x482))+(((-0.001545085)*gclwh11_1*x482))+(((-1.0)*gclwh9_10*x492))+(((-1.0)*x844))+(((-0.00097973905125)*x525))+x832+x846+(((0.00097973905125)*x521))+(((-0.00097973905125)*x480)));
op[59]=((((0.0608)*gclwh7_13*x474))+(((-0.0304)*gclwh7_13*x475))+(((0.0304)*gclwh9_13*x492))+(((0.00518928)*x549))+((gclwh9_13*x554))+(((0.000221452524)*x489))+(((-1.0)*x668))+(((-1.0)*x834))+(((-0.0608)*gclwh11_13*x487))+x818+x828+(((-0.000221452524)*x557))+(((0.0304)*gclwh11_13*x482))+(((0.00518928)*x553))+(((-0.00518928)*x544))+(((-0.0608)*gclwh9_13*x488)));
op[60]=((((0.9138)*gclwh12_8*x474))+((gclwh14_8*x569))+(((-1.0)*gclwh4_8*x523))+(((-0.07799283)*x600))+(((0.9138)*gclwh4_8*x487))+(((-1.0)*gclwh12_8*x556))+(((-0.07799283)*x484))+(((0.4569)*gclwh14_8*x492))+(((0.07799283)*x527))+(((-1.0)*x837))+(((-0.4569)*gclwh4_8*x482))+(((-0.9138)*gclwh14_8*x488))+(((-0.4569)*gclwh12_8*x475))+x829+x821+(((-1.0)*x676)));
op[61]=((0.22085761)+(((-0.22085761)*gclwh1_3*x492))+((gclwh3_3*x502))+(((0.427145975)*gclwh4_3*x487))+(((0.427145975)*gclwh1_3*x488))+((gclwh6_3*x581))+(((-0.427145975)*gclwh14_3*x488))+((gclwh14_3*x563))+(((-1.0)*gclwh12_3*x502))+(((0.427145975)*gclwh12_3*x474))+(((-0.206288365)*gclwh4_3*x482))+(((-1.0)*x824))+((gclwh4_11*x482))+((gclwh12_11*x475))+(((-0.206288365)*gclwh12_3*x475))+(((-1.0)*x848))+(((-1.0)*gclwh10_3*x517))+(((-1.0)*gclwh14_11*x492))+(((0.00155579859013472)*x548))+(((0.206288365)*gclwh14_3*x492))+(((0.427145975)*gclwh3_3*x474))+(((-0.22085761)*gclwh3_3*x475))+x830+x849+(((-0.00155579859013472)*x541)));
op[62]=((0.05197952)+(((-1.0)*x833))+x843);
op[63]=((((0.4265)*gclwh12_2*x475))+(((0.00354979654425)*x567))+(((0.4265)*gclwh3_2*x475))+(((-1.0)*gclwh1_2*x535))+(((-0.00310689149625)*x607))+(((-1.0)*x825))+(((-0.00354979654425)*x612))+(((-0.4265)*gclwh14_2*x492))+(((0.4265)*gclwh4_2*x482))+(((-0.853)*gclwh4_2*x487))+((gclwh10_2*x560))+(((0.4873)*gclwh12_8*x475))+(((0.00310689149625)*x486))+(((0.00310689149625)*x507))+(((0.853)*gclwh14_2*x488))+(((-0.853)*gclwh3_2*x474))+(((0.4873)*gclwh4_8*x482))+(((0.9746)*gclwh14_8*x488))+(((-1.0)*gclwh14_2*x535))+(((-0.9746)*gclwh12_8*x474))+(((0.4265)*gclwh1_2*x492))+x835+(((-0.853)*gclwh1_2*x488))+(((0.07280355)*x501))+(((-0.9746)*gclwh4_8*x487))+(((-0.853)*gclwh12_2*x474))+(((0.00354979654425)*x576))+(((-0.4873)*gclwh14_8*x492))+(((-1.0)*gclwh6_2*x540)));
op[64]=((((-0.0304)*gclwh14_8*x492))+(((-1.0)*x829))+(((0.000221452524)*x576))+(((0.0304)*gclwh12_8*x475))+(((-0.0608)*gclwh12_8*x474))+(((-0.00518928)*x600))+(((-1.0)*gclwh14_8*x554))+x821+x837+(((0.0304)*gclwh4_8*x482))+(((0.000221452524)*x567))+(((0.0608)*gclwh14_8*x488))+(((-1.0)*x676))+(((0.00518928)*x527))+(((-0.0608)*gclwh4_8*x487))+(((-0.00518928)*x484)));
op[65]=((-0.01302416)+(((-1.0)*gclwh12_3*x550))+((gclwh14_11*x492))+(((-0.001545085)*gclwh14_3*x492))+(((-1.0)*gclwh12_11*x475))+((gclwh6_3*x547))+(((4.18103640120938e-5)*x548))+(((-1.0)*gclwh4_11*x482))+(((-0.01302416)*gclwh1_3*x492))+(((0.011479075)*gclwh4_3*x487))+(((0.011479075)*gclwh1_3*x488))+(((0.011479075)*gclwh12_3*x474))+(((-0.01302416)*gclwh3_3*x475))+(((-1.0)*x848))+(((0.011479075)*gclwh3_3*x474))+(((-0.00097973905125)*x530))+(((-1.0)*x830))+((gclwh3_3*x550))+(((0.001545085)*gclwh4_3*x482))+x824+x849+(((-0.011479075)*gclwh14_3*x488))+(((-4.18103640120938e-5)*x541))+(((0.001545085)*gclwh12_3*x475))+(((4.18103640120938e-5)*gclwh14_3*r20)));
op[66]=((-0.22085761)+((gclwh7_1*pp*x476))+(((-0.427145975)*gclwh13_1*x474))+((gclwh5_10*x510))+(((-0.22085761)*gclwh2_1*x475))+(((0.000621742530375)*x529))+(((-1.0)*gclwh2_1*x474*x518))+((x485*x539))+(((0.427145975)*gclwh2_1*x474))+(((0.206288365)*gclwh5_1*x482))+(((-1.0)*gclwh15_9*npx*x473))+(((-0.000621742530375)*x500))+((x473*x499))+(((-0.427145975)*gclwh5_1*x487))+(((-1.0)*gclwh0_1*x488*x518))+((gclwh11_0*rxp2_2*x473))+((gclwh5_10*x482))+((x485*x552))+((gclwh5_9*npz*x473))+((gclwh5_1*x487*x518))+(((2.0)*x474*x477))+((gclwh2_0*npy*x688))+((gclwh0_1*x563))+(((-1.0)*gclwh15_1*x488*x518))+((x475*x506))+((gclwh2_1*x502))+((gclwh0_1*x686))+((gclwh13_9*npy*x473))+(((-1.0)*gclwh7_0*rxp1_2*x473))+(((-1.0)*pp*x490))+((gclwh15_1*x686))+(((-1.0)*gclwh15_0*r20*x485))+(((-1.0)*gclwh5_1*x788))+(((-0.0072846225)*x490))+(((-0.206288365)*gclwh15_1*x492))+((gclwh0_0*r20*x485))+((gclwh15_0*npx*x688))+(((-0.08535)*gclwh5_9*x482))+((gclwh9_10*x568))+(((-1.0)*gclwh15_0*x492*x511))+(((-1.0)*gclwh7_1*x581))+((gclwh0_0*npx*x688))+x473+(((0.00155579859013472)*gclwh5_1*r22))+(((0.427145975)*gclwh15_1*x488))+((gclwh2_1*x687))+(((-0.22085761)*gclwh0_1*x492))+(((0.427145975)*gclwh0_1*x488))+(((0.206288365)*gclwh13_1*x475))+(((-1.0)*gclwh13_0*npy*x688))+((gclwh11_10*x514))+((gclwh13_10*x496))+(((-1.0)*x474*x604))+(((-1.0)*gclwh2_0*x475*x511))+(((-1.0)*gclwh7_10*x476))+(((-0.000621742530375)*x606))+(((-1.0)*gclwh13_1*x687))+(((-1.0)*gclwh11_1*rxp2_2*x513))+(((0.08535)*gclwh15_9*x492))+(((-1.0)*x487*x597))+(((-0.08535)*gclwh13_9*x475))+(((2.0)*gclwh15_10*x488))+((gclwh13_10*x475))+((x485*x498))+((gclwh13_1*x502))+(((-1.0)*gclwh5_0*npz*x688))+(((-1.0)*gclwh0_0*x492*x511))+(((-1.0)*gclwh15_1*x563))+((x482*x515))+((gclwh11_1*x517)));
op[67]=((((0.9138)*gclwh15_9*x488))+((x488*x493))+((gclwh7_7*x571))+(((-0.9138)*gclwh13_9*x474))+(((-1.0)*gclwh9_7*x559))+(((0.11)*gclwh5_15*x482))+(((0.07799283)*x609))+(((-0.07799283)*x615))+(((-0.000801308475)*x512))+(((-1.0)*x487*x582))+(((-0.9138)*gclwh5_9*x487))+(((0.000801308475)*x565))+(((-1.0)*x474*x598))+(((-0.4569)*gclwh15_9*x492))+(((-0.00332834402025)*x529))+(((0.07799283)*x479))+((gclwh13_9*x556))+(((-0.11)*gclwh15_15*x492))+(((0.4569)*gclwh5_9*x482))+((gclwh13_15*x531))+(((0.00332834402025)*x500))+(((0.11)*gclwh13_15*x475))+(((0.4569)*gclwh13_9*x475))+(((-1.0)*gclwh11_7*x508)));
op[68]=(((gclwh15_0*x535))+(((0.853)*gclwh5_0*x487))+(((-0.4265)*gclwh13_0*x475))+(((-0.00310689149625)*x539))+(((0.853)*gclwh13_0*x474))+(((-0.07280355)*x499))+(((-0.9746)*gclwh5_9*x487))+(((0.4265)*gclwh15_0*x492))+(((-1.0)*gclwh0_0*x535))+(((0.9746)*gclwh15_9*x488))+(((-1.0)*gclwh11_0*x560))+(((-1.0)*x827))+(((0.00354979654425)*x500))+(((0.4265)*gclwh0_0*x492))+(((-0.853)*gclwh0_0*x488))+(((0.4265)*gclwh2_0*x475))+((gclwh7_0*x540))+(((-0.853)*gclwh15_0*x488))+(((0.4873)*gclwh5_9*x482))+(((-0.9746)*gclwh13_9*x474))+(((-0.00310689149625)*x498))+x838+(((-0.00354979654425)*x529))+(((0.4873)*gclwh13_9*x475))+(((-0.4265)*gclwh5_0*x482))+(((-0.4873)*gclwh15_9*x492))+(((0.00354979654425)*x606))+(((-0.00310689149625)*x552))+(((-0.853)*gclwh2_0*x474)));
IkReal x850=pz*pz;
IkReal x851=pp*pp;
IkReal x852=(gclwh13_9*r21);
IkReal x853=((0.0304)*pp);
IkReal x854=(npy*pz);
IkReal x855=(npx*pz);
IkReal x856=((2.0)*gclwh15_10);
IkReal x857=(gclwh15_10*r20);
IkReal x858=((0.1707)*pz);
IkReal x859=(gclwh13_10*r21);
IkReal x860=(gclwh15_1*r20);
IkReal x861=(gclwh15_9*r20);
IkReal x862=(gclwh2_1*pp);
IkReal x863=(gclwh7_1*rxp1_2);
IkReal x864=((0.11)*pp);
IkReal x865=(gclwh5_15*r22);
IkReal x866=(pp*r20);
IkReal x867=(gclwh15_15*r20);
IkReal x868=(npz*pz);
IkReal x869=(gclwh11_10*rxp2_2);
IkReal x870=((4.18103640120938e-5)*r21);
IkReal x871=(gclwh5_9*r22);
IkReal x872=((0.08535)*pp);
IkReal x873=(pp*r21);
IkReal x874=((0.1707)*pp);
IkReal x875=((2.0)*gclwh5_10);
IkReal x876=(gclwh13_15*r21);
IkReal x877=(gclwh2_0*pz);
IkReal x878=(gclwh11_1*rxp2_2);
IkReal x879=(gclwh5_1*r22);
IkReal x880=((0.001545085)*pp);
IkReal x881=(gclwh5_10*r22);
IkReal x882=(gclwh9_10*rxp0_2);
IkReal x883=(gclwh7_10*rxp1_2);
IkReal x884=(gclwh13_0*pz);
IkReal x885=((2.0)*pp);
IkReal x886=((0.0072846225)*r21);
IkReal x887=(pp*r22);
IkReal x888=(gclwh0_1*r20);
IkReal x889=((1.0)*pz);
IkReal x890=((1.0)*pp);
IkReal x891=(gclwh5_0*pz);
IkReal x892=((2.0)*x850);
IkReal x893=((1.0)*x851);
IkReal x894=((0.0072846225)*pz*r20);
op[69]=((0.05197952)+(((-1.0)*x859*x885))+(((-4.0)*gclwh15_10*x855))+(((-0.014569245)*x881))+(((0.014569245)*x857))+(((-0.3414)*x869))+((x856*x866))+(((-0.014569245)*x859))+(((4.0)*gclwh13_10*x854))+(((0.3414)*x883))+(((-0.3414)*x882))+(((4.0)*gclwh5_10*x868))+(((-1.0)*x875*x887)));
op[70]=((0.01302416)+((gclwh0_0*x894))+(((-1.0)*gclwh13_1*r21*x893))+(((-1.0)*x879*x880))+(((-1.0)*gclwh0_1*x855*x885))+(((-1.0)*gclwh15_0*x894))+((gclwh2_0*npy*x892))+((gclwh15_0*npx*x892))+(((-1.0)*x879*x893))+(((-1.0)*gclwh13_0*npy*x892))+(((0.0072846225)*x857))+((x868*x875))+(((-1.0)*x871*x872))+(((0.1707)*gclwh13_9*x854))+(((-1.0)*x859*x890))+((x863*x874))+(((0.1707)*x883))+(((0.011479075)*gclwh15_1*x855))+(((4.18103640120938e-5)*x888))+((gclwh13_1*x854*x885))+((x877*x886))+(((-0.00097973905125)*x863))+(((-1.0)*x881*x890))+(((-0.1707)*x882))+((x851*x860))+(((-1.0)*x852*x872))+(((2.0)*gclwh13_10*x854))+(((-0.011479075)*gclwh5_1*x868))+(((-1.0)*x873*x877))+((gclwh5_9*npz*x858))+(((0.0072846225)*r22*x891))+(((0.00097973905125)*x878))+(((0.000621742530375)*x861))+(((4.18103640120938e-5)*x879))+((gclwh2_1*r21*x851))+((gclwh13_1*x870))+((gclwh11_0*rxp2_2*x858))+(((-0.0072846225)*x859))+(((-0.001545085)*gclwh13_1*x873))+((gclwh2_1*x870))+(((-0.1707)*gclwh15_9*x855))+(((-0.01302416)*gclwh0_1*x866))+(((-1.0)*gclwh15_1*x855*x885))+((x861*x872))+(((-0.0072846225)*x881))+(((-0.000621742530375)*x852))+(((-1.0)*x874*x878))+(((-1.0)*x855*x856))+((x851*x888))+(((0.011479075)*gclwh2_1*x854))+x858+((gclwh0_0*npx*x892))+(((-2.0)*x854*x862))+((x860*x880))+(((-0.1707)*x869))+(((-1.0)*gclwh15_0*x866*x889))+(((-1.0)*gclwh7_0*rxp1_2*x858))+(((0.011479075)*gclwh0_1*x855))+(((-1.0)*gclwh5_0*npz*x892))+(((-0.011479075)*gclwh13_1*x854))+((gclwh9_0*rxp0_2*x858))+((gclwh5_1*x868*x885))+(((-0.000621742530375)*x871))+(((-1.0)*gclwh0_0*x866*x889))+(((-0.01302416)*r21*x862))+((x873*x884))+((pp*x857))+((x884*x886))+((x887*x891))+(((-4.18103640120938e-5)*x860)));
op[71]=((((0.00518928)*gclwh11_13*rxp2_2))+(((0.000221452524)*x861))+(((0.018777)*gclwh7_7*rxp1_2))+(((-0.000221452524)*x871))+(((-0.018777)*gclwh9_7*rxp0_2))+(((-0.000801308475)*x876))+(((-0.000801308475)*x865))+(((-1.0)*x852*x853))+(((-1.0)*x853*x871))+(((-0.000221452524)*x852))+(((0.22)*gclwh5_15*x868))+(((0.00518928)*gclwh9_13*rxp0_2))+(((-1.0)*x864*x865))+(((-1.0)*x864*x876))+(((-0.0608)*gclwh15_9*x855))+((x853*x861))+(((-0.018777)*gclwh11_7*rxp2_2))+(((0.0608)*gclwh5_9*x868))+(((0.0608)*gclwh13_9*x854))+(((0.22)*gclwh13_15*x854))+(((-0.00518928)*gclwh7_13*rxp1_2))+((x864*x867))+(((-0.22)*gclwh15_15*x855))+(((0.000801308475)*x867)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x895=htj1*htj1;
CheckValue<IkReal> x896=IKPowWithIntegerCheck(((1.0)+x895),-1);
if(!x896.valid){
continue;
}
cj1array[numsolutions]=((x896.value)*(((1.0)+(((-1.0)*x895)))));
CheckValue<IkReal> x897=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x897.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x897.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x898=htj2*htj2;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(((1.0)+x898),-1);
if(!x899.valid){
continue;
}
cj2array[numsolutions]=((x899.value)*(((1.0)+(((-1.0)*x898)))));
CheckValue<IkReal> x900=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x900.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x900.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x901=htj3*htj3;
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((1.0)+x901),-1);
if(!x902.valid){
continue;
}
cj3array[numsolutions]=((x902.value)*(((1.0)+(((-1.0)*x901)))));
CheckValue<IkReal> x903=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x903.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x903.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x904=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x904);
rxp1_0=(pz*r11);
rxp1_1=(r01*x904);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x905=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x905);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(r22,-1);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907=IKPowWithIntegerCheck(sj3,-1);
if(!x907.valid){
continue;
}
sj4array[0]=((x906.value)*(x907.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x908=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x908);
rxp1_0=(pz*r11);
rxp1_1=(r01*x908);
IkReal x909=((16.0)*sj4);
IkReal x910=(cj1*cj2);
IkReal x911=((4.0)*sj3);
IkReal x912=((8.0)*sj4);
IkReal x913=((4.0)*cj4);
IkReal x914=(sj1*sj2);
IkReal x915=((4.0)*sj4);
IkReal x916=(cj3*r02);
IkReal x917=((16.0)*sj3);
IkReal x918=((8.0)*sj3);
IkReal x919=((12.0)*cj4);
IkReal x920=((12.0)*sj4);
IkReal x921=(cj3*r12);
IkReal x922=(r11*x911);
IkReal x923=(r01*x911);
IkReal x924=(r01*x914);
IkReal x925=(cj3*cj4*r01);
IkReal x926=(cj3*cj4*r11);
IkReal x927=(cj3*r10*x913);
IkReal x928=(x920*x921);
IkReal x929=(cj3*r00*x913);
IkReal x930=(x916*x920);
IkReal x931=(r00*x914*x915);
IkReal x932=(r02*x914*x919);
IkReal x933=(r00*x910*x915);
IkReal x934=(r02*x910*x919);
IkReal x935=(r10*x914*x915);
IkReal x936=(r12*x910*x919);
IkReal x937=(r12*x914*x919);
IkReal x938=(r10*x910*x915);
IkReal x939=(x933+x922);
IkReal x940=(x935+x923);
IkReal x941=(x931+x927);
IkReal x942=(x934+x928);
IkReal x943=(x938+x929);
IkReal x944=(x937+x930);
j5eval[0]=((IKabs(((((-1.0)*x912*x924))+((r01*x910*x912))+(((-8.0)*x926))+(((-1.0)*r10*x918)))))+(((0.5)*(IKabs(((((-1.0)*x944))+(((-1.0)*x943))+x936+x940)))))+(((0.5)*(IKabs(((((-1.0)*x940))+(((-1.0)*x944))+x936+x943)))))+(((0.5)*(IKabs(((((-1.0)*r00*x917))+((r11*x909*x914))+(((-16.0)*x925))+(((-1.0)*r11*x909*x910)))))))+(((0.5)*(IKabs(((((-1.0)*x942))+x932+x941+(((-1.0)*x939)))))))+(((0.5)*(IKabs(((((-1.0)*x943))+((r12*x910*x913))+(((-1.0)*r12*x913*x914))+x940+(((-1.0)*x915*x916)))))))+(IKabs(((((-8.0)*x925))+(((-1.0)*r00*x918))+((r11*x912*x914))+(((-1.0)*r11*x910*x912)))))+(((0.5)*(IKabs(((((-1.0)*x942))+(((-1.0)*x941))+x939+x932)))))+(((0.5)*(IKabs((((r01*x909*x910))+(((-1.0)*x909*x924))+(((-1.0)*r10*x917))+(((-16.0)*x926)))))))+(((0.5)*(IKabs(((((-1.0)*x941))+((r02*x913*x914))+(((-1.0)*r02*x910*x913))+(((-1.0)*x915*x921))+x939))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x945=(r10*sj3);
IkReal x946=(r01*sj4);
IkReal x947=(cj1*cj2);
IkReal x948=(cj3*cj4);
IkReal x949=(sj1*sj2);
IkReal x950=(cj4*r02);
IkReal x951=((4.0)*r11*sj3);
IkReal x952=(cj3*r12*sj4);
IkReal x953=((4.0)*r00*sj4);
IkReal x954=((4.0)*r10*x948);
IkReal x955=((12.0)*x952);
IkReal x956=((4.0)*x952);
IkReal x957=(x947*x953);
IkReal x958=(x949*x953);
IkReal x959=((12.0)*x949*x950);
IkReal x960=((12.0)*x947*x950);
IkReal x961=((4.0)*x949*x950);
IkReal x962=((4.0)*x947*x950);
IkReal x963=(x957+x951);
IkReal x964=(x958+x954);
IkReal x965=(x962+x956);
IkReal x966=(x960+x955);
IkReal x967=((((-8.0)*r11*x948))+(((-8.0)*x945))+(((-8.0)*x946*x949))+(((8.0)*x946*x947)));
op[0]=(x963+x961+(((-1.0)*x965))+(((-1.0)*x964)));
op[1]=x967;
op[2]=(x963+x959+(((-1.0)*x964))+(((-1.0)*x966)));
op[3]=((((16.0)*x946*x947))+(((-16.0)*x946*x949))+(((-16.0)*x945))+(((-16.0)*r11*x948)));
op[4]=(x964+x959+(((-1.0)*x966))+(((-1.0)*x963)));
op[5]=x967;
op[6]=(x961+x964+(((-1.0)*x965))+(((-1.0)*x963)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x968=(cj1*cj2);
IkReal x969=((4.0)*cj4);
IkReal x970=(sj1*sj2);
IkReal x971=((4.0)*sj4);
IkReal x972=(r00*sj3);
IkReal x973=(cj3*r02);
IkReal x974=((4.0)*r01*sj3);
IkReal x975=((16.0)*r11*sj4);
IkReal x976=(cj3*cj4*r01);
IkReal x977=((12.0)*cj4*r12);
IkReal x978=((8.0)*r11*sj4);
IkReal x979=(cj3*r00*x969);
IkReal x980=((12.0)*sj4*x973);
IkReal x981=(x971*x973);
IkReal x982=(r10*x968*x971);
IkReal x983=(r10*x970*x971);
IkReal x984=(x968*x977);
IkReal x985=(x970*x977);
IkReal x986=(r12*x968*x969);
IkReal x987=(r12*x969*x970);
IkReal x988=(x983+x974);
IkReal x989=(x982+x979);
IkReal x990=(x987+x981);
IkReal x991=(x985+x980);
IkReal x992=((((-8.0)*x976))+(((-8.0)*x972))+((x970*x978))+(((-1.0)*x968*x978)));
j5evalpoly[0]=((((-1.0)*x988))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x989))+(((-1.0)*x991))+x988+x984))))+(((htj5*htj5)*(((((-1.0)*x988))+(((-1.0)*x991))+x989+x984))))+(((-1.0)*x990))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x989))+(((-1.0)*x990))+x988+x986))))+(((htj5*htj5*htj5)*(((((-16.0)*x976))+(((-16.0)*x972))+((x970*x975))+(((-1.0)*x968*x975))))))+((htj5*x992))+x989+x986+((x992*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x993=(cj5*sj4);
IkReal x994=(sj4*sj5);
if( IKabs((((r00*x993))+(((-1.0)*r01*x994))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x993))+((r11*x994))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x993))+(((-1.0)*r01*x994))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x993))+((r11*x994))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x993))+(((-1.0)*r01*x994))+((cj4*r02))), ((((-1.0)*r10*x993))+((r11*x994))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x995=IKsin(j0);
IkReal x996=IKcos(j0);
IkReal x997=(r02*sj4);
IkReal x998=((1.0)*sj3);
IkReal x999=(r12*sj4);
IkReal x1000=(cj1*cj2);
IkReal x1001=((1.0)*cj3);
IkReal x1002=((1.0)*sj1);
IkReal x1003=(r11*sj5);
IkReal x1004=(cj5*r01);
IkReal x1005=(cj5*r11);
IkReal x1006=(r00*sj5);
IkReal x1007=((0.24365)*cj1);
IkReal x1008=(cj2*sj1);
IkReal x1009=(r10*sj5);
IkReal x1010=((1.0)*cj4);
IkReal x1011=((0.21325)*x995);
IkReal x1012=(cj4*cj5*r00);
IkReal x1013=(sj2*x995);
IkReal x1014=(cj4*cj5*r10);
IkReal x1015=(cj4*r01*sj5);
IkReal x1016=(sj2*x996);
IkReal x1017=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x1010))+((r01*sj4*sj5))+(((-1.0)*r00*x1017))+x995);
evalcond[1]=(((sj4*x1003))+(((-1.0)*x996))+(((-1.0)*r12*x1010))+(((-1.0)*r10*x1017)));
evalcond[2]=((((0.21325)*sj1*x1016))+(((0.11)*x995))+(((-1.0)*x1007*x996))+(((-1.0)*px))+(((-0.21325)*x1000*x996))+(((-0.08535)*x1006))+(((-0.08535)*x1004)));
evalcond[3]=(((sj1*sj2*x1011))+(((-0.11)*x996))+(((-1.0)*x1007*x995))+(((-1.0)*py))+(((-0.08535)*x1005))+(((-0.08535)*x1009))+(((-1.0)*x1000*x1011)));
evalcond[4]=(((cj3*x1006))+((cj3*x1004))+(((-1.0)*x997*x998))+((sj3*x1012))+((x1008*x996))+((cj1*x1016))+(((-1.0)*x1015*x998)));
evalcond[5]=(((x1000*x996))+((cj3*x1015))+((sj3*x1004))+((sj3*x1006))+(((-1.0)*x1001*x1012))+((cj3*x997))+(((-1.0)*x1002*x1016)));
evalcond[6]=(((cj3*x1009))+((cj3*x1005))+(((-1.0)*cj4*x1003*x998))+((sj3*x1014))+((x1008*x995))+((cj1*x1013))+(((-1.0)*x998*x999)));
evalcond[7]=(((x1000*x995))+((sj3*x1005))+((sj3*x1009))+(((-1.0)*x1001*x1014))+((cj3*cj4*x1003))+((cj3*x999))+(((-1.0)*x1002*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(cj3,-1);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(r22,-1);
if(!x1019.valid){
continue;
}
sj4array[0]=((-1.0)*(x1018.value)*(x1019.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1020=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1020);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1020);
IkReal x1021=((16.0)*sj4);
IkReal x1022=(cj1*cj2);
IkReal x1023=((4.0)*sj3);
IkReal x1024=((8.0)*sj4);
IkReal x1025=((4.0)*cj4);
IkReal x1026=(sj1*sj2);
IkReal x1027=((4.0)*sj4);
IkReal x1028=(cj3*r02);
IkReal x1029=((16.0)*sj3);
IkReal x1030=((8.0)*sj3);
IkReal x1031=((12.0)*cj4);
IkReal x1032=((12.0)*sj4);
IkReal x1033=(cj3*r12);
IkReal x1034=(r11*x1023);
IkReal x1035=(r01*x1023);
IkReal x1036=(r01*x1026);
IkReal x1037=(cj3*cj4*r01);
IkReal x1038=(cj3*cj4*r11);
IkReal x1039=(cj3*r10*x1025);
IkReal x1040=(x1032*x1033);
IkReal x1041=(cj3*r00*x1025);
IkReal x1042=(x1028*x1032);
IkReal x1043=(r00*x1026*x1027);
IkReal x1044=(r02*x1026*x1031);
IkReal x1045=(r00*x1022*x1027);
IkReal x1046=(r02*x1022*x1031);
IkReal x1047=(r10*x1026*x1027);
IkReal x1048=(r12*x1022*x1031);
IkReal x1049=(r12*x1026*x1031);
IkReal x1050=(r10*x1022*x1027);
IkReal x1051=(x1045+x1034);
IkReal x1052=(x1047+x1035);
IkReal x1053=(x1043+x1039);
IkReal x1054=(x1040+x1046);
IkReal x1055=(x1050+x1041);
IkReal x1056=(x1042+x1049);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1052))+x1055+x1048)))))+(((0.5)*(IKabs(((((-16.0)*x1038))+(((-1.0)*x1021*x1036))+((r01*x1021*x1022))+(((-1.0)*r10*x1029)))))))+(((0.5)*(IKabs(((((-1.0)*x1027*x1033))+(((-1.0)*x1053))+x1051+((r02*x1025*x1026))+(((-1.0)*r02*x1022*x1025)))))))+(((0.5)*(IKabs(((((-1.0)*x1055))+x1052+(((-1.0)*r12*x1025*x1026))+((r12*x1022*x1025))+(((-1.0)*x1027*x1028)))))))+(IKabs(((((-1.0)*x1024*x1036))+(((-1.0)*r10*x1030))+(((-8.0)*x1038))+((r01*x1022*x1024)))))+(((0.5)*(IKabs(((((-1.0)*r11*x1021*x1022))+(((-16.0)*x1037))+((r11*x1021*x1026))+(((-1.0)*r00*x1029)))))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1053))+x1051+x1044)))))+(((0.5)*(IKabs(((((-1.0)*x1054))+(((-1.0)*x1051))+x1053+x1044)))))+(((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1055))+x1052+x1048)))))+(IKabs(((((-1.0)*r11*x1022*x1024))+((r11*x1024*x1026))+(((-8.0)*x1037))+(((-1.0)*r00*x1030))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1057=(r10*sj3);
IkReal x1058=(r01*sj4);
IkReal x1059=(cj1*cj2);
IkReal x1060=(cj3*cj4);
IkReal x1061=(sj1*sj2);
IkReal x1062=(cj4*r02);
IkReal x1063=((4.0)*r11*sj3);
IkReal x1064=(cj3*r12*sj4);
IkReal x1065=((4.0)*r00*sj4);
IkReal x1066=((4.0)*r10*x1060);
IkReal x1067=((12.0)*x1064);
IkReal x1068=((4.0)*x1064);
IkReal x1069=(x1059*x1065);
IkReal x1070=(x1061*x1065);
IkReal x1071=((12.0)*x1061*x1062);
IkReal x1072=((12.0)*x1059*x1062);
IkReal x1073=((4.0)*x1061*x1062);
IkReal x1074=((4.0)*x1059*x1062);
IkReal x1075=(x1069+x1063);
IkReal x1076=(x1070+x1066);
IkReal x1077=(x1074+x1068);
IkReal x1078=(x1072+x1067);
IkReal x1079=((((-8.0)*r11*x1060))+(((-8.0)*x1057))+(((-8.0)*x1058*x1061))+(((8.0)*x1058*x1059)));
op[0]=(x1075+x1073+(((-1.0)*x1077))+(((-1.0)*x1076)));
op[1]=x1079;
op[2]=(x1075+x1071+(((-1.0)*x1076))+(((-1.0)*x1078)));
op[3]=((((16.0)*x1058*x1059))+(((-16.0)*x1058*x1061))+(((-16.0)*x1057))+(((-16.0)*r11*x1060)));
op[4]=(x1076+x1071+(((-1.0)*x1075))+(((-1.0)*x1078)));
op[5]=x1079;
op[6]=(x1076+x1073+(((-1.0)*x1075))+(((-1.0)*x1077)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1080=(cj1*cj2);
IkReal x1081=((4.0)*cj4);
IkReal x1082=(sj1*sj2);
IkReal x1083=((4.0)*sj4);
IkReal x1084=(r00*sj3);
IkReal x1085=(cj3*r02);
IkReal x1086=((4.0)*r01*sj3);
IkReal x1087=((16.0)*r11*sj4);
IkReal x1088=(cj3*cj4*r01);
IkReal x1089=((12.0)*cj4*r12);
IkReal x1090=((8.0)*r11*sj4);
IkReal x1091=(cj3*r00*x1081);
IkReal x1092=((12.0)*sj4*x1085);
IkReal x1093=(x1083*x1085);
IkReal x1094=(r10*x1080*x1083);
IkReal x1095=(r10*x1082*x1083);
IkReal x1096=(x1080*x1089);
IkReal x1097=(x1082*x1089);
IkReal x1098=(r12*x1080*x1081);
IkReal x1099=(r12*x1081*x1082);
IkReal x1100=(x1095+x1086);
IkReal x1101=(x1094+x1091);
IkReal x1102=(x1093+x1099);
IkReal x1103=(x1097+x1092);
IkReal x1104=((((-1.0)*x1080*x1090))+((x1082*x1090))+(((-8.0)*x1088))+(((-8.0)*x1084)));
j5evalpoly[0]=(x1101+x1098+(((htj5*htj5*htj5)*((((x1082*x1087))+(((-1.0)*x1080*x1087))+(((-16.0)*x1084))+(((-16.0)*x1088))))))+(((htj5*htj5)*((x1101+x1096+(((-1.0)*x1100))+(((-1.0)*x1103))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1100+x1098+(((-1.0)*x1102))+(((-1.0)*x1101))))))+(((htj5*htj5*htj5*htj5)*((x1100+x1096+(((-1.0)*x1103))+(((-1.0)*x1101))))))+((x1104*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1100))+(((-1.0)*x1102))+((htj5*x1104)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1105=(cj5*sj4);
IkReal x1106=(sj4*sj5);
if( IKabs((((r00*x1105))+(((-1.0)*r01*x1106))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1105))+((r11*x1106))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1105))+(((-1.0)*r01*x1106))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1105))+((r11*x1106))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1105))+(((-1.0)*r01*x1106))+((cj4*r02))), ((((-1.0)*r10*x1105))+((r11*x1106))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1107=IKsin(j0);
IkReal x1108=IKcos(j0);
IkReal x1109=(r02*sj4);
IkReal x1110=((1.0)*sj3);
IkReal x1111=(r12*sj4);
IkReal x1112=(cj1*cj2);
IkReal x1113=((1.0)*cj3);
IkReal x1114=((1.0)*sj1);
IkReal x1115=(r11*sj5);
IkReal x1116=(cj5*r01);
IkReal x1117=(cj5*r11);
IkReal x1118=(r00*sj5);
IkReal x1119=((0.24365)*cj1);
IkReal x1120=(cj2*sj1);
IkReal x1121=(r10*sj5);
IkReal x1122=((1.0)*cj4);
IkReal x1123=((0.21325)*x1107);
IkReal x1124=(cj4*cj5*r00);
IkReal x1125=(sj2*x1107);
IkReal x1126=(cj4*cj5*r10);
IkReal x1127=(cj4*r01*sj5);
IkReal x1128=(sj2*x1108);
IkReal x1129=((1.0)*cj5*sj4);
evalcond[0]=(x1107+((r01*sj4*sj5))+(((-1.0)*r00*x1129))+(((-1.0)*r02*x1122)));
evalcond[1]=((((-1.0)*r12*x1122))+(((-1.0)*r10*x1129))+(((-1.0)*x1108))+((sj4*x1115)));
evalcond[2]=((((-0.21325)*x1108*x1112))+(((0.11)*x1107))+(((-0.08535)*x1118))+(((-0.08535)*x1116))+(((-1.0)*px))+(((-1.0)*x1108*x1119))+(((0.21325)*sj1*x1128)));
evalcond[3]=((((-0.08535)*x1121))+(((-1.0)*x1112*x1123))+((sj1*sj2*x1123))+(((-0.08535)*x1117))+(((-1.0)*py))+(((-1.0)*x1107*x1119))+(((-0.11)*x1108)));
evalcond[4]=((((-1.0)*x1109*x1110))+((x1108*x1120))+(((-1.0)*x1110*x1127))+((cj1*x1128))+((sj3*x1124))+((cj3*x1116))+((cj3*x1118)));
evalcond[5]=(((x1108*x1112))+((sj3*x1116))+((sj3*x1118))+(((-1.0)*x1114*x1128))+(((-1.0)*x1113*x1124))+((cj3*x1109))+((cj3*x1127)));
evalcond[6]=(((x1107*x1120))+((cj1*x1125))+((sj3*x1126))+(((-1.0)*x1110*x1111))+(((-1.0)*cj4*x1110*x1115))+((cj3*x1117))+((cj3*x1121)));
evalcond[7]=(((sj3*x1117))+((cj3*cj4*x1115))+(((-1.0)*x1114*x1125))+(((-1.0)*x1113*x1126))+((sj3*x1121))+((cj3*x1111))+((x1107*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1130=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1130);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1130);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1131=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1131);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1131);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(r22,-1);
if(!x1132.valid){
continue;
}
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(sj3,-1);
if(!x1133.valid){
continue;
}
sj4array[0]=((x1132.value)*(x1133.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1134=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1134);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1134);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1135=((4.0)*r01);
IkReal x1136=((16.0)*r00);
IkReal x1137=(cj3*sj2);
IkReal x1138=((8.0)*r00);
IkReal x1139=(cj2*cj3);
IkReal x1140=(cj4*r01);
IkReal x1141=((16.0)*cj1);
IkReal x1142=((8.0)*sj1);
IkReal x1143=((16.0)*sj1);
IkReal x1144=((8.0)*cj1);
IkReal x1145=(cj2*sj3);
IkReal x1146=(sj2*sj3);
IkReal x1147=(sj1*x1145);
IkReal x1148=((4.0)*cj4*r00);
IkReal x1149=(cj1*x1146);
IkReal x1150=(((sj1*x1135*x1137))+((sj1*x1146*x1148))+((x1135*x1149))+((x1135*x1147)));
IkReal x1151=(((cj1*x1135*x1139))+((cj1*x1145*x1148))+((cj1*x1137*x1148))+((sj1*x1139*x1148)));
IkReal x1152=(x1150+(((-1.0)*x1151)));
IkReal x1153=((((-1.0)*x1139*x1140*x1142))+((cj1*x1138*x1139))+(((-1.0)*sj1*x1137*x1138))+((x1140*x1142*x1146))+(((-1.0)*x1140*x1144*x1145))+(((-1.0)*x1137*x1140*x1144))+(((-1.0)*x1138*x1147))+(((-1.0)*x1138*x1149)));
IkReal x1154=(x1151+(((-1.0)*x1150)));
op[0]=x1152;
op[1]=x1153;
op[2]=x1152;
op[3]=((((-1.0)*x1136*x1147))+(((-1.0)*x1136*x1149))+((x1140*x1143*x1146))+(((-1.0)*x1140*x1141*x1145))+(((-1.0)*x1139*x1140*x1143))+(((-1.0)*sj1*x1136*x1137))+((cj1*x1136*x1139))+(((-1.0)*x1137*x1140*x1141)));
op[4]=x1154;
op[5]=x1153;
op[6]=x1154;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1155=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1155))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1155))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1155))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1156=IKcos(j0);
IkReal x1157=IKsin(j0);
IkReal x1158=((1.0)*cj3);
IkReal x1159=((1.0)*sj1);
IkReal x1160=(r11*sj5);
IkReal x1161=(cj5*r01);
IkReal x1162=(r01*sj5);
IkReal x1163=((0.21325)*sj1);
IkReal x1164=(cj5*r11);
IkReal x1165=(cj3*cj4);
IkReal x1166=(r00*sj5);
IkReal x1167=((0.24365)*cj1);
IkReal x1168=(r10*sj5);
IkReal x1169=(cj4*cj5*r00);
IkReal x1170=(sj2*x1157);
IkReal x1171=(cj4*cj5*r10);
IkReal x1172=((1.0)*cj4*sj3);
IkReal x1173=(cj2*x1156);
IkReal x1174=(sj2*x1156);
IkReal x1175=((1.0)*cj5*sj4);
IkReal x1176=(cj1*cj2*x1157);
evalcond[0]=(x1157+((sj4*x1162))+(((-1.0)*r00*x1175)));
evalcond[1]=(((sj4*x1160))+(((-1.0)*x1156))+(((-1.0)*r10*x1175)));
evalcond[2]=(((cj1*x1174))+((sj1*x1173))+(((-1.0)*x1162*x1172))+((cj3*x1166))+((cj3*x1161))+((sj3*x1169)));
evalcond[3]=(((sj3*x1171))+((cj1*x1170))+((cj2*sj1*x1157))+((cj3*x1164))+((cj3*x1168))+(((-1.0)*x1160*x1172)));
evalcond[4]=(((cj1*x1173))+(((-1.0)*x1158*x1169))+(((-1.0)*x1159*x1174))+((x1162*x1165))+((sj3*x1166))+((sj3*x1161)));
evalcond[5]=(x1176+(((-1.0)*x1158*x1171))+(((-1.0)*x1159*x1170))+((x1160*x1165))+((sj3*x1164))+((sj3*x1168)));
evalcond[6]=((((-1.0)*x1156*x1167))+(((-0.08535)*x1161))+(((-0.08535)*x1166))+((x1163*x1174))+(((-1.0)*px))+(((0.11)*x1157))+(((-0.21325)*cj1*x1173)));
evalcond[7]=((((-0.08535)*x1164))+(((-0.08535)*x1168))+((x1163*x1170))+(((-0.11)*x1156))+(((-1.0)*py))+(((-0.21325)*x1176))+(((-1.0)*x1157*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1177=IKPowWithIntegerCheck(cj3,-1);
if(!x1177.valid){
continue;
}
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(r22,-1);
if(!x1178.valid){
continue;
}
sj4array[0]=((-1.0)*(x1177.value)*(x1178.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1180=((4.0)*r01);
IkReal x1181=((16.0)*r00);
IkReal x1182=(cj3*sj2);
IkReal x1183=((8.0)*r00);
IkReal x1184=(cj2*cj3);
IkReal x1185=(cj4*r01);
IkReal x1186=((16.0)*cj1);
IkReal x1187=((8.0)*sj1);
IkReal x1188=((16.0)*sj1);
IkReal x1189=((8.0)*cj1);
IkReal x1190=(cj2*sj3);
IkReal x1191=(sj2*sj3);
IkReal x1192=(sj1*x1190);
IkReal x1193=((4.0)*cj4*r00);
IkReal x1194=(cj1*x1191);
IkReal x1195=(((x1180*x1192))+((x1180*x1194))+((sj1*x1180*x1182))+((sj1*x1191*x1193)));
IkReal x1196=(((cj1*x1180*x1184))+((sj1*x1184*x1193))+((cj1*x1190*x1193))+((cj1*x1182*x1193)));
IkReal x1197=(x1195+(((-1.0)*x1196)));
IkReal x1198=((((-1.0)*x1184*x1185*x1187))+(((-1.0)*x1185*x1189*x1190))+((x1185*x1187*x1191))+(((-1.0)*x1182*x1185*x1189))+(((-1.0)*x1183*x1192))+(((-1.0)*x1183*x1194))+(((-1.0)*sj1*x1182*x1183))+((cj1*x1183*x1184)));
IkReal x1199=(x1196+(((-1.0)*x1195)));
op[0]=x1197;
op[1]=x1198;
op[2]=x1197;
op[3]=((((-1.0)*x1184*x1185*x1188))+((x1185*x1188*x1191))+(((-1.0)*x1181*x1192))+(((-1.0)*x1181*x1194))+(((-1.0)*sj1*x1181*x1182))+((cj1*x1181*x1184))+(((-1.0)*x1182*x1185*x1186))+(((-1.0)*x1185*x1186*x1190)));
op[4]=x1199;
op[5]=x1198;
op[6]=x1199;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1200=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1200))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1200))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1200))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1201=IKcos(j0);
IkReal x1202=IKsin(j0);
IkReal x1203=((1.0)*cj3);
IkReal x1204=((1.0)*sj1);
IkReal x1205=(r11*sj5);
IkReal x1206=(cj5*r01);
IkReal x1207=(r01*sj5);
IkReal x1208=((0.21325)*sj1);
IkReal x1209=(cj5*r11);
IkReal x1210=(cj3*cj4);
IkReal x1211=(r00*sj5);
IkReal x1212=((0.24365)*cj1);
IkReal x1213=(r10*sj5);
IkReal x1214=(cj4*cj5*r00);
IkReal x1215=(sj2*x1202);
IkReal x1216=(cj4*cj5*r10);
IkReal x1217=((1.0)*cj4*sj3);
IkReal x1218=(cj2*x1201);
IkReal x1219=(sj2*x1201);
IkReal x1220=((1.0)*cj5*sj4);
IkReal x1221=(cj1*cj2*x1202);
evalcond[0]=(x1202+(((-1.0)*r00*x1220))+((sj4*x1207)));
evalcond[1]=(((sj4*x1205))+(((-1.0)*x1201))+(((-1.0)*r10*x1220)));
evalcond[2]=((((-1.0)*x1207*x1217))+((sj3*x1214))+((cj3*x1211))+((cj3*x1206))+((sj1*x1218))+((cj1*x1219)));
evalcond[3]=((((-1.0)*x1205*x1217))+((sj3*x1216))+((cj3*x1213))+((cj3*x1209))+((cj1*x1215))+((cj2*sj1*x1202)));
evalcond[4]=((((-1.0)*x1204*x1219))+(((-1.0)*x1203*x1214))+((x1207*x1210))+((sj3*x1211))+((sj3*x1206))+((cj1*x1218)));
evalcond[5]=((((-1.0)*x1204*x1215))+x1221+(((-1.0)*x1203*x1216))+((sj3*x1213))+((sj3*x1209))+((x1205*x1210)));
evalcond[6]=((((-1.0)*x1201*x1212))+(((-0.08535)*x1206))+(((-1.0)*px))+(((-0.21325)*cj1*x1218))+(((0.11)*x1202))+((x1208*x1219))+(((-0.08535)*x1211)));
evalcond[7]=((((-0.08535)*x1209))+(((-1.0)*x1202*x1212))+(((-0.21325)*x1221))+(((-1.0)*py))+(((-0.11)*x1201))+((x1208*x1215))+(((-0.08535)*x1213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1224 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1224.valid){
continue;
}
IkReal x1222=((1.0)*(x1224.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1225.valid){
continue;
}
if( (((-1.0)*(x1225.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1225.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1223=((-1.0)*(IKasin(((-1.0)*(x1225.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1222))+(((-1.0)*x1223)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1222))+(((1.0)*x1223)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1226=cj5*cj5;
IkReal x1227=r21*r21;
IkReal x1228=(sj3*x1226);
IkReal x1229=(((sj3*(r22*r22)))+((x1228*(r20*r20)))+(((-1.0)*x1227*x1228))+((sj3*x1227))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1229;
j4eval[1]=IKsign(x1229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1230=cj5*cj5;
IkReal x1231=r21*r21;
IkReal x1232=((1.0)*cj3);
IkReal x1233=(cj3*x1230);
IkReal x1234=((((-1.0)*x1230*x1232*(r20*r20)))+(((-1.0)*x1232*(r22*r22)))+((x1231*x1233))+(((-1.0)*x1231*x1232))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1234;
j4eval[1]=IKsign(x1234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1235=cj1*cj1;
IkReal x1236=cj2*cj2;
IkReal x1237=(cj1*sj1*sj2);
IkReal x1238=(cj2*x1235);
IkReal x1239=(x1235*x1236);
j0eval[0]=((-4.14518051427814)+(((-1.0)*x1235))+(((-7.48153495812743)*x1238))+(((6.54807030503047)*cj2*x1237))+(((3.27403515251523)*x1236))+(((-6.54807030503047)*x1239))+(((7.48153495812743)*x1237)));
j0eval[1]=IKsign(((-575.755625)+(((909.51125)*cj2*x1237))+(((454.755625)*x1236))+(((-138.8976)*x1235))+(((1039.16725)*x1237))+(((-909.51125)*x1239))+(((-1039.16725)*x1238))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1240=((1.0)*cj5);
IkReal x1241=((1.0)*sj5);
IkReal x1242=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1242;
j0eval[1]=IKsign(x1242);
j0eval[2]=((IKabs(((((-1.0)*r11*x1240))+(((-1.0)*r10*x1241)))))+(IKabs(((((-1.0)*r01*x1240))+(((-1.0)*r00*x1241))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1243=cj5*cj5;
IkReal x1244=r21*r21;
IkReal x1245=(sj1*sj2);
IkReal x1246=(r21*sj5);
IkReal x1247=(cj5*r20);
IkReal x1248=(cj1*cj2);
IkReal x1249=(x1244+(((-2.0)*x1246*x1247))+(r22*r22)+((x1243*(r20*r20)))+(((-1.0)*x1243*x1244)));
j4eval[0]=x1249;
j4eval[1]=IKsign(x1249);
j4eval[2]=((IKabs((((r22*x1245))+(((-1.0)*r22*x1248)))))+(IKabs(((((-1.0)*x1245*x1247))+(((-1.0)*x1246*x1248))+((x1247*x1248))+((x1245*x1246))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1250=(cj1*cj2);
IkReal x1251=(sj1*sj2);
IkReal x1252=((24.365)*cj1);
IkReal x1253=(r00*sj5);
IkReal x1254=((100.0)*px);
IkReal x1255=(cj5*r01);
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(((((-11.0)*x1251))+(((11.0)*x1250))),-1);
if(!x1256.valid){
continue;
}
CheckValue<IkReal> x1257=IKPowWithIntegerCheck((x1250+(((-1.0)*x1251))),-1);
if(!x1257.valid){
continue;
}
if( IKabs(((x1256.value)*(((((-12.79)*x1250*x1255))+(((-12.79)*x1250*x1253))+(((-1.0)*x1252*x1255))+(((-1.0)*x1252*x1253))+((x1250*x1254))+(((-1.0)*x1251*x1254))+(((12.79)*x1251*x1253))+(((12.79)*x1251*x1255)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1257.value)*(((((-1.0)*x1255))+(((-1.0)*x1253)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1256.value)*(((((-12.79)*x1250*x1255))+(((-12.79)*x1250*x1253))+(((-1.0)*x1252*x1255))+(((-1.0)*x1252*x1253))+((x1250*x1254))+(((-1.0)*x1251*x1254))+(((12.79)*x1251*x1253))+(((12.79)*x1251*x1255))))))+IKsqr(((x1257.value)*(((((-1.0)*x1255))+(((-1.0)*x1253))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1256.value)*(((((-12.79)*x1250*x1255))+(((-12.79)*x1250*x1253))+(((-1.0)*x1252*x1255))+(((-1.0)*x1252*x1253))+((x1250*x1254))+(((-1.0)*x1251*x1254))+(((12.79)*x1251*x1253))+(((12.79)*x1251*x1255))))), ((x1257.value)*(((((-1.0)*x1255))+(((-1.0)*x1253))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1258=IKcos(j0);
IkReal x1259=IKsin(j0);
IkReal x1260=(cj5*r01);
IkReal x1261=(sj1*sj2);
IkReal x1262=(cj5*r11);
IkReal x1263=(r00*sj5);
IkReal x1264=((0.24365)*cj1);
IkReal x1265=(r10*sj5);
IkReal x1266=(cj1*cj2*x1259);
IkReal x1267=(cj1*cj2*x1258);
evalcond[0]=(x1263+x1260+x1267+(((-1.0)*x1258*x1261)));
evalcond[1]=(x1262+x1266+x1265+(((-1.0)*x1259*x1261)));
evalcond[2]=((((-1.0)*x1258*x1264))+(((0.21325)*x1258*x1261))+(((-0.08535)*x1260))+(((-0.08535)*x1263))+(((-1.0)*px))+(((-0.21325)*x1267))+(((0.11)*x1259)));
evalcond[3]=((((-0.08535)*x1262))+(((-0.08535)*x1265))+(((-1.0)*py))+(((0.21325)*x1259*x1261))+(((-0.21325)*x1266))+(((-1.0)*x1259*x1264))+(((-0.11)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1268=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1268;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1269=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1269;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1270=((1.0)*cj5);
IkReal x1271=((((-1.0)*r21*x1270))+(((-1.0)*r20*sj5)));
j4eval[0]=x1271;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1270))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1270)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1272=((1.0)*cj5);
CheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1272))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1272))+(((-1.0)*r20*sj5)))),-1);
if(!x1274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1273.value)+(((1.5707963267949)*(x1274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1275=IKsin(j4);
IkReal x1276=IKcos(j4);
IkReal x1277=(cj5*r10);
IkReal x1278=(cj2*sj1);
IkReal x1279=(r01*sj5);
IkReal x1280=(cj5*r00);
IkReal x1281=(cj5*r20);
IkReal x1282=(cj1*sj2);
IkReal x1283=((1.0)*x1276);
IkReal x1284=((1.0)*x1275);
IkReal x1285=(sj5*x1275);
evalcond[0]=((((-1.0)*r22*x1283))+((r21*x1285))+(((-1.0)*x1281*x1284)));
evalcond[1]=((((-1.0)*r02*x1283))+((x1275*x1279))+sj0+(((-1.0)*x1280*x1284)));
evalcond[2]=(((r11*x1285))+(((-1.0)*x1277*x1284))+(((-1.0)*r12*x1283))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1284))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1276*x1281))+(((-1.0)*r21*sj5*x1283)));
evalcond[4]=((((-1.0)*r02*x1284))+((cj0*x1278))+((cj0*x1282))+((x1276*x1280))+(((-1.0)*x1279*x1283)));
evalcond[5]=(((x1276*x1277))+((sj0*x1278))+(((-1.0)*r11*sj5*x1283))+((sj0*x1282))+(((-1.0)*r12*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1286.valid){
continue;
}
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1286.value)))+(x1287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1288=IKsin(j4);
IkReal x1289=IKcos(j4);
IkReal x1290=(cj5*r10);
IkReal x1291=(cj2*sj1);
IkReal x1292=(r01*sj5);
IkReal x1293=(cj5*r00);
IkReal x1294=(cj5*r20);
IkReal x1295=(cj1*sj2);
IkReal x1296=((1.0)*x1289);
IkReal x1297=((1.0)*x1288);
IkReal x1298=(sj5*x1288);
evalcond[0]=(((r21*x1298))+(((-1.0)*r22*x1296))+(((-1.0)*x1294*x1297)));
evalcond[1]=(sj0+(((-1.0)*x1293*x1297))+((x1288*x1292))+(((-1.0)*r02*x1296)));
evalcond[2]=((((-1.0)*r12*x1296))+((r11*x1298))+(((-1.0)*x1290*x1297))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1296))+(((-1.0)*r22*x1297))+((x1289*x1294)));
evalcond[4]=((((-1.0)*x1292*x1296))+(((-1.0)*r02*x1297))+((cj0*x1291))+((cj0*x1295))+((x1289*x1293)));
evalcond[5]=(((sj0*x1291))+((sj0*x1295))+(((-1.0)*r12*x1297))+(((-1.0)*r11*sj5*x1296))+((x1289*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1299.value)))+(x1300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1301=IKsin(j4);
IkReal x1302=IKcos(j4);
IkReal x1303=(cj5*r10);
IkReal x1304=(cj2*sj1);
IkReal x1305=(r01*sj5);
IkReal x1306=(cj5*r00);
IkReal x1307=(cj5*r20);
IkReal x1308=(cj1*sj2);
IkReal x1309=((1.0)*x1302);
IkReal x1310=((1.0)*x1301);
IkReal x1311=(sj5*x1301);
evalcond[0]=((((-1.0)*r22*x1309))+(((-1.0)*x1307*x1310))+((r21*x1311)));
evalcond[1]=(sj0+(((-1.0)*x1306*x1310))+(((-1.0)*r02*x1309))+((x1301*x1305)));
evalcond[2]=(((r11*x1311))+(((-1.0)*x1303*x1310))+(((-1.0)*r12*x1309))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1310))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1302*x1307))+(((-1.0)*r21*sj5*x1309)));
evalcond[4]=(((x1302*x1306))+(((-1.0)*r02*x1310))+(((-1.0)*x1305*x1309))+((cj0*x1304))+((cj0*x1308)));
evalcond[5]=((((-1.0)*r12*x1310))+((x1302*x1303))+(((-1.0)*r11*sj5*x1309))+((sj0*x1304))+((sj0*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1312=cj5*cj5;
IkReal x1313=r21*r21;
IkReal x1314=(sj1*sj2);
IkReal x1315=(r21*sj5);
IkReal x1316=(cj1*cj2);
IkReal x1317=(cj5*r20);
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1316))+((r22*x1314)))),IkReal((((x1314*x1315))+((x1316*x1317))+(((-1.0)*x1314*x1317))+(((-1.0)*x1315*x1316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign((x1313+((x1312*(r20*r20)))+(r22*r22)+(((-2.0)*x1315*x1317))+(((-1.0)*x1312*x1313)))),-1);
if(!x1319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1318.value)+(((1.5707963267949)*(x1319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1320=IKsin(j4);
IkReal x1321=IKcos(j4);
IkReal x1322=(r21*sj5);
IkReal x1323=(cj5*r20);
IkReal x1324=((1.0)*x1321);
IkReal x1325=((1.0)*x1320);
evalcond[0]=((((-1.0)*x1323*x1325))+(((-1.0)*r22*x1324))+((x1320*x1322)));
evalcond[1]=((((-1.0)*r22*x1325))+(((-1.0)*x1322*x1324))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1321*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1326=(cj5*sj4);
IkReal x1327=(sj4*sj5);
if( IKabs((((r00*x1326))+(((-1.0)*r01*x1327))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1326))+((r11*x1327))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1326))+(((-1.0)*r01*x1327))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1326))+((r11*x1327))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1326))+(((-1.0)*r01*x1327))+((cj4*r02))), ((((-1.0)*r10*x1326))+((r11*x1327))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1328=IKcos(j0);
IkReal x1329=IKsin(j0);
IkReal x1330=(cj4*cj5);
IkReal x1331=(cj5*r01);
IkReal x1332=((1.0)*sj1);
IkReal x1333=(r11*sj5);
IkReal x1334=((1.0)*sj4);
IkReal x1335=((0.21325)*sj1);
IkReal x1336=((0.24365)*cj1);
IkReal x1337=(r00*sj5);
IkReal x1338=(cj5*r11);
IkReal x1339=((1.0)*cj4);
IkReal x1340=(r01*sj5);
IkReal x1341=(r10*sj5);
IkReal x1342=(sj2*x1329);
IkReal x1343=(cj2*x1328);
IkReal x1344=(sj2*x1328);
IkReal x1345=(cj1*cj2*x1329);
evalcond[0]=(x1329+((sj4*x1340))+(((-1.0)*cj5*r00*x1334))+(((-1.0)*r02*x1339)));
evalcond[1]=(((sj4*x1333))+(((-1.0)*cj5*r10*x1334))+(((-1.0)*x1328))+(((-1.0)*r12*x1339)));
evalcond[2]=(x1337+x1331+((cj1*x1343))+(((-1.0)*x1332*x1344)));
evalcond[3]=(x1341+x1345+x1338+(((-1.0)*x1332*x1342)));
evalcond[4]=(((sj1*x1343))+((cj1*x1344))+((r00*x1330))+(((-1.0)*x1339*x1340))+(((-1.0)*r02*x1334)));
evalcond[5]=(((cj1*x1342))+((cj2*sj1*x1329))+(((-1.0)*x1333*x1339))+((r10*x1330))+(((-1.0)*r12*x1334)));
evalcond[6]=((((-0.08535)*x1337))+(((-0.08535)*x1331))+(((-1.0)*x1328*x1336))+(((-1.0)*px))+(((-0.21325)*cj1*x1343))+(((0.11)*x1329))+((x1335*x1344)));
evalcond[7]=((((-0.08535)*x1338))+(((-0.08535)*x1341))+(((-0.11)*x1328))+(((-1.0)*py))+(((-1.0)*x1329*x1336))+((x1335*x1342))+(((-0.21325)*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1346=((1.0)*cj5);
IkReal x1347=((1.0)*sj5);
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1348.valid){
continue;
}
CheckValue<IkReal> x1349 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1346))+(((-1.0)*r10*x1347)))),IkReal(((((-1.0)*r00*x1347))+(((-1.0)*r01*x1346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1349.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1348.value)))+(x1349.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1350=IKcos(j0);
IkReal x1351=IKsin(j0);
IkReal x1352=(cj5*r01);
IkReal x1353=(sj1*sj2);
IkReal x1354=(cj5*r11);
IkReal x1355=(r00*sj5);
IkReal x1356=((0.24365)*cj1);
IkReal x1357=(r10*sj5);
IkReal x1358=(cj1*cj2*x1351);
IkReal x1359=(cj1*cj2*x1350);
evalcond[0]=(x1359+x1352+x1355+(((-1.0)*x1350*x1353)));
evalcond[1]=((((-1.0)*x1351*x1353))+x1358+x1357+x1354);
evalcond[2]=((((-1.0)*x1350*x1356))+(((0.11)*x1351))+(((-1.0)*px))+(((-0.08535)*x1352))+(((-0.08535)*x1355))+(((0.21325)*x1350*x1353))+(((-0.21325)*x1359)));
evalcond[3]=((((-0.11)*x1350))+(((-1.0)*py))+(((-0.08535)*x1357))+(((-0.08535)*x1354))+(((-1.0)*x1351*x1356))+(((-0.21325)*x1358))+(((0.21325)*x1351*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1360=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1360;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1361=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1361;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1362=((1.0)*cj5);
IkReal x1363=((((-1.0)*r21*x1362))+(((-1.0)*r20*sj5)));
j4eval[0]=x1363;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1362))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1362))))));
j4eval[2]=IKsign(x1363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1364=((1.0)*cj5);
CheckValue<IkReal> x1365 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1364))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1365.valid){
continue;
}
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1364))+(((-1.0)*r20*sj5)))),-1);
if(!x1366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1365.value)+(((1.5707963267949)*(x1366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1367=IKsin(j4);
IkReal x1368=IKcos(j4);
IkReal x1369=(cj5*r10);
IkReal x1370=(cj2*sj1);
IkReal x1371=(r01*sj5);
IkReal x1372=(cj5*r00);
IkReal x1373=(cj5*r20);
IkReal x1374=(cj1*sj2);
IkReal x1375=((1.0)*x1368);
IkReal x1376=((1.0)*x1367);
IkReal x1377=(sj5*x1367);
evalcond[0]=((((-1.0)*r22*x1375))+((r21*x1377))+(((-1.0)*x1373*x1376)));
evalcond[1]=(sj0+((x1367*x1371))+(((-1.0)*x1372*x1376))+(((-1.0)*r02*x1375)));
evalcond[2]=(((r11*x1377))+(((-1.0)*r12*x1375))+(((-1.0)*x1369*x1376))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1368*x1373))+(((-1.0)*r21*sj5*x1375)));
evalcond[4]=((((-1.0)*x1371*x1375))+(((-1.0)*r02*x1376))+((x1368*x1372))+((cj0*x1370))+((cj0*x1374)));
evalcond[5]=((((-1.0)*r12*x1376))+(((-1.0)*r11*sj5*x1375))+((x1368*x1369))+((sj0*x1374))+((sj0*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1378.valid){
continue;
}
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1378.value)))+(x1379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1380=IKsin(j4);
IkReal x1381=IKcos(j4);
IkReal x1382=(cj5*r10);
IkReal x1383=(cj2*sj1);
IkReal x1384=(r01*sj5);
IkReal x1385=(cj5*r00);
IkReal x1386=(cj5*r20);
IkReal x1387=(cj1*sj2);
IkReal x1388=((1.0)*x1381);
IkReal x1389=((1.0)*x1380);
IkReal x1390=(sj5*x1380);
evalcond[0]=(((r21*x1390))+(((-1.0)*r22*x1388))+(((-1.0)*x1386*x1389)));
evalcond[1]=(((x1380*x1384))+sj0+(((-1.0)*r02*x1388))+(((-1.0)*x1385*x1389)));
evalcond[2]=((((-1.0)*r12*x1388))+(((-1.0)*x1382*x1389))+((r11*x1390))+(((-1.0)*cj0)));
evalcond[3]=(((x1381*x1386))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1388))+(((-1.0)*r22*x1389)));
evalcond[4]=(((x1381*x1385))+(((-1.0)*x1384*x1388))+(((-1.0)*r02*x1389))+((cj0*x1387))+((cj0*x1383)));
evalcond[5]=((((-1.0)*r12*x1389))+((x1381*x1382))+(((-1.0)*r11*sj5*x1388))+((sj0*x1387))+((sj0*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1391.value)))+(x1392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1393=IKsin(j4);
IkReal x1394=IKcos(j4);
IkReal x1395=(cj5*r10);
IkReal x1396=(cj2*sj1);
IkReal x1397=(r01*sj5);
IkReal x1398=(cj5*r00);
IkReal x1399=(cj5*r20);
IkReal x1400=(cj1*sj2);
IkReal x1401=((1.0)*x1394);
IkReal x1402=((1.0)*x1393);
IkReal x1403=(sj5*x1393);
evalcond[0]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1401))+((r21*x1403)));
evalcond[1]=(sj0+((x1393*x1397))+(((-1.0)*x1398*x1402))+(((-1.0)*r02*x1401)));
evalcond[2]=((((-1.0)*r12*x1401))+((r11*x1403))+(((-1.0)*x1395*x1402))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1402))+((x1394*x1399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1401)));
evalcond[4]=(((x1394*x1398))+((cj0*x1400))+(((-1.0)*r02*x1402))+((cj0*x1396))+(((-1.0)*x1397*x1401)));
evalcond[5]=((((-1.0)*r12*x1402))+(((-1.0)*r11*sj5*x1401))+((x1394*x1395))+((sj0*x1396))+((sj0*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1404=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1404;
j0eval[1]=IKsign(x1404);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1405=r21*r21;
IkReal x1406=cj5*cj5;
IkReal x1407=(sj1*sj2);
IkReal x1408=(r21*sj5);
IkReal x1409=(cj5*r20);
IkReal x1410=(cj1*cj2);
IkReal x1411=((((-1.0)*x1405))+(((-1.0)*x1406*(r20*r20)))+(((2.0)*x1408*x1409))+((x1405*x1406))+(((-1.0)*(r22*r22))));
j4eval[0]=x1411;
j4eval[1]=((IKabs(((((-1.0)*x1407*x1409))+((x1409*x1410))+(((-1.0)*x1408*x1410))+((x1407*x1408)))))+(IKabs(((((-1.0)*r22*x1410))+((r22*x1407))))));
j4eval[2]=IKsign(x1411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1412=(cj1*cj2);
IkReal x1413=(sj1*sj2);
IkReal x1414=(r00*sj5);
IkReal x1415=((100.0)*px);
IkReal x1416=(cj5*r01);
IkReal x1417=((24.365)*cj1);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(((((-11.0)*x1413))+(((11.0)*x1412))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck((x1412+(((-1.0)*x1413))),-1);
if(!x1419.valid){
continue;
}
if( IKabs(((x1418.value)*((((x1412*x1415))+(((-1.0)*x1413*x1415))+((x1416*x1417))+(((29.86)*x1412*x1414))+(((29.86)*x1412*x1416))+(((-29.86)*x1413*x1416))+(((-29.86)*x1413*x1414))+((x1414*x1417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1419.value)*((x1414+x1416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1418.value)*((((x1412*x1415))+(((-1.0)*x1413*x1415))+((x1416*x1417))+(((29.86)*x1412*x1414))+(((29.86)*x1412*x1416))+(((-29.86)*x1413*x1416))+(((-29.86)*x1413*x1414))+((x1414*x1417))))))+IKsqr(((x1419.value)*((x1414+x1416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1418.value)*((((x1412*x1415))+(((-1.0)*x1413*x1415))+((x1416*x1417))+(((29.86)*x1412*x1414))+(((29.86)*x1412*x1416))+(((-29.86)*x1413*x1416))+(((-29.86)*x1413*x1414))+((x1414*x1417))))), ((x1419.value)*((x1414+x1416))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1420=IKcos(j0);
IkReal x1421=IKsin(j0);
IkReal x1422=(sj1*sj2);
IkReal x1423=(cj5*r11);
IkReal x1424=((1.0)*sj5);
IkReal x1425=(cj5*r01);
IkReal x1426=((0.24365)*cj1);
IkReal x1427=((0.08535)*sj5);
IkReal x1428=(cj1*cj2*x1421);
IkReal x1429=(cj1*cj2*x1420);
evalcond[0]=((((-1.0)*x1420*x1422))+(((-1.0)*x1425))+x1429+(((-1.0)*r00*x1424)));
evalcond[1]=((((-1.0)*r10*x1424))+(((-1.0)*x1423))+(((-1.0)*x1421*x1422))+x1428);
evalcond[2]=((((-0.08535)*x1425))+(((0.21325)*x1420*x1422))+(((-0.21325)*x1429))+(((-1.0)*x1420*x1426))+(((-1.0)*px))+(((0.11)*x1421))+(((-1.0)*r00*x1427)));
evalcond[3]=((((-1.0)*x1421*x1426))+(((-0.08535)*x1423))+(((-1.0)*r10*x1427))+(((-0.21325)*x1428))+(((-0.11)*x1420))+(((-1.0)*py))+(((0.21325)*x1421*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1430=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1430;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1431=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1431;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1432=((1.0)*cj5);
IkReal x1433=((((-1.0)*r21*x1432))+(((-1.0)*r20*sj5)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1432))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1432))))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1434=((1.0)*cj5);
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1434))+(((-1.0)*r20*sj5)))),-1);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1434))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1435.value)))+(x1436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1437=IKsin(j4);
IkReal x1438=IKcos(j4);
IkReal x1439=(cj5*r00);
IkReal x1440=(cj5*r10);
IkReal x1441=(cj2*sj1);
IkReal x1442=(r21*sj5);
IkReal x1443=(cj5*r20);
IkReal x1444=(cj1*sj2);
IkReal x1445=((1.0)*x1438);
IkReal x1446=((1.0)*x1437);
IkReal x1447=(sj5*x1437);
IkReal x1448=(sj5*x1438);
evalcond[0]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1443*x1446)));
evalcond[1]=(sj0+(((-1.0)*x1439*x1446))+(((-1.0)*r02*x1445))+((r01*x1447)));
evalcond[2]=(((r11*x1447))+(((-1.0)*r12*x1445))+(((-1.0)*x1440*x1446))+(((-1.0)*cj0)));
evalcond[3]=(((x1438*x1442))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1443*x1445))+((r22*x1437)));
evalcond[4]=(((r02*x1437))+(((-1.0)*x1439*x1445))+((cj0*x1441))+((cj0*x1444))+((r01*x1448)));
evalcond[5]=(((r11*x1448))+((sj0*x1441))+((sj0*x1444))+((r12*x1437))+(((-1.0)*x1440*x1445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1449.valid){
continue;
}
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1449.value)))+(x1450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1451=IKsin(j4);
IkReal x1452=IKcos(j4);
IkReal x1453=(cj5*r00);
IkReal x1454=(cj5*r10);
IkReal x1455=(cj2*sj1);
IkReal x1456=(r21*sj5);
IkReal x1457=(cj5*r20);
IkReal x1458=(cj1*sj2);
IkReal x1459=((1.0)*x1452);
IkReal x1460=((1.0)*x1451);
IkReal x1461=(sj5*x1451);
IkReal x1462=(sj5*x1452);
evalcond[0]=((((-1.0)*r22*x1459))+(((-1.0)*x1457*x1460))+((x1451*x1456)));
evalcond[1]=(sj0+(((-1.0)*x1453*x1460))+((r01*x1461))+(((-1.0)*r02*x1459)));
evalcond[2]=((((-1.0)*x1454*x1460))+((r11*x1461))+(((-1.0)*cj0))+(((-1.0)*r12*x1459)));
evalcond[3]=((((-1.0)*x1457*x1459))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1451))+((x1452*x1456)));
evalcond[4]=(((r01*x1462))+((cj0*x1455))+((cj0*x1458))+(((-1.0)*x1453*x1459))+((r02*x1451)));
evalcond[5]=((((-1.0)*x1454*x1459))+((r12*x1451))+((sj0*x1455))+((sj0*x1458))+((r11*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1463.value)))+(x1464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1465=IKsin(j4);
IkReal x1466=IKcos(j4);
IkReal x1467=(cj5*r00);
IkReal x1468=(cj5*r10);
IkReal x1469=(cj2*sj1);
IkReal x1470=(r21*sj5);
IkReal x1471=(cj5*r20);
IkReal x1472=(cj1*sj2);
IkReal x1473=((1.0)*x1466);
IkReal x1474=((1.0)*x1465);
IkReal x1475=(sj5*x1465);
IkReal x1476=(sj5*x1466);
evalcond[0]=((((-1.0)*r22*x1473))+(((-1.0)*x1471*x1474))+((x1465*x1470)));
evalcond[1]=(sj0+(((-1.0)*x1467*x1474))+(((-1.0)*r02*x1473))+((r01*x1475)));
evalcond[2]=(((r11*x1475))+(((-1.0)*r12*x1473))+(((-1.0)*x1468*x1474))+(((-1.0)*cj0)));
evalcond[3]=(((x1466*x1470))+(((-1.0)*x1471*x1473))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1465)));
evalcond[4]=(((cj0*x1469))+(((-1.0)*x1467*x1473))+((cj0*x1472))+((r01*x1476))+((r02*x1465)));
evalcond[5]=(((sj0*x1472))+((r11*x1476))+((r12*x1465))+(((-1.0)*x1468*x1473))+((sj0*x1469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1477=r21*r21;
IkReal x1478=cj5*cj5;
IkReal x1479=(sj1*sj2);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj1*cj2);
IkReal x1482=(cj5*r20);
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1478*(r20*r20)))+(((2.0)*x1480*x1482))+(((-1.0)*x1477))+(((-1.0)*(r22*r22)))+((x1477*x1478)))),-1);
if(!x1483.valid){
continue;
}
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1481))+((r22*x1479)))),IkReal(((((-1.0)*x1479*x1482))+((x1481*x1482))+(((-1.0)*x1480*x1481))+((x1479*x1480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1483.value)))+(x1484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1485=IKsin(j4);
IkReal x1486=IKcos(j4);
IkReal x1487=(r21*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=((1.0)*x1486);
evalcond[0]=((((-1.0)*x1485*x1488))+((x1485*x1487))+(((-1.0)*r22*x1489)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1486*x1487))+(((-1.0)*x1488*x1489))+((r22*x1485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1490=(cj5*sj4);
IkReal x1491=(sj4*sj5);
if( IKabs((((r00*x1490))+(((-1.0)*r01*x1491))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1491))+(((-1.0)*r10*x1490))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1490))+(((-1.0)*r01*x1491))+((cj4*r02))))+IKsqr((((r11*x1491))+(((-1.0)*r10*x1490))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1490))+(((-1.0)*r01*x1491))+((cj4*r02))), (((r11*x1491))+(((-1.0)*r10*x1490))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1492=IKcos(j0);
IkReal x1493=IKsin(j0);
IkReal x1494=((1.0)*sj1);
IkReal x1495=(r11*sj5);
IkReal x1496=((1.0)*cj5);
IkReal x1497=((0.21325)*sj1);
IkReal x1498=((1.0)*sj5);
IkReal x1499=((0.24365)*cj1);
IkReal x1500=((0.08535)*cj5);
IkReal x1501=((1.0)*cj4);
IkReal x1502=(r01*sj5);
IkReal x1503=((0.08535)*sj5);
IkReal x1504=(sj2*x1493);
IkReal x1505=(cj2*x1492);
IkReal x1506=(sj2*x1492);
IkReal x1507=(cj1*cj2*x1493);
evalcond[0]=((((-1.0)*r00*sj4*x1496))+(((-1.0)*r02*x1501))+x1493+((sj4*x1502)));
evalcond[1]=((((-1.0)*r10*sj4*x1496))+(((-1.0)*x1492))+((sj4*x1495))+(((-1.0)*r12*x1501)));
evalcond[2]=((((-1.0)*r00*x1498))+(((-1.0)*r01*x1496))+(((-1.0)*x1494*x1506))+((cj1*x1505)));
evalcond[3]=((((-1.0)*r11*x1496))+(((-1.0)*x1494*x1504))+x1507+(((-1.0)*r10*x1498)));
evalcond[4]=(((r02*sj4))+((sj1*x1505))+((cj1*x1506))+((cj4*x1502))+(((-1.0)*cj4*r00*x1496)));
evalcond[5]=(((cj1*x1504))+(((-1.0)*cj4*r10*x1496))+((r12*sj4))+((cj4*x1495))+((cj2*sj1*x1493)));
evalcond[6]=((((-0.21325)*cj1*x1505))+(((-1.0)*r01*x1500))+(((-1.0)*r00*x1503))+(((-1.0)*x1492*x1499))+(((-1.0)*px))+((x1497*x1506))+(((0.11)*x1493)));
evalcond[7]=((((-1.0)*x1493*x1499))+(((-1.0)*py))+((x1497*x1504))+(((-0.11)*x1492))+(((-0.21325)*x1507))+(((-1.0)*r11*x1500))+(((-1.0)*r10*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1508=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1508.value)))+(x1509.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1510=IKcos(j0);
IkReal x1511=IKsin(j0);
IkReal x1512=(sj1*sj2);
IkReal x1513=(cj5*r11);
IkReal x1514=((1.0)*sj5);
IkReal x1515=(cj5*r01);
IkReal x1516=((0.24365)*cj1);
IkReal x1517=((0.08535)*sj5);
IkReal x1518=(cj1*cj2*x1511);
IkReal x1519=(cj1*cj2*x1510);
evalcond[0]=((((-1.0)*x1515))+(((-1.0)*r00*x1514))+x1519+(((-1.0)*x1510*x1512)));
evalcond[1]=((((-1.0)*x1511*x1512))+(((-1.0)*x1513))+x1518+(((-1.0)*r10*x1514)));
evalcond[2]=((((0.11)*x1511))+(((0.21325)*x1510*x1512))+(((-1.0)*r00*x1517))+(((-1.0)*x1510*x1516))+(((-1.0)*px))+(((-0.08535)*x1515))+(((-0.21325)*x1519)));
evalcond[3]=((((-1.0)*py))+(((-0.11)*x1510))+(((0.21325)*x1511*x1512))+(((-0.08535)*x1513))+(((-0.21325)*x1518))+(((-1.0)*r10*x1517))+(((-1.0)*x1511*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1520=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1520;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1521=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1521;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1522=((1.0)*cj5);
IkReal x1523=((((-1.0)*r21*x1522))+(((-1.0)*r20*sj5)));
j4eval[0]=x1523;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1522))+(((-1.0)*cj0*r00*x1522))))));
j4eval[2]=IKsign(x1523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1524=((1.0)*cj5);
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1524))+(((-1.0)*cj0*r00*x1524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1524))+(((-1.0)*r20*sj5)))),-1);
if(!x1526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1525.value)+(((1.5707963267949)*(x1526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1527=IKsin(j4);
IkReal x1528=IKcos(j4);
IkReal x1529=(cj5*r00);
IkReal x1530=(cj5*r10);
IkReal x1531=(cj2*sj1);
IkReal x1532=(r21*sj5);
IkReal x1533=(cj5*r20);
IkReal x1534=(cj1*sj2);
IkReal x1535=((1.0)*x1528);
IkReal x1536=((1.0)*x1527);
IkReal x1537=(sj5*x1527);
IkReal x1538=(sj5*x1528);
evalcond[0]=((((-1.0)*r22*x1535))+((x1527*x1532))+(((-1.0)*x1533*x1536)));
evalcond[1]=((((-1.0)*x1529*x1536))+sj0+((r01*x1537))+(((-1.0)*r02*x1535)));
evalcond[2]=((((-1.0)*r12*x1535))+(((-1.0)*x1530*x1536))+((r11*x1537))+(((-1.0)*cj0)));
evalcond[3]=(((x1528*x1532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1533*x1535))+((r22*x1527)));
evalcond[4]=((((-1.0)*x1529*x1535))+((r01*x1538))+((r02*x1527))+((cj0*x1534))+((cj0*x1531)));
evalcond[5]=(((r12*x1527))+(((-1.0)*x1530*x1535))+((r11*x1538))+((sj0*x1534))+((sj0*x1531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1541=IKsin(j4);
IkReal x1542=IKcos(j4);
IkReal x1543=(cj5*r00);
IkReal x1544=(cj5*r10);
IkReal x1545=(cj2*sj1);
IkReal x1546=(r21*sj5);
IkReal x1547=(cj5*r20);
IkReal x1548=(cj1*sj2);
IkReal x1549=((1.0)*x1542);
IkReal x1550=((1.0)*x1541);
IkReal x1551=(sj5*x1541);
IkReal x1552=(sj5*x1542);
evalcond[0]=(((x1541*x1546))+(((-1.0)*r22*x1549))+(((-1.0)*x1547*x1550)));
evalcond[1]=(((r01*x1551))+(((-1.0)*r02*x1549))+sj0+(((-1.0)*x1543*x1550)));
evalcond[2]=(((r11*x1551))+(((-1.0)*x1544*x1550))+(((-1.0)*r12*x1549))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1547*x1549))+((r22*x1541))+((x1542*x1546)));
evalcond[4]=((((-1.0)*x1543*x1549))+((r01*x1552))+((cj0*x1545))+((cj0*x1548))+((r02*x1541)));
evalcond[5]=(((r11*x1552))+((r12*x1541))+((sj0*x1545))+((sj0*x1548))+(((-1.0)*x1544*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1553.value)))+(x1554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1555=IKsin(j4);
IkReal x1556=IKcos(j4);
IkReal x1557=(cj5*r00);
IkReal x1558=(cj5*r10);
IkReal x1559=(cj2*sj1);
IkReal x1560=(r21*sj5);
IkReal x1561=(cj5*r20);
IkReal x1562=(cj1*sj2);
IkReal x1563=((1.0)*x1556);
IkReal x1564=((1.0)*x1555);
IkReal x1565=(sj5*x1555);
IkReal x1566=(sj5*x1556);
evalcond[0]=(((x1555*x1560))+(((-1.0)*r22*x1563))+(((-1.0)*x1561*x1564)));
evalcond[1]=(sj0+(((-1.0)*r02*x1563))+(((-1.0)*x1557*x1564))+((r01*x1565)));
evalcond[2]=(((r11*x1565))+(((-1.0)*r12*x1563))+(((-1.0)*cj0))+(((-1.0)*x1558*x1564)));
evalcond[3]=(((x1556*x1560))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1555))+(((-1.0)*x1561*x1563)));
evalcond[4]=((((-1.0)*x1557*x1563))+((r02*x1555))+((cj0*x1562))+((cj0*x1559))+((r01*x1566)));
evalcond[5]=(((r11*x1566))+((sj0*x1562))+((r12*x1555))+((sj0*x1559))+(((-1.0)*x1558*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1567=((1.0)*cj5);
IkReal x1568=((1.0)*sj5);
IkReal x1569=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1569;
j0eval[1]=((IKabs(((((-1.0)*r00*x1568))+(((-1.0)*r01*x1567)))))+(IKabs(((((-1.0)*r10*x1568))+(((-1.0)*r11*x1567))))));
j0eval[2]=IKsign(x1569);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1570=r21*r21;
IkReal x1571=cj5*cj5;
IkReal x1572=(cj2*sj1);
IkReal x1573=(cj1*sj2);
IkReal x1574=(r21*sj5);
IkReal x1575=((1.0)*cj5*r20);
IkReal x1576=((((-1.0)*x1571*(r20*r20)))+((x1570*x1571))+(((2.0)*cj5*r20*x1574))+(((-1.0)*(r22*r22)))+(((-1.0)*x1570)));
j4eval[0]=x1576;
j4eval[1]=((IKabs((((x1572*x1574))+(((-1.0)*x1572*x1575))+(((-1.0)*x1573*x1575))+((x1573*x1574)))))+(IKabs((((r22*x1573))+((r22*x1572))))));
j4eval[2]=IKsign(x1576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1577=cj1*cj1;
IkReal x1578=(cj2*sj2);
IkReal x1579=(cj1*sj1);
j0eval[0]=((((-2.0)*x1579*(cj2*cj2)))+(((-1.14255568581477)*cj2*x1579))+(((-1.14255568581477)*sj2*x1577))+x1579+x1578+(((-2.0)*x1577*x1578)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1580=cj1*cj1;
IkReal x1581=(cj1*sj2);
IkReal x1582=(cj1*sj1);
IkReal x1583=(cj5*r01);
IkReal x1584=((100.0)*py);
IkReal x1585=(cj2*sj1);
IkReal x1586=(r00*sj5);
IkReal x1587=((8.535)*cj5*r11);
IkReal x1588=(sj2*x1580);
IkReal x1589=((8.535)*r10*sj5);
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(((((21.325)*x1582))+(((-24.365)*x1588))+(((-42.65)*cj2*x1588))+(((-24.365)*cj2*x1582))+(((21.325)*cj2*sj2))+(((-42.65)*x1582*(cj2*cj2)))),-1);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591=IKPowWithIntegerCheck((x1581+x1585),-1);
if(!x1591.valid){
continue;
}
if( IKabs(((x1590.value)*((((x1584*x1585))+(((-11.0)*x1586))+(((-11.0)*x1583))+((x1585*x1589))+((x1585*x1587))+((x1581*x1589))+((x1581*x1584))+((x1581*x1587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1591.value)*(((((-1.0)*x1586))+(((-1.0)*x1583)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1590.value)*((((x1584*x1585))+(((-11.0)*x1586))+(((-11.0)*x1583))+((x1585*x1589))+((x1585*x1587))+((x1581*x1589))+((x1581*x1584))+((x1581*x1587))))))+IKsqr(((x1591.value)*(((((-1.0)*x1586))+(((-1.0)*x1583))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1590.value)*((((x1584*x1585))+(((-11.0)*x1586))+(((-11.0)*x1583))+((x1585*x1589))+((x1585*x1587))+((x1581*x1589))+((x1581*x1584))+((x1581*x1587))))), ((x1591.value)*(((((-1.0)*x1586))+(((-1.0)*x1583))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1592=IKcos(j0);
IkReal x1593=IKsin(j0);
IkReal x1594=(cj5*r01);
IkReal x1595=((0.21325)*sj2);
IkReal x1596=(cj5*r11);
IkReal x1597=(r00*sj5);
IkReal x1598=((0.24365)*cj1);
IkReal x1599=(r10*sj5);
IkReal x1600=(cj1*sj2);
IkReal x1601=((0.21325)*cj1*cj2);
IkReal x1602=(sj1*x1592);
IkReal x1603=(sj1*x1593);
evalcond[0]=(x1594+x1597+((cj2*x1602))+((x1592*x1600)));
evalcond[1]=(x1596+x1599+((cj2*x1603))+((x1593*x1600)));
evalcond[2]=((((-1.0)*x1592*x1601))+((x1595*x1602))+(((-1.0)*x1592*x1598))+(((-0.08535)*x1594))+(((-0.08535)*x1597))+(((-1.0)*px))+(((0.11)*x1593)));
evalcond[3]=((((-1.0)*x1593*x1601))+((x1595*x1603))+(((-0.11)*x1592))+(((-1.0)*x1593*x1598))+(((-0.08535)*x1596))+(((-0.08535)*x1599))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1604=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1604;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1605=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1605;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1606=((1.0)*cj5);
IkReal x1607=((((-1.0)*r21*x1606))+(((-1.0)*r20*sj5)));
j4eval[0]=x1607;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1606))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1606))))));
j4eval[2]=IKsign(x1607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1608=((1.0)*cj5);
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1608))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1608))+(((-1.0)*r20*sj5)))),-1);
if(!x1610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1609.value)+(((1.5707963267949)*(x1610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1611=IKsin(j4);
IkReal x1612=IKcos(j4);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj1*cj2);
IkReal x1615=(cj5*r10);
IkReal x1616=(r21*sj5);
IkReal x1617=(cj5*r20);
IkReal x1618=((1.0)*x1612);
IkReal x1619=((1.0)*x1611);
IkReal x1620=(sj5*x1611);
IkReal x1621=(sj5*x1612);
IkReal x1622=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1617*x1619))+(((-1.0)*r22*x1618))+((x1611*x1616)));
evalcond[1]=(sj0+((r01*x1620))+(((-1.0)*r02*x1618))+(((-1.0)*x1613*x1619)));
evalcond[2]=((((-1.0)*r12*x1618))+((r11*x1620))+(((-1.0)*x1615*x1619))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1617*x1618))+((x1612*x1616))+((r22*x1611)));
evalcond[4]=(((r01*x1621))+((cj0*x1614))+(((-1.0)*cj0*x1622))+(((-1.0)*x1613*x1618))+((r02*x1611)));
evalcond[5]=((((-1.0)*sj0*x1622))+((sj0*x1614))+((r12*x1611))+((r11*x1621))+(((-1.0)*x1615*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1623.valid){
continue;
}
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1623.value)))+(x1624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1625=IKsin(j4);
IkReal x1626=IKcos(j4);
IkReal x1627=(cj5*r00);
IkReal x1628=(cj1*cj2);
IkReal x1629=(cj5*r10);
IkReal x1630=(r21*sj5);
IkReal x1631=(cj5*r20);
IkReal x1632=((1.0)*x1626);
IkReal x1633=((1.0)*x1625);
IkReal x1634=(sj5*x1625);
IkReal x1635=(sj5*x1626);
IkReal x1636=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1632))+((x1625*x1630))+(((-1.0)*x1631*x1633)));
evalcond[1]=(sj0+((r01*x1634))+(((-1.0)*r02*x1632))+(((-1.0)*x1627*x1633)));
evalcond[2]=(((r11*x1634))+(((-1.0)*r12*x1632))+(((-1.0)*x1629*x1633))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1625))+(((-1.0)*x1631*x1632))+((x1626*x1630)));
evalcond[4]=(((r02*x1625))+((cj0*x1628))+((r01*x1635))+(((-1.0)*cj0*x1636))+(((-1.0)*x1627*x1632)));
evalcond[5]=(((r11*x1635))+((sj0*x1628))+((r12*x1625))+(((-1.0)*x1629*x1632))+(((-1.0)*sj0*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1637=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1637.value)))+(x1638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1639=IKsin(j4);
IkReal x1640=IKcos(j4);
IkReal x1641=(cj5*r00);
IkReal x1642=(cj1*cj2);
IkReal x1643=(cj5*r10);
IkReal x1644=(r21*sj5);
IkReal x1645=(cj5*r20);
IkReal x1646=((1.0)*x1640);
IkReal x1647=((1.0)*x1639);
IkReal x1648=(sj5*x1639);
IkReal x1649=(sj5*x1640);
IkReal x1650=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1646))+(((-1.0)*x1645*x1647))+((x1639*x1644)));
evalcond[1]=(sj0+(((-1.0)*x1641*x1647))+((r01*x1648))+(((-1.0)*r02*x1646)));
evalcond[2]=(((r11*x1648))+(((-1.0)*r12*x1646))+(((-1.0)*x1643*x1647))+(((-1.0)*cj0)));
evalcond[3]=(((x1640*x1644))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1645*x1646))+((r22*x1639)));
evalcond[4]=(((r02*x1639))+(((-1.0)*x1641*x1646))+((r01*x1649))+((cj0*x1642))+(((-1.0)*cj0*x1650)));
evalcond[5]=(((r11*x1649))+((sj0*x1642))+((r12*x1639))+(((-1.0)*x1643*x1646))+(((-1.0)*sj0*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1651=r21*r21;
IkReal x1652=cj5*cj5;
IkReal x1653=(cj2*sj1);
IkReal x1654=(cj1*sj2);
IkReal x1655=(r21*sj5);
IkReal x1656=((1.0)*cj5*r20);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1651))+(((2.0)*cj5*r20*x1655))+(((-1.0)*(r22*r22)))+(((-1.0)*x1652*(r20*r20)))+((x1651*x1652)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((((r22*x1653))+((r22*x1654)))),IkReal((((x1654*x1655))+(((-1.0)*x1654*x1656))+(((-1.0)*x1653*x1656))+((x1653*x1655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1659=IKsin(j4);
IkReal x1660=IKcos(j4);
IkReal x1661=(r21*sj5);
IkReal x1662=(cj5*r20);
IkReal x1663=((1.0)*x1660);
evalcond[0]=((((-1.0)*r22*x1663))+((x1659*x1661))+(((-1.0)*x1659*x1662)));
evalcond[1]=(((cj2*sj1))+((x1660*x1661))+((r22*x1659))+(((-1.0)*x1662*x1663))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1664=(cj5*sj4);
IkReal x1665=(sj4*sj5);
if( IKabs((((r00*x1664))+(((-1.0)*r01*x1665))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1665))+(((-1.0)*r10*x1664))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1664))+(((-1.0)*r01*x1665))+((cj4*r02))))+IKsqr((((r11*x1665))+(((-1.0)*r10*x1664))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1664))+(((-1.0)*r01*x1665))+((cj4*r02))), (((r11*x1665))+(((-1.0)*r10*x1664))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1666=IKcos(j0);
IkReal x1667=IKsin(j0);
IkReal x1668=(cj5*r01);
IkReal x1669=((1.0)*sj1);
IkReal x1670=(r11*sj5);
IkReal x1671=((0.21325)*sj1);
IkReal x1672=((0.24365)*cj1);
IkReal x1673=(r00*sj5);
IkReal x1674=(cj5*r11);
IkReal x1675=((1.0)*cj4);
IkReal x1676=(r01*sj5);
IkReal x1677=(r10*sj5);
IkReal x1678=(sj2*x1667);
IkReal x1679=(cj2*x1666);
IkReal x1680=(cj5*x1675);
IkReal x1681=(sj2*x1666);
IkReal x1682=((1.0)*cj5*sj4);
IkReal x1683=(cj1*cj2*x1667);
evalcond[0]=(((sj4*x1676))+(((-1.0)*r02*x1675))+x1667+(((-1.0)*r00*x1682)));
evalcond[1]=((((-1.0)*r10*x1682))+((sj4*x1670))+(((-1.0)*x1666))+(((-1.0)*r12*x1675)));
evalcond[2]=(((cj1*x1681))+((sj1*x1679))+x1668+x1673);
evalcond[3]=(x1674+x1677+((cj1*x1678))+((cj2*sj1*x1667)));
evalcond[4]=(((cj1*x1679))+((r02*sj4))+((cj4*x1676))+(((-1.0)*x1669*x1681))+(((-1.0)*r00*x1680)));
evalcond[5]=((((-1.0)*r10*x1680))+x1683+(((-1.0)*x1669*x1678))+((cj4*x1670))+((r12*sj4)));
evalcond[6]=((((-0.08535)*x1668))+((x1671*x1681))+(((-1.0)*px))+(((-0.21325)*cj1*x1679))+(((-0.08535)*x1673))+(((-1.0)*x1666*x1672))+(((0.11)*x1667)));
evalcond[7]=((((-0.11)*x1666))+(((-1.0)*x1667*x1672))+(((-1.0)*py))+(((-0.21325)*x1683))+(((-0.08535)*x1677))+(((-0.08535)*x1674))+((x1671*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1684=((1.0)*cj5);
IkReal x1685=((1.0)*sj5);
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1684))+(((-1.0)*r10*x1685)))),IkReal(((((-1.0)*r01*x1684))+(((-1.0)*r00*x1685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1686.value)))+(x1687.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1688=IKcos(j0);
IkReal x1689=IKsin(j0);
IkReal x1690=(cj5*r01);
IkReal x1691=((0.21325)*sj2);
IkReal x1692=(cj5*r11);
IkReal x1693=(r00*sj5);
IkReal x1694=((0.24365)*cj1);
IkReal x1695=(r10*sj5);
IkReal x1696=(cj1*sj2);
IkReal x1697=((0.21325)*cj1*cj2);
IkReal x1698=(sj1*x1688);
IkReal x1699=(sj1*x1689);
evalcond[0]=(x1693+x1690+((x1688*x1696))+((cj2*x1698)));
evalcond[1]=(x1695+x1692+((x1689*x1696))+((cj2*x1699)));
evalcond[2]=((((-1.0)*x1688*x1697))+(((-1.0)*x1688*x1694))+((x1691*x1698))+(((-1.0)*px))+(((0.11)*x1689))+(((-0.08535)*x1693))+(((-0.08535)*x1690)));
evalcond[3]=(((x1691*x1699))+(((-1.0)*py))+(((-0.11)*x1688))+(((-0.08535)*x1695))+(((-0.08535)*x1692))+(((-1.0)*x1689*x1694))+(((-1.0)*x1689*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1700=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1700;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1701=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1701;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1702=((1.0)*cj5);
IkReal x1703=((((-1.0)*r21*x1702))+(((-1.0)*r20*sj5)));
j4eval[0]=x1703;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1702))+(((-1.0)*r10*sj0*x1702))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1704=((1.0)*cj5);
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1704))+(((-1.0)*r10*sj0*x1704))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1704))+(((-1.0)*r20*sj5)))),-1);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1705.value)+(((1.5707963267949)*(x1706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1707=IKsin(j4);
IkReal x1708=IKcos(j4);
IkReal x1709=(cj5*r00);
IkReal x1710=(cj1*cj2);
IkReal x1711=(cj5*r10);
IkReal x1712=(r21*sj5);
IkReal x1713=(cj5*r20);
IkReal x1714=((1.0)*x1708);
IkReal x1715=((1.0)*x1707);
IkReal x1716=(sj5*x1707);
IkReal x1717=(sj5*x1708);
IkReal x1718=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1713*x1715))+(((-1.0)*r22*x1714))+((x1707*x1712)));
evalcond[1]=(sj0+(((-1.0)*x1709*x1715))+((r01*x1716))+(((-1.0)*r02*x1714)));
evalcond[2]=(((r11*x1716))+(((-1.0)*x1711*x1715))+(((-1.0)*r12*x1714))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1707))+(((-1.0)*x1713*x1714))+((cj1*sj2))+((x1708*x1712)));
evalcond[4]=(((r02*x1707))+(((-1.0)*x1709*x1714))+((cj0*x1710))+((r01*x1717))+(((-1.0)*cj0*x1718)));
evalcond[5]=(((r12*x1707))+((r11*x1717))+(((-1.0)*x1711*x1714))+(((-1.0)*sj0*x1718))+((sj0*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1719.value)))+(x1720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(cj5*r00);
IkReal x1724=(cj1*cj2);
IkReal x1725=(cj5*r10);
IkReal x1726=(r21*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=((1.0)*x1722);
IkReal x1729=((1.0)*x1721);
IkReal x1730=(sj5*x1721);
IkReal x1731=(sj5*x1722);
IkReal x1732=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1728))+((x1721*x1726))+(((-1.0)*x1727*x1729)));
evalcond[1]=(((r01*x1730))+sj0+(((-1.0)*x1723*x1729))+(((-1.0)*r02*x1728)));
evalcond[2]=((((-1.0)*r12*x1728))+((r11*x1730))+(((-1.0)*x1725*x1729))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x1722*x1726))+((cj1*sj2))+((r22*x1721))+(((-1.0)*x1727*x1728)));
evalcond[4]=(((r01*x1731))+((cj0*x1724))+(((-1.0)*cj0*x1732))+(((-1.0)*x1723*x1728))+((r02*x1721)));
evalcond[5]=((((-1.0)*sj0*x1732))+((sj0*x1724))+((r11*x1731))+(((-1.0)*x1725*x1728))+((r12*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1733.value)))+(x1734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1735=IKsin(j4);
IkReal x1736=IKcos(j4);
IkReal x1737=(cj5*r00);
IkReal x1738=(cj1*cj2);
IkReal x1739=(cj5*r10);
IkReal x1740=(r21*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=((1.0)*x1736);
IkReal x1743=((1.0)*x1735);
IkReal x1744=(sj5*x1735);
IkReal x1745=(sj5*x1736);
IkReal x1746=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1741*x1743))+(((-1.0)*r22*x1742))+((x1735*x1740)));
evalcond[1]=(sj0+(((-1.0)*x1737*x1743))+((r01*x1744))+(((-1.0)*r02*x1742)));
evalcond[2]=((((-1.0)*r12*x1742))+(((-1.0)*x1739*x1743))+((r11*x1744))+(((-1.0)*cj0)));
evalcond[3]=(((x1736*x1740))+(((-1.0)*x1741*x1742))+((cj2*sj1))+((cj1*sj2))+((r22*x1735)));
evalcond[4]=(((cj0*x1738))+(((-1.0)*cj0*x1746))+((r02*x1735))+(((-1.0)*x1737*x1742))+((r01*x1745)));
evalcond[5]=(((sj0*x1738))+(((-1.0)*sj0*x1746))+(((-1.0)*x1739*x1742))+((r12*x1735))+((r11*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1747=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1747;
j0eval[1]=IKsign(x1747);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1748=cj5*cj5;
IkReal x1749=r21*r21;
IkReal x1750=(cj2*sj1);
IkReal x1751=(cj1*sj2);
IkReal x1752=(r21*sj5);
IkReal x1753=((1.0)*cj5*r20);
IkReal x1754=(x1749+(r22*r22)+(((-2.0)*cj5*r20*x1752))+((x1748*(r20*r20)))+(((-1.0)*x1748*x1749)));
j4eval[0]=x1754;
j4eval[1]=IKsign(x1754);
j4eval[2]=((IKabs((((r22*x1751))+((r22*x1750)))))+(IKabs((((x1750*x1752))+(((-1.0)*x1750*x1753))+(((-1.0)*x1751*x1753))+((x1751*x1752))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1755=cj1*cj1;
IkReal x1756=(cj2*sj2);
IkReal x1757=(cj1*sj1);
j0eval[0]=(x1757+x1756+(((-1.14255568581477)*sj2*x1755))+(((-2.0)*x1755*x1756))+(((-2.0)*x1757*(cj2*cj2)))+(((-1.14255568581477)*cj2*x1757)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1758=cj1*cj1;
IkReal x1759=(cj1*sj2);
IkReal x1760=(r00*sj5);
IkReal x1761=(cj1*sj1);
IkReal x1762=((100.0)*py);
IkReal x1763=(cj2*sj1);
IkReal x1764=(cj5*r01);
IkReal x1765=((8.535)*cj5*r11);
IkReal x1766=(sj2*x1758);
IkReal x1767=((8.535)*r10*sj5);
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(((((-42.65)*cj2*x1766))+(((-24.365)*x1766))+(((-42.65)*x1761*(cj2*cj2)))+(((21.325)*x1761))+(((21.325)*cj2*sj2))+(((-24.365)*cj2*x1761))),-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769=IKPowWithIntegerCheck((x1763+x1759),-1);
if(!x1769.valid){
continue;
}
if( IKabs(((x1768.value)*((((x1759*x1767))+((x1759*x1765))+((x1759*x1762))+((x1762*x1763))+(((11.0)*x1764))+(((11.0)*x1760))+((x1763*x1767))+((x1763*x1765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1769.value)*((x1760+x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1768.value)*((((x1759*x1767))+((x1759*x1765))+((x1759*x1762))+((x1762*x1763))+(((11.0)*x1764))+(((11.0)*x1760))+((x1763*x1767))+((x1763*x1765))))))+IKsqr(((x1769.value)*((x1760+x1764))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1768.value)*((((x1759*x1767))+((x1759*x1765))+((x1759*x1762))+((x1762*x1763))+(((11.0)*x1764))+(((11.0)*x1760))+((x1763*x1767))+((x1763*x1765))))), ((x1769.value)*((x1760+x1764))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1770=IKcos(j0);
IkReal x1771=IKsin(j0);
IkReal x1772=(cj5*r11);
IkReal x1773=((0.21325)*sj2);
IkReal x1774=((1.0)*sj5);
IkReal x1775=(cj5*r01);
IkReal x1776=((0.24365)*cj1);
IkReal x1777=((0.08535)*sj5);
IkReal x1778=(cj1*sj2);
IkReal x1779=((0.21325)*cj1*cj2);
IkReal x1780=(sj1*x1770);
IkReal x1781=(sj1*x1771);
evalcond[0]=((((-1.0)*x1775))+((x1770*x1778))+((cj2*x1780))+(((-1.0)*r00*x1774)));
evalcond[1]=((((-1.0)*x1772))+((x1771*x1778))+((cj2*x1781))+(((-1.0)*r10*x1774)));
evalcond[2]=((((0.11)*x1771))+(((-1.0)*px))+(((-1.0)*x1770*x1776))+(((-1.0)*x1770*x1779))+(((-1.0)*r00*x1777))+(((-0.08535)*x1775))+((x1773*x1780)));
evalcond[3]=((((-0.11)*x1770))+(((-1.0)*r10*x1777))+(((-1.0)*py))+(((-1.0)*x1771*x1776))+(((-1.0)*x1771*x1779))+(((-0.08535)*x1772))+((x1773*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1782=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1782;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1783=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1783;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1784=((1.0)*cj5);
IkReal x1785=((((-1.0)*r21*x1784))+(((-1.0)*r20*sj5)));
j4eval[0]=x1785;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1784))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1784))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1786=((1.0)*cj5);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1786))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1786))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1786))+(((-1.0)*r20*sj5)))),-1);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=(cj1*cj2);
IkReal x1792=(cj5*r10);
IkReal x1793=(r01*sj5);
IkReal x1794=(cj5*r00);
IkReal x1795=(cj5*r20);
IkReal x1796=((1.0)*cj0);
IkReal x1797=(sj1*sj2);
IkReal x1798=((1.0)*x1790);
IkReal x1799=((1.0)*x1789);
IkReal x1800=(sj5*x1789);
evalcond[0]=((((-1.0)*x1795*x1799))+(((-1.0)*r22*x1798))+((r21*x1800)));
evalcond[1]=(sj0+((x1789*x1793))+(((-1.0)*r02*x1798))+(((-1.0)*x1794*x1799)));
evalcond[2]=((((-1.0)*x1792*x1799))+(((-1.0)*x1796))+(((-1.0)*r12*x1798))+((r11*x1800)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1799))+(((-1.0)*r21*sj5*x1798))+((cj1*sj2))+((x1790*x1795)));
evalcond[4]=((((-1.0)*x1796*x1797))+(((-1.0)*x1793*x1798))+((x1790*x1794))+(((-1.0)*r02*x1799))+((cj0*x1791)));
evalcond[5]=((((-1.0)*r11*sj5*x1798))+((sj0*x1791))+(((-1.0)*r12*x1799))+((x1790*x1792))+(((-1.0)*sj0*x1797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1801.valid){
continue;
}
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1801.value)))+(x1802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1803=IKsin(j4);
IkReal x1804=IKcos(j4);
IkReal x1805=(cj1*cj2);
IkReal x1806=(cj5*r10);
IkReal x1807=(r01*sj5);
IkReal x1808=(cj5*r00);
IkReal x1809=(cj5*r20);
IkReal x1810=((1.0)*cj0);
IkReal x1811=(sj1*sj2);
IkReal x1812=((1.0)*x1804);
IkReal x1813=((1.0)*x1803);
IkReal x1814=(sj5*x1803);
evalcond[0]=((((-1.0)*x1809*x1813))+((r21*x1814))+(((-1.0)*r22*x1812)));
evalcond[1]=(sj0+(((-1.0)*x1808*x1813))+(((-1.0)*r02*x1812))+((x1803*x1807)));
evalcond[2]=((((-1.0)*x1810))+(((-1.0)*r12*x1812))+(((-1.0)*x1806*x1813))+((r11*x1814)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1812))+((cj1*sj2))+((x1804*x1809))+(((-1.0)*r22*x1813)));
evalcond[4]=((((-1.0)*x1807*x1812))+((cj0*x1805))+(((-1.0)*r02*x1813))+(((-1.0)*x1810*x1811))+((x1804*x1808)));
evalcond[5]=(((sj0*x1805))+(((-1.0)*r11*sj5*x1812))+(((-1.0)*r12*x1813))+(((-1.0)*sj0*x1811))+((x1804*x1806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1815.valid){
continue;
}
CheckValue<IkReal> x1816 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1815.value)))+(x1816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1817=IKsin(j4);
IkReal x1818=IKcos(j4);
IkReal x1819=(cj1*cj2);
IkReal x1820=(cj5*r10);
IkReal x1821=(r01*sj5);
IkReal x1822=(cj5*r00);
IkReal x1823=(cj5*r20);
IkReal x1824=((1.0)*cj0);
IkReal x1825=(sj1*sj2);
IkReal x1826=((1.0)*x1818);
IkReal x1827=((1.0)*x1817);
IkReal x1828=(sj5*x1817);
evalcond[0]=((((-1.0)*r22*x1826))+(((-1.0)*x1823*x1827))+((r21*x1828)));
evalcond[1]=(sj0+(((-1.0)*x1822*x1827))+(((-1.0)*r02*x1826))+((x1817*x1821)));
evalcond[2]=((((-1.0)*x1824))+(((-1.0)*r12*x1826))+((r11*x1828))+(((-1.0)*x1820*x1827)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1818*x1823))+(((-1.0)*r22*x1827))+(((-1.0)*r21*sj5*x1826)));
evalcond[4]=((((-1.0)*x1821*x1826))+((cj0*x1819))+((x1818*x1822))+(((-1.0)*r02*x1827))+(((-1.0)*x1824*x1825)));
evalcond[5]=((((-1.0)*r11*sj5*x1826))+(((-1.0)*sj0*x1825))+((x1818*x1820))+((sj0*x1819))+(((-1.0)*r12*x1827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1829=cj5*cj5;
IkReal x1830=r21*r21;
IkReal x1831=(cj2*sj1);
IkReal x1832=(cj1*sj2);
IkReal x1833=(r21*sj5);
IkReal x1834=((1.0)*cj5*r20);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal((((r22*x1832))+((r22*x1831)))),IkReal(((((-1.0)*x1832*x1834))+((x1831*x1833))+((x1832*x1833))+(((-1.0)*x1831*x1834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1829*x1830))+(r22*r22)+((x1829*(r20*r20)))+x1830+(((-2.0)*cj5*r20*x1833)))),-1);
if(!x1836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1837=IKsin(j4);
IkReal x1838=IKcos(j4);
IkReal x1839=(r21*sj5);
IkReal x1840=(cj5*r20);
IkReal x1841=((1.0)*x1838);
IkReal x1842=((1.0)*x1837);
evalcond[0]=((((-1.0)*r22*x1841))+((x1837*x1839))+(((-1.0)*x1840*x1842)));
evalcond[1]=(((cj2*sj1))+((x1838*x1840))+(((-1.0)*r22*x1842))+((cj1*sj2))+(((-1.0)*x1839*x1841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1843=(cj5*sj4);
IkReal x1844=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1844))+((r00*x1843))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1843))+((r11*x1844))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1844))+((r00*x1843))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1843))+((r11*x1844))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1844))+((r00*x1843))+((cj4*r02))), ((((-1.0)*r10*x1843))+((r11*x1844))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1845=IKcos(j0);
IkReal x1846=IKsin(j0);
IkReal x1847=(cj4*cj5);
IkReal x1848=((1.0)*sj1);
IkReal x1849=(r11*sj5);
IkReal x1850=((1.0)*cj5);
IkReal x1851=((1.0)*sj4);
IkReal x1852=((0.21325)*sj1);
IkReal x1853=((1.0)*sj5);
IkReal x1854=((0.24365)*cj1);
IkReal x1855=((0.08535)*cj5);
IkReal x1856=((1.0)*cj4);
IkReal x1857=((0.08535)*sj5);
IkReal x1858=(sj2*x1846);
IkReal x1859=(cj2*x1845);
IkReal x1860=(sj2*x1845);
IkReal x1861=(cj1*cj2*x1846);
evalcond[0]=((((-1.0)*r00*sj4*x1850))+((r01*sj4*sj5))+(((-1.0)*r02*x1856))+x1846);
evalcond[1]=((((-1.0)*r10*sj4*x1850))+(((-1.0)*r12*x1856))+(((-1.0)*x1845))+((sj4*x1849)));
evalcond[2]=(((cj1*x1860))+(((-1.0)*r01*x1850))+(((-1.0)*r00*x1853))+((sj1*x1859)));
evalcond[3]=(((cj1*x1858))+(((-1.0)*r11*x1850))+((cj2*sj1*x1846))+(((-1.0)*r10*x1853)));
evalcond[4]=((((-1.0)*cj4*r01*x1853))+((cj1*x1859))+(((-1.0)*x1848*x1860))+((r00*x1847))+(((-1.0)*r02*x1851)));
evalcond[5]=((((-1.0)*x1848*x1858))+(((-1.0)*x1849*x1856))+((r10*x1847))+x1861+(((-1.0)*r12*x1851)));
evalcond[6]=((((-1.0)*x1845*x1854))+(((0.11)*x1846))+(((-1.0)*r01*x1855))+(((-1.0)*px))+(((-1.0)*r00*x1857))+(((-0.21325)*cj1*x1859))+((x1852*x1860)));
evalcond[7]=(((x1852*x1858))+(((-0.11)*x1845))+(((-1.0)*py))+(((-1.0)*r11*x1855))+(((-1.0)*x1846*x1854))+(((-1.0)*r10*x1857))+(((-0.21325)*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1862.valid){
continue;
}
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1862.value)))+(x1863.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1864=IKcos(j0);
IkReal x1865=IKsin(j0);
IkReal x1866=(cj5*r11);
IkReal x1867=((0.21325)*sj2);
IkReal x1868=((1.0)*sj5);
IkReal x1869=(cj5*r01);
IkReal x1870=((0.24365)*cj1);
IkReal x1871=((0.08535)*sj5);
IkReal x1872=(cj1*sj2);
IkReal x1873=((0.21325)*cj1*cj2);
IkReal x1874=(sj1*x1864);
IkReal x1875=(sj1*x1865);
evalcond[0]=(((cj2*x1874))+(((-1.0)*r00*x1868))+(((-1.0)*x1869))+((x1864*x1872)));
evalcond[1]=(((x1865*x1872))+((cj2*x1875))+(((-1.0)*x1866))+(((-1.0)*r10*x1868)));
evalcond[2]=((((0.11)*x1865))+(((-1.0)*x1864*x1870))+(((-1.0)*x1864*x1873))+(((-1.0)*r00*x1871))+(((-1.0)*px))+(((-0.08535)*x1869))+((x1867*x1874)));
evalcond[3]=((((-1.0)*r10*x1871))+(((-1.0)*py))+(((-0.08535)*x1866))+(((-1.0)*x1865*x1873))+(((-1.0)*x1865*x1870))+((x1867*x1875))+(((-0.11)*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1876=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1876;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1877=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1877;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1878=((1.0)*cj5);
IkReal x1879=((((-1.0)*r21*x1878))+(((-1.0)*r20*sj5)));
j4eval[0]=x1879;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1878))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1878))))));
j4eval[2]=IKsign(x1879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1880=((1.0)*cj5);
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1880))+(((-1.0)*r10*sj0*x1880))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1880))+(((-1.0)*r20*sj5)))),-1);
if(!x1882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1881.value)+(((1.5707963267949)*(x1882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1883=IKsin(j4);
IkReal x1884=IKcos(j4);
IkReal x1885=(cj1*cj2);
IkReal x1886=(cj5*r10);
IkReal x1887=(r01*sj5);
IkReal x1888=(cj5*r00);
IkReal x1889=(cj5*r20);
IkReal x1890=((1.0)*cj0);
IkReal x1891=(sj1*sj2);
IkReal x1892=((1.0)*x1884);
IkReal x1893=((1.0)*x1883);
IkReal x1894=(sj5*x1883);
evalcond[0]=((((-1.0)*r22*x1892))+(((-1.0)*x1889*x1893))+((r21*x1894)));
evalcond[1]=((((-1.0)*r02*x1892))+sj0+((x1883*x1887))+(((-1.0)*x1888*x1893)));
evalcond[2]=(((r11*x1894))+(((-1.0)*r12*x1892))+(((-1.0)*x1886*x1893))+(((-1.0)*x1890)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1892))+(((-1.0)*r22*x1893))+((x1884*x1889)));
evalcond[4]=((((-1.0)*r02*x1893))+(((-1.0)*x1890*x1891))+(((-1.0)*x1887*x1892))+((cj0*x1885))+((x1884*x1888)));
evalcond[5]=((((-1.0)*sj0*x1891))+(((-1.0)*r12*x1893))+(((-1.0)*r11*sj5*x1892))+((sj0*x1885))+((x1884*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1895.value)))+(x1896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1897=IKsin(j4);
IkReal x1898=IKcos(j4);
IkReal x1899=(cj1*cj2);
IkReal x1900=(cj5*r10);
IkReal x1901=(r01*sj5);
IkReal x1902=(cj5*r00);
IkReal x1903=(cj5*r20);
IkReal x1904=((1.0)*cj0);
IkReal x1905=(sj1*sj2);
IkReal x1906=((1.0)*x1898);
IkReal x1907=((1.0)*x1897);
IkReal x1908=(sj5*x1897);
evalcond[0]=((((-1.0)*x1903*x1907))+(((-1.0)*r22*x1906))+((r21*x1908)));
evalcond[1]=((((-1.0)*x1902*x1907))+sj0+((x1897*x1901))+(((-1.0)*r02*x1906)));
evalcond[2]=((((-1.0)*x1900*x1907))+(((-1.0)*r12*x1906))+((r11*x1908))+(((-1.0)*x1904)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1907))+((x1898*x1903))+(((-1.0)*r21*sj5*x1906)));
evalcond[4]=((((-1.0)*x1901*x1906))+((x1898*x1902))+(((-1.0)*x1904*x1905))+((cj0*x1899))+(((-1.0)*r02*x1907)));
evalcond[5]=(((x1898*x1900))+(((-1.0)*r11*sj5*x1906))+(((-1.0)*sj0*x1905))+(((-1.0)*r12*x1907))+((sj0*x1899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1909.valid){
continue;
}
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1909.value)))+(x1910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1911=IKsin(j4);
IkReal x1912=IKcos(j4);
IkReal x1913=(cj1*cj2);
IkReal x1914=(cj5*r10);
IkReal x1915=(r01*sj5);
IkReal x1916=(cj5*r00);
IkReal x1917=(cj5*r20);
IkReal x1918=((1.0)*cj0);
IkReal x1919=(sj1*sj2);
IkReal x1920=((1.0)*x1912);
IkReal x1921=((1.0)*x1911);
IkReal x1922=(sj5*x1911);
evalcond[0]=((((-1.0)*x1917*x1921))+(((-1.0)*r22*x1920))+((r21*x1922)));
evalcond[1]=(sj0+(((-1.0)*x1916*x1921))+((x1911*x1915))+(((-1.0)*r02*x1920)));
evalcond[2]=((((-1.0)*r12*x1920))+(((-1.0)*x1914*x1921))+((r11*x1922))+(((-1.0)*x1918)));
evalcond[3]=(((cj2*sj1))+((x1912*x1917))+((cj1*sj2))+(((-1.0)*r21*sj5*x1920))+(((-1.0)*r22*x1921)));
evalcond[4]=(((x1912*x1916))+(((-1.0)*x1915*x1920))+(((-1.0)*r02*x1921))+((cj0*x1913))+(((-1.0)*x1918*x1919)));
evalcond[5]=((((-1.0)*r12*x1921))+((x1912*x1914))+(((-1.0)*r11*sj5*x1920))+(((-1.0)*sj0*x1919))+((sj0*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1923=cj2*cj2;
IkReal x1924=cj1*cj1;
IkReal x1925=((182.008875)*cj5);
IkReal x1926=(cj1*cj2);
IkReal x1927=(sj1*sj2);
IkReal x1928=(cj5*r11);
IkReal x1929=((2132.5)*py);
IkReal x1930=((182.008875)*sj5);
IkReal x1931=((207.955275)*cj1);
IkReal x1932=(cj5*r01);
IkReal x1933=(r00*sj5);
IkReal x1934=((2436.5)*cj1);
IkReal x1935=(r10*sj5);
IkReal x1936=((2132.5)*px);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1925*x1927))+((r11*x1925*x1926))+(((-1.0)*r10*x1927*x1930))+(((-1100.0)*px))+((x1931*x1935))+(((-93.885)*x1932))+(((-93.885)*x1933))+((py*x1934))+(((-1.0)*x1927*x1929))+((x1928*x1931))+((x1926*x1929))+((r10*x1926*x1930)))),IkReal(((((-1.0)*r01*x1925*x1927))+((px*x1934))+((r00*x1926*x1930))+((x1931*x1933))+((x1931*x1932))+(((93.885)*x1935))+((x1926*x1936))+((r01*x1925*x1926))+(((1100.0)*py))+(((93.885)*x1928))+(((-1.0)*x1927*x1936))+(((-1.0)*r00*x1927*x1930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
CheckValue<IkReal> x1938=IKPowWithIntegerCheck(IKsign(((-575.755625)+(((-909.51125)*x1923*x1924))+(((909.51125)*x1926*x1927))+(((454.755625)*x1923))+(((-138.8976)*x1924))+(((-1039.16725)*cj2*x1924))+(((1039.16725)*cj1*x1927)))),-1);
if(!x1938.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1937.value)+(((1.5707963267949)*(x1938.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1939=IKcos(j0);
IkReal x1940=IKsin(j0);
IkReal x1941=((0.24365)*cj1);
IkReal x1942=((0.08535)*sj5);
IkReal x1943=((0.08535)*cj5);
IkReal x1944=((0.21325)*sj1*sj2);
IkReal x1945=((0.21325)*cj1*cj2);
evalcond[0]=(((x1939*x1944))+(((-1.0)*px))+(((-1.0)*r00*x1942))+(((-1.0)*r01*x1943))+(((-1.0)*x1939*x1941))+(((-1.0)*x1939*x1945))+(((0.11)*x1940)));
evalcond[1]=((((-0.11)*x1939))+(((-1.0)*x1940*x1945))+(((-1.0)*x1940*x1941))+((x1940*x1944))+(((-1.0)*py))+(((-1.0)*r11*x1943))+(((-1.0)*r10*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1946=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1946;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1947=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1947;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1948=((1.0)*cj5);
IkReal x1949=((((-1.0)*r21*x1948))+(((-1.0)*r20*sj5)));
j4eval[0]=x1949;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1948))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1948))))));
j4eval[2]=IKsign(x1949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1950=((-1.0)*r20);
IkReal x1952 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1952)==0){
continue;
}
IkReal x1951=pow(x1952,-0.5);
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1950),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1953.value));
IkReal gconst1=(r21*x1951);
IkReal gconst2=(x1950*x1951);
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1954.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1955=((-1.0)*r20);
IkReal x1956=x1951;
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1955),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
IkReal x1957=((-1.0)*(x1958.value));
sj5=gconst1;
cj5=gconst2;
j5=x1957;
IkReal gconst0=x1957;
IkReal gconst1=(r21*x1956);
IkReal gconst2=(x1955*x1956);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1959=((-1.0)*r20);
IkReal x1960=x1951;
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1959),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal x1961=((-1.0)*(x1962.value));
sj5=gconst1;
cj5=gconst2;
j5=x1961;
IkReal gconst0=x1961;
IkReal gconst1=(r21*x1960);
IkReal gconst2=(x1959*x1960);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1963=((-1.0)*r20);
IkReal x1964=x1951;
CheckValue<IkReal> x1966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1963),IKFAST_ATAN2_MAGTHRESH);
if(!x1966.valid){
continue;
}
IkReal x1965=((-1.0)*(x1966.value));
sj5=gconst1;
cj5=gconst2;
j5=x1965;
IkReal gconst0=x1965;
IkReal gconst1=(r21*x1964);
IkReal gconst2=(x1963*x1964);
IkReal x1967=r22*r22;
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1967))),-1);
if(!x1971.valid){
continue;
}
IkReal x1968=x1971.value;
IkReal x1969=(sj3*x1968);
IkReal x1970=((((2.0)*x1969*(r20*r20)*(r21*r21)))+((sj3*x1967))+((x1969*(r21*r21*r21*r21)))+((x1969*(r20*r20*r20*r20))));
j4eval[0]=x1970;
j4eval[1]=IKsign(x1970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1972=gconst1*gconst1;
IkReal x1973=r21*r21;
IkReal x1974=gconst2*gconst2;
IkReal x1975=r20*r20;
IkReal x1976=(gconst2*r20);
IkReal x1977=(cj1*cj2);
IkReal x1978=(sj1*sj2);
IkReal x1979=(gconst1*r21);
IkReal x1980=(cj3*gconst2);
IkReal x1981=(cj3*r20);
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x1972*x1973))+(((-2.0)*sj3*x1976*x1979))+((sj3*x1974*x1975)))),-1);
if(!x1982.valid){
continue;
}
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1977))+((gconst1*r22*x1981))+((r22*x1978))+((r21*r22*x1980)))),IkReal(((((-1.0)*gconst1*x1975*x1980))+((r21*x1972*x1981))+((gconst1*x1973*x1980))+((x1976*x1977))+(((-1.0)*x1977*x1979))+(((-1.0)*x1976*x1978))+((x1978*x1979))+(((-1.0)*r21*x1974*x1981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1982.value)))+(x1983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1984=IKsin(j4);
IkReal x1985=IKcos(j4);
IkReal x1986=(gconst1*sj3);
IkReal x1987=(cj2*sj0);
IkReal x1988=(cj3*gconst1);
IkReal x1989=(sj1*sj2);
IkReal x1990=(cj3*gconst2);
IkReal x1991=(cj1*cj2);
IkReal x1992=(gconst2*sj3);
IkReal x1993=(cj2*sj1);
IkReal x1994=((1.0)*cj0);
IkReal x1995=(cj1*sj2);
IkReal x1996=((1.0)*x1985);
IkReal x1997=((1.0)*x1984);
IkReal x1998=(gconst1*x1984);
IkReal x1999=(cj3*x1984);
IkReal x2000=(x1985*x1992);
evalcond[0]=(((r21*x1998))+(((-1.0)*gconst2*r20*x1997))+(((-1.0)*r22*x1996)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x1997))+(((-1.0)*r02*x1996))+((r01*x1998)));
evalcond[2]=(((r11*x1998))+(((-1.0)*gconst2*r10*x1997))+(((-1.0)*x1994))+(((-1.0)*r12*x1996)));
evalcond[3]=(((r21*x1992))+x1993+x1995+((r21*x1985*x1988))+((r22*x1999))+((r20*x1986))+(((-1.0)*r20*x1990*x1996)));
evalcond[4]=(((r21*x1990))+x1989+((r20*x2000))+(((-1.0)*r21*x1986*x1996))+(((-1.0)*r22*sj3*x1997))+(((-1.0)*x1991))+((r20*x1988)));
evalcond[5]=(((cj0*x1995))+((cj0*x1993))+((r00*x2000))+(((-1.0)*r01*x1986*x1996))+(((-1.0)*r02*sj3*x1997))+((r00*x1988))+((r01*x1990)));
evalcond[6]=(((cj0*x1991))+((r01*x1985*x1988))+((r02*x1999))+(((-1.0)*x1989*x1994))+((r00*x1986))+((r01*x1992))+(((-1.0)*r00*x1990*x1996)));
evalcond[7]=(((sj0*x1995))+((r11*x1990))+((r10*x2000))+((r10*x1988))+(((-1.0)*r11*x1986*x1996))+((sj1*x1987))+(((-1.0)*r12*sj3*x1997)));
evalcond[8]=(((r12*x1999))+((r11*x1992))+(((-1.0)*sj0*x1989))+((r10*x1986))+((cj1*x1987))+((r11*x1985*x1988))+(((-1.0)*r10*x1990*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2001.value)))+(x2002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2003=IKsin(j4);
IkReal x2004=IKcos(j4);
IkReal x2005=(gconst1*sj3);
IkReal x2006=(cj2*sj0);
IkReal x2007=(cj3*gconst1);
IkReal x2008=(sj1*sj2);
IkReal x2009=(cj3*gconst2);
IkReal x2010=(cj1*cj2);
IkReal x2011=(gconst2*sj3);
IkReal x2012=(cj2*sj1);
IkReal x2013=((1.0)*cj0);
IkReal x2014=(cj1*sj2);
IkReal x2015=((1.0)*x2004);
IkReal x2016=((1.0)*x2003);
IkReal x2017=(gconst1*x2003);
IkReal x2018=(cj3*x2003);
IkReal x2019=(x2004*x2011);
evalcond[0]=((((-1.0)*gconst2*r20*x2016))+((r21*x2017))+(((-1.0)*r22*x2015)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x2016))+((r01*x2017))+(((-1.0)*r02*x2015)));
evalcond[2]=((((-1.0)*x2013))+(((-1.0)*r12*x2015))+(((-1.0)*gconst2*r10*x2016))+((r11*x2017)));
evalcond[3]=(x2014+x2012+(((-1.0)*r20*x2009*x2015))+((r22*x2018))+((r20*x2005))+((r21*x2011))+((r21*x2004*x2007)));
evalcond[4]=(((r21*x2009))+((r20*x2019))+(((-1.0)*r22*sj3*x2016))+x2008+((r20*x2007))+(((-1.0)*r21*x2005*x2015))+(((-1.0)*x2010)));
evalcond[5]=((((-1.0)*r02*sj3*x2016))+((r01*x2009))+((r00*x2007))+((r00*x2019))+(((-1.0)*r01*x2005*x2015))+((cj0*x2014))+((cj0*x2012)));
evalcond[6]=((((-1.0)*x2008*x2013))+((r00*x2005))+((r01*x2011))+((r01*x2004*x2007))+((cj0*x2010))+((r02*x2018))+(((-1.0)*r00*x2009*x2015)));
evalcond[7]=(((r11*x2009))+((sj0*x2014))+(((-1.0)*r12*sj3*x2016))+((r10*x2007))+((r10*x2019))+((sj1*x2006))+(((-1.0)*r11*x2005*x2015)));
evalcond[8]=(((r11*x2004*x2007))+((r10*x2005))+(((-1.0)*r10*x2009*x2015))+(((-1.0)*sj0*x2008))+((r12*x2018))+((r11*x2011))+((cj1*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2022=IKsin(j4);
IkReal x2023=IKcos(j4);
IkReal x2024=(gconst1*sj3);
IkReal x2025=(cj2*sj0);
IkReal x2026=(cj3*gconst1);
IkReal x2027=(sj1*sj2);
IkReal x2028=(cj3*gconst2);
IkReal x2029=(cj1*cj2);
IkReal x2030=(gconst2*sj3);
IkReal x2031=(cj2*sj1);
IkReal x2032=((1.0)*cj0);
IkReal x2033=(cj1*sj2);
IkReal x2034=((1.0)*x2023);
IkReal x2035=((1.0)*x2022);
IkReal x2036=(gconst1*x2022);
IkReal x2037=(cj3*x2022);
IkReal x2038=(x2023*x2030);
evalcond[0]=(((r21*x2036))+(((-1.0)*r22*x2034))+(((-1.0)*gconst2*r20*x2035)));
evalcond[1]=(sj0+((r01*x2036))+(((-1.0)*gconst2*r00*x2035))+(((-1.0)*r02*x2034)));
evalcond[2]=((((-1.0)*gconst2*r10*x2035))+(((-1.0)*r12*x2034))+(((-1.0)*x2032))+((r11*x2036)));
evalcond[3]=(((r22*x2037))+((r21*x2030))+((r21*x2023*x2026))+x2033+x2031+(((-1.0)*r20*x2028*x2034))+((r20*x2024)));
evalcond[4]=((((-1.0)*r22*sj3*x2035))+x2027+(((-1.0)*x2029))+((r20*x2038))+((r20*x2026))+((r21*x2028))+(((-1.0)*r21*x2024*x2034)));
evalcond[5]=(((r01*x2028))+((r00*x2026))+((r00*x2038))+(((-1.0)*r02*sj3*x2035))+((cj0*x2031))+((cj0*x2033))+(((-1.0)*r01*x2024*x2034)));
evalcond[6]=((((-1.0)*r00*x2028*x2034))+((r00*x2024))+((r01*x2030))+((r01*x2023*x2026))+((cj0*x2029))+((r02*x2037))+(((-1.0)*x2027*x2032)));
evalcond[7]=((((-1.0)*r12*sj3*x2035))+((r10*x2026))+((r10*x2038))+((r11*x2028))+((sj1*x2025))+((sj0*x2033))+(((-1.0)*r11*x2024*x2034)));
evalcond[8]=(((r10*x2024))+((r11*x2023*x2026))+((r12*x2037))+(((-1.0)*r10*x2028*x2034))+(((-1.0)*sj0*x2027))+((cj1*x2025))+((r11*x2030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2039=((-1.0)*r21);
IkReal x2041 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2041)==0){
continue;
}
IkReal x2040=pow(x2041,-0.5);
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(x2039),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2042.value))));
IkReal gconst4=(x2039*x2040);
IkReal gconst5=((1.0)*r20*x2040);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2043.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2044=((-1.0)*r21);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal(x2044),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
IkReal x2045=((1.0)*(x2047.value));
IkReal x2046=x2040;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2045)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2045)));
IkReal gconst4=(x2044*x2046);
IkReal gconst5=((1.0)*r20*x2046);
IkReal x2048=r22*r22;
IkReal x2049=((1.0)*x2048);
CheckValue<IkReal> x2053=IKPowWithIntegerCheck(((-1.0)+x2048),-1);
if(!x2053.valid){
continue;
}
IkReal x2050=x2053.value;
if((((1.0)+(((-1.0)*x2049)))) < -0.00001)
continue;
IkReal x2051=IKsqrt(((1.0)+(((-1.0)*x2049))));
IkReal x2052=(sj0*x2050*x2051);
j4eval[0]=((IKabs((x2052+(((-1.0)*x2049*x2052)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2054=((-1.0)*r21);
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal(x2054),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
IkReal x2055=((1.0)*(x2057.value));
IkReal x2056=x2040;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2055)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2055)));
IkReal gconst4=(x2054*x2056);
IkReal gconst5=((1.0)*r20*x2056);
IkReal x2058=r22*r22;
IkReal x2059=((1.0)*x2058);
CheckValue<IkReal> x2063=IKPowWithIntegerCheck(((-1.0)+x2058),-1);
if(!x2063.valid){
continue;
}
IkReal x2060=x2063.value;
if((((1.0)+(((-1.0)*x2059)))) < -0.00001)
continue;
IkReal x2061=IKsqrt(((1.0)+(((-1.0)*x2059))));
IkReal x2062=(cj0*x2060*x2061);
j4eval[0]=((IKabs((x2062+(((-1.0)*x2059*x2062)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2064=((-1.0)*r21);
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(x2064),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
IkReal x2065=((1.0)*(x2067.value));
IkReal x2066=x2040;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2065)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2065)));
IkReal gconst4=(x2064*x2066);
IkReal gconst5=((1.0)*r20*x2066);
IkReal x2068=r22*r22;
IkReal x2069=(cj0*r02);
IkReal x2070=(r12*sj0);
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(((-1.0)+x2068),-1);
if(!x2074.valid){
continue;
}
IkReal x2071=x2074.value;
if((((1.0)+(((-1.0)*x2068)))) < -0.00001)
continue;
IkReal x2072=IKsqrt(((1.0)+(((-1.0)*x2068))));
IkReal x2073=((1.0)*r22*x2071*x2072);
j4eval[0]=0;
j4eval[1]=((IKabs((x2069+x2070)))+(IKabs(((((-1.0)*x2070*x2073))+(((-1.0)*x2069*x2073))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2075=((1.0)*gconst5);
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2075))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x2075))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
CheckValue<IkReal> x2077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2075))+(((-1.0)*gconst4*r20)))),-1);
if(!x2077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2076.value)+(((1.5707963267949)*(x2077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2078=IKsin(j4);
IkReal x2079=IKcos(j4);
IkReal x2080=(gconst4*r11);
IkReal x2081=(cj2*sj0);
IkReal x2082=(sj1*sj2);
IkReal x2083=(gconst4*sj3);
IkReal x2084=(gconst5*r10);
IkReal x2085=(cj1*cj2);
IkReal x2086=(gconst4*r01);
IkReal x2087=(cj2*sj1);
IkReal x2088=(gconst4*r21);
IkReal x2089=(gconst5*r00);
IkReal x2090=(gconst5*sj3);
IkReal x2091=(cj3*gconst5);
IkReal x2092=(cj3*gconst4);
IkReal x2093=(cj1*sj2);
IkReal x2094=((1.0)*cj0);
IkReal x2095=((1.0)*x2079);
IkReal x2096=((1.0)*x2078);
IkReal x2097=(cj3*x2078);
IkReal x2098=(cj3*x2079);
IkReal x2099=(x2079*x2090);
evalcond[0]=((((-1.0)*gconst5*r20*x2096))+((x2078*x2088))+(((-1.0)*r22*x2095)));
evalcond[1]=(sj0+((x2078*x2086))+(((-1.0)*x2089*x2096))+(((-1.0)*r02*x2095)));
evalcond[2]=((((-1.0)*x2094))+((x2078*x2080))+(((-1.0)*x2084*x2096))+(((-1.0)*r12*x2095)));
evalcond[3]=((((-1.0)*r20*x2091*x2095))+x2093+x2087+((r20*x2083))+((x2088*x2098))+((r22*x2097))+((r21*x2090)));
evalcond[4]=(((r20*x2092))+((r20*x2099))+(((-1.0)*r22*sj3*x2096))+(((-1.0)*x2085))+x2082+(((-1.0)*r21*x2083*x2095))+((r21*x2091)));
evalcond[5]=((((-1.0)*r02*sj3*x2096))+(((-1.0)*r01*x2083*x2095))+((r01*x2091))+((r00*x2092))+((sj3*x2079*x2089))+((cj0*x2093))+((cj0*x2087)));
evalcond[6]=((((-1.0)*cj3*x2089*x2095))+((r01*x2090))+((cj0*x2085))+((r02*x2097))+((r00*x2083))+(((-1.0)*x2082*x2094))+((x2086*x2098)));
evalcond[7]=((((-1.0)*sj3*x2080*x2095))+((sj0*x2093))+(((-1.0)*r12*sj3*x2096))+((sj1*x2081))+((r10*x2092))+((sj3*x2079*x2084))+((r11*x2091)));
evalcond[8]=((((-1.0)*cj3*x2084*x2095))+((x2080*x2098))+(((-1.0)*sj0*x2082))+((cj1*x2081))+((r10*x2083))+((r12*x2097))+((r11*x2090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2100=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2100.valid){
continue;
}
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2100.value)))+(x2101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2102=IKsin(j4);
IkReal x2103=IKcos(j4);
IkReal x2104=(gconst4*r11);
IkReal x2105=(cj2*sj0);
IkReal x2106=(sj1*sj2);
IkReal x2107=(gconst4*sj3);
IkReal x2108=(gconst5*r10);
IkReal x2109=(cj1*cj2);
IkReal x2110=(gconst4*r01);
IkReal x2111=(cj2*sj1);
IkReal x2112=(gconst4*r21);
IkReal x2113=(gconst5*r00);
IkReal x2114=(gconst5*sj3);
IkReal x2115=(cj3*gconst5);
IkReal x2116=(cj3*gconst4);
IkReal x2117=(cj1*sj2);
IkReal x2118=((1.0)*cj0);
IkReal x2119=((1.0)*x2103);
IkReal x2120=((1.0)*x2102);
IkReal x2121=(cj3*x2102);
IkReal x2122=(cj3*x2103);
IkReal x2123=(x2103*x2114);
evalcond[0]=((((-1.0)*gconst5*r20*x2120))+((x2102*x2112))+(((-1.0)*r22*x2119)));
evalcond[1]=(sj0+(((-1.0)*x2113*x2120))+((x2102*x2110))+(((-1.0)*r02*x2119)));
evalcond[2]=((((-1.0)*x2108*x2120))+((x2102*x2104))+(((-1.0)*x2118))+(((-1.0)*r12*x2119)));
evalcond[3]=(((r20*x2107))+((r21*x2114))+((x2112*x2122))+x2111+x2117+(((-1.0)*r20*x2115*x2119))+((r22*x2121)));
evalcond[4]=(((r21*x2115))+(((-1.0)*r21*x2107*x2119))+((r20*x2123))+x2106+((r20*x2116))+(((-1.0)*r22*sj3*x2120))+(((-1.0)*x2109)));
evalcond[5]=(((sj3*x2103*x2113))+((r01*x2115))+((r00*x2116))+((cj0*x2111))+((cj0*x2117))+(((-1.0)*r02*sj3*x2120))+(((-1.0)*r01*x2107*x2119)));
evalcond[6]=(((r01*x2114))+((cj0*x2109))+((r02*x2121))+((r00*x2107))+(((-1.0)*cj3*x2113*x2119))+((x2110*x2122))+(((-1.0)*x2106*x2118)));
evalcond[7]=((((-1.0)*r12*sj3*x2120))+((sj0*x2117))+((sj3*x2103*x2108))+(((-1.0)*sj3*x2104*x2119))+((r10*x2116))+((sj1*x2105))+((r11*x2115)));
evalcond[8]=((((-1.0)*sj0*x2106))+((r12*x2121))+((r10*x2107))+(((-1.0)*cj3*x2108*x2119))+((cj1*x2105))+((x2104*x2122))+((r11*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2124.value)))+(x2125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=(gconst4*r11);
IkReal x2129=(cj2*sj0);
IkReal x2130=(sj1*sj2);
IkReal x2131=(gconst4*sj3);
IkReal x2132=(gconst5*r10);
IkReal x2133=(cj1*cj2);
IkReal x2134=(gconst4*r01);
IkReal x2135=(cj2*sj1);
IkReal x2136=(gconst4*r21);
IkReal x2137=(gconst5*r00);
IkReal x2138=(gconst5*sj3);
IkReal x2139=(cj3*gconst5);
IkReal x2140=(cj3*gconst4);
IkReal x2141=(cj1*sj2);
IkReal x2142=((1.0)*cj0);
IkReal x2143=((1.0)*x2127);
IkReal x2144=((1.0)*x2126);
IkReal x2145=(cj3*x2126);
IkReal x2146=(cj3*x2127);
IkReal x2147=(x2127*x2138);
evalcond[0]=(((x2126*x2136))+(((-1.0)*gconst5*r20*x2144))+(((-1.0)*r22*x2143)));
evalcond[1]=(sj0+(((-1.0)*r02*x2143))+((x2126*x2134))+(((-1.0)*x2137*x2144)));
evalcond[2]=((((-1.0)*x2132*x2144))+(((-1.0)*x2142))+(((-1.0)*r12*x2143))+((x2126*x2128)));
evalcond[3]=(((r21*x2138))+(((-1.0)*r20*x2139*x2143))+x2135+x2141+((x2136*x2146))+((r22*x2145))+((r20*x2131)));
evalcond[4]=(((r21*x2139))+((r20*x2140))+((r20*x2147))+x2130+(((-1.0)*r21*x2131*x2143))+(((-1.0)*x2133))+(((-1.0)*r22*sj3*x2144)));
evalcond[5]=(((cj0*x2135))+((cj0*x2141))+((r01*x2139))+(((-1.0)*r02*sj3*x2144))+(((-1.0)*r01*x2131*x2143))+((r00*x2140))+((sj3*x2127*x2137)));
evalcond[6]=(((cj0*x2133))+(((-1.0)*x2130*x2142))+((r02*x2145))+((r01*x2138))+((r00*x2131))+(((-1.0)*cj3*x2137*x2143))+((x2134*x2146)));
evalcond[7]=((((-1.0)*sj3*x2128*x2143))+(((-1.0)*r12*sj3*x2144))+((r11*x2139))+((sj1*x2129))+((sj0*x2141))+((r10*x2140))+((sj3*x2127*x2132)));
evalcond[8]=((((-1.0)*cj3*x2132*x2143))+(((-1.0)*sj0*x2130))+((r11*x2138))+((x2128*x2146))+((cj1*x2129))+((r10*x2131))+((r12*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2149 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2149)==0){
continue;
}
IkReal x2148=pow(x2149,-0.5);
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2150.value));
IkReal gconst7=((-1.0)*r01*x2148);
IkReal gconst8=(r00*x2148);
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2151.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal x2152=((-1.0)*(x2154.value));
IkReal x2153=x2148;
sj5=gconst7;
cj5=gconst8;
j5=x2152;
IkReal gconst6=x2152;
IkReal gconst7=((-1.0)*r01*x2153);
IkReal gconst8=(r00*x2153);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2155=((1.0)*gconst8);
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x2155))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x2155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x2155)))),-1);
if(!x2157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2156.value)+(((1.5707963267949)*(x2157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2158=IKsin(j4);
IkReal x2159=IKcos(j4);
IkReal x2160=(gconst7*sj3);
IkReal x2161=(cj3*gconst8);
IkReal x2162=(cj2*sj0);
IkReal x2163=(cj3*gconst7);
IkReal x2164=(sj1*sj2);
IkReal x2165=(cj1*cj2);
IkReal x2166=(cj2*sj1);
IkReal x2167=((1.0)*cj0);
IkReal x2168=(gconst8*sj3);
IkReal x2169=(cj1*sj2);
IkReal x2170=((1.0)*x2159);
IkReal x2171=((1.0)*x2158);
IkReal x2172=(cj3*x2158);
IkReal x2173=(gconst7*x2158);
IkReal x2174=(x2159*x2168);
evalcond[0]=(((r21*x2173))+(((-1.0)*gconst8*r20*x2171))+(((-1.0)*r22*x2170)));
evalcond[1]=(((r01*x2173))+(((-1.0)*gconst8*r00*x2171))+sj0+(((-1.0)*r02*x2170)));
evalcond[2]=(((r11*x2173))+(((-1.0)*x2167))+(((-1.0)*gconst8*r10*x2171))+(((-1.0)*r12*x2170)));
evalcond[3]=(((r22*x2172))+x2169+x2166+((r21*x2168))+((r20*x2160))+((r21*x2159*x2163))+(((-1.0)*r20*x2161*x2170)));
evalcond[4]=(x2164+((r21*x2161))+(((-1.0)*r21*x2160*x2170))+((r20*x2163))+((r20*x2174))+(((-1.0)*r22*sj3*x2171))+(((-1.0)*x2165)));
evalcond[5]=(((r00*x2174))+(((-1.0)*r02*sj3*x2171))+((r00*x2163))+((r01*x2161))+((cj0*x2169))+((cj0*x2166))+(((-1.0)*r01*x2160*x2170)));
evalcond[6]=(((r00*x2160))+((r01*x2168))+(((-1.0)*r00*x2161*x2170))+((cj0*x2165))+((r01*x2159*x2163))+(((-1.0)*x2164*x2167))+((r02*x2172)));
evalcond[7]=(((sj1*x2162))+((sj0*x2169))+(((-1.0)*r12*sj3*x2171))+((r10*x2174))+(((-1.0)*r11*x2160*x2170))+((r10*x2163))+((r11*x2161)));
evalcond[8]=(((r11*x2159*x2163))+((r10*x2160))+((cj1*x2162))+((r11*x2168))+((r12*x2172))+(((-1.0)*r10*x2161*x2170))+(((-1.0)*sj0*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2175.value)+(((1.5707963267949)*(x2176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(gconst7*sj3);
IkReal x2180=(cj3*gconst8);
IkReal x2181=(cj2*sj0);
IkReal x2182=(cj3*gconst7);
IkReal x2183=(sj1*sj2);
IkReal x2184=(cj1*cj2);
IkReal x2185=(cj2*sj1);
IkReal x2186=((1.0)*cj0);
IkReal x2187=(gconst8*sj3);
IkReal x2188=(cj1*sj2);
IkReal x2189=((1.0)*x2178);
IkReal x2190=((1.0)*x2177);
IkReal x2191=(cj3*x2177);
IkReal x2192=(gconst7*x2177);
IkReal x2193=(x2178*x2187);
evalcond[0]=((((-1.0)*gconst8*r20*x2190))+(((-1.0)*r22*x2189))+((r21*x2192)));
evalcond[1]=(sj0+(((-1.0)*r02*x2189))+(((-1.0)*gconst8*r00*x2190))+((r01*x2192)));
evalcond[2]=((((-1.0)*gconst8*r10*x2190))+(((-1.0)*x2186))+((r11*x2192))+(((-1.0)*r12*x2189)));
evalcond[3]=(((r22*x2191))+((r21*x2178*x2182))+x2185+x2188+((r21*x2187))+((r20*x2179))+(((-1.0)*r20*x2180*x2189)));
evalcond[4]=((((-1.0)*r22*sj3*x2190))+x2183+(((-1.0)*x2184))+((r20*x2182))+((r20*x2193))+((r21*x2180))+(((-1.0)*r21*x2179*x2189)));
evalcond[5]=((((-1.0)*r02*sj3*x2190))+(((-1.0)*r01*x2179*x2189))+((cj0*x2185))+((cj0*x2188))+((r01*x2180))+((r00*x2193))+((r00*x2182)));
evalcond[6]=((((-1.0)*r00*x2180*x2189))+((r00*x2179))+((cj0*x2184))+(((-1.0)*x2183*x2186))+((r02*x2191))+((r01*x2178*x2182))+((r01*x2187)));
evalcond[7]=((((-1.0)*r12*sj3*x2190))+((sj0*x2188))+(((-1.0)*r11*x2179*x2189))+((sj1*x2181))+((r11*x2180))+((r10*x2193))+((r10*x2182)));
evalcond[8]=(((cj1*x2181))+((r11*x2178*x2182))+(((-1.0)*r10*x2180*x2189))+((r10*x2179))+((r12*x2191))+((r11*x2187))+(((-1.0)*sj0*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2195 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2195)==0){
continue;
}
IkReal x2194=pow(x2195,-0.5);
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2196.value))));
IkReal gconst10=((1.0)*r01*x2194);
IkReal gconst11=((-1.0)*r00*x2194);
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
IkReal x2198=((1.0)*(x2200.value));
IkReal x2199=x2194;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2198)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2198)));
IkReal gconst10=((1.0)*r01*x2199);
IkReal gconst11=((-1.0)*r00*x2199);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
IkReal x2201=((1.0)*(x2203.value));
IkReal x2202=x2194;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2201)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2201)));
IkReal gconst10=((1.0)*r01*x2202);
IkReal gconst11=((-1.0)*r00*x2202);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2206 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
IkReal x2204=((1.0)*(x2206.value));
IkReal x2205=x2194;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2204)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2204)));
IkReal gconst10=((1.0)*r01*x2205);
IkReal gconst11=((-1.0)*r00*x2205);
IkReal x2207=r02*r02;
IkReal x2208=(r12*sj0);
IkReal x2209=x2194;
IkReal x2210=(cj0*x2209);
j4eval[0]=((IKabs(((((-1.0)*x2210))+((r02*x2208*x2209))+((x2207*x2210)))))+(IKabs((x2208+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2211=((1.0)*gconst11);
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x2211)))),-1);
if(!x2212.valid){
continue;
}
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2211))+(((-1.0)*r10*sj0*x2211))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2212.value)))+(x2213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2214=IKsin(j4);
IkReal x2215=IKcos(j4);
IkReal x2216=(gconst10*sj3);
IkReal x2217=(cj3*r10);
IkReal x2218=(gconst11*r20);
IkReal x2219=(gconst11*sj3);
IkReal x2220=(cj3*gconst11);
IkReal x2221=(sj1*sj2);
IkReal x2222=(cj1*cj2);
IkReal x2223=(cj2*sj1);
IkReal x2224=(cj1*sj2);
IkReal x2225=(cj3*gconst10);
IkReal x2226=((1.0)*cj0);
IkReal x2227=((1.0)*x2215);
IkReal x2228=((1.0)*x2214);
IkReal x2229=(cj3*x2214);
IkReal x2230=(gconst10*x2214);
IkReal x2231=(x2215*x2225);
evalcond[0]=(((r21*x2230))+(((-1.0)*r22*x2227))+(((-1.0)*x2218*x2228)));
evalcond[1]=(sj0+(((-1.0)*r02*x2227))+((r01*x2230))+(((-1.0)*gconst11*r00*x2228)));
evalcond[2]=((((-1.0)*r12*x2227))+(((-1.0)*x2226))+(((-1.0)*gconst11*r10*x2228))+((r11*x2230)));
evalcond[3]=(((r22*x2229))+((r20*x2216))+x2224+x2223+((r21*x2231))+((r21*x2219))+(((-1.0)*cj3*x2218*x2227)));
evalcond[4]=(x2221+(((-1.0)*r21*x2216*x2227))+(((-1.0)*r22*sj3*x2228))+((r21*x2220))+(((-1.0)*x2222))+((r20*x2225))+((sj3*x2215*x2218)));
evalcond[5]=(((r00*x2215*x2219))+((cj0*x2224))+((cj0*x2223))+(((-1.0)*r02*sj3*x2228))+(((-1.0)*r01*x2216*x2227))+((r00*x2225))+((r01*x2220)));
evalcond[6]=(((r01*x2219))+((r00*x2216))+((r02*x2229))+((cj0*x2222))+(((-1.0)*x2221*x2226))+(((-1.0)*r00*x2220*x2227))+((r01*x2231)));
evalcond[7]=(((gconst10*x2217))+((r10*x2215*x2219))+(((-1.0)*r11*x2216*x2227))+((sj0*x2224))+((sj0*x2223))+(((-1.0)*r12*sj3*x2228))+((r11*x2220)));
evalcond[8]=(((r12*x2229))+(((-1.0)*gconst11*x2217*x2227))+((sj0*x2222))+((r11*x2219))+(((-1.0)*sj0*x2221))+((r10*x2216))+((r11*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
CheckValue<IkReal> x2233=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2232.value)+(((1.5707963267949)*(x2233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2234=IKsin(j4);
IkReal x2235=IKcos(j4);
IkReal x2236=(gconst10*sj3);
IkReal x2237=(cj3*r10);
IkReal x2238=(gconst11*r20);
IkReal x2239=(gconst11*sj3);
IkReal x2240=(cj3*gconst11);
IkReal x2241=(sj1*sj2);
IkReal x2242=(cj1*cj2);
IkReal x2243=(cj2*sj1);
IkReal x2244=(cj1*sj2);
IkReal x2245=(cj3*gconst10);
IkReal x2246=((1.0)*cj0);
IkReal x2247=((1.0)*x2235);
IkReal x2248=((1.0)*x2234);
IkReal x2249=(cj3*x2234);
IkReal x2250=(gconst10*x2234);
IkReal x2251=(x2235*x2245);
evalcond[0]=((((-1.0)*r22*x2247))+(((-1.0)*x2238*x2248))+((r21*x2250)));
evalcond[1]=(sj0+(((-1.0)*r02*x2247))+(((-1.0)*gconst11*r00*x2248))+((r01*x2250)));
evalcond[2]=((((-1.0)*gconst11*r10*x2248))+(((-1.0)*x2246))+(((-1.0)*r12*x2247))+((r11*x2250)));
evalcond[3]=(x2244+x2243+((r21*x2239))+((r20*x2236))+((r21*x2251))+((r22*x2249))+(((-1.0)*cj3*x2238*x2247)));
evalcond[4]=(x2241+(((-1.0)*x2242))+((r20*x2245))+(((-1.0)*r22*sj3*x2248))+((r21*x2240))+((sj3*x2235*x2238))+(((-1.0)*r21*x2236*x2247)));
evalcond[5]=((((-1.0)*r01*x2236*x2247))+(((-1.0)*r02*sj3*x2248))+((r01*x2240))+((r00*x2245))+((r00*x2235*x2239))+((cj0*x2244))+((cj0*x2243)));
evalcond[6]=((((-1.0)*r00*x2240*x2247))+(((-1.0)*x2241*x2246))+((r01*x2251))+((r01*x2239))+((r00*x2236))+((r02*x2249))+((cj0*x2242)));
evalcond[7]=(((r11*x2240))+((r10*x2235*x2239))+(((-1.0)*r12*sj3*x2248))+((gconst10*x2237))+((sj0*x2244))+((sj0*x2243))+(((-1.0)*r11*x2236*x2247)));
evalcond[8]=((((-1.0)*gconst11*x2237*x2247))+((r10*x2236))+((sj0*x2242))+(((-1.0)*sj0*x2241))+((r11*x2239))+((r12*x2249))+((r11*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2252=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2252.valid){
continue;
}
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2252.value)))+(x2253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2254=IKsin(j4);
IkReal x2255=IKcos(j4);
IkReal x2256=(gconst10*sj3);
IkReal x2257=(cj3*r10);
IkReal x2258=(gconst11*r20);
IkReal x2259=(gconst11*sj3);
IkReal x2260=(cj3*gconst11);
IkReal x2261=(sj1*sj2);
IkReal x2262=(cj1*cj2);
IkReal x2263=(cj2*sj1);
IkReal x2264=(cj1*sj2);
IkReal x2265=(cj3*gconst10);
IkReal x2266=((1.0)*cj0);
IkReal x2267=((1.0)*x2255);
IkReal x2268=((1.0)*x2254);
IkReal x2269=(cj3*x2254);
IkReal x2270=(gconst10*x2254);
IkReal x2271=(x2255*x2265);
evalcond[0]=(((r21*x2270))+(((-1.0)*x2258*x2268))+(((-1.0)*r22*x2267)));
evalcond[1]=(((r01*x2270))+sj0+(((-1.0)*r02*x2267))+(((-1.0)*gconst11*r00*x2268)));
evalcond[2]=(((r11*x2270))+(((-1.0)*gconst11*r10*x2268))+(((-1.0)*x2266))+(((-1.0)*r12*x2267)));
evalcond[3]=(((r21*x2271))+x2263+x2264+((r22*x2269))+((r20*x2256))+((r21*x2259))+(((-1.0)*cj3*x2258*x2267)));
evalcond[4]=(x2261+((r21*x2260))+((sj3*x2255*x2258))+(((-1.0)*r21*x2256*x2267))+((r20*x2265))+(((-1.0)*r22*sj3*x2268))+(((-1.0)*x2262)));
evalcond[5]=((((-1.0)*r01*x2256*x2267))+((r00*x2265))+(((-1.0)*r02*sj3*x2268))+((r01*x2260))+((cj0*x2263))+((cj0*x2264))+((r00*x2255*x2259)));
evalcond[6]=(((r01*x2271))+(((-1.0)*r00*x2260*x2267))+((cj0*x2262))+(((-1.0)*x2261*x2266))+((r02*x2269))+((r00*x2256))+((r01*x2259)));
evalcond[7]=(((sj0*x2263))+((sj0*x2264))+(((-1.0)*r12*sj3*x2268))+((r11*x2260))+((r10*x2255*x2259))+(((-1.0)*r11*x2256*x2267))+((gconst10*x2257)));
evalcond[8]=((((-1.0)*gconst11*x2257*x2267))+((r10*x2256))+((sj0*x2262))+(((-1.0)*sj0*x2261))+((r11*x2271))+((r12*x2269))+((r11*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2272=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2272;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2273=((1.0)*cj5);
IkReal x2274=((((-1.0)*r21*x2273))+(((-1.0)*r20*sj5)));
j4eval[0]=x2274;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2273)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2275=cj5*cj5;
IkReal x2276=(cj3*r01);
IkReal x2277=(cj5*sj5);
IkReal x2278=((1.0)*cj3);
IkReal x2279=((((-1.0)*r02*r22*x2278))+((r21*x2275*x2276))+((cj3*r00*r21*x2277))+(((-1.0)*r00*r20*x2275*x2278))+((r20*x2276*x2277))+(((-1.0)*r21*x2276)));
j4eval[0]=x2279;
j4eval[1]=IKsign(x2279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2280=cj5*cj5;
IkReal x2281=(cj3*r20);
IkReal x2282=(r21*sj3);
IkReal x2283=((1.0)*cj3);
IkReal x2284=(r01*r21);
IkReal x2285=(r01*sj3);
IkReal x2286=(r00*sj5);
IkReal x2287=(cj5*r01*sj5);
IkReal x2288=((1.0)*x2280);
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal((((r22*sj3*x2286))+((cj5*r22*x2285)))),IkReal((((x2282*x2287))+((r00*x2282))+(((-1.0)*cj5*r20*sj3*x2286))+(((-1.0)*r20*x2285*x2288))+(((-1.0)*r00*x2282*x2288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(IKsign((((x2281*x2287))+((cj3*x2280*x2284))+(((-1.0)*r00*x2281*x2288))+(((-1.0)*r02*r22*x2283))+(((-1.0)*x2283*x2284))+((cj3*cj5*r21*x2286)))),-1);
if(!x2290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2289.value)+(((1.5707963267949)*(x2290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2291=IKsin(j4);
IkReal x2292=IKcos(j4);
IkReal x2293=(cj2*sj1);
IkReal x2294=(cj1*sj2);
IkReal x2295=(r11*sj5);
IkReal x2296=(cj5*r10);
IkReal x2297=(sj1*sj2);
IkReal x2298=(cj5*r01);
IkReal x2299=(cj5*r00);
IkReal x2300=(cj3*sj5);
IkReal x2301=(r21*sj5);
IkReal x2302=(cj1*cj2);
IkReal x2303=(cj5*sj3);
IkReal x2304=(sj3*sj5);
IkReal x2305=(r01*sj5);
IkReal x2306=(cj3*cj5);
IkReal x2307=(cj5*r20);
IkReal x2308=((1.0)*x2292);
IkReal x2309=((1.0)*x2291);
IkReal x2310=(cj3*x2292);
IkReal x2311=(sj3*x2292);
IkReal x2312=(cj3*x2291);
IkReal x2313=(x2293+x2294);
evalcond[0]=((((-1.0)*r22*x2308))+((x2291*x2301))+(((-1.0)*x2307*x2309)));
evalcond[1]=(((x2291*x2295))+(((-1.0)*x2296*x2309))+(((-1.0)*r12*x2308)));
evalcond[2]=((1.0)+(((-1.0)*x2299*x2309))+((x2291*x2305))+(((-1.0)*r02*x2308)));
evalcond[3]=((((-1.0)*cj3*x2299*x2308))+((r01*x2292*x2300))+((sj3*x2298))+((r00*x2304))+((r02*x2312)));
evalcond[4]=((((-1.0)*r02*sj3*x2309))+((x2299*x2311))+(((-1.0)*r01*x2304*x2308))+((r00*x2300))+((cj3*x2298)));
evalcond[5]=(x2313+((r20*x2304))+((r22*x2312))+(((-1.0)*r20*x2306*x2308))+((r21*x2303))+((r21*x2292*x2300)));
evalcond[6]=((((-1.0)*r12*sj3*x2309))+((r11*x2306))+((r10*x2300))+x2313+(((-1.0)*sj3*x2295*x2308))+((x2296*x2311)));
evalcond[7]=(((r11*x2303))+((r10*x2304))+x2302+(((-1.0)*x2297))+((x2295*x2310))+((r12*x2312))+(((-1.0)*cj3*x2296*x2308)));
evalcond[8]=((((-1.0)*x2302))+x2297+((r20*x2300))+((r20*x2292*x2303))+(((-1.0)*sj3*x2301*x2308))+((r21*x2306))+(((-1.0)*r22*sj3*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2314=((1.0)*cj5);
CheckValue<IkReal> x2315 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2314))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2315.valid){
continue;
}
CheckValue<IkReal> x2316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2314))+(((-1.0)*r20*sj5)))),-1);
if(!x2316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2315.value)+(((1.5707963267949)*(x2316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2317=IKsin(j4);
IkReal x2318=IKcos(j4);
IkReal x2319=(cj2*sj1);
IkReal x2320=(cj1*sj2);
IkReal x2321=(r11*sj5);
IkReal x2322=(cj5*r10);
IkReal x2323=(sj1*sj2);
IkReal x2324=(cj5*r01);
IkReal x2325=(cj5*r00);
IkReal x2326=(cj3*sj5);
IkReal x2327=(r21*sj5);
IkReal x2328=(cj1*cj2);
IkReal x2329=(cj5*sj3);
IkReal x2330=(sj3*sj5);
IkReal x2331=(r01*sj5);
IkReal x2332=(cj3*cj5);
IkReal x2333=(cj5*r20);
IkReal x2334=((1.0)*x2318);
IkReal x2335=((1.0)*x2317);
IkReal x2336=(cj3*x2318);
IkReal x2337=(sj3*x2318);
IkReal x2338=(cj3*x2317);
IkReal x2339=(x2320+x2319);
evalcond[0]=(((x2317*x2327))+(((-1.0)*r22*x2334))+(((-1.0)*x2333*x2335)));
evalcond[1]=((((-1.0)*x2322*x2335))+((x2317*x2321))+(((-1.0)*r12*x2334)));
evalcond[2]=((1.0)+((x2317*x2331))+(((-1.0)*r02*x2334))+(((-1.0)*x2325*x2335)));
evalcond[3]=(((r02*x2338))+((sj3*x2324))+((r01*x2318*x2326))+(((-1.0)*cj3*x2325*x2334))+((r00*x2330)));
evalcond[4]=(((cj3*x2324))+(((-1.0)*r01*x2330*x2334))+((r00*x2326))+((x2325*x2337))+(((-1.0)*r02*sj3*x2335)));
evalcond[5]=(x2339+((r21*x2329))+((r21*x2318*x2326))+((r22*x2338))+(((-1.0)*r20*x2332*x2334))+((r20*x2330)));
evalcond[6]=(((r10*x2326))+x2339+((x2322*x2337))+((r11*x2332))+(((-1.0)*sj3*x2321*x2334))+(((-1.0)*r12*sj3*x2335)));
evalcond[7]=(x2328+((r12*x2338))+((r11*x2329))+((x2321*x2336))+(((-1.0)*cj3*x2322*x2334))+((r10*x2330))+(((-1.0)*x2323)));
evalcond[8]=(((r21*x2332))+x2323+((r20*x2318*x2329))+(((-1.0)*sj3*x2327*x2334))+(((-1.0)*r22*sj3*x2335))+((r20*x2326))+(((-1.0)*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
CheckValue<IkReal> x2341=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2340.value)+(((1.5707963267949)*(x2341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2342=IKsin(j4);
IkReal x2343=IKcos(j4);
IkReal x2344=(cj2*sj1);
IkReal x2345=(cj1*sj2);
IkReal x2346=(r11*sj5);
IkReal x2347=(cj5*r10);
IkReal x2348=(sj1*sj2);
IkReal x2349=(cj5*r01);
IkReal x2350=(cj5*r00);
IkReal x2351=(cj3*sj5);
IkReal x2352=(r21*sj5);
IkReal x2353=(cj1*cj2);
IkReal x2354=(cj5*sj3);
IkReal x2355=(sj3*sj5);
IkReal x2356=(r01*sj5);
IkReal x2357=(cj3*cj5);
IkReal x2358=(cj5*r20);
IkReal x2359=((1.0)*x2343);
IkReal x2360=((1.0)*x2342);
IkReal x2361=(cj3*x2343);
IkReal x2362=(sj3*x2343);
IkReal x2363=(cj3*x2342);
IkReal x2364=(x2345+x2344);
evalcond[0]=((((-1.0)*x2358*x2360))+(((-1.0)*r22*x2359))+((x2342*x2352)));
evalcond[1]=((((-1.0)*x2347*x2360))+(((-1.0)*r12*x2359))+((x2342*x2346)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2359))+((x2342*x2356))+(((-1.0)*x2350*x2360)));
evalcond[3]=(((r00*x2355))+((r02*x2363))+((r01*x2343*x2351))+((sj3*x2349))+(((-1.0)*cj3*x2350*x2359)));
evalcond[4]=(((r00*x2351))+(((-1.0)*r02*sj3*x2360))+((cj3*x2349))+((x2350*x2362))+(((-1.0)*r01*x2355*x2359)));
evalcond[5]=(x2364+((r21*x2343*x2351))+((r22*x2363))+((r20*x2355))+(((-1.0)*r20*x2357*x2359))+((r21*x2354)));
evalcond[6]=(((r10*x2351))+x2364+(((-1.0)*r12*sj3*x2360))+((r11*x2357))+((x2347*x2362))+(((-1.0)*sj3*x2346*x2359)));
evalcond[7]=(((r12*x2363))+((r10*x2355))+x2353+(((-1.0)*x2348))+((r11*x2354))+((x2346*x2361))+(((-1.0)*cj3*x2347*x2359)));
evalcond[8]=((((-1.0)*r22*sj3*x2360))+(((-1.0)*sj3*x2352*x2359))+x2348+(((-1.0)*x2353))+((r20*x2343*x2354))+((r20*x2351))+((r21*x2357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2365=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2365;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2366=((1.0)*cj5);
IkReal x2367=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2366)));
j4eval[0]=x2367;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2366)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2368=cj5*cj5;
IkReal x2369=(cj3*r01);
IkReal x2370=(cj5*sj5);
IkReal x2371=((1.0)*cj3);
IkReal x2372=(((cj3*r00*r21*x2370))+((r20*x2369*x2370))+(((-1.0)*r21*x2369))+((r21*x2368*x2369))+(((-1.0)*r02*r22*x2371))+(((-1.0)*r00*r20*x2368*x2371)));
j4eval[0]=x2372;
j4eval[1]=IKsign(x2372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2373=cj5*cj5;
IkReal x2374=(cj3*r20);
IkReal x2375=(r21*sj3);
IkReal x2376=((1.0)*cj3);
IkReal x2377=(r01*r21);
IkReal x2378=(r01*sj3);
IkReal x2379=(r00*sj5);
IkReal x2380=(cj5*r01*sj5);
IkReal x2381=((1.0)*x2373);
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal((((r22*sj3*x2379))+((cj5*r22*x2378)))),IkReal(((((-1.0)*cj5*r20*sj3*x2379))+(((-1.0)*r20*x2378*x2381))+((x2375*x2380))+((r00*x2375))+(((-1.0)*r00*x2375*x2381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x2376))+((cj3*cj5*r21*x2379))+(((-1.0)*x2376*x2377))+((x2374*x2380))+(((-1.0)*r00*x2374*x2381))+((cj3*x2373*x2377)))),-1);
if(!x2383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2382.value)+(((1.5707963267949)*(x2383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2384=IKsin(j4);
IkReal x2385=IKcos(j4);
IkReal x2386=(sj1*sj2);
IkReal x2387=(r11*sj5);
IkReal x2388=(cj5*r10);
IkReal x2389=(cj5*r01);
IkReal x2390=(cj5*r00);
IkReal x2391=((1.0)*cj1);
IkReal x2392=(cj3*sj5);
IkReal x2393=(r21*sj5);
IkReal x2394=(cj5*sj3);
IkReal x2395=(sj3*sj5);
IkReal x2396=(cj2*sj1);
IkReal x2397=(r01*sj5);
IkReal x2398=(cj3*cj5);
IkReal x2399=(cj5*r20);
IkReal x2400=(cj2*x2391);
IkReal x2401=((1.0)*x2385);
IkReal x2402=((1.0)*x2384);
IkReal x2403=(cj3*x2385);
IkReal x2404=(sj3*x2385);
IkReal x2405=(cj3*x2384);
evalcond[0]=(((x2384*x2393))+(((-1.0)*x2399*x2402))+(((-1.0)*r22*x2401)));
evalcond[1]=(((x2384*x2387))+(((-1.0)*x2388*x2402))+(((-1.0)*r12*x2401)));
evalcond[2]=((-1.0)+((x2384*x2397))+(((-1.0)*r02*x2401))+(((-1.0)*x2390*x2402)));
evalcond[3]=(((r01*x2385*x2392))+((r00*x2395))+((r02*x2405))+((sj3*x2389))+(((-1.0)*cj3*x2390*x2401)));
evalcond[4]=((((-1.0)*r02*sj3*x2402))+(((-1.0)*r01*x2395*x2401))+((r00*x2392))+((x2390*x2404))+((cj3*x2389)));
evalcond[5]=(x2396+((cj1*sj2))+(((-1.0)*r20*x2398*x2401))+((r20*x2395))+((r21*x2385*x2392))+((r22*x2405))+((r21*x2394)));
evalcond[6]=((((-1.0)*cj3*x2388*x2401))+(((-1.0)*x2400))+x2386+((r12*x2405))+((r10*x2395))+((r11*x2394))+((x2387*x2403)));
evalcond[7]=((((-1.0)*x2400))+x2386+((r20*x2392))+(((-1.0)*sj3*x2393*x2401))+(((-1.0)*r22*sj3*x2402))+((r21*x2398))+((r20*x2385*x2394)));
evalcond[8]=((((-1.0)*sj2*x2391))+(((-1.0)*r12*sj3*x2402))+(((-1.0)*x2396))+((r10*x2392))+(((-1.0)*sj3*x2387*x2401))+((x2388*x2404))+((r11*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2406=((1.0)*cj5);
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2406)))),-1);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2407.value)))+(x2408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2409=IKsin(j4);
IkReal x2410=IKcos(j4);
IkReal x2411=(sj1*sj2);
IkReal x2412=(r11*sj5);
IkReal x2413=(cj5*r10);
IkReal x2414=(cj5*r01);
IkReal x2415=(cj5*r00);
IkReal x2416=((1.0)*cj1);
IkReal x2417=(cj3*sj5);
IkReal x2418=(r21*sj5);
IkReal x2419=(cj5*sj3);
IkReal x2420=(sj3*sj5);
IkReal x2421=(cj2*sj1);
IkReal x2422=(r01*sj5);
IkReal x2423=(cj3*cj5);
IkReal x2424=(cj5*r20);
IkReal x2425=(cj2*x2416);
IkReal x2426=((1.0)*x2410);
IkReal x2427=((1.0)*x2409);
IkReal x2428=(cj3*x2410);
IkReal x2429=(sj3*x2410);
IkReal x2430=(cj3*x2409);
evalcond[0]=((((-1.0)*x2424*x2427))+((x2409*x2418))+(((-1.0)*r22*x2426)));
evalcond[1]=(((x2409*x2412))+(((-1.0)*x2413*x2427))+(((-1.0)*r12*x2426)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2426))+((x2409*x2422))+(((-1.0)*x2415*x2427)));
evalcond[3]=(((r02*x2430))+((r00*x2420))+((r01*x2410*x2417))+((sj3*x2414))+(((-1.0)*cj3*x2415*x2426)));
evalcond[4]=((((-1.0)*r02*sj3*x2427))+((r00*x2417))+((x2415*x2429))+((cj3*x2414))+(((-1.0)*r01*x2420*x2426)));
evalcond[5]=(x2421+((r21*x2410*x2417))+((r21*x2419))+(((-1.0)*r20*x2423*x2426))+((cj1*sj2))+((r22*x2430))+((r20*x2420)));
evalcond[6]=(x2411+((r11*x2419))+(((-1.0)*cj3*x2413*x2426))+((x2412*x2428))+((r12*x2430))+((r10*x2420))+(((-1.0)*x2425)));
evalcond[7]=(x2411+((r21*x2423))+((r20*x2410*x2419))+(((-1.0)*sj3*x2418*x2426))+(((-1.0)*r22*sj3*x2427))+((r20*x2417))+(((-1.0)*x2425)));
evalcond[8]=(((x2413*x2429))+((r10*x2417))+(((-1.0)*sj3*x2412*x2426))+(((-1.0)*r12*sj3*x2427))+((r11*x2423))+(((-1.0)*x2421))+(((-1.0)*sj2*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2431.value)))+(x2432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2433=IKsin(j4);
IkReal x2434=IKcos(j4);
IkReal x2435=(sj1*sj2);
IkReal x2436=(r11*sj5);
IkReal x2437=(cj5*r10);
IkReal x2438=(cj5*r01);
IkReal x2439=(cj5*r00);
IkReal x2440=((1.0)*cj1);
IkReal x2441=(cj3*sj5);
IkReal x2442=(r21*sj5);
IkReal x2443=(cj5*sj3);
IkReal x2444=(sj3*sj5);
IkReal x2445=(cj2*sj1);
IkReal x2446=(r01*sj5);
IkReal x2447=(cj3*cj5);
IkReal x2448=(cj5*r20);
IkReal x2449=(cj2*x2440);
IkReal x2450=((1.0)*x2434);
IkReal x2451=((1.0)*x2433);
IkReal x2452=(cj3*x2434);
IkReal x2453=(sj3*x2434);
IkReal x2454=(cj3*x2433);
evalcond[0]=(((x2433*x2442))+(((-1.0)*x2448*x2451))+(((-1.0)*r22*x2450)));
evalcond[1]=((((-1.0)*x2437*x2451))+((x2433*x2436))+(((-1.0)*r12*x2450)));
evalcond[2]=((-1.0)+((x2433*x2446))+(((-1.0)*x2439*x2451))+(((-1.0)*r02*x2450)));
evalcond[3]=(((r02*x2454))+((sj3*x2438))+((r00*x2444))+(((-1.0)*cj3*x2439*x2450))+((r01*x2434*x2441)));
evalcond[4]=((((-1.0)*r02*sj3*x2451))+((r00*x2441))+((cj3*x2438))+(((-1.0)*r01*x2444*x2450))+((x2439*x2453)));
evalcond[5]=((((-1.0)*r20*x2447*x2450))+x2445+((r21*x2434*x2441))+((r22*x2454))+((cj1*sj2))+((r20*x2444))+((r21*x2443)));
evalcond[6]=((((-1.0)*cj3*x2437*x2450))+x2435+((r10*x2444))+((r12*x2454))+((r11*x2443))+(((-1.0)*x2449))+((x2436*x2452)));
evalcond[7]=(x2435+(((-1.0)*r22*sj3*x2451))+(((-1.0)*sj3*x2442*x2450))+(((-1.0)*x2449))+((r20*x2441))+((r20*x2434*x2443))+((r21*x2447)));
evalcond[8]=(((r10*x2441))+(((-1.0)*x2445))+(((-1.0)*r12*sj3*x2451))+(((-1.0)*sj3*x2436*x2450))+((r11*x2447))+((x2437*x2453))+(((-1.0)*sj2*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2456 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2456)==0){
continue;
}
IkReal x2455=pow(x2456,-0.5);
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2457.value));
IkReal gconst13=((-1.0)*r11*x2455);
IkReal gconst14=(r10*x2455);
CheckValue<IkReal> x2458 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2458.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2458.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2461 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2461.valid){
continue;
}
IkReal x2459=((-1.0)*(x2461.value));
IkReal x2460=x2455;
sj5=gconst13;
cj5=gconst14;
j5=x2459;
IkReal gconst12=x2459;
IkReal gconst13=((-1.0)*r11*x2460);
IkReal gconst14=(r10*x2460);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2462=((1.0)*gconst14);
CheckValue<IkReal> x2463=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x2462)))),-1);
if(!x2463.valid){
continue;
}
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2462))+((cj0*gconst13*r01))+(((-1.0)*cj0*r00*x2462))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2463.value)))+(x2464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2465=IKsin(j4);
IkReal x2466=IKcos(j4);
IkReal x2467=((1.0)*r22);
IkReal x2468=((1.0)*r12);
IkReal x2469=(cj2*sj0);
IkReal x2470=(gconst13*sj3);
IkReal x2471=(gconst13*r01);
IkReal x2472=(sj1*sj2);
IkReal x2473=(gconst14*sj3);
IkReal x2474=(cj1*cj2);
IkReal x2475=((1.0)*gconst14);
IkReal x2476=(cj3*gconst13);
IkReal x2477=(cj3*gconst14);
IkReal x2478=(cj2*sj1);
IkReal x2479=((1.0)*r02);
IkReal x2480=(cj1*sj2);
IkReal x2481=((1.0)*cj0);
IkReal x2482=(sj3*x2465);
IkReal x2483=(cj3*x2466);
IkReal x2484=(cj3*x2465);
IkReal x2485=(gconst13*x2465);
IkReal x2486=((1.0)*x2466);
evalcond[0]=((((-1.0)*r20*x2465*x2475))+(((-1.0)*x2466*x2467))+((r21*x2485)));
evalcond[1]=(sj0+(((-1.0)*x2466*x2479))+(((-1.0)*r00*x2465*x2475))+((x2465*x2471)));
evalcond[2]=((((-1.0)*x2466*x2468))+(((-1.0)*x2481))+((r11*x2485))+(((-1.0)*r10*x2465*x2475)));
evalcond[3]=(x2480+x2478+((r22*x2484))+((r21*x2473))+((r20*x2470))+(((-1.0)*r20*x2475*x2483))+((r21*x2466*x2476)));
evalcond[4]=(((r20*x2466*x2473))+x2472+((r21*x2477))+(((-1.0)*x2474))+(((-1.0)*x2467*x2482))+((r20*x2476))+(((-1.0)*r21*x2470*x2486)));
evalcond[5]=(((r00*x2466*x2473))+((r01*x2477))+((r00*x2476))+(((-1.0)*r01*x2470*x2486))+((cj0*x2478))+((cj0*x2480))+(((-1.0)*x2479*x2482)));
evalcond[6]=(((r02*x2484))+((r01*x2473))+((r00*x2470))+((cj0*x2474))+(((-1.0)*x2472*x2481))+(((-1.0)*r00*x2475*x2483))+((x2471*x2483)));
evalcond[7]=(((sj0*x2480))+((r10*x2466*x2473))+(((-1.0)*x2468*x2482))+((r10*x2476))+((sj1*x2469))+(((-1.0)*r11*x2470*x2486))+((r11*x2477)));
evalcond[8]=((((-1.0)*sj0*x2472))+((r11*x2466*x2476))+(((-1.0)*r10*x2475*x2483))+((cj1*x2469))+((r10*x2470))+((r12*x2484))+((r11*x2473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2487.value)+(((1.5707963267949)*(x2488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2489=IKsin(j4);
IkReal x2490=IKcos(j4);
IkReal x2491=((1.0)*r22);
IkReal x2492=((1.0)*r12);
IkReal x2493=(cj2*sj0);
IkReal x2494=(gconst13*sj3);
IkReal x2495=(gconst13*r01);
IkReal x2496=(sj1*sj2);
IkReal x2497=(gconst14*sj3);
IkReal x2498=(cj1*cj2);
IkReal x2499=((1.0)*gconst14);
IkReal x2500=(cj3*gconst13);
IkReal x2501=(cj3*gconst14);
IkReal x2502=(cj2*sj1);
IkReal x2503=((1.0)*r02);
IkReal x2504=(cj1*sj2);
IkReal x2505=((1.0)*cj0);
IkReal x2506=(sj3*x2489);
IkReal x2507=(cj3*x2490);
IkReal x2508=(cj3*x2489);
IkReal x2509=(gconst13*x2489);
IkReal x2510=((1.0)*x2490);
evalcond[0]=((((-1.0)*r20*x2489*x2499))+(((-1.0)*x2490*x2491))+((r21*x2509)));
evalcond[1]=(sj0+(((-1.0)*r00*x2489*x2499))+(((-1.0)*x2490*x2503))+((x2489*x2495)));
evalcond[2]=((((-1.0)*x2505))+(((-1.0)*x2490*x2492))+(((-1.0)*r10*x2489*x2499))+((r11*x2509)));
evalcond[3]=(x2504+x2502+((r22*x2508))+((r21*x2490*x2500))+(((-1.0)*r20*x2499*x2507))+((r21*x2497))+((r20*x2494)));
evalcond[4]=(x2496+(((-1.0)*x2498))+((r20*x2490*x2497))+((r21*x2501))+(((-1.0)*x2491*x2506))+((r20*x2500))+(((-1.0)*r21*x2494*x2510)));
evalcond[5]=(((cj0*x2502))+((cj0*x2504))+(((-1.0)*x2503*x2506))+(((-1.0)*r01*x2494*x2510))+((r00*x2490*x2497))+((r00*x2500))+((r01*x2501)));
evalcond[6]=(((r00*x2494))+(((-1.0)*r00*x2499*x2507))+((r02*x2508))+(((-1.0)*x2496*x2505))+((x2495*x2507))+((cj0*x2498))+((r01*x2497)));
evalcond[7]=(((sj1*x2493))+((r10*x2500))+((r10*x2490*x2497))+(((-1.0)*x2492*x2506))+((sj0*x2504))+(((-1.0)*r11*x2494*x2510))+((r11*x2501)));
evalcond[8]=(((cj1*x2493))+((r12*x2508))+((r11*x2490*x2500))+(((-1.0)*r10*x2499*x2507))+((r11*x2497))+(((-1.0)*sj0*x2496))+((r10*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2512 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2512)==0){
continue;
}
IkReal x2511=pow(x2512,-0.5);
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2513.value))));
IkReal gconst16=((1.0)*r11*x2511);
IkReal gconst17=((-1.0)*r10*x2511);
CheckValue<IkReal> x2514 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2514.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
IkReal x2515=((1.0)*(x2517.value));
IkReal x2516=x2511;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2515)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2515)));
IkReal gconst16=((1.0)*r11*x2516);
IkReal gconst17=((-1.0)*r10*x2516);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
IkReal x2518=((1.0)*(x2520.value));
IkReal x2519=x2511;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2518)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2518)));
IkReal gconst16=((1.0)*r11*x2519);
IkReal gconst17=((-1.0)*r10*x2519);
IkReal x2521=r12*r12;
IkReal x2522=(cj0*r02);
IkReal x2523=x2511;
IkReal x2524=(sj0*x2523);
j4eval[0]=((IKabs((x2522+((r12*sj0)))))+(IKabs(((((-1.0)*x2524))+((r12*x2522*x2523))+((x2521*x2524))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
IkReal x2525=((1.0)*(x2527.value));
IkReal x2526=x2511;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2525)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2525)));
IkReal gconst16=((1.0)*r11*x2526);
IkReal gconst17=((-1.0)*r10*x2526);
IkReal x2528=((1.0)*cj3);
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2533.valid){
continue;
}
IkReal x2529=x2533.value;
IkReal x2530=(cj3*x2529);
IkReal x2531=(x2528*x2529);
IkReal x2532=((((-1.0)*x2528*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x2530))+(((-1.0)*x2531*(r10*r10)*(r20*r20)))+(((-1.0)*x2531*(r11*r11)*(r21*r21))));
j4eval[0]=x2532;
j4eval[1]=IKsign(x2532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2534=r21*r21;
IkReal x2535=gconst16*gconst16;
IkReal x2536=r20*r20;
IkReal x2537=gconst17*gconst17;
IkReal x2538=(gconst16*r21);
IkReal x2539=(cj1*sj2);
IkReal x2540=(cj2*sj1);
IkReal x2541=(gconst17*r20);
IkReal x2542=(gconst16*sj3);
IkReal x2543=(r21*sj3);
IkReal x2544=((1.0)*cj3);
CheckValue<IkReal> x2545=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2534*x2535*x2544))+(((2.0)*cj3*x2538*x2541))+(((-1.0)*x2536*x2537*x2544))+(((-1.0)*x2544*(r22*r22))))),-1);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal((((gconst17*r22*x2543))+((r20*r22*x2542))+((r22*x2539))+((r22*x2540)))),IkReal(((((-1.0)*r20*x2537*x2543))+(((-1.0)*x2539*x2541))+((x2538*x2540))+((gconst17*x2534*x2542))+(((-1.0)*gconst17*x2536*x2542))+((r20*x2535*x2543))+((x2538*x2539))+(((-1.0)*x2540*x2541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2545.value)))+(x2546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2547=IKsin(j4);
IkReal x2548=IKcos(j4);
IkReal x2549=(cj3*gconst17);
IkReal x2550=(gconst16*r21);
IkReal x2551=(gconst17*sj3);
IkReal x2552=(gconst16*r20);
IkReal x2553=(sj1*sj2);
IkReal x2554=(cj1*cj2);
IkReal x2555=(gconst16*r10);
IkReal x2556=(cj2*sj1);
IkReal x2557=(gconst16*sj3);
IkReal x2558=(cj1*sj2);
IkReal x2559=((1.0)*cj0);
IkReal x2560=((1.0)*x2548);
IkReal x2561=(gconst16*x2547);
IkReal x2562=(cj3*x2548);
IkReal x2563=(cj3*x2547);
IkReal x2564=((1.0)*gconst17*x2547);
IkReal x2565=((1.0)*sj3*x2547);
evalcond[0]=((((-1.0)*r22*x2560))+((x2547*x2550))+(((-1.0)*r20*x2564)));
evalcond[1]=((((-1.0)*r00*x2564))+sj0+((r01*x2561))+(((-1.0)*r02*x2560)));
evalcond[2]=(((r11*x2561))+(((-1.0)*x2559))+(((-1.0)*r12*x2560))+(((-1.0)*r10*x2564)));
evalcond[3]=(((r22*x2563))+x2556+x2558+((sj3*x2552))+((x2550*x2562))+(((-1.0)*r20*x2549*x2560))+((r21*x2551)));
evalcond[4]=(x2553+((r21*x2549))+(((-1.0)*r22*x2565))+((cj3*x2552))+(((-1.0)*x2554))+(((-1.0)*sj3*x2550*x2560))+((r20*x2548*x2551)));
evalcond[5]=(((r00*x2548*x2551))+(((-1.0)*r02*x2565))+(((-1.0)*r01*x2557*x2560))+((r01*x2549))+((cj0*x2558))+((cj0*x2556))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x2551))+((r00*x2557))+(((-1.0)*r00*x2549*x2560))+((cj0*x2554))+((gconst16*r01*x2562))+(((-1.0)*x2553*x2559))+((r02*x2563)));
evalcond[7]=((((-1.0)*r11*x2557*x2560))+((r11*x2549))+((cj3*x2555))+((r10*x2548*x2551))+((sj0*x2558))+((sj0*x2556))+(((-1.0)*r12*x2565)));
evalcond[8]=((((-1.0)*sj0*x2553))+(((-1.0)*r10*x2549*x2560))+((r11*x2551))+((sj3*x2555))+((gconst16*r11*x2562))+((r12*x2563))+((sj0*x2554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2566=((1.0)*gconst17);
CheckValue<IkReal> x2567 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2566))+((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x2566))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2567.valid){
continue;
}
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2566)))),-1);
if(!x2568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2567.value)+(((1.5707963267949)*(x2568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2569=IKsin(j4);
IkReal x2570=IKcos(j4);
IkReal x2571=(cj3*gconst17);
IkReal x2572=(gconst16*r21);
IkReal x2573=(gconst17*sj3);
IkReal x2574=(gconst16*r20);
IkReal x2575=(sj1*sj2);
IkReal x2576=(cj1*cj2);
IkReal x2577=(gconst16*r10);
IkReal x2578=(cj2*sj1);
IkReal x2579=(gconst16*sj3);
IkReal x2580=(cj1*sj2);
IkReal x2581=((1.0)*cj0);
IkReal x2582=((1.0)*x2570);
IkReal x2583=(gconst16*x2569);
IkReal x2584=(cj3*x2570);
IkReal x2585=(cj3*x2569);
IkReal x2586=((1.0)*gconst17*x2569);
IkReal x2587=((1.0)*sj3*x2569);
evalcond[0]=((((-1.0)*r20*x2586))+((x2569*x2572))+(((-1.0)*r22*x2582)));
evalcond[1]=(((r01*x2583))+(((-1.0)*r00*x2586))+sj0+(((-1.0)*r02*x2582)));
evalcond[2]=((((-1.0)*x2581))+((r11*x2583))+(((-1.0)*r10*x2586))+(((-1.0)*r12*x2582)));
evalcond[3]=(((r21*x2573))+((r22*x2585))+x2580+x2578+((x2572*x2584))+((sj3*x2574))+(((-1.0)*r20*x2571*x2582)));
evalcond[4]=((((-1.0)*sj3*x2572*x2582))+((r21*x2571))+x2575+((cj3*x2574))+(((-1.0)*x2576))+((r20*x2570*x2573))+(((-1.0)*r22*x2587)));
evalcond[5]=(((r00*x2570*x2573))+(((-1.0)*r01*x2579*x2582))+(((-1.0)*r02*x2587))+((cj0*x2580))+((r01*x2571))+((cj0*x2578))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x2571*x2582))+((r01*x2573))+((r00*x2579))+((gconst16*r01*x2584))+((cj0*x2576))+((r02*x2585))+(((-1.0)*x2575*x2581)));
evalcond[7]=(((cj3*x2577))+(((-1.0)*r11*x2579*x2582))+((r11*x2571))+((r10*x2570*x2573))+((sj0*x2578))+((sj0*x2580))+(((-1.0)*r12*x2587)));
evalcond[8]=(((r11*x2573))+(((-1.0)*sj0*x2575))+((sj3*x2577))+((r12*x2585))+((gconst16*r11*x2584))+((sj0*x2576))+(((-1.0)*r10*x2571*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2588=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2588.valid){
continue;
}
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2588.value)))+(x2589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2590=IKsin(j4);
IkReal x2591=IKcos(j4);
IkReal x2592=(cj3*gconst17);
IkReal x2593=(gconst16*r21);
IkReal x2594=(gconst17*sj3);
IkReal x2595=(gconst16*r20);
IkReal x2596=(sj1*sj2);
IkReal x2597=(cj1*cj2);
IkReal x2598=(gconst16*r10);
IkReal x2599=(cj2*sj1);
IkReal x2600=(gconst16*sj3);
IkReal x2601=(cj1*sj2);
IkReal x2602=((1.0)*cj0);
IkReal x2603=((1.0)*x2591);
IkReal x2604=(gconst16*x2590);
IkReal x2605=(cj3*x2591);
IkReal x2606=(cj3*x2590);
IkReal x2607=((1.0)*gconst17*x2590);
IkReal x2608=((1.0)*sj3*x2590);
evalcond[0]=((((-1.0)*r22*x2603))+(((-1.0)*r20*x2607))+((x2590*x2593)));
evalcond[1]=(sj0+(((-1.0)*r02*x2603))+((r01*x2604))+(((-1.0)*r00*x2607)));
evalcond[2]=((((-1.0)*r10*x2607))+(((-1.0)*r12*x2603))+(((-1.0)*x2602))+((r11*x2604)));
evalcond[3]=(x2599+((sj3*x2595))+(((-1.0)*r20*x2592*x2603))+((x2593*x2605))+((r22*x2606))+x2601+((r21*x2594)));
evalcond[4]=(x2596+((r20*x2591*x2594))+(((-1.0)*sj3*x2593*x2603))+((cj3*x2595))+(((-1.0)*x2597))+(((-1.0)*r22*x2608))+((r21*x2592)));
evalcond[5]=(((r01*x2592))+((r00*x2591*x2594))+(((-1.0)*r01*x2600*x2603))+((cj0*x2599))+(((-1.0)*r02*x2608))+((cj0*x2601))+((cj3*gconst16*r00)));
evalcond[6]=(((gconst16*r01*x2605))+(((-1.0)*x2596*x2602))+((r01*x2594))+((cj0*x2597))+(((-1.0)*r00*x2592*x2603))+((r02*x2606))+((r00*x2600)));
evalcond[7]=(((r10*x2591*x2594))+((cj3*x2598))+(((-1.0)*r11*x2600*x2603))+(((-1.0)*r12*x2608))+((sj0*x2601))+((r11*x2592))+((sj0*x2599)));
evalcond[8]=(((gconst16*r11*x2605))+((sj3*x2598))+(((-1.0)*sj0*x2596))+((r11*x2594))+((r12*x2606))+((sj0*x2597))+(((-1.0)*r10*x2592*x2603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2609=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2609;
j4eval[1]=IKsign(x2609);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2610=((1.0)*cj5);
IkReal x2611=((((-1.0)*r21*x2610))+(((-1.0)*r20*sj5)));
j4eval[0]=x2611;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2610))+((r01*sj5))))));
j4eval[2]=IKsign(x2611);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2612=cj5*cj5;
IkReal x2613=(cj3*r21);
IkReal x2614=(cj5*sj5);
IkReal x2615=((1.0)*cj3);
IkReal x2616=(((r10*x2613*x2614))+(((-1.0)*r12*r22*x2615))+((cj3*r11*r20*x2614))+(((-1.0)*r11*x2613))+((r11*x2612*x2613))+(((-1.0)*r10*r20*x2612*x2615)));
j4eval[0]=x2616;
j4eval[1]=IKsign(x2616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2617=cj5*cj5;
IkReal x2618=((1.0)*cj3);
IkReal x2619=(r10*r21);
IkReal x2620=(cj5*sj5);
IkReal x2621=(r11*r21);
IkReal x2622=(r11*r20);
IkReal x2623=(r22*sj3);
IkReal x2624=(r10*r20);
IkReal x2625=((1.0)*sj3*x2617);
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal((((r10*sj5*x2623))+((cj5*r11*x2623)))),IkReal(((((-1.0)*x2619*x2625))+(((-1.0)*x2622*x2625))+(((-1.0)*sj3*x2620*x2624))+((sj3*x2620*x2621))+((sj3*x2619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2618))+(((-1.0)*x2618*x2621))+((cj3*x2620*x2622))+((cj3*x2619*x2620))+((cj3*x2617*x2621))+(((-1.0)*x2617*x2618*x2624)))),-1);
if(!x2627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2626.value)+(((1.5707963267949)*(x2627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2628=IKsin(j4);
IkReal x2629=IKcos(j4);
IkReal x2630=(cj2*sj1);
IkReal x2631=(cj1*sj2);
IkReal x2632=(cj5*sj3);
IkReal x2633=(cj5*r10);
IkReal x2634=(r00*sj5);
IkReal x2635=(sj1*sj2);
IkReal x2636=(r11*sj5);
IkReal x2637=(cj3*cj5);
IkReal x2638=(cj3*sj5);
IkReal x2639=(r21*sj5);
IkReal x2640=(cj1*cj2);
IkReal x2641=(sj3*sj5);
IkReal x2642=(r01*sj5);
IkReal x2643=((1.0)*x2629);
IkReal x2644=((1.0)*x2628);
IkReal x2645=(cj3*x2628);
IkReal x2646=(cj3*x2629);
IkReal x2647=(x2631+x2630);
evalcond[0]=((((-1.0)*r22*x2643))+(((-1.0)*cj5*r20*x2644))+((x2628*x2639)));
evalcond[1]=((((-1.0)*r02*x2643))+((x2628*x2642))+(((-1.0)*cj5*r00*x2644)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2643))+((x2628*x2636))+(((-1.0)*x2633*x2644)));
evalcond[3]=(((r12*x2645))+((r11*x2632))+((r10*x2641))+((x2636*x2646))+(((-1.0)*cj3*x2633*x2643)));
evalcond[4]=(((r11*x2637))+((r10*x2638))+((r10*x2629*x2632))+(((-1.0)*r12*sj3*x2644))+(((-1.0)*sj3*x2636*x2643)));
evalcond[5]=(((r21*x2632))+((r22*x2645))+(((-1.0)*r20*x2637*x2643))+((r21*x2629*x2638))+x2647+((r20*x2641)));
evalcond[6]=(((cj3*x2634))+(((-1.0)*r01*x2641*x2643))+((r00*x2629*x2632))+((r01*x2637))+(((-1.0)*r02*sj3*x2644))+x2647);
evalcond[7]=((((-1.0)*r00*x2637*x2643))+((r01*x2629*x2638))+((r02*x2645))+((sj3*x2634))+((r01*x2632))+(((-1.0)*x2635))+x2640);
evalcond[8]=((((-1.0)*r22*sj3*x2644))+((r21*x2637))+((r20*x2638))+((r20*x2629*x2632))+(((-1.0)*x2640))+(((-1.0)*sj3*x2639*x2643))+x2635);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2648=((1.0)*cj5);
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2648))+(((-1.0)*r20*sj5)))),-1);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2649.value)))+(x2650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2651=IKsin(j4);
IkReal x2652=IKcos(j4);
IkReal x2653=(cj2*sj1);
IkReal x2654=(cj1*sj2);
IkReal x2655=(cj5*sj3);
IkReal x2656=(cj5*r10);
IkReal x2657=(r00*sj5);
IkReal x2658=(sj1*sj2);
IkReal x2659=(r11*sj5);
IkReal x2660=(cj3*cj5);
IkReal x2661=(cj3*sj5);
IkReal x2662=(r21*sj5);
IkReal x2663=(cj1*cj2);
IkReal x2664=(sj3*sj5);
IkReal x2665=(r01*sj5);
IkReal x2666=((1.0)*x2652);
IkReal x2667=((1.0)*x2651);
IkReal x2668=(cj3*x2651);
IkReal x2669=(cj3*x2652);
IkReal x2670=(x2653+x2654);
evalcond[0]=((((-1.0)*cj5*r20*x2667))+((x2651*x2662))+(((-1.0)*r22*x2666)));
evalcond[1]=((((-1.0)*r02*x2666))+((x2651*x2665))+(((-1.0)*cj5*r00*x2667)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2666))+((x2651*x2659))+(((-1.0)*x2656*x2667)));
evalcond[3]=(((r11*x2655))+((x2659*x2669))+((r12*x2668))+((r10*x2664))+(((-1.0)*cj3*x2656*x2666)));
evalcond[4]=((((-1.0)*r12*sj3*x2667))+((r10*x2652*x2655))+((r10*x2661))+(((-1.0)*sj3*x2659*x2666))+((r11*x2660)));
evalcond[5]=(((r21*x2655))+((r21*x2652*x2661))+((r22*x2668))+(((-1.0)*r20*x2660*x2666))+((r20*x2664))+x2670);
evalcond[6]=((((-1.0)*r01*x2664*x2666))+((r01*x2660))+((cj3*x2657))+x2670+((r00*x2652*x2655))+(((-1.0)*r02*sj3*x2667)));
evalcond[7]=((((-1.0)*r00*x2660*x2666))+((r02*x2668))+((r01*x2655))+((sj3*x2657))+((r01*x2652*x2661))+(((-1.0)*x2658))+x2663);
evalcond[8]=((((-1.0)*x2663))+((r21*x2660))+(((-1.0)*r22*sj3*x2667))+((r20*x2661))+(((-1.0)*sj3*x2662*x2666))+x2658+((r20*x2652*x2655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2671.value)+(((1.5707963267949)*(x2672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(cj2*sj1);
IkReal x2676=(cj1*sj2);
IkReal x2677=(cj5*sj3);
IkReal x2678=(cj5*r10);
IkReal x2679=(r00*sj5);
IkReal x2680=(sj1*sj2);
IkReal x2681=(r11*sj5);
IkReal x2682=(cj3*cj5);
IkReal x2683=(cj3*sj5);
IkReal x2684=(r21*sj5);
IkReal x2685=(cj1*cj2);
IkReal x2686=(sj3*sj5);
IkReal x2687=(r01*sj5);
IkReal x2688=((1.0)*x2674);
IkReal x2689=((1.0)*x2673);
IkReal x2690=(cj3*x2673);
IkReal x2691=(cj3*x2674);
IkReal x2692=(x2675+x2676);
evalcond[0]=(((x2673*x2684))+(((-1.0)*cj5*r20*x2689))+(((-1.0)*r22*x2688)));
evalcond[1]=((((-1.0)*r02*x2688))+((x2673*x2687))+(((-1.0)*cj5*r00*x2689)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2688))+((x2673*x2681))+(((-1.0)*x2678*x2689)));
evalcond[3]=((((-1.0)*cj3*x2678*x2688))+((r12*x2690))+((r10*x2686))+((x2681*x2691))+((r11*x2677)));
evalcond[4]=(((r11*x2682))+((r10*x2683))+(((-1.0)*sj3*x2681*x2688))+(((-1.0)*r12*sj3*x2689))+((r10*x2674*x2677)));
evalcond[5]=((((-1.0)*r20*x2682*x2688))+((r22*x2690))+((r21*x2677))+((r21*x2674*x2683))+((r20*x2686))+x2692);
evalcond[6]=((((-1.0)*r02*sj3*x2689))+(((-1.0)*r01*x2686*x2688))+((r00*x2674*x2677))+((r01*x2682))+((cj3*x2679))+x2692);
evalcond[7]=(((r01*x2674*x2683))+(((-1.0)*r00*x2682*x2688))+((sj3*x2679))+(((-1.0)*x2680))+((r01*x2677))+((r02*x2690))+x2685);
evalcond[8]=(((r20*x2674*x2677))+(((-1.0)*sj3*x2684*x2688))+((r21*x2682))+(((-1.0)*r22*sj3*x2689))+(((-1.0)*x2685))+((r20*x2683))+x2680);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2693=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2693;
j4eval[1]=IKsign(x2693);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2694=((1.0)*cj5);
IkReal x2695=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2694)));
j4eval[0]=x2695;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2694)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2696=cj5*cj5;
IkReal x2697=(cj3*r21);
IkReal x2698=(cj5*sj5);
IkReal x2699=((1.0)*cj3);
IkReal x2700=((((-1.0)*r12*r22*x2699))+((r11*x2696*x2697))+((r10*x2697*x2698))+(((-1.0)*r10*r20*x2696*x2699))+(((-1.0)*r11*x2697))+((cj3*r11*r20*x2698)));
j4eval[0]=x2700;
j4eval[1]=IKsign(x2700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2701=cj5*cj5;
IkReal x2702=((1.0)*cj3);
IkReal x2703=(r10*r21);
IkReal x2704=(cj5*sj5);
IkReal x2705=(r11*r21);
IkReal x2706=(r11*r20);
IkReal x2707=(r22*sj3);
IkReal x2708=(r10*r20);
IkReal x2709=((1.0)*sj3*x2701);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal((((r10*sj5*x2707))+((cj5*r11*x2707)))),IkReal(((((-1.0)*sj3*x2704*x2708))+((sj3*x2704*x2705))+(((-1.0)*x2706*x2709))+((sj3*x2703))+(((-1.0)*x2703*x2709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(IKsign((((cj3*x2703*x2704))+(((-1.0)*x2702*x2705))+(((-1.0)*r12*r22*x2702))+((cj3*x2701*x2705))+(((-1.0)*x2701*x2702*x2708))+((cj3*x2704*x2706)))),-1);
if(!x2711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2710.value)+(((1.5707963267949)*(x2711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2712=IKsin(j4);
IkReal x2713=IKcos(j4);
IkReal x2714=(sj1*sj2);
IkReal x2715=(cj5*sj3);
IkReal x2716=(cj5*r10);
IkReal x2717=(r00*sj5);
IkReal x2718=(r11*sj5);
IkReal x2719=(cj3*cj5);
IkReal x2720=((1.0)*cj1);
IkReal x2721=(cj3*sj5);
IkReal x2722=(r21*sj5);
IkReal x2723=(cj2*sj1);
IkReal x2724=(sj3*sj5);
IkReal x2725=(r01*sj5);
IkReal x2726=(cj2*x2720);
IkReal x2727=((1.0)*x2713);
IkReal x2728=((1.0)*x2712);
IkReal x2729=(cj3*x2712);
IkReal x2730=(cj3*x2713);
evalcond[0]=(((x2712*x2722))+(((-1.0)*r22*x2727))+(((-1.0)*cj5*r20*x2728)));
evalcond[1]=((((-1.0)*cj5*r00*x2728))+((x2712*x2725))+(((-1.0)*r02*x2727)));
evalcond[2]=((1.0)+((x2712*x2718))+(((-1.0)*r12*x2727))+(((-1.0)*x2716*x2728)));
evalcond[3]=(((x2718*x2730))+((r10*x2724))+((r11*x2715))+(((-1.0)*cj3*x2716*x2727))+((r12*x2729)));
evalcond[4]=(((r10*x2713*x2715))+(((-1.0)*sj3*x2718*x2727))+((r10*x2721))+((r11*x2719))+(((-1.0)*r12*sj3*x2728)));
evalcond[5]=(x2723+((r22*x2729))+((cj1*sj2))+(((-1.0)*r20*x2719*x2727))+((r20*x2724))+((r21*x2713*x2721))+((r21*x2715)));
evalcond[6]=(x2714+((r02*x2729))+((sj3*x2717))+(((-1.0)*r00*x2719*x2727))+(((-1.0)*x2726))+((r01*x2713*x2721))+((r01*x2715)));
evalcond[7]=(x2714+((r20*x2713*x2715))+(((-1.0)*r22*sj3*x2728))+(((-1.0)*sj3*x2722*x2727))+((r20*x2721))+(((-1.0)*x2726))+((r21*x2719)));
evalcond[8]=(((cj3*x2717))+(((-1.0)*r01*x2724*x2727))+(((-1.0)*x2723))+(((-1.0)*r02*sj3*x2728))+((r00*x2713*x2715))+((r01*x2719))+(((-1.0)*sj2*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2731=((1.0)*cj5);
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2731)))),-1);
if(!x2732.valid){
continue;
}
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2732.value)))+(x2733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2734=IKsin(j4);
IkReal x2735=IKcos(j4);
IkReal x2736=(sj1*sj2);
IkReal x2737=(cj5*sj3);
IkReal x2738=(cj5*r10);
IkReal x2739=(r00*sj5);
IkReal x2740=(r11*sj5);
IkReal x2741=(cj3*cj5);
IkReal x2742=((1.0)*cj1);
IkReal x2743=(cj3*sj5);
IkReal x2744=(r21*sj5);
IkReal x2745=(cj2*sj1);
IkReal x2746=(sj3*sj5);
IkReal x2747=(r01*sj5);
IkReal x2748=(cj2*x2742);
IkReal x2749=((1.0)*x2735);
IkReal x2750=((1.0)*x2734);
IkReal x2751=(cj3*x2734);
IkReal x2752=(cj3*x2735);
evalcond[0]=(((x2734*x2744))+(((-1.0)*r22*x2749))+(((-1.0)*cj5*r20*x2750)));
evalcond[1]=(((x2734*x2747))+(((-1.0)*cj5*r00*x2750))+(((-1.0)*r02*x2749)));
evalcond[2]=((1.0)+((x2734*x2740))+(((-1.0)*x2738*x2750))+(((-1.0)*r12*x2749)));
evalcond[3]=((((-1.0)*cj3*x2738*x2749))+((r12*x2751))+((r10*x2746))+((x2740*x2752))+((r11*x2737)));
evalcond[4]=(((r11*x2741))+(((-1.0)*sj3*x2740*x2749))+((r10*x2743))+(((-1.0)*r12*sj3*x2750))+((r10*x2735*x2737)));
evalcond[5]=(x2745+((r22*x2751))+((cj1*sj2))+((r21*x2737))+((r21*x2735*x2743))+((r20*x2746))+(((-1.0)*r20*x2741*x2749)));
evalcond[6]=(x2736+((sj3*x2739))+((r01*x2737))+((r01*x2735*x2743))+(((-1.0)*r00*x2741*x2749))+(((-1.0)*x2748))+((r02*x2751)));
evalcond[7]=(x2736+(((-1.0)*sj3*x2744*x2749))+((r21*x2741))+((r20*x2743))+((r20*x2735*x2737))+(((-1.0)*r22*sj3*x2750))+(((-1.0)*x2748)));
evalcond[8]=((((-1.0)*r01*x2746*x2749))+(((-1.0)*r02*sj3*x2750))+(((-1.0)*sj2*x2742))+((cj3*x2739))+((r01*x2741))+((r00*x2735*x2737))+(((-1.0)*x2745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2753.valid){
continue;
}
CheckValue<IkReal> x2754 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2753.value)))+(x2754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2755=IKsin(j4);
IkReal x2756=IKcos(j4);
IkReal x2757=(sj1*sj2);
IkReal x2758=(cj5*sj3);
IkReal x2759=(cj5*r10);
IkReal x2760=(r00*sj5);
IkReal x2761=(r11*sj5);
IkReal x2762=(cj3*cj5);
IkReal x2763=((1.0)*cj1);
IkReal x2764=(cj3*sj5);
IkReal x2765=(r21*sj5);
IkReal x2766=(cj2*sj1);
IkReal x2767=(sj3*sj5);
IkReal x2768=(r01*sj5);
IkReal x2769=(cj2*x2763);
IkReal x2770=((1.0)*x2756);
IkReal x2771=((1.0)*x2755);
IkReal x2772=(cj3*x2755);
IkReal x2773=(cj3*x2756);
evalcond[0]=((((-1.0)*cj5*r20*x2771))+((x2755*x2765))+(((-1.0)*r22*x2770)));
evalcond[1]=((((-1.0)*r02*x2770))+(((-1.0)*cj5*r00*x2771))+((x2755*x2768)));
evalcond[2]=((1.0)+(((-1.0)*x2759*x2771))+(((-1.0)*r12*x2770))+((x2755*x2761)));
evalcond[3]=(((r11*x2758))+((x2761*x2773))+((r10*x2767))+(((-1.0)*cj3*x2759*x2770))+((r12*x2772)));
evalcond[4]=(((r10*x2756*x2758))+(((-1.0)*sj3*x2761*x2770))+(((-1.0)*r12*sj3*x2771))+((r10*x2764))+((r11*x2762)));
evalcond[5]=(x2766+((r21*x2756*x2764))+((r22*x2772))+((r21*x2758))+(((-1.0)*r20*x2762*x2770))+((cj1*sj2))+((r20*x2767)));
evalcond[6]=(x2757+(((-1.0)*x2769))+(((-1.0)*r00*x2762*x2770))+((r01*x2758))+((sj3*x2760))+((r02*x2772))+((r01*x2756*x2764)));
evalcond[7]=(x2757+((r20*x2764))+(((-1.0)*x2769))+(((-1.0)*r22*sj3*x2771))+((r21*x2762))+((r20*x2756*x2758))+(((-1.0)*sj3*x2765*x2770)));
evalcond[8]=((((-1.0)*x2766))+((r01*x2762))+(((-1.0)*sj2*x2763))+((cj3*x2760))+((r00*x2756*x2758))+(((-1.0)*r02*sj3*x2771))+(((-1.0)*r01*x2767*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2774=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2774);
rxp0_2=(py*r00);
rxp1_0=(r21*x2774);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2775=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2775);
rxp0_2=(py*r00);
rxp1_0=(r21*x2775);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2776=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2776)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2777=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2777);
rxp0_2=(py*r00);
rxp1_0=(r21*x2777);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(r12,-1);
if(!x2779.valid){
continue;
}
IkReal x2778=x2779.value;
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(sj3,-1);
if(!x2780.valid){
continue;
}
if( IKabs((x2778*(x2780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2778)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2778*(x2780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2778))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2778*(x2780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2778));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2781=IKsin(j4);
IkReal x2782=IKcos(j4);
IkReal x2783=(cj2*sj0);
IkReal x2784=(sj1*sj2);
IkReal x2785=(cj5*sj3);
IkReal x2786=(cj3*cj5);
IkReal x2787=(cj1*cj2);
IkReal x2788=(r21*sj5);
IkReal x2789=(r00*sj5);
IkReal x2790=(cj2*sj1);
IkReal x2791=(r01*sj5);
IkReal x2792=(r20*sj5);
IkReal x2793=(cj1*sj2);
IkReal x2794=((1.0)*cj0);
IkReal x2795=((1.0)*x2781);
IkReal x2796=(r20*x2782);
IkReal x2797=(r00*x2782);
IkReal x2798=(cj3*x2782);
IkReal x2799=((1.0)*x2782);
evalcond[0]=((((-1.0)*x2794))+(((-1.0)*r12*x2799)));
evalcond[1]=(((x2781*x2788))+(((-1.0)*cj5*r20*x2795)));
evalcond[2]=(((x2781*x2791))+sj0+(((-1.0)*cj5*r00*x2795)));
evalcond[3]=(((sj1*x2783))+((sj0*x2793))+(((-1.0)*r12*sj3*x2795)));
evalcond[4]=(((cj3*r12*x2781))+(((-1.0)*sj0*x2784))+((cj1*x2783)));
evalcond[5]=(x2793+x2790+((r21*x2785))+(((-1.0)*x2786*x2796))+((sj3*x2792))+((x2788*x2798)));
evalcond[6]=(x2784+((r21*x2786))+((x2785*x2796))+((cj3*x2792))+(((-1.0)*x2787))+(((-1.0)*sj3*x2788*x2799)));
evalcond[7]=(((x2785*x2797))+((cj3*x2789))+(((-1.0)*sj3*x2791*x2799))+((r01*x2786))+((cj0*x2790))+((cj0*x2793)));
evalcond[8]=((((-1.0)*x2784*x2794))+(((-1.0)*x2786*x2797))+((sj3*x2789))+((x2791*x2798))+((r01*x2785))+((cj0*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2800=((1.0)*sj3);
IkReal x2801=((1.0)*cj5);
CheckValue<IkReal> x2802=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2801))),-1);
if(!x2802.valid){
continue;
}
CheckValue<IkReal> x2803=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2801))),-1);
if(!x2803.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2802.value)))+IKsqr(((x2803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2800))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2802.value)), ((x2803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2800))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2804=IKsin(j4);
IkReal x2805=IKcos(j4);
IkReal x2806=(cj2*sj0);
IkReal x2807=(sj1*sj2);
IkReal x2808=(cj5*sj3);
IkReal x2809=(cj3*cj5);
IkReal x2810=(cj1*cj2);
IkReal x2811=(r21*sj5);
IkReal x2812=(r00*sj5);
IkReal x2813=(cj2*sj1);
IkReal x2814=(r01*sj5);
IkReal x2815=(r20*sj5);
IkReal x2816=(cj1*sj2);
IkReal x2817=((1.0)*cj0);
IkReal x2818=((1.0)*x2804);
IkReal x2819=(r20*x2805);
IkReal x2820=(r00*x2805);
IkReal x2821=(cj3*x2805);
IkReal x2822=((1.0)*x2805);
evalcond[0]=((((-1.0)*r12*x2822))+(((-1.0)*x2817)));
evalcond[1]=(((x2804*x2811))+(((-1.0)*cj5*r20*x2818)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2818))+((x2804*x2814)));
evalcond[3]=(((sj1*x2806))+((sj0*x2816))+(((-1.0)*r12*sj3*x2818)));
evalcond[4]=(((cj1*x2806))+(((-1.0)*sj0*x2807))+((cj3*r12*x2804)));
evalcond[5]=((((-1.0)*x2809*x2819))+((r21*x2808))+x2816+x2813+((x2811*x2821))+((sj3*x2815)));
evalcond[6]=((((-1.0)*x2810))+(((-1.0)*sj3*x2811*x2822))+((cj3*x2815))+((r21*x2809))+x2807+((x2808*x2819)));
evalcond[7]=((((-1.0)*sj3*x2814*x2822))+((cj3*x2812))+((x2808*x2820))+((cj0*x2816))+((cj0*x2813))+((r01*x2809)));
evalcond[8]=(((x2814*x2821))+(((-1.0)*x2809*x2820))+(((-1.0)*x2807*x2817))+((cj0*x2810))+((r01*x2808))+((sj3*x2812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2823=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2823.valid){
continue;
}
CheckValue<IkReal> x2824=IKPowWithIntegerCheck(r12,-1);
if(!x2824.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2824.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2823.value)))+IKsqr(((-1.0)*cj0*(x2824.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2823.value)), ((-1.0)*cj0*(x2824.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2825=IKsin(j4);
IkReal x2826=IKcos(j4);
IkReal x2827=(cj2*sj0);
IkReal x2828=(sj1*sj2);
IkReal x2829=(cj5*sj3);
IkReal x2830=(cj3*cj5);
IkReal x2831=(cj1*cj2);
IkReal x2832=(r21*sj5);
IkReal x2833=(r00*sj5);
IkReal x2834=(cj2*sj1);
IkReal x2835=(r01*sj5);
IkReal x2836=(r20*sj5);
IkReal x2837=(cj1*sj2);
IkReal x2838=((1.0)*cj0);
IkReal x2839=((1.0)*x2825);
IkReal x2840=(r20*x2826);
IkReal x2841=(r00*x2826);
IkReal x2842=(cj3*x2826);
IkReal x2843=((1.0)*x2826);
evalcond[0]=((((-1.0)*x2838))+(((-1.0)*r12*x2843)));
evalcond[1]=(((x2825*x2832))+(((-1.0)*cj5*r20*x2839)));
evalcond[2]=(sj0+((x2825*x2835))+(((-1.0)*cj5*r00*x2839)));
evalcond[3]=(((sj0*x2837))+((sj1*x2827))+(((-1.0)*r12*sj3*x2839)));
evalcond[4]=(((cj3*r12*x2825))+(((-1.0)*sj0*x2828))+((cj1*x2827)));
evalcond[5]=((((-1.0)*x2830*x2840))+((r21*x2829))+((sj3*x2836))+((x2832*x2842))+x2837+x2834);
evalcond[6]=((((-1.0)*x2831))+((x2829*x2840))+(((-1.0)*sj3*x2832*x2843))+x2828+((r21*x2830))+((cj3*x2836)));
evalcond[7]=(((x2829*x2841))+(((-1.0)*sj3*x2835*x2843))+((cj0*x2837))+((cj0*x2834))+((cj3*x2833))+((r01*x2830)));
evalcond[8]=((((-1.0)*x2830*x2841))+((sj3*x2833))+((r01*x2829))+((cj0*x2831))+(((-1.0)*x2828*x2838))+((x2835*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2844=((1.0)*cj5);
CheckValue<IkReal> x2845 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2844))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2845.valid){
continue;
}
CheckValue<IkReal> x2846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2844))+(((-1.0)*r20*sj5)))),-1);
if(!x2846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2845.value)+(((1.5707963267949)*(x2846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2847=IKsin(j4);
IkReal x2848=IKcos(j4);
IkReal x2849=(r11*sj5);
IkReal x2850=(cj2*sj0);
IkReal x2851=(cj5*r10);
IkReal x2852=(sj1*sj2);
IkReal x2853=(cj5*r01);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj1*cj2);
IkReal x2856=(cj3*sj5);
IkReal x2857=(r21*sj5);
IkReal x2858=(cj5*sj3);
IkReal x2859=(sj3*sj5);
IkReal x2860=(cj2*sj1);
IkReal x2861=(r01*sj5);
IkReal x2862=(cj3*cj5);
IkReal x2863=(cj1*sj2);
IkReal x2864=((1.0)*cj0);
IkReal x2865=(cj5*r20);
IkReal x2866=((1.0)*x2848);
IkReal x2867=((1.0)*x2847);
IkReal x2868=(cj3*x2848);
IkReal x2869=(sj3*x2848);
IkReal x2870=(cj3*x2847);
evalcond[0]=(((x2847*x2857))+(((-1.0)*x2865*x2867))+(((-1.0)*r22*x2866)));
evalcond[1]=((((-1.0)*r02*x2866))+sj0+(((-1.0)*x2854*x2867))+((x2847*x2861)));
evalcond[2]=((((-1.0)*x2851*x2867))+(((-1.0)*r12*x2866))+((x2847*x2849))+(((-1.0)*x2864)));
evalcond[3]=(((r21*x2858))+((r22*x2870))+((r21*x2848*x2856))+((r20*x2859))+(((-1.0)*r20*x2862*x2866))+x2860+x2863);
evalcond[4]=((((-1.0)*sj3*x2857*x2866))+(((-1.0)*r22*sj3*x2867))+((r20*x2856))+((r21*x2862))+(((-1.0)*x2855))+x2852+((r20*x2848*x2858)));
evalcond[5]=(((cj3*x2853))+(((-1.0)*r02*sj3*x2867))+((x2854*x2869))+(((-1.0)*r01*x2859*x2866))+((r00*x2856))+((cj0*x2860))+((cj0*x2863)));
evalcond[6]=((((-1.0)*x2852*x2864))+((sj3*x2853))+((cj0*x2855))+((r02*x2870))+(((-1.0)*cj3*x2854*x2866))+((r00*x2859))+((r01*x2848*x2856)));
evalcond[7]=(((x2851*x2869))+(((-1.0)*sj3*x2849*x2866))+((sj1*x2850))+((sj0*x2863))+((r11*x2862))+(((-1.0)*r12*sj3*x2867))+((r10*x2856)));
evalcond[8]=((((-1.0)*cj3*x2851*x2866))+((r11*x2858))+(((-1.0)*sj0*x2852))+((x2849*x2868))+((r12*x2870))+((cj1*x2850))+((r10*x2859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2871.value)))+(x2872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2873=IKsin(j4);
IkReal x2874=IKcos(j4);
IkReal x2875=(r11*sj5);
IkReal x2876=(cj2*sj0);
IkReal x2877=(cj5*r10);
IkReal x2878=(sj1*sj2);
IkReal x2879=(cj5*r01);
IkReal x2880=(cj5*r00);
IkReal x2881=(cj1*cj2);
IkReal x2882=(cj3*sj5);
IkReal x2883=(r21*sj5);
IkReal x2884=(cj5*sj3);
IkReal x2885=(sj3*sj5);
IkReal x2886=(cj2*sj1);
IkReal x2887=(r01*sj5);
IkReal x2888=(cj3*cj5);
IkReal x2889=(cj1*sj2);
IkReal x2890=((1.0)*cj0);
IkReal x2891=(cj5*r20);
IkReal x2892=((1.0)*x2874);
IkReal x2893=((1.0)*x2873);
IkReal x2894=(cj3*x2874);
IkReal x2895=(sj3*x2874);
IkReal x2896=(cj3*x2873);
evalcond[0]=((((-1.0)*r22*x2892))+(((-1.0)*x2891*x2893))+((x2873*x2883)));
evalcond[1]=(sj0+(((-1.0)*r02*x2892))+((x2873*x2887))+(((-1.0)*x2880*x2893)));
evalcond[2]=((((-1.0)*x2877*x2893))+((x2873*x2875))+(((-1.0)*x2890))+(((-1.0)*r12*x2892)));
evalcond[3]=(((r20*x2885))+((r22*x2896))+((r21*x2884))+((r21*x2874*x2882))+x2886+x2889+(((-1.0)*r20*x2888*x2892)));
evalcond[4]=(((r20*x2882))+((r20*x2874*x2884))+(((-1.0)*r22*sj3*x2893))+((r21*x2888))+(((-1.0)*x2881))+(((-1.0)*sj3*x2883*x2892))+x2878);
evalcond[5]=(((x2880*x2895))+((cj0*x2889))+((cj0*x2886))+(((-1.0)*r02*sj3*x2893))+((r00*x2882))+((cj3*x2879))+(((-1.0)*r01*x2885*x2892)));
evalcond[6]=(((cj0*x2881))+((r01*x2874*x2882))+(((-1.0)*cj3*x2880*x2892))+((r00*x2885))+(((-1.0)*x2878*x2890))+((r02*x2896))+((sj3*x2879)));
evalcond[7]=((((-1.0)*r12*sj3*x2893))+((r11*x2888))+((sj0*x2889))+((r10*x2882))+(((-1.0)*sj3*x2875*x2892))+((sj1*x2876))+((x2877*x2895)));
evalcond[8]=((((-1.0)*sj0*x2878))+(((-1.0)*cj3*x2877*x2892))+((cj1*x2876))+((r11*x2884))+((r12*x2896))+((r10*x2885))+((x2875*x2894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2897.value)))+(x2898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2899=IKsin(j4);
IkReal x2900=IKcos(j4);
IkReal x2901=(r11*sj5);
IkReal x2902=(cj2*sj0);
IkReal x2903=(cj5*r10);
IkReal x2904=(sj1*sj2);
IkReal x2905=(cj5*r01);
IkReal x2906=(cj5*r00);
IkReal x2907=(cj1*cj2);
IkReal x2908=(cj3*sj5);
IkReal x2909=(r21*sj5);
IkReal x2910=(cj5*sj3);
IkReal x2911=(sj3*sj5);
IkReal x2912=(cj2*sj1);
IkReal x2913=(r01*sj5);
IkReal x2914=(cj3*cj5);
IkReal x2915=(cj1*sj2);
IkReal x2916=((1.0)*cj0);
IkReal x2917=(cj5*r20);
IkReal x2918=((1.0)*x2900);
IkReal x2919=((1.0)*x2899);
IkReal x2920=(cj3*x2900);
IkReal x2921=(sj3*x2900);
IkReal x2922=(cj3*x2899);
evalcond[0]=(((x2899*x2909))+(((-1.0)*x2917*x2919))+(((-1.0)*r22*x2918)));
evalcond[1]=(sj0+(((-1.0)*x2906*x2919))+(((-1.0)*r02*x2918))+((x2899*x2913)));
evalcond[2]=(((x2899*x2901))+(((-1.0)*r12*x2918))+(((-1.0)*x2903*x2919))+(((-1.0)*x2916)));
evalcond[3]=(((r21*x2900*x2908))+((r22*x2922))+((r20*x2911))+((r21*x2910))+(((-1.0)*r20*x2914*x2918))+x2912+x2915);
evalcond[4]=((((-1.0)*r22*sj3*x2919))+((r20*x2900*x2910))+((r21*x2914))+((r20*x2908))+(((-1.0)*x2907))+(((-1.0)*sj3*x2909*x2918))+x2904);
evalcond[5]=(((cj3*x2905))+((cj0*x2912))+((cj0*x2915))+((r00*x2908))+((x2906*x2921))+(((-1.0)*r01*x2911*x2918))+(((-1.0)*r02*sj3*x2919)));
evalcond[6]=(((r01*x2900*x2908))+((r00*x2911))+((cj0*x2907))+((sj3*x2905))+(((-1.0)*x2904*x2916))+(((-1.0)*cj3*x2906*x2918))+((r02*x2922)));
evalcond[7]=(((r11*x2914))+((r10*x2908))+(((-1.0)*r12*sj3*x2919))+((sj0*x2915))+((x2903*x2921))+(((-1.0)*sj3*x2901*x2918))+((sj1*x2902)));
evalcond[8]=(((r11*x2910))+((x2901*x2920))+(((-1.0)*sj0*x2904))+(((-1.0)*cj3*x2903*x2918))+((cj1*x2902))+((r12*x2922))+((r10*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2923=cj5*cj5;
IkReal x2924=r21*r21;
IkReal x2925=r20*r20;
IkReal x2926=(r20*r21);
IkReal x2927=((1.0)*cj3);
IkReal x2928=((1.0)*cj5);
IkReal x2929=(cj1*sj2);
IkReal x2930=(cj5*sj5);
IkReal x2931=(sj3*sj5);
IkReal x2932=(cj2*sj1);
IkReal x2933=(r21*sj5);
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2927*(r22*r22)))+((cj3*x2923*x2924))+(((-1.0)*x2924*x2927))+(((-1.0)*x2923*x2925*x2927))+(((2.0)*cj3*x2926*x2930)))),-1);
if(!x2934.valid){
continue;
}
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal((((r22*x2929))+((cj5*r21*r22*sj3))+((r22*x2932))+((r20*r22*x2931)))),IkReal((((x2929*x2933))+((sj3*x2926))+(((-1.0)*x2925*x2928*x2931))+(((-1.0)*r20*x2928*x2929))+((x2932*x2933))+(((-1.0)*r20*x2928*x2932))+((sj3*x2924*x2930))+(((-2.0)*sj3*x2923*x2926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2934.value)))+(x2935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2936=IKsin(j4);
IkReal x2937=IKcos(j4);
IkReal x2938=(cj3*r21);
IkReal x2939=(r21*sj5);
IkReal x2940=(r20*sj5);
IkReal x2941=(cj5*r20);
IkReal x2942=((1.0)*x2937);
IkReal x2943=((1.0)*x2936);
evalcond[0]=(((x2936*x2939))+(((-1.0)*r22*x2942))+(((-1.0)*x2941*x2943)));
evalcond[1]=(((cj2*sj1))+((sj5*x2937*x2938))+((cj5*r21*sj3))+((cj3*r22*x2936))+((cj1*sj2))+(((-1.0)*cj3*x2941*x2942))+((sj3*x2940)));
evalcond[2]=((((-1.0)*r22*sj3*x2943))+(((-1.0)*sj3*x2939*x2942))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x2937*x2941))+((cj5*x2938))+((cj3*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2944=(cj5*sj4);
IkReal x2945=(sj4*sj5);
if( IKabs((((r00*x2944))+(((-1.0)*r01*x2945))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2945))+(((-1.0)*r10*x2944))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2944))+(((-1.0)*r01*x2945))+((cj4*r02))))+IKsqr((((r11*x2945))+(((-1.0)*r10*x2944))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2944))+(((-1.0)*r01*x2945))+((cj4*r02))), (((r11*x2945))+(((-1.0)*r10*x2944))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2946=IKsin(j0);
IkReal x2947=IKcos(j0);
IkReal x2948=(r02*sj4);
IkReal x2949=((1.0)*sj3);
IkReal x2950=(r12*sj4);
IkReal x2951=(cj1*cj2);
IkReal x2952=((1.0)*cj3);
IkReal x2953=((1.0)*sj1);
IkReal x2954=(r11*sj5);
IkReal x2955=(cj5*r01);
IkReal x2956=(cj5*r11);
IkReal x2957=(r00*sj5);
IkReal x2958=((0.24365)*cj1);
IkReal x2959=(cj2*sj1);
IkReal x2960=(r10*sj5);
IkReal x2961=((1.0)*cj4);
IkReal x2962=((0.21325)*x2946);
IkReal x2963=(cj4*cj5*r00);
IkReal x2964=(sj2*x2946);
IkReal x2965=(cj4*cj5*r10);
IkReal x2966=(cj4*r01*sj5);
IkReal x2967=(sj2*x2947);
IkReal x2968=((1.0)*cj5*sj4);
evalcond[0]=(((r01*sj4*sj5))+(((-1.0)*r00*x2968))+(((-1.0)*r02*x2961))+x2946);
evalcond[1]=((((-1.0)*x2947))+((sj4*x2954))+(((-1.0)*r10*x2968))+(((-1.0)*r12*x2961)));
evalcond[2]=((((-1.0)*x2947*x2958))+(((0.11)*x2946))+(((-1.0)*px))+(((0.21325)*sj1*x2967))+(((-0.08535)*x2957))+(((-0.08535)*x2955))+(((-0.21325)*x2947*x2951)));
evalcond[3]=((((-0.08535)*x2960))+(((-1.0)*x2951*x2962))+(((-1.0)*py))+(((-0.11)*x2947))+(((-1.0)*x2946*x2958))+(((-0.08535)*x2956))+((sj1*sj2*x2962)));
evalcond[4]=(((cj1*x2967))+((x2947*x2959))+((sj3*x2963))+(((-1.0)*x2948*x2949))+(((-1.0)*x2949*x2966))+((cj3*x2955))+((cj3*x2957)));
evalcond[5]=(((sj3*x2955))+((sj3*x2957))+((x2947*x2951))+((cj3*x2966))+((cj3*x2948))+(((-1.0)*x2952*x2963))+(((-1.0)*x2953*x2967)));
evalcond[6]=(((cj1*x2964))+((x2946*x2959))+((sj3*x2965))+(((-1.0)*cj4*x2949*x2954))+((cj3*x2960))+(((-1.0)*x2949*x2950))+((cj3*x2956)));
evalcond[7]=(((x2946*x2951))+((sj3*x2956))+((sj3*x2960))+((cj3*cj4*x2954))+(((-1.0)*x2952*x2965))+((cj3*x2950))+(((-1.0)*x2953*x2964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2969=cj5*cj5;
IkReal x2970=r21*r21;
IkReal x2971=r20*r20;
IkReal x2972=(r20*r21);
IkReal x2973=(sj1*sj2);
IkReal x2974=(r21*sj5);
IkReal x2975=(cj1*cj2);
IkReal x2976=(cj5*r20);
IkReal x2977=(cj5*sj5);
IkReal x2978=(cj3*r22);
IkReal x2979=(sj3*x2970);
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal((((r20*sj5*x2978))+((r22*x2973))+(((-1.0)*r22*x2975))+((cj5*r21*x2978)))),IkReal(((((-1.0)*x2973*x2976))+(((-1.0)*x2974*x2975))+((x2975*x2976))+(((-1.0)*cj3*x2971*x2977))+((cj3*x2970*x2977))+((cj3*x2972))+(((-2.0)*cj3*x2969*x2972))+((x2973*x2974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x2969*x2979))+(((-2.0)*sj3*x2972*x2977))+((sj3*x2969*x2971))+x2979)),-1);
if(!x2981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2980.value)+(((1.5707963267949)*(x2981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2982=IKsin(j4);
IkReal x2983=IKcos(j4);
IkReal x2984=(cj3*r21);
IkReal x2985=(r21*sj5);
IkReal x2986=(r20*sj5);
IkReal x2987=(cj5*r20);
IkReal x2988=((1.0)*x2983);
IkReal x2989=((1.0)*x2982);
evalcond[0]=((((-1.0)*x2987*x2989))+(((-1.0)*r22*x2988))+((x2982*x2985)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj3*r22*x2982))+((sj3*x2986))+((cj1*sj2))+(((-1.0)*cj3*x2987*x2988))+((sj5*x2983*x2984)));
evalcond[2]=(((cj3*x2986))+(((-1.0)*r22*sj3*x2989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x2983*x2987))+(((-1.0)*sj3*x2985*x2988))+((cj5*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2990=(cj5*sj4);
IkReal x2991=(sj4*sj5);
if( IKabs((((r00*x2990))+(((-1.0)*r01*x2991))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2990))+((r11*x2991))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2990))+(((-1.0)*r01*x2991))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2990))+((r11*x2991))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2990))+(((-1.0)*r01*x2991))+((cj4*r02))), ((((-1.0)*r10*x2990))+((r11*x2991))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2992=IKsin(j0);
IkReal x2993=IKcos(j0);
IkReal x2994=(r02*sj4);
IkReal x2995=((1.0)*sj3);
IkReal x2996=(r12*sj4);
IkReal x2997=(cj1*cj2);
IkReal x2998=((1.0)*cj3);
IkReal x2999=((1.0)*sj1);
IkReal x3000=(r11*sj5);
IkReal x3001=(cj5*r01);
IkReal x3002=(cj5*r11);
IkReal x3003=(r00*sj5);
IkReal x3004=((0.24365)*cj1);
IkReal x3005=(cj2*sj1);
IkReal x3006=(r10*sj5);
IkReal x3007=((1.0)*cj4);
IkReal x3008=((0.21325)*x2992);
IkReal x3009=(cj4*cj5*r00);
IkReal x3010=(sj2*x2992);
IkReal x3011=(cj4*cj5*r10);
IkReal x3012=(cj4*r01*sj5);
IkReal x3013=(sj2*x2993);
IkReal x3014=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x3007))+(((-1.0)*r00*x3014))+((r01*sj4*sj5))+x2992);
evalcond[1]=((((-1.0)*r10*x3014))+(((-1.0)*r12*x3007))+(((-1.0)*x2993))+((sj4*x3000)));
evalcond[2]=((((0.21325)*sj1*x3013))+(((-1.0)*px))+(((-1.0)*x2993*x3004))+(((-0.21325)*x2993*x2997))+(((0.11)*x2992))+(((-0.08535)*x3001))+(((-0.08535)*x3003)));
evalcond[3]=((((-1.0)*x2997*x3008))+(((-0.11)*x2993))+(((-1.0)*py))+(((-1.0)*x2992*x3004))+((sj1*sj2*x3008))+(((-0.08535)*x3002))+(((-0.08535)*x3006)));
evalcond[4]=(((x2993*x3005))+(((-1.0)*x2995*x3012))+((sj3*x3009))+((cj3*x3001))+((cj3*x3003))+(((-1.0)*x2994*x2995))+((cj1*x3013)));
evalcond[5]=(((cj3*x2994))+(((-1.0)*x2998*x3009))+((cj3*x3012))+((sj3*x3003))+((sj3*x3001))+((x2993*x2997))+(((-1.0)*x2999*x3013)));
evalcond[6]=((((-1.0)*x2995*x2996))+((sj3*x3011))+(((-1.0)*cj4*x2995*x3000))+((cj3*x3006))+((cj3*x3002))+((cj1*x3010))+((x2992*x3005)));
evalcond[7]=(((cj3*x2996))+((x2992*x2997))+((sj3*x3006))+((sj3*x3002))+(((-1.0)*x2998*x3011))+(((-1.0)*x2999*x3010))+((cj3*cj4*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (fcad8fb451a9006f3ec00424bf71f2cc)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
