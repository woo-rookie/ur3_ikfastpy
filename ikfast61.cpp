/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-03-23 21:51:49.773156
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.0819)*x6);
x13=((0.08535)*x1);
x14=((0.0819)*x5);
x15=((0.08535)*x3);
x16=((1.0)*x6);
x17=((1.0)*x10);
x18=((0.24365)*x1);
x19=((1.0)*x3);
x20=((1.0)*x9);
x21=((1.0)*x1);
x22=((1.0)*x5);
x23=((0.21325)*x3);
x24=(x0*x2);
x25=(x10*x4);
x26=(x2*x3);
x27=(x0*x9);
x28=(x10*x9);
x29=(x1*x2);
x30=(x0*x4);
x31=(x0*x11);
x32=(x1*x4);
x33=(x19*x30);
x34=(x17*x3*x4);
x35=(x32+x26);
x36=((((-1.0)*x19*x4))+((x2*x21)));
x37=(x35*x5);
x38=(x36*x6);
x39=((((-1.0)*x33))+((x1*x24)));
x40=((((-1.0)*x34))+((x10*x29)));
x41=((((-1.0)*x19*x24))+(((-1.0)*x21*x30)));
x42=(x17*(((((-1.0)*x32))+(((-1.0)*x26)))));
x43=(x40*x5);
x44=(x39*x5);
x45=(((x6*(((((-1.0)*x21*x4))+(((-1.0)*x19*x2))))))+((x36*x5)));
x46=(((x41*x6))+x44);
x47=(((x42*x6))+x43);
x48=(((x41*x5))+((x6*(((((-1.0)*x21*x24))+x33)))));
x49=(((x6*(((((-1.0)*x17*x29))+x34))))+((x42*x5)));
x50=(x46*x9);
eerot[0]=(((x7*((x50+((x10*x11))))))+((x48*x8)));
eerot[1]=(((x8*(((((-1.0)*x20*x46))+(((-1.0)*x11*x17))))))+((x48*x7)));
eerot[2]=(((x11*(((((-1.0)*x22*x39))+(((-1.0)*x16*x41))))))+x28);
eetrans[0]=(((x23*x30))+(((0.11)*x10))+(((-1.0)*x0*x18))+(((0.0819)*x28))+(((-0.21325)*x1*x24))+((x5*((((x13*x30))+((x15*x24))))))+((x6*((((x13*x24))+(((-1.0)*x15*x30))))))+((x11*(((((-1.0)*x12*x41))+(((-1.0)*x14*x39)))))));
eerot[3]=(((x49*x8))+((x7*(((((-1.0)*x31))+((x47*x9)))))));
eerot[4]=(((x8*(((((-1.0)*x20*x47))+(((1.0)*x31))))))+((x49*x7)));
eerot[5]=((((-1.0)*x0*x20))+((x11*(((((-1.0)*x22*x40))+(((-1.0)*x16*x42)))))));
IkReal x51=(x10*x2);
eetrans[1]=(((x5*((((x15*x51))+((x13*x25))))))+((x11*(((((-1.0)*x12*x42))+(((-1.0)*x14*x40))))))+(((-0.11)*x0))+((x23*x25))+((x6*((((x13*x51))+(((-1.0)*x15*x25))))))+(((-1.0)*x10*x18))+(((-0.0819)*x27))+(((-0.21325)*x10*x29)));
eerot[6]=(((x7*x9*((x38+x37))))+((x45*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x37))+(((-1.0)*x38))))))+((x45*x7)));
eerot[8]=(x11*(((((-1.0)*x22*x35))+(((-1.0)*x16*x36)))));
IkReal x52=((1.0)*x2);
eetrans[2]=((0.1519)+((x6*((((x13*x4))+((x15*x2))))))+((x11*(((((-1.0)*x12*x36))+(((-1.0)*x14*x35))))))+(((-0.24365)*x3))+(((-1.0)*x23*x52))+(((-0.21325)*x32))+((x5*(((((-1.0)*x13*x52))+((x15*x4)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0819)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.0819)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1519)+pz+(((-0.0819)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x56=((0.1707)*npx);
IkReal x57=((0.1707)*npy);
IkReal x58=((0.08535)*r22);
IkReal x59=((0.08535)*r21);
IkReal x60=((-0.08535)*r20);
IkReal x61=((-1.0)*r20);
IkReal x62=((-1.0)*rxp0_2);
IkReal x63=((-0.08535)*r21);
IkReal x64=((-1.0)*r21);
IkReal x65=((-1.0)*rxp1_2);
IkReal x66=((-1.0)*npx);
IkReal x67=((-1.0)*r22);
IkReal x68=((-1.0)*npz);
matrixinvcoeffs[0]=x60;
matrixinvcoeffs[1]=x56;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x61;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x62;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x60;
matrixinvcoeffs[19]=x56;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x61;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x62;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x63;
matrixinvcoeffs[33]=x57;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x64;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x65;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x63;
matrixinvcoeffs[51]=x57;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x64;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x65;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x67;
matrixinvcoeffs[76]=x58;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x68;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x58;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x65;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x63;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x65;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x59;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x61;
matrixinvcoeffs[133]=x66;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x61;
matrixinvcoeffs[151]=x66;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x60;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x67;
matrixinvcoeffs[165]=x68;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x58;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x67;
matrixinvcoeffs[183]=x68;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x64;
matrixinvcoeffs[204]=x59;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x65;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x59;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x66;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x60;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x61;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x60;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x62;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x69=pp*pp;
IkReal x70=pz*pz;
IkReal x71=((0.1707)*pz);
IkReal x72=(pp*r21);
IkReal x73=((0.1707)*rxp1_2);
IkReal x74=(gclwh13_1*pp);
IkReal x75=(gclwh5_1*rxp2_2);
IkReal x76=(npy*pz);
IkReal x77=(pz*r20);
IkReal x78=(npz*pz);
IkReal x79=((0.000221452524)*r22);
IkReal x80=((0.22)*gclwh12_14);
IkReal x81=((0.014569245)*r21);
IkReal x82=(gclwh8_12*r20);
IkReal x83=(gclwh15_1*r20);
IkReal x84=(pp*r20);
IkReal x85=((0.22)*gclwh15_15);
IkReal x86=((0.00097973905125)*rxp1_2);
IkReal x87=((2.0)*gclwh11_10);
IkReal x88=(gclwh12_11*rxp1_2);
IkReal x89=(pp*r22);
IkReal x90=((0.0072846225)*r21);
IkReal x91=((0.3414)*rxp0_2);
IkReal x92=((0.014569245)*r20);
IkReal x93=((4.18103640120938e-5)*r21);
IkReal x94=((2.0)*gclwh4_11);
IkReal x95=(gclwh9_13*rxp0_2);
IkReal x96=(gclwh2_0*pz);
IkReal x97=(gclwh5_9*r22);
IkReal x98=(gclwh8_2*rxp0_2);
IkReal x99=(npx*pz);
IkReal x100=((0.014569245)*rxp1_2);
IkReal x101=((0.15598566)*rxp0_2);
IkReal x102=(gclwh13_0*pz);
IkReal x103=((0.018777)*rxp2_2);
IkReal x104=((0.0072846225)*r22);
IkReal x105=(gclwh14_14*rxp0_2);
IkReal x106=(gclwh13_0*rxp1_2);
IkReal x107=((0.1707)*pp);
IkReal x108=((0.00518928)*rxp1_2);
IkReal x109=((0.1707)*rxp2_2);
IkReal x110=(gclwh5_0*pz);
IkReal x111=((2.0)*gclwh9_10);
IkReal x112=((0.03645690896625)*rxp2_2);
IkReal x113=((2.0)*gclwh15_10);
IkReal x114=(gclwh13_1*r21);
IkReal x115=((2.0)*pp);
IkReal x116=(gclwh12_2*rxp1_2);
IkReal x117=(gclwh14_8*rxp0_2);
IkReal x118=(gclwh15_1*rxp0_2);
IkReal x119=(gclwh4_3*rxp2_2);
IkReal x120=((0.00332834402025)*r22);
IkReal x121=(gclwh12_14*rxp1_2);
IkReal x122=(gclwh4_2*pz);
IkReal x123=((4.18103640120938e-5)*r22);
IkReal x124=(gclwh10_2*r22);
IkReal x125=((0.03645690896625)*rxp1_2);
IkReal x126=(gclwh15_9*r20);
IkReal x127=(gclwh10_3*rxp2_2);
IkReal x128=((0.014569245)*r22);
IkReal x129=((0.000801308475)*r21);
IkReal x130=(gclwh4_8*rxp2_2);
IkReal x131=((2.0)*gclwh10_11);
IkReal x132=((0.0072846225)*r20);
IkReal x133=((0.02913849)*r21);
IkReal x134=((4.0)*gclwh11_10);
IkReal x135=(gclwh6_12*r21);
IkReal x136=((0.00310689149625)*r20);
IkReal x137=(gclwh13_9*r21);
IkReal x138=(gclwh12_8*r21);
IkReal x139=((4.18103640120938e-5)*r20);
IkReal x140=((0.3414)*rxp1_2);
IkReal x141=((2.0)*gclwh7_10);
IkReal x142=((1.0)*pp);
IkReal x143=(gclwh4_11*rxp2_2);
IkReal x144=((0.07280355)*rxp1_2);
IkReal x145=((0.00155579859013472)*r22);
IkReal x146=((1.0)*pz);
IkReal x147=(gclwh8_2*r20);
IkReal x148=((0.15598566)*rxp2_2);
IkReal x149=((4.0)*gclwh8_11);
IkReal x150=((0.000801308475)*r20);
IkReal x151=(gclwh7_0*pz);
IkReal x152=(gclwh15_9*rxp0_2);
IkReal x153=(gclwh10_2*pz);
IkReal x154=((0.00160261695)*r22);
IkReal x155=((4.0)*gclwh9_10);
IkReal x156=((0.6828)*rxp0_2);
IkReal x157=(gclwh5_9*rxp2_2);
IkReal x158=(gclwh9_13*r20);
IkReal x159=(gclwh6_2*r21);
IkReal x160=((0.00310689149625)*r21);
IkReal x161=((0.018777)*rxp0_2);
IkReal x162=((0.00310689149625)*r22);
IkReal x163=((0.00155579859013472)*r20);
IkReal x164=((0.1707)*rxp0_2);
IkReal x165=((0.08318211)*rxp1_2);
IkReal x166=((2.0)*gclwh6_11);
IkReal x167=((0.018777)*rxp1_2);
IkReal x168=(gclwh11_1*rxp2_2);
IkReal x169=((0.22)*gclwh4_14);
IkReal x170=(gclwh11_13*rxp2_2);
IkReal x171=(gclwh10_12*rxp2_2);
IkReal x172=(gclwh4_8*r22);
IkReal x173=((2.0)*gclwh12_11);
IkReal x174=((0.00160261695)*r20);
IkReal x175=(gclwh14_8*r20);
IkReal x176=(gclwh6_2*pz);
IkReal x177=((2.0)*gclwh5_10);
IkReal x178=((0.22)*gclwh5_15);
IkReal x179=(gclwh7_13*r21);
IkReal x180=((0.07280355)*rxp0_2);
IkReal x181=(gclwh11_0*pz);
IkReal x182=((0.02913849)*r22);
IkReal x183=(gclwh14_2*rxp0_2);
IkReal x184=(gclwh14_3*rxp0_2);
IkReal x185=((0.00155579859013472)*r21);
IkReal x186=((0.000801308475)*r22);
IkReal x187=((2.0)*gclwh8_11);
IkReal x188=((0.22)*gclwh14_14);
IkReal x189=((0.07280355)*rxp2_2);
IkReal x190=((4.0)*gclwh10_11);
IkReal x191=((0.22)*gclwh13_15);
IkReal x192=((4.0)*gclwh6_11);
IkReal x193=((0.02913849)*r20);
IkReal x194=((0.3414)*rxp2_2);
IkReal x195=((2.0)*gclwh13_10);
IkReal x196=((0.07799283)*rxp1_2);
IkReal x197=((0.00160261695)*r21);
IkReal x198=((4.0)*gclwh7_10);
IkReal x199=(gclwh4_14*rxp2_2);
IkReal x200=(gclwh8_12*rxp0_2);
IkReal x201=((2.0)*gclwh14_11);
IkReal x202=(gclwh12_2*pz);
IkReal x203=((0.018777)*x105);
IkReal x204=(gclwh6_5*x129);
IkReal x205=((0.018777)*x121);
IkReal x206=(gclwh10_5*x186);
IkReal x207=(gclwh8_5*x150);
IkReal x208=(gclwh4_14*x103);
IkReal x209=((0.014569245)*x130);
IkReal x210=(gclwh6_11*x90);
IkReal x211=(gclwh12_8*x100);
IkReal x212=(gclwh4_11*x109);
IkReal x213=(gclwh12_11*x73);
IkReal x214=(gclwh14_11*x164);
IkReal x215=(gclwh10_11*x104);
IkReal x216=((0.014569245)*x117);
IkReal x217=(gclwh8_11*x132);
IkReal x218=(gclwh13_9*x100);
IkReal x219=((0.014569245)*x157);
IkReal x220=(gclwh11_10*x104);
IkReal x221=(gclwh15_10*x164);
IkReal x222=(gclwh9_10*x132);
IkReal x223=(gclwh13_10*x73);
IkReal x224=(gclwh7_10*x90);
IkReal x225=((0.014569245)*x152);
IkReal x226=(gclwh5_10*x109);
IkReal x227=(gclwh15_15*x161);
IkReal x228=(gclwh7_7*x129);
IkReal x229=(gclwh5_15*x103);
IkReal x230=(gclwh9_7*x150);
IkReal x231=(gclwh13_15*x167);
IkReal x232=(gclwh11_7*x186);
IkReal x233=(gclwh14_14*x150);
IkReal x234=(gclwh10_5*x103);
IkReal x235=(gclwh8_5*x161);
IkReal x236=(gclwh4_14*x186);
IkReal x237=(gclwh12_14*x129);
IkReal x238=(gclwh6_5*x167);
IkReal x239=(gclwh8_11*x164);
IkReal x240=(gclwh10_11*x109);
IkReal x241=(gclwh12_11*x90);
IkReal x242=((0.000621742530375)*x172);
IkReal x243=(gclwh4_11*x104);
IkReal x244=((0.000621742530375)*x138);
IkReal x245=((0.000621742530375)*x175);
IkReal x246=(gclwh6_11*x73);
IkReal x247=(gclwh14_11*x132);
IkReal x248=(gclwh9_10*x164);
IkReal x249=((0.000621742530375)*x126);
IkReal x250=(gclwh5_10*x104);
IkReal x251=(gclwh11_10*x109);
IkReal x252=(gclwh13_10*x90);
IkReal x253=((0.000621742530375)*x137);
IkReal x254=(gclwh15_10*x132);
IkReal x255=(gclwh7_10*x73);
IkReal x256=((0.000621742530375)*x97);
IkReal x257=(gclwh7_7*x167);
IkReal x258=(gclwh5_15*x186);
IkReal x259=(gclwh13_15*x129);
IkReal x260=(gclwh15_15*x150);
IkReal x261=(gclwh9_7*x161);
IkReal x262=(gclwh11_7*x103);
IkReal x263=(gclwh14_11*x91);
IkReal x264=(gclwh10_11*x128);
IkReal x265=(gclwh8_11*x92);
IkReal x266=((0.037554)*x105);
IkReal x267=((0.037554)*x199);
IkReal x268=((0.037554)*x121);
IkReal x269=((0.3414)*x143);
IkReal x270=((0.3414)*x88);
IkReal x271=(gclwh6_11*x81);
IkReal x272=((0.037554)*gclwh13_15*rxp1_2);
IkReal x273=((0.037554)*gclwh5_15*rxp2_2);
IkReal x274=((0.037554)*gclwh15_15*rxp0_2);
IkReal x275=(gclwh15_10*x91);
IkReal x276=(gclwh9_10*x92);
IkReal x277=(gclwh11_10*x128);
IkReal x278=((0.0608)*x76);
IkReal x279=(gclwh15_1*x99);
IkReal x280=((2.0)*x70);
IkReal x281=((1.0)*x69);
IkReal x282=(r20*x69);
IkReal x283=(r21*x69);
IkReal x284=((0.11)*gclwh6_5*x72);
IkReal x285=((0.22)*gclwh8_5*x99);
IkReal x286=((0.22)*gclwh10_5*x78);
IkReal x287=((0.11)*gclwh10_5*x89);
IkReal x288=((0.22)*gclwh6_5*x76);
IkReal x289=((0.11)*gclwh8_5*x84);
IkReal x290=(gclwh12_3*pp*x73);
IkReal x291=(x183*x71);
IkReal x292=(gclwh6_3*x283);
IkReal x293=(x104*x153);
IkReal x294=(x131*x78);
IkReal x295=(x187*x99);
IkReal x296=(x153*x89);
IkReal x297=(x107*x119);
IkReal x298=((0.0072846225)*gclwh8_2*x77);
IkReal x299=(gclwh8_2*pp*x77);
IkReal x300=(x176*x90);
IkReal x301=(x166*x76);
IkReal x302=(x116*x71);
IkReal x303=(gclwh4_2*rxp2_2*x71);
IkReal x304=(x107*x184);
IkReal x305=(x73*x74);
IkReal x306=(gclwh7_1*x283);
IkReal x307=(x104*x181);
IkReal x308=(gclwh15_0*rxp0_2*x71);
IkReal x309=(x181*x89);
IkReal x310=(x107*x75);
IkReal x311=(x141*x76);
IkReal x312=((0.0072846225)*gclwh9_0*x77);
IkReal x313=(gclwh9_0*pp*x77);
IkReal x314=(x78*x87);
IkReal x315=(x111*x99);
IkReal x316=(x107*x118);
IkReal x317=(x106*x71);
IkReal x318=(gclwh5_0*rxp2_2*x71);
IkReal x319=(x151*x90);
IkReal x320=((0.11)*gclwh7_7*x72);
IkReal x321=((0.22)*gclwh9_7*x99);
IkReal x322=((0.22)*gclwh11_7*x78);
IkReal x323=((0.22)*gclwh7_7*x76);
IkReal x324=((0.11)*gclwh11_7*x89);
IkReal x325=((0.11)*gclwh9_7*x84);
IkReal x326=(x169*x78);
IkReal x327=(x76*x80);
IkReal x328=((0.11)*gclwh14_14*x84);
IkReal x329=((0.11)*gclwh4_14*x89);
IkReal x330=((0.11)*gclwh12_14*x72);
IkReal x331=(x188*x99);
IkReal x332=(gclwh14_8*npx*x71);
IkReal x333=(gclwh14_2*pp*x77);
IkReal x334=(gclwh12_3*x283);
IkReal x335=(gclwh3_2*pz*x90);
IkReal x336=((0.08535)*gclwh12_8*x72);
IkReal x337=(gclwh6_2*rxp1_2*x71);
IkReal x338=(x107*x127);
IkReal x339=(gclwh3_3*x283);
IkReal x340=(gclwh1_3*x282);
IkReal x341=((0.08535)*gclwh4_8*x89);
IkReal x342=((0.0072846225)*gclwh14_2*x77);
IkReal x343=(x201*x99);
IkReal x344=(gclwh4_3*r22*x69);
IkReal x345=((0.0072846225)*gclwh1_2*x77);
IkReal x346=(gclwh12_8*npy*x71);
IkReal x347=(gclwh4_8*npz*x71);
IkReal x348=(x71*x98);
IkReal x349=(x78*x94);
IkReal x350=((0.08535)*gclwh14_8*x84);
IkReal x351=(gclwh6_3*pp*x73);
IkReal x352=(gclwh10_2*rxp2_2*x71);
IkReal x353=(x104*x122);
IkReal x354=(x202*x90);
IkReal x355=(x173*x76);
IkReal x356=(x102*x90);
IkReal x357=(x69*x83);
IkReal x358=((0.08535)*gclwh15_9*x84);
IkReal x359=(x110*x89);
IkReal x360=(x102*x72);
IkReal x361=(x90*x96);
IkReal x362=((0.0072846225)*gclwh0_0*x77);
IkReal x363=(gclwh9_0*rxp0_2*x71);
IkReal x364=(x113*x99);
IkReal x365=(x104*x110);
IkReal x366=(gclwh2_1*x283);
IkReal x367=(gclwh5_9*npz*x71);
IkReal x368=(gclwh7_1*pp*x73);
IkReal x369=(gclwh11_0*rxp2_2*x71);
IkReal x370=(gclwh13_9*npy*x71);
IkReal x371=(gclwh0_1*x282);
IkReal x372=((0.08535)*gclwh5_9*x89);
IkReal x373=(gclwh15_9*npx*x71);
IkReal x374=((0.08535)*gclwh13_9*x72);
IkReal x375=(x107*x168);
IkReal x376=(x177*x78);
IkReal x377=(x195*x76);
IkReal x378=(gclwh7_0*rxp1_2*x71);
IkReal x379=((0.0072846225)*gclwh15_0*x77);
IkReal x380=((0.11)*gclwh13_15*x72);
IkReal x381=((0.11)*gclwh5_15*x89);
IkReal x382=(x85*x99);
IkReal x383=(x178*x78);
IkReal x384=((0.11)*gclwh15_15*x84);
IkReal x385=(x191*x76);
IkReal x386=(x187*x84);
IkReal x387=(x131*x89);
IkReal x388=(x192*x76);
IkReal x389=(x149*x99);
IkReal x390=(x166*x72);
IkReal x391=(x190*x78);
IkReal x392=(x87*x89);
IkReal x393=(x198*x76);
IkReal x394=(x111*x84);
IkReal x395=(gclwh6_2*npy*x280);
IkReal x396=(gclwh10_3*x115*x78);
IkReal x397=(gclwh10_3*r22*x281);
IkReal x398=(gclwh6_3*x115*x76);
IkReal x399=(gclwh6_2*x146*x72);
IkReal x400=(gclwh10_2*npz*x280);
IkReal x401=(gclwh8_2*npx*x280);
IkReal x402=(gclwh11_1*x115*x78);
IkReal x403=(gclwh7_0*npy*x280);
IkReal x404=(gclwh9_0*npx*x280);
IkReal x405=(gclwh11_1*r22*x281);
IkReal x406=(gclwh7_1*x115*x76);
IkReal x407=(gclwh11_0*npz*x280);
IkReal x408=(gclwh7_0*x146*x72);
IkReal x409=(gclwh12_2*npy*x280);
IkReal x410=(gclwh3_2*npy*x280);
IkReal x411=(gclwh1_2*npx*x280);
IkReal x412=(gclwh14_3*x115*x99);
IkReal x413=(gclwh4_2*npz*x280);
IkReal x414=(gclwh4_3*x115*x78);
IkReal x415=(gclwh12_2*x146*x72);
IkReal x416=(gclwh1_2*x142*x77);
IkReal x417=(gclwh3_3*x115*x76);
IkReal x418=((1.0)*x122*x89);
IkReal x419=(gclwh1_3*x115*x99);
IkReal x420=(gclwh3_2*x146*x72);
IkReal x421=(gclwh12_3*x115*x76);
IkReal x422=(gclwh14_2*npx*x280);
IkReal x423=(gclwh14_3*r20*x281);
IkReal x424=(gclwh0_0*npx*x280);
IkReal x425=(gclwh2_0*npy*x280);
IkReal x426=(gclwh5_1*x115*x78);
IkReal x427=((2.0)*x74*x76);
IkReal x428=(gclwh15_0*npx*x280);
IkReal x429=(gclwh2_1*x115*x76);
IkReal x430=(gclwh0_1*x115*x99);
IkReal x431=(gclwh5_0*npz*x280);
IkReal x432=(gclwh13_0*npy*x280);
IkReal x433=(gclwh0_0*x142*x77);
IkReal x434=(gclwh15_0*x142*x77);
IkReal x435=((1.0)*x72*x96);
IkReal x436=(x114*x281);
IkReal x437=(gclwh5_1*r22*x281);
IkReal x438=(x115*x279);
IkReal x439=(x272+x273);
IkReal x440=(x267+x268);
IkReal x441=(x261+x262);
IkReal x442=(x234+x235);
IkReal x443=(x205+x208);
IkReal x444=(x229+x231);
IkReal x445=(x301+x214+x215+x217);
IkReal x446=(x311+x221+x220+x222);
IkReal x447=(x377+x376+x254+x255);
IkReal x448=(x355+x349+x247+x246);
IkReal x449=(x320+x321+x322+x228);
IkReal x450=(x204+x286+x285+x284);
IkReal x451=(x326+x327+x328+x233);
IkReal x452=(x384+x385+x383+x260);
IkReal x453=(x343+x239+x243+x241+x240);
IkReal x454=(x364+x250+x251+x252+x248);
IkReal x455=(x315+x314+x223+x224+x226);
IkReal x456=(x210+x212+x213+x294+x295);
IkReal x457=(x331+x330+x329+x236+x237);
IkReal x458=(x382+x380+x381+x258+x259);
IkReal x459=(x207+x206+x289+x288+x287);
IkReal x460=(x324+x325+x323+x232+x230);
IkReal x461=(x389+x391+x390+x269+x270+x271);
IkReal x462=(((gclwh7_10*x81))+((gclwh13_10*x140))+((x134*x78))+((gclwh5_10*x194))+((x141*x72))+((x155*x99)));
IkReal x463=(x386+x387+x388+x265+x264+x263);
IkReal x464=(x394+x393+x392+x276+x277+x275);
IkReal x465=(x319+x318+x317+x316+x225+x405+x404+x407+x406+x408);
IkReal x466=(x304+x302+x303+x300+x397+x399+x398+x216+x401+x400);
IkReal x467=(x395+x396+x211+x209+x298+x299+x290+x291+x292+x293+x296+x297);
IkReal x468=(x308+x309+x306+x307+x305+x310+x313+x312+x218+x219+x403+x402);
IkReal x469=(x379+x378+x375+x374+x373+x372+x256+x253+x429+x438+x430+x431+x432+x433+x434+x435+x436+x437);
IkReal x470=(x339+x338+x333+x332+x337+x336+x335+x334+x342+x340+x341+x344+x345+x242+x244+x409+x412+x413+x410+x411+x71);
IkReal x471=(x351+x350+x353+x352+x354+x346+x347+x348+x245+x416+x417+x414+x415+x418+x419+x423+x422+x421+x420);
IkReal x472=(x357+x356+x359+x358+x371+x370+x368+x369+x360+x361+x362+x363+x365+x366+x367+x249+x428+x427+x426+x425+x424+x71);
op[0]=((((-1.0)*gclwh10_12*x120))+(((-0.07799283)*x130))+(((0.9138)*gclwh10_12*x78))+(((-0.4569)*gclwh10_12*x89))+(((0.9138)*gclwh8_12*x99))+(((-1.0)*x203))+(((0.4569)*gclwh6_12*x72))+(((-1.0)*gclwh12_8*x196))+(((-1.0)*x459))+x443+x450+(((0.07799283)*x117))+(((0.00332834402025)*x135))+(((-0.4569)*pp*x82))+(((-0.00332834402025)*x82))+(((-0.9138)*gclwh6_12*x76)));
op[1]=((((0.03645690896625)*x184))+(((0.427145975)*gclwh6_3*x76))+(((-0.427145975)*gclwh10_3*x78))+(((-1.0)*x466))+((gclwh10_3*x145))+(((-1.0)*x456))+(((-1.0)*gclwh4_3*x112))+(((-1.0)*gclwh6_3*x185))+x445+x467+(((0.206288365)*gclwh10_3*x89))+(((-1.0)*gclwh6_11*x72))+(((-1.0)*gclwh12_3*x125))+((gclwh8_11*x84))+(((-0.206288365)*gclwh6_3*x72))+((gclwh10_11*x89)));
op[2]=((-0.09383)+(((-1.0)*x461))+x463);
op[3]=((((-0.08318211)*x117))+(((-1.0)*x440))+(((-1.0)*gclwh4_2*x189))+((gclwh8_2*x136))+(((-0.00310689149625)*x159))+(((0.00310689149625)*x124))+(((-0.853)*gclwh8_2*x99))+(((-0.853)*gclwh10_2*x78))+(((-0.07280355)*x116))+(((0.08318211)*x130))+x266+(((0.4265)*gclwh10_2*x89))+((gclwh12_8*x165))+(((0.853)*gclwh6_2*x76))+((gclwh14_2*x180))+(((0.4265)*gclwh8_2*x84))+(((-0.4265)*gclwh6_2*x72)));
op[4]=((((-1.0)*gclwh10_12*x79))+(((-1.0)*x443))+(((-0.0304)*gclwh10_12*x89))+((gclwh12_8*x108))+(((0.0304)*gclwh6_12*x72))+(((0.00518928)*x130))+(((-0.0304)*pp*x82))+(((-0.000221452524)*x82))+(((0.0608)*gclwh8_12*x99))+(((-1.0)*x459))+x203+x450+(((-0.00518928)*x117))+(((-1.0)*gclwh6_12*x278))+(((0.000221452524)*x135))+(((0.0608)*gclwh10_12*x78)));
op[5]=((((-1.0)*x445))+(((0.001545085)*gclwh6_3*x72))+(((-1.0)*gclwh8_11*x84))+((gclwh6_11*x72))+(((0.011479075)*gclwh6_3*x76))+(((-1.0)*gclwh10_11*x89))+((gclwh10_3*x123))+(((-0.00097973905125)*x119))+(((-1.0)*x466))+(((-1.0)*gclwh6_3*x93))+(((0.00097973905125)*x184))+(((-0.001545085)*gclwh10_3*x89))+x456+x467+(((-1.0)*gclwh12_3*x86))+(((-0.011479075)*gclwh10_3*x78)));
op[6]=((((-1.0)*x446))+(((-1.0)*gclwh13_1*x125))+((gclwh7_10*x72))+(((0.427145975)*gclwh7_1*x76))+(((-1.0)*gclwh7_1*x185))+(((0.206288365)*gclwh11_1*x89))+(((-0.03645690896625)*x75))+(((-1.0)*x465))+((gclwh11_1*x145))+x455+x468+(((0.03645690896625)*x118))+(((-0.427145975)*gclwh11_1*x78))+(((-1.0)*gclwh9_10*x84))+(((-1.0)*gclwh11_10*x89))+(((-0.206288365)*gclwh7_1*x72)));
op[7]=((((-1.0)*gclwh11_13*x120))+(((-0.4569)*gclwh11_13*x89))+(((-1.0)*gclwh13_9*x196))+(((-0.4569)*gclwh9_13*x84))+(((0.07799283)*x152))+(((-1.0)*x460))+(((0.00332834402025)*x179))+(((-0.00332834402025)*x158))+x449+x444+(((0.9138)*gclwh9_13*x99))+(((0.9138)*gclwh11_13*x78))+(((-0.07799283)*x157))+(((-1.0)*x227))+(((-0.9138)*gclwh7_13*x76))+(((0.4569)*gclwh7_13*x72)));
op[8]=((((-0.4265)*gclwh7_0*x72))+(((0.4265)*gclwh11_0*x89))+(((0.853)*gclwh7_0*x76))+(((-0.08318211)*x157))+(((-0.853)*gclwh11_0*x78))+(((0.08318211)*x152))+(((-1.0)*gclwh13_9*x165))+(((-0.07280355)*x106))+((gclwh15_0*x180))+(((-1.0)*gclwh7_0*x160))+(((0.4265)*gclwh9_0*x84))+x439+((gclwh9_0*x136))+(((-0.853)*gclwh9_0*x99))+(((-1.0)*x274))+(((-1.0)*gclwh5_0*x189))+((gclwh11_0*x162)));
op[9]=((-0.09383)+(((-1.0)*x462))+x464);
op[10]=((((-0.00097973905125)*x75))+(((-0.011479075)*gclwh11_1*x78))+(((0.011479075)*gclwh7_1*x76))+(((-0.001545085)*gclwh11_1*x89))+(((-1.0)*x465))+(((-1.0)*gclwh7_10*x72))+(((-1.0)*x455))+(((-1.0)*gclwh7_1*x93))+x446+x468+((gclwh11_10*x89))+((gclwh11_1*x123))+((gclwh9_10*x84))+(((0.00097973905125)*x118))+(((0.001545085)*gclwh7_1*x72))+(((-1.0)*gclwh13_1*x86)));
op[11]=((((-1.0)*x444))+(((-0.000221452524)*x158))+(((0.00518928)*x157))+(((-1.0)*gclwh11_13*x79))+(((-0.0304)*gclwh11_13*x89))+(((-1.0)*x460))+x227+x449+(((0.0608)*gclwh11_13*x78))+(((-1.0)*gclwh7_13*x278))+((gclwh13_9*x108))+(((0.0304)*gclwh7_13*x72))+(((0.0608)*gclwh9_13*x99))+(((-0.00518928)*x152))+(((-0.0304)*gclwh9_13*x84))+(((0.000221452524)*x179)));
op[12]=((((-0.9138)*gclwh14_8*x99))+(((-0.4569)*gclwh4_8*x89))+(((-1.0)*gclwh6_12*x196))+(((0.9138)*gclwh4_8*x78))+(((-0.4569)*gclwh12_8*x72))+(((0.00332834402025)*x175))+(((-1.0)*x451))+(((-1.0)*x238))+(((0.07799283)*x171))+(((-1.0)*gclwh4_8*x120))+x442+x457+(((0.4569)*gclwh14_8*x84))+(((0.07799283)*x200))+(((-0.00332834402025)*x138))+(((0.9138)*gclwh12_8*x76)));
op[13]=((-0.22085761)+(((0.427145975)*gclwh1_3*x99))+(((0.206288365)*gclwh14_3*x84))+(((0.427145975)*gclwh4_3*x78))+(((-1.0)*gclwh12_3*x185))+(((-1.0)*gclwh4_11*x89))+(((0.427145975)*gclwh12_3*x76))+(((-1.0)*x471))+(((-0.22085761)*gclwh3_3*x72))+(((-1.0)*gclwh12_11*x72))+((gclwh3_3*x185))+(((-1.0)*x453))+((gclwh14_11*x84))+((gclwh6_3*x125))+(((-1.0)*gclwh10_3*x112))+x448+x470+(((-0.206288365)*gclwh4_3*x89))+(((-0.206288365)*gclwh12_3*x72))+((gclwh1_3*x163))+((gclwh14_3*x163))+(((-0.22085761)*gclwh1_3*x84))+(((-1.0)*gclwh4_3*x145))+(((-0.427145975)*gclwh14_3*x99))+(((0.427145975)*gclwh3_3*x76)));
op[14]=((-0.05197952)+((gclwh6_11*x140))+(((-1.0)*gclwh10_11*x194))+(((-1.0)*x173*x72))+(((4.0)*gclwh4_11*x78))+(((-1.0)*gclwh4_11*x128))+(((-1.0)*gclwh8_11*x91))+((gclwh14_11*x92))+(((-4.0)*gclwh14_11*x99))+(((-1.0)*gclwh12_11*x81))+(((4.0)*gclwh12_11*x76))+((x201*x84))+(((-1.0)*x89*x94)));
op[15]=((((-0.9746)*gclwh12_8*x76))+(((-0.4265)*gclwh4_2*x89))+(((-0.4265)*gclwh3_2*x72))+(((-1.0)*gclwh12_2*x160))+(((-0.4265)*gclwh1_2*x84))+(((0.4265)*gclwh14_2*x84))+(((-1.0)*x72*x80))+((gclwh14_14*x174))+(((0.4873)*gclwh4_8*x89))+(((-0.00354979654425)*x175))+(((0.44)*gclwh12_14*x76))+(((-1.0)*gclwh4_2*x162))+(((0.853)*gclwh3_2*x76))+(((-1.0)*gclwh12_14*x197))+(((-0.4265)*gclwh12_2*x72))+(((-1.0)*x169*x89))+(((-1.0)*gclwh4_14*x154))+(((0.853)*gclwh1_2*x99))+(((-0.4873)*gclwh14_8*x84))+((gclwh14_2*x136))+(((0.9746)*gclwh14_8*x99))+(((0.4873)*gclwh12_8*x72))+(((-0.07280355)*x98))+(((0.853)*gclwh12_2*x76))+(((-1.0)*gclwh10_2*x189))+(((0.00354979654425)*x172))+(((-0.9746)*gclwh4_8*x78))+(((-0.44)*gclwh14_14*x99))+(((0.853)*gclwh4_2*x78))+((gclwh3_2*x160))+((gclwh1_2*x136))+(((0.00354979654425)*x138))+((x188*x84))+((gclwh6_2*x144))+(((0.44)*gclwh4_14*x78))+(((-0.853)*gclwh14_2*x99)));
op[16]=((((0.00518928)*x171))+(((-0.0608)*gclwh4_8*x78))+(((-0.000221452524)*x175))+(((-1.0)*gclwh12_8*x278))+(((-1.0)*gclwh6_12*x108))+(((0.0608)*gclwh14_8*x99))+(((-1.0)*x457))+(((0.0304)*gclwh4_8*x89))+(((-1.0)*x238))+x442+x451+(((0.000221452524)*x138))+((gclwh4_8*x79))+(((-0.0304)*gclwh14_8*x84))+(((0.0304)*gclwh12_8*x72))+(((0.00518928)*x200)));
op[17]=((0.01302416)+(((0.011479075)*gclwh1_3*x99))+(((-1.0)*x448))+(((0.001545085)*gclwh12_3*x72))+(((0.001545085)*gclwh4_3*x89))+(((-0.01302416)*gclwh1_3*x84))+(((-1.0)*gclwh14_11*x84))+(((0.011479075)*gclwh3_3*x76))+(((0.011479075)*gclwh12_3*x76))+(((-1.0)*gclwh4_3*x123))+(((-1.0)*x471))+(((0.011479075)*gclwh4_3*x78))+((gclwh12_11*x72))+((gclwh14_3*x139))+((gclwh4_11*x89))+((gclwh3_3*x93))+(((-1.0)*gclwh12_3*x93))+x453+x470+(((-0.00097973905125)*x127))+((gclwh6_3*x86))+(((-0.001545085)*gclwh14_3*x84))+(((-0.01302416)*gclwh3_3*x72))+(((-0.011479075)*gclwh14_3*x99))+((gclwh1_3*x139)));
op[18]=((0.22085761)+(((0.206288365)*gclwh5_1*x89))+((gclwh15_10*x84))+(((-0.22085761)*gclwh0_1*x84))+(((-1.0)*gclwh13_10*x72))+(((0.427145975)*gclwh2_1*x76))+((gclwh5_1*x145))+(((-0.427145975)*gclwh5_1*x78))+(((-1.0)*gclwh7_1*x125))+(((-1.0)*gclwh5_10*x89))+(((0.206288365)*gclwh13_1*x72))+(((-0.427145975)*gclwh13_1*x76))+(((0.427145975)*gclwh0_1*x99))+(((-0.206288365)*pp*x83))+(((-1.0)*x469))+(((-1.0)*x454))+x447+x472+(((0.427145975)*x279))+((gclwh0_1*x163))+(((-0.22085761)*gclwh2_1*x72))+(((-0.00155579859013472)*x83))+((gclwh2_1*x185))+(((0.00155579859013472)*x114))+((gclwh11_1*x112)));
op[19]=((((-0.00332834402025)*x126))+(((-1.0)*x441))+(((-0.9138)*gclwh5_9*x78))+(((0.4569)*gclwh5_9*x89))+(((-0.07799283)*x95))+((gclwh7_13*x196))+(((-1.0)*x458))+x257+x452+(((-0.9138)*gclwh13_9*x76))+(((0.00332834402025)*x97))+(((-0.07799283)*x170))+(((0.9138)*gclwh15_9*x99))+(((-0.4569)*gclwh15_9*x84))+(((0.4569)*gclwh13_9*x72))+(((0.00332834402025)*x137)));
op[20]=((((-1.0)*gclwh5_15*x154))+((x84*x85))+(((0.00354979654425)*x97))+(((-0.00354979654425)*x126))+(((-0.44)*gclwh15_15*x99))+((gclwh13_0*x160))+((gclwh2_0*x160))+(((-0.4873)*gclwh15_9*x84))+(((0.4873)*gclwh13_9*x72))+(((-0.853)*gclwh5_0*x78))+((gclwh0_0*x136))+(((-1.0)*x191*x72))+(((0.4873)*gclwh5_9*x89))+((gclwh5_0*x162))+(((0.44)*gclwh5_15*x78))+(((-1.0)*gclwh15_0*x136))+(((0.44)*gclwh13_15*x76))+(((-0.9746)*gclwh13_9*x76))+(((-0.9746)*gclwh5_9*x78))+(((-0.4265)*gclwh15_0*x84))+(((0.853)*gclwh0_0*x99))+(((-0.4265)*gclwh0_0*x84))+(((-1.0)*gclwh7_0*x144))+(((0.4265)*gclwh5_0*x89))+(((0.9746)*gclwh15_9*x99))+((gclwh9_0*x180))+(((-0.853)*gclwh13_0*x76))+((gclwh15_15*x174))+(((-0.4265)*gclwh2_0*x72))+(((-1.0)*gclwh13_15*x197))+(((0.00354979654425)*x137))+(((0.853)*gclwh2_0*x76))+(((0.4265)*gclwh13_0*x72))+(((-1.0)*x178*x89))+((gclwh11_0*x189))+(((0.853)*gclwh15_0*x99)));
op[21]=((-0.05197952)+(((4.0)*gclwh15_10*x99))+((gclwh11_10*x194))+(((-1.0)*gclwh15_10*x92))+((gclwh5_10*x128))+((x177*x89))+(((-1.0)*x113*x84))+(((-4.0)*gclwh13_10*x76))+((x195*x72))+((gclwh9_10*x91))+(((-1.0)*gclwh7_10*x140))+((gclwh13_10*x81))+(((-4.0)*gclwh5_10*x78)));
op[22]=((-0.01302416)+(((-0.001545085)*gclwh5_1*x89))+((gclwh0_1*x139))+(((0.011479075)*x279))+(((-1.0)*x447))+((gclwh5_10*x89))+(((0.011479075)*gclwh0_1*x99))+(((-0.01302416)*gclwh2_1*x72))+((gclwh5_1*x123))+((gclwh13_10*x72))+(((0.00097973905125)*x168))+(((-0.001545085)*gclwh13_1*x72))+(((-1.0)*x469))+(((0.011479075)*gclwh2_1*x76))+x454+x472+(((-1.0)*gclwh7_1*x86))+(((0.001545085)*pp*x83))+((gclwh2_1*x93))+(((-4.18103640120938e-5)*x83))+(((-1.0)*gclwh15_10*x84))+(((-0.011479075)*gclwh5_1*x78))+(((-0.011479075)*gclwh13_1*x76))+((gclwh13_1*x93))+(((-0.01302416)*gclwh0_1*x84)));
op[23]=(((gclwh7_13*x108))+(((-1.0)*x441))+(((-1.0)*gclwh5_9*x79))+(((-0.00518928)*x95))+(((0.0304)*gclwh15_9*x84))+(((-1.0)*x452))+x257+x458+(((-0.0608)*gclwh15_9*x99))+(((-0.0304)*gclwh5_9*x89))+(((-0.0304)*gclwh13_9*x72))+(((0.000221452524)*x126))+(((-0.00518928)*x170))+((gclwh13_9*x278))+(((0.0608)*gclwh5_9*x78))+(((-0.000221452524)*x137)));
op[24]=((-0.201036)+(((-1.0)*x461))+x463);
op[25]=((((-1.0)*x440))+(((1.8276)*gclwh6_2*x76))+((gclwh14_2*x101))+(((0.0066566880405)*x147))+(((-0.0066566880405)*x159))+(((0.9138)*gclwh8_2*x84))+(((-0.9138)*gclwh6_2*x72))+(((-1.0)*gclwh4_2*x148))+x266+(((-0.15598566)*x116))+(((-1.8276)*gclwh8_2*x99))+(((-1.8276)*gclwh10_2*x78))+(((0.9138)*gclwh10_2*x89))+(((0.0066566880405)*x124)));
op[26]=((((-1.706)*gclwh10_12*x78))+(((-0.075108)*x199))+(((-1.706)*gclwh8_12*x99))+(((0.853)*pp*x82))+(((0.853)*gclwh10_12*x89))+(((-0.853)*gclwh6_12*x72))+(((0.0062137829925)*x82))+(((0.0062137829925)*gclwh10_12*r22))+(((1.706)*gclwh6_12*x76))+(((0.075108)*x105))+(((-0.075108)*x121))+(((-0.0062137829925)*x135)));
op[27]=(((gclwh6_11*x133))+(((-1.0)*gclwh10_11*x182))+(((8.0)*gclwh10_11*x78))+((x192*x72))+(((-1.0)*gclwh14_11*x156))+(((8.0)*gclwh8_11*x99))+(((-1.0)*x190*x89))+(((-1.0)*gclwh8_11*x193))+(((-8.0)*gclwh6_11*x76))+(((-1.0)*x149*x84))+(((0.6828)*x143))+(((0.6828)*x88)));
op[28]=((-0.013376)+(((-1.0)*x463))+x461);
op[29]=((((-0.01037856)*gclwh4_2*rxp2_2))+(((0.01037856)*x183))+(((0.0608)*gclwh10_2*x89))+(((0.000442905048)*x147))+(((-0.1216)*gclwh10_2*x78))+(((-0.1216)*gclwh8_2*x99))+(((0.0608)*gclwh8_2*x84))+(((-0.0608)*gclwh6_2*x72))+x440+(((0.1216)*gclwh6_2*x76))+(((0.000442905048)*x124))+(((-0.01037856)*x116))+(((-1.0)*x266))+(((-0.000442905048)*x159)));
op[30]=((((-0.0066566880405)*gclwh7_0*r21))+(((-0.9138)*gclwh7_0*x72))+((gclwh15_0*x101))+(((-1.8276)*gclwh9_0*x99))+x439+(((-0.15598566)*x106))+(((-1.0)*x274))+(((-1.0)*gclwh5_0*x148))+(((0.0066566880405)*gclwh11_0*r22))+(((-1.8276)*gclwh11_0*x78))+(((0.0066566880405)*gclwh9_0*r20))+(((0.9138)*gclwh9_0*x84))+(((0.9138)*gclwh11_0*x89))+(((1.8276)*gclwh7_0*x76)));
op[31]=((-0.201036)+(((-1.0)*x462))+x464);
op[32]=(((gclwh11_10*x182))+(((-0.6828)*gclwh13_10*rxp1_2))+((gclwh15_10*x156))+((gclwh9_10*x193))+(((-1.0)*gclwh7_10*x133))+(((-0.6828)*gclwh5_10*rxp2_2))+(((-8.0)*gclwh11_10*x78))+(((8.0)*gclwh7_10*x76))+((x155*x84))+(((-1.0)*x198*x72))+((x134*x89))+(((-8.0)*gclwh9_10*x99)));
IkReal x473=pp*pp;
IkReal x474=pz*pz;
IkReal x475=((0.1707)*pz);
IkReal x476=(npy*pz);
IkReal x477=(pp*r21);
IkReal x478=((0.1707)*rxp1_2);
IkReal x479=(gclwh13_1*pp);
IkReal x480=(gclwh9_0*r20);
IkReal x481=(gclwh9_13*rxp0_2);
IkReal x482=(gclwh5_1*rxp2_2);
IkReal x483=((4.0)*gclwh12_11);
IkReal x484=(pp*r22);
IkReal x485=((0.44)*gclwh5_15);
IkReal x486=(gclwh10_12*rxp2_2);
IkReal x487=((0.0072846225)*pz);
IkReal x488=(gclwh4_2*r22);
IkReal x489=(npz*pz);
IkReal x490=(npx*pz);
IkReal x491=(gclwh11_13*r22);
IkReal x492=(gclwh15_10*r20);
IkReal x493=((0.014569245)*r21);
IkReal x494=(pp*r20);
IkReal x495=((0.22)*gclwh15_15);
IkReal x496=((2.0)*gclwh11_10);
IkReal x497=(gclwh14_2*pz);
IkReal x498=((0.0072846225)*r21);
IkReal x499=((2.0)*gclwh4_11);
IkReal x500=(gclwh2_0*r21);
IkReal x501=(gclwh9_0*rxp0_2);
IkReal x502=(gclwh5_9*r22);
IkReal x503=(gclwh8_2*rxp0_2);
IkReal x504=((0.00155579859013472)*r21);
IkReal x505=(gclwh12_8*rxp1_2);
IkReal x506=((0.3414)*rxp0_2);
IkReal x507=(gclwh4_14*r22);
IkReal x508=(gclwh13_0*pz);
IkReal x509=(gclwh12_2*r21);
IkReal x510=((0.018777)*rxp2_2);
IkReal x511=((0.6828)*rxp2_2);
IkReal x512=((0.0072846225)*r22);
IkReal x513=((1.0)*pz);
IkReal x514=(gclwh15_15*r20);
IkReal x515=((0.1707)*pp);
IkReal x516=((0.1707)*rxp2_2);
IkReal x517=(gclwh5_0*pz);
IkReal x518=((2.0)*gclwh9_10);
IkReal x519=((0.03645690896625)*rxp2_2);
IkReal x520=((2.0)*pp);
IkReal x521=(gclwh14_11*r20);
IkReal x522=(gclwh14_8*rxp0_2);
IkReal x523=(gclwh15_1*rxp0_2);
IkReal x524=((4.0)*gclwh14_11);
IkReal x525=((0.00332834402025)*r22);
IkReal x526=((0.037554)*rxp1_2);
IkReal x527=(gclwh13_1*rxp1_2);
IkReal x528=(gclwh5_10*r22);
IkReal x529=(gclwh6_12*rxp1_2);
IkReal x530=(gclwh15_0*rxp0_2);
IkReal x531=(gclwh15_9*r20);
IkReal x532=(gclwh10_3*rxp2_2);
IkReal x533=((0.000801308475)*r21);
IkReal x534=(gclwh4_8*rxp2_2);
IkReal x535=((2.0)*gclwh10_11);
IkReal x536=(gclwh9_10*r20);
IkReal x537=((0.00310689149625)*r20);
IkReal x538=((0.3414)*rxp1_2);
IkReal x539=((0.6828)*rxp0_2);
IkReal x540=((2.0)*gclwh7_10);
IkReal x541=(gclwh13_0*r21);
IkReal x542=((0.07280355)*rxp1_2);
IkReal x543=(gclwh4_3*r22);
IkReal x544=((0.44)*gclwh12_14);
IkReal x545=(gclwh7_0*r21);
IkReal x546=(gclwh15_9*rxp0_2);
IkReal x547=(gclwh10_2*r22);
IkReal x548=((0.44)*gclwh4_14);
IkReal x549=((0.00097973905125)*rxp1_2);
IkReal x550=(gclwh1_3*r20);
IkReal x551=(gclwh13_9*rxp1_2);
IkReal x552=((4.18103640120938e-5)*r21);
IkReal x553=((0.15598566)*rxp1_2);
IkReal x554=(gclwh5_0*r22);
IkReal x555=(gclwh5_9*rxp2_2);
IkReal x556=((0.000221452524)*r20);
IkReal x557=(gclwh4_3*rxp2_2);
IkReal x558=((0.00332834402025)*r21);
IkReal x559=(gclwh7_13*r21);
IkReal x560=(gclwh14_2*r20);
IkReal x561=((0.018777)*rxp0_2);
IkReal x562=((0.07280355)*rxp2_2);
IkReal x563=(gclwh10_3*r22);
IkReal x564=(gclwh15_15*rxp0_2);
IkReal x565=((0.00155579859013472)*r20);
IkReal x566=((4.0)*gclwh4_11);
IkReal x567=(gclwh5_15*r22);
IkReal x568=(gclwh1_2*r20);
IkReal x569=(gclwh12_8*r21);
IkReal x570=((0.1707)*rxp0_2);
IkReal x571=((0.00332834402025)*r20);
IkReal x572=((2.0)*gclwh6_11);
IkReal x573=((0.018777)*rxp1_2);
IkReal x574=((0.01037856)*rxp1_2);
IkReal x575=((0.22)*gclwh4_14);
IkReal x576=(gclwh14_3*rxp0_2);
IkReal x577=((0.3414)*rxp2_2);
IkReal x578=(gclwh4_8*r22);
IkReal x579=(gclwh13_15*r21);
IkReal x580=((2.0)*gclwh12_11);
IkReal x581=(gclwh11_0*r22);
IkReal x582=(gclwh6_2*r21);
IkReal x583=((0.03645690896625)*rxp1_2);
IkReal x584=((0.22)*gclwh5_15);
IkReal x585=((0.01037856)*rxp2_2);
IkReal x586=(gclwh11_0*pz);
IkReal x587=((0.44)*gclwh15_15);
IkReal x588=(gclwh10_2*pz);
IkReal x589=((0.44)*gclwh13_15);
IkReal x590=((0.000801308475)*r22);
IkReal x591=((2.0)*gclwh8_11);
IkReal x592=((4.0)*gclwh13_10);
IkReal x593=((0.15598566)*rxp2_2);
IkReal x594=((0.000442905048)*r20);
IkReal x595=((0.22)*gclwh12_14);
IkReal x596=((0.22)*gclwh14_14);
IkReal x597=((0.000801308475)*r20);
IkReal x598=((4.0)*gclwh5_10);
IkReal x599=((2.0)*gclwh5_10);
IkReal x600=((0.22)*gclwh13_15);
IkReal x601=((0.6828)*rxp1_2);
IkReal x602=(gclwh8_12*rxp0_2);
IkReal x603=(gclwh5_15*rxp2_2);
IkReal x604=((0.014569245)*r22);
IkReal x605=((0.02913849)*r21);
IkReal x606=((2.0)*gclwh13_10);
IkReal x607=(gclwh8_11*r20);
IkReal x608=(gclwh13_9*r21);
IkReal x609=(gclwh3_2*r21);
IkReal x610=(gclwh12_14*r21);
IkReal x611=(gclwh11_13*rxp2_2);
IkReal x612=(gclwh11_1*r22);
IkReal x613=((0.0066566880405)*r20);
IkReal x614=(gclwh14_8*r20);
IkReal x615=(gclwh14_14*r20);
IkReal x616=((0.44)*gclwh14_14);
IkReal x617=(gclwh7_13*rxp1_2);
IkReal x618=((2.0)*gclwh14_11);
IkReal x619=(gclwh8_11*x506);
IkReal x620=(gclwh10_11*x577);
IkReal x621=(gclwh12_11*x493);
IkReal x622=(gclwh4_11*x604);
IkReal x623=((0.014569245)*x521);
IkReal x624=(gclwh6_11*x538);
IkReal x625=((0.00160261695)*x610);
IkReal x626=((0.00160261695)*x507);
IkReal x627=((0.00160261695)*x615);
IkReal x628=((0.00160261695)*x567);
IkReal x629=((0.00160261695)*x579);
IkReal x630=((0.00160261695)*x514);
IkReal x631=(gclwh7_10*x538);
IkReal x632=((0.014569245)*x492);
IkReal x633=(gclwh13_10*x493);
IkReal x634=(gclwh11_10*x577);
IkReal x635=((0.014569245)*x528);
IkReal x636=(gclwh9_10*x506);
IkReal x637=(gclwh12_14*x573);
IkReal x638=(gclwh6_5*x533);
IkReal x639=(gclwh4_14*x510);
IkReal x640=(gclwh14_14*x561);
IkReal x641=(gclwh10_5*x590);
IkReal x642=(gclwh8_5*x597);
IkReal x643=((0.014569245)*x534);
IkReal x644=(gclwh14_11*x570);
IkReal x645=((0.014569245)*x505);
IkReal x646=(gclwh10_11*x512);
IkReal x647=((0.0072846225)*x607);
IkReal x648=(gclwh6_11*x498);
IkReal x649=(gclwh4_11*x516);
IkReal x650=((0.014569245)*x522);
IkReal x651=(gclwh12_11*x478);
IkReal x652=((0.037554)*x564);
IkReal x653=(gclwh13_15*x526);
IkReal x654=((0.037554)*x603);
IkReal x655=(gclwh5_10*x577);
IkReal x656=(gclwh7_10*x493);
IkReal x657=(gclwh13_10*x538);
IkReal x658=(gclwh13_10*x478);
IkReal x659=(gclwh7_10*x498);
IkReal x660=((0.014569245)*x551);
IkReal x661=(gclwh5_10*x516);
IkReal x662=((0.014569245)*x555);
IkReal x663=((0.014569245)*x546);
IkReal x664=(gclwh11_10*x512);
IkReal x665=(gclwh15_10*x570);
IkReal x666=((0.0072846225)*x536);
IkReal x667=(gclwh5_15*x510);
IkReal x668=(gclwh13_15*x573);
IkReal x669=(gclwh7_7*x533);
IkReal x670=(gclwh15_15*x561);
IkReal x671=(gclwh9_7*x597);
IkReal x672=(gclwh11_7*x590);
IkReal x673=((0.000801308475)*x507);
IkReal x674=(gclwh10_5*x510);
IkReal x675=(gclwh12_14*x533);
IkReal x676=(gclwh8_5*x561);
IkReal x677=(gclwh14_14*x597);
IkReal x678=(gclwh6_5*x573);
IkReal x679=((0.000621742530375)*x578);
IkReal x680=(gclwh6_11*x478);
IkReal x681=((0.0072846225)*x521);
IkReal x682=((0.000621742530375)*x569);
IkReal x683=((0.000621742530375)*x614);
IkReal x684=(gclwh8_11*x570);
IkReal x685=(gclwh10_11*x516);
IkReal x686=(gclwh12_11*x498);
IkReal x687=(gclwh4_11*x512);
IkReal x688=(r20*x473);
IkReal x689=(r21*x473);
IkReal x690=((2.0)*x474);
IkReal x691=(x484*x499);
IkReal x692=(x477*x580);
IkReal x693=(x490*x524);
IkReal x694=(x494*x618);
IkReal x695=(x476*x483);
IkReal x696=(x489*x566);
IkReal x697=(x484*x575);
IkReal x698=(x477*x595);
IkReal x699=(x490*x616);
IkReal x700=(x494*x596);
IkReal x701=(x489*x548);
IkReal x702=(x476*x544);
IkReal x703=(x490*x587);
IkReal x704=(x477*x600);
IkReal x705=(x484*x584);
IkReal x706=(x485*x489);
IkReal x707=(x476*x589);
IkReal x708=(x494*x495);
IkReal x709=(x492*x520);
IkReal x710=(x489*x598);
IkReal x711=(x476*x592);
IkReal x712=(x477*x606);
IkReal x713=((4.0)*gclwh15_10*x490);
IkReal x714=(x484*x599);
IkReal x715=((0.11)*gclwh6_5*x477);
IkReal x716=((0.22)*gclwh8_5*x490);
IkReal x717=((0.22)*gclwh10_5*x489);
IkReal x718=((0.11)*gclwh10_5*x484);
IkReal x719=((0.22)*gclwh6_5*x476);
IkReal x720=((0.11)*gclwh8_5*x494);
IkReal x721=(gclwh12_3*pp*x478);
IkReal x722=(gclwh14_2*rxp0_2*x475);
IkReal x723=(gclwh6_3*x689);
IkReal x724=(x487*x547);
IkReal x725=(x476*x572);
IkReal x726=(x484*x588);
IkReal x727=(x515*x557);
IkReal x728=(gclwh8_2*r20*x487);
IkReal x729=(gclwh8_2*pz*x494);
IkReal x730=(x487*x582);
IkReal x731=(gclwh12_2*rxp1_2*x475);
IkReal x732=(x489*x535);
IkReal x733=(gclwh4_2*rxp2_2*x475);
IkReal x734=(x490*x591);
IkReal x735=(x515*x576);
IkReal x736=(x477*x540);
IkReal x737=((4.0)*gclwh9_10*x490);
IkReal x738=((4.0)*gclwh11_10*x489);
IkReal x739=(x489*x496);
IkReal x740=(x478*x479);
IkReal x741=(x490*x518);
IkReal x742=(gclwh7_1*x689);
IkReal x743=(x487*x581);
IkReal x744=(x475*x530);
IkReal x745=(x484*x586);
IkReal x746=(x482*x515);
IkReal x747=(x480*x487);
IkReal x748=(pp*pz*x480);
IkReal x749=(x515*x523);
IkReal x750=(gclwh13_0*rxp1_2*x475);
IkReal x751=(gclwh5_0*rxp2_2*x475);
IkReal x752=(x476*x540);
IkReal x753=(x487*x545);
IkReal x754=((0.11)*gclwh7_7*x477);
IkReal x755=((0.22)*gclwh9_7*x490);
IkReal x756=((0.22)*gclwh11_7*x489);
IkReal x757=((0.22)*gclwh7_7*x476);
IkReal x758=((0.11)*gclwh11_7*x484);
IkReal x759=((0.11)*gclwh9_7*x494);
IkReal x760=((0.11)*gclwh4_14*x484);
IkReal x761=((0.11)*gclwh12_14*x477);
IkReal x762=(x490*x596);
IkReal x763=(x489*x575);
IkReal x764=(x476*x595);
IkReal x765=((0.11)*gclwh14_14*x494);
IkReal x766=(gclwh14_8*npx*x475);
IkReal x767=(x494*x497);
IkReal x768=(gclwh12_3*x689);
IkReal x769=(x487*x609);
IkReal x770=((0.08535)*gclwh12_8*x477);
IkReal x771=(x489*x499);
IkReal x772=(gclwh6_2*rxp1_2*x475);
IkReal x773=(x515*x532);
IkReal x774=(gclwh3_3*x689);
IkReal x775=(x473*x550);
IkReal x776=((0.08535)*gclwh4_8*x484);
IkReal x777=(x487*x560);
IkReal x778=(x473*x543);
IkReal x779=(x487*x568);
IkReal x780=(x476*x580);
IkReal x781=(gclwh12_8*npy*x475);
IkReal x782=(gclwh4_8*npz*x475);
IkReal x783=(x475*x503);
IkReal x784=((0.08535)*gclwh14_8*x494);
IkReal x785=(x490*x618);
IkReal x786=(gclwh6_3*pp*x478);
IkReal x787=(gclwh10_2*rxp2_2*x475);
IkReal x788=(x487*x488);
IkReal x789=(x487*x509);
IkReal x790=((1.0)*r22*x473);
IkReal x791=(gclwh6_2*npy*x690);
IkReal x792=(gclwh10_3*x489*x520);
IkReal x793=((1.0)*x473*x563);
IkReal x794=(gclwh6_3*x476*x520);
IkReal x795=(gclwh6_2*x477*x513);
IkReal x796=(gclwh10_2*npz*x690);
IkReal x797=(gclwh8_2*npx*x690);
IkReal x798=(gclwh11_1*x489*x520);
IkReal x799=(gclwh7_0*npy*x690);
IkReal x800=(gclwh9_0*npx*x690);
IkReal x801=((1.0)*x473*x612);
IkReal x802=(gclwh7_1*x476*x520);
IkReal x803=(gclwh11_0*npz*x690);
IkReal x804=(gclwh7_0*x477*x513);
IkReal x805=(gclwh12_2*npy*x690);
IkReal x806=(gclwh3_2*npy*x690);
IkReal x807=(gclwh1_2*npx*x690);
IkReal x808=(gclwh14_3*x490*x520);
IkReal x809=(gclwh4_2*npz*x690);
IkReal x810=(gclwh4_3*x489*x520);
IkReal x811=(gclwh12_2*x477*x513);
IkReal x812=(gclwh1_2*x494*x513);
IkReal x813=(gclwh3_3*x476*x520);
IkReal x814=(gclwh4_2*x484*x513);
IkReal x815=(gclwh1_3*x490*x520);
IkReal x816=(gclwh3_2*x477*x513);
IkReal x817=(gclwh12_3*x476*x520);
IkReal x818=(gclwh14_2*npx*x690);
IkReal x819=((1.0)*gclwh14_3*x688);
IkReal x820=(x668+x667);
IkReal x821=(x637+x639);
IkReal x822=(x653+x654);
IkReal x823=(x676+x674);
IkReal x824=(x665+x664+x666+x752);
IkReal x825=(x647+x646+x644+x725);
IkReal x826=(x681+x680+x771+x780);
IkReal x827=(x627+x702+x700+x701);
IkReal x828=(x638+x715+x717+x716);
IkReal x829=(x630+x708+x706+x707);
IkReal x830=(x669+x755+x754+x756);
IkReal x831=(x677+x764+x765+x763);
IkReal x832=(x687+x686+x685+x684+x785);
IkReal x833=(x649+x648+x651+x734+x732);
IkReal x834=(x658+x659+x661+x739+x741);
IkReal x835=(x624+x623+x694+x695+x696);
IkReal x836=(x672+x671+x757+x759+x758);
IkReal x837=(x625+x626+x697+x698+x699);
IkReal x838=(x632+x631+x711+x710+x709);
IkReal x839=(x673+x675+x760+x761+x762);
IkReal x840=(x629+x628+x703+x704+x705);
IkReal x841=(x642+x641+x719+x718+x720);
IkReal x842=((((0.014569245)*x536))+((gclwh11_10*x604))+(((4.0)*gclwh7_10*x476))+((x494*x518))+((x484*x496))+((gclwh15_10*x506)));
IkReal x843=(x655+x656+x657+x737+x736+x738);
IkReal x844=(x636+x634+x635+x633+x713+x712+x714);
IkReal x845=(x619+x621+x620+x622+x691+x692+x693);
IkReal x846=(x663+x751+x750+x753+x749+x804+x801+x800+x803+x802);
IkReal x847=(x650+x735+x733+x731+x730+x793+x795+x794+x797+x796);
IkReal x848=(x660+x662+x746+x747+x744+x745+x742+x743+x740+x748+x799+x798);
IkReal x849=(x645+x643+x721+x722+x723+x724+x726+x727+x728+x729+x791+x792);
IkReal x850=(x683+x782+x783+x781+x786+x787+x784+x788+x789+x818+x819+x816+x817+x814+x815+x812+x813+x810+x811);
IkReal x851=(x475+x679+x682+x773+x772+x770+x777+x776+x775+x774+x779+x778+x768+x769+x766+x767+x809+x808+x805+x807+x806);
op[33]=((((-1.706)*gclwh11_13*x489))+(((-0.075108)*x603))+(((-0.075108)*gclwh13_15*rxp1_2))+(((-1.706)*gclwh9_13*x490))+(((0.853)*gclwh9_13*x494))+(((0.853)*gclwh11_13*x484))+(((-0.853)*gclwh7_13*x477))+(((0.0062137829925)*gclwh9_13*r20))+(((1.706)*gclwh7_13*x476))+(((-0.0062137829925)*x559))+(((0.075108)*x564))+(((0.0062137829925)*x491)));
op[34]=((((-0.0608)*gclwh7_0*x477))+(((0.0608)*gclwh11_0*x484))+(((-1.0)*gclwh5_0*x585))+(((-1.0)*x822))+(((-0.000442905048)*x545))+(((0.1216)*gclwh7_0*x476))+(((0.000442905048)*x480))+(((-0.1216)*gclwh11_0*x489))+(((0.000442905048)*x581))+(((0.0608)*pp*x480))+(((-0.1216)*gclwh9_0*x490))+x652+(((-1.0)*gclwh13_0*x574))+(((0.01037856)*x530)));
op[35]=((-0.013376)+(((-1.0)*x842))+x843);
op[36]=((0.39331522)+(((-1.0)*x845))+x835);
op[37]=((((-0.15598566)*x503))+(((-0.9138)*gclwh1_2*x494))+(((-0.0066566880405)*x488))+(((1.8276)*gclwh12_2*x476))+(((-0.9138)*gclwh3_2*x477))+(((-1.8276)*gclwh14_2*x490))+(((0.0066566880405)*x568))+(((0.0066566880405)*x560))+(((-1.0)*x837))+((gclwh6_2*x553))+(((-0.9138)*gclwh12_2*x477))+(((1.8276)*gclwh1_2*x490))+(((0.9138)*gclwh14_2*x494))+(((-0.0066566880405)*x509))+x827+(((1.8276)*gclwh4_2*x489))+(((0.0066566880405)*x609))+(((1.8276)*gclwh3_2*x476))+(((-1.0)*gclwh10_2*x593))+(((-0.9138)*gclwh4_2*x484)));
op[38]=((((-0.0032052339)*x507))+(((-1.0)*x477*x544))+(((-0.1456071)*x602))+(((0.88)*gclwh4_14*x489))+(((-0.88)*gclwh14_14*x490))+(((-0.0032052339)*x610))+(((0.88)*gclwh12_14*x476))+(((0.1456071)*x529))+(((-0.1456071)*x486))+(((0.0032052339)*x615))+((x494*x616))+(((-1.0)*x484*x548)));
op[39]=((-0.00715904)+((gclwh12_11*x605))+((gclwh10_11*x511))+(((-1.0)*x494*x524))+(((-1.0)*gclwh6_11*x601))+(((8.0)*gclwh14_11*x490))+((gclwh8_11*x539))+(((0.02913849)*gclwh4_11*r22))+(((-8.0)*gclwh4_11*x489))+(((-8.0)*gclwh12_11*x476))+(((-0.02913849)*x521))+((x484*x566))+((x477*x483)));
op[40]=((0.02235168)+(((-1.0)*x835))+x845);
op[41]=((((-0.01037856)*x503))+(((-0.0608)*gclwh1_2*x494))+(((-0.000442905048)*x488))+(((0.1216)*gclwh3_2*x476))+(((0.0608)*gclwh14_2*x494))+(((0.000442905048)*x609))+(((-1.0)*x827))+(((-1.0)*gclwh10_2*x585))+(((-0.1216)*gclwh14_2*x490))+(((0.1216)*gclwh1_2*x490))+(((0.1216)*gclwh12_2*x476))+(((-0.0608)*gclwh12_2*x477))+(((0.000442905048)*x568))+(((0.000442905048)*x560))+(((-0.0608)*gclwh3_2*x477))+(((-0.000442905048)*x509))+(((0.1216)*gclwh4_2*x489))+((gclwh6_2*x574))+x837+(((-0.0608)*gclwh4_2*x484)));
op[42]=((((0.0066566880405)*x554))+(((-1.8276)*gclwh13_0*x476))+(((-1.0)*gclwh7_0*x553))+(((0.15598566)*x501))+(((-0.9138)*gclwh0_0*x494))+(((0.0066566880405)*x541))+(((0.0066566880405)*x500))+(((1.8276)*gclwh15_0*x490))+(((1.8276)*gclwh0_0*x490))+(((0.9138)*gclwh13_0*x477))+(((-1.8276)*gclwh5_0*x489))+(((-1.0)*x840))+(((0.9138)*gclwh5_0*x484))+((gclwh11_0*x593))+(((-1.0)*gclwh15_0*x613))+(((1.8276)*gclwh2_0*x476))+x829+((gclwh0_0*x613))+(((-0.9138)*gclwh15_0*x494))+(((-0.9138)*gclwh2_0*x477)));
op[43]=((0.39331522)+(((-1.0)*x838))+x844);
op[44]=((0.00715904)+(((8.0)*gclwh15_10*x490))+(((-8.0)*gclwh13_10*x476))+(((-4.0)*pp*x492))+((x484*x598))+(((-8.0)*gclwh5_10*x489))+(((-0.02913849)*x492))+((gclwh11_10*x511))+((x477*x592))+(((-1.0)*gclwh7_10*x601))+((gclwh13_10*x605))+((gclwh9_10*x539))+(((0.02913849)*x528)));
op[45]=((((-0.88)*gclwh5_15*x489))+((x484*x485))+(((0.88)*gclwh15_15*x490))+(((-0.1456071)*x617))+(((-0.88)*gclwh13_15*x476))+((x477*x589))+(((0.0032052339)*x567))+(((0.1456071)*x611))+(((-0.0032052339)*x514))+(((0.1456071)*x481))+(((0.0032052339)*x579))+(((-1.0)*x494*x587)));
op[46]=((((0.1216)*gclwh0_0*x490))+(((0.1216)*gclwh2_0*x476))+(((-0.1216)*gclwh13_0*x476))+(((-1.0)*gclwh15_0*x594))+(((0.000442905048)*x554))+(((-0.0608)*gclwh15_0*x494))+(((-0.0608)*gclwh2_0*x477))+(((0.01037856)*x501))+(((-1.0)*x829))+(((-0.0608)*gclwh0_0*x494))+(((0.0608)*gclwh13_0*x477))+(((-0.1216)*gclwh5_0*x489))+((gclwh0_0*x594))+x840+(((0.000442905048)*x500))+(((0.0608)*gclwh5_0*x484))+(((-1.0)*gclwh7_0*x574))+(((0.000442905048)*x541))+(((0.1216)*gclwh15_0*x490))+((gclwh11_0*x585)));
op[47]=((0.02235168)+(((-1.0)*x844))+x838);
op[48]=(((gclwh10_12*x525))+(((0.9138)*gclwh6_12*x476))+(((0.4569)*gclwh8_12*x494))+(((-0.07799283)*x505))+(((-0.9138)*gclwh8_12*x490))+(((-0.9138)*gclwh10_12*x489))+(((-1.0)*x821))+((gclwh8_12*x571))+(((-1.0)*x841))+(((0.07799283)*x522))+(((-1.0)*gclwh6_12*x558))+(((-0.07799283)*x534))+x640+(((0.4569)*gclwh10_12*x484))+x828+(((-0.4569)*gclwh6_12*x477)));
op[49]=((((0.03645690896625)*x576))+(((-0.427145975)*gclwh10_3*x489))+(((0.00155579859013472)*x563))+(((-1.0)*x825))+(((0.427145975)*gclwh6_3*x476))+(((-1.0)*gclwh8_11*x494))+(((-1.0)*gclwh4_3*x519))+(((-1.0)*gclwh12_3*x583))+(((-0.206288365)*gclwh6_3*x477))+((gclwh6_11*x477))+(((-1.0)*x847))+x833+x849+(((-1.0)*gclwh6_3*x504))+(((-1.0)*gclwh10_11*x484))+(((0.206288365)*gclwh10_3*x484)));
op[50]=((0.09383)+(((4.0)*gclwh10_11*x489))+(((4.0)*gclwh8_11*x490))+((gclwh12_11*x538))+(((-4.0)*gclwh6_11*x476))+(((-1.0)*x494*x591))+((gclwh6_11*x493))+(((-0.014569245)*x607))+((gclwh4_11*x577))+(((-1.0)*gclwh14_11*x506))+((x477*x572))+(((-1.0)*gclwh10_11*x604))+(((-1.0)*x484*x535)));
op[51]=((((-1.0)*gclwh8_2*x537))+(((-0.00310689149625)*x547))+(((-0.037554)*gclwh14_14*rxp0_2))+((gclwh4_2*x562))+((gclwh12_14*x526))+(((0.4265)*gclwh6_2*x477))+(((0.08318211)*x534))+((gclwh12_2*x542))+(((0.853)*gclwh8_2*x490))+(((-0.07280355)*gclwh14_2*rxp0_2))+(((-0.853)*gclwh6_2*x476))+(((-0.4265)*gclwh10_2*x484))+(((0.853)*gclwh10_2*x489))+(((-0.4265)*gclwh8_2*x494))+(((0.037554)*gclwh4_14*rxp2_2))+(((0.00310689149625)*x582))+(((-0.08318211)*x522))+(((0.08318211)*x505)));
op[52]=((((0.0608)*gclwh6_12*x476))+((gclwh8_12*x556))+(((-0.0608)*gclwh8_12*x490))+(((-0.0608)*gclwh10_12*x489))+(((0.000221452524)*gclwh10_12*r22))+(((0.0304)*gclwh10_12*x484))+(((-1.0)*x640))+(((-0.000221452524)*gclwh6_12*r21))+(((-1.0)*x841))+(((0.00518928)*x505))+(((0.0304)*gclwh8_12*x494))+x828+x821+(((-0.0304)*gclwh6_12*x477))+(((-0.00518928)*x522))+(((0.00518928)*x534)));
op[53]=((((0.001545085)*gclwh6_3*x477))+(((-1.0)*gclwh6_3*x552))+(((-1.0)*gclwh6_11*x477))+(((-1.0)*x847))+(((-1.0)*x833))+(((0.00097973905125)*x576))+(((-0.011479075)*gclwh10_3*x489))+(((-0.00097973905125)*x557))+((gclwh10_11*x484))+x825+x849+(((0.011479075)*gclwh6_3*x476))+(((-1.0)*gclwh12_3*x549))+(((-0.001545085)*gclwh10_3*x484))+(((4.18103640120938e-5)*x563))+((gclwh8_11*x494)));
op[54]=(((gclwh11_10*x484))+(((0.427145975)*gclwh7_1*x476))+((gclwh9_10*x494))+(((-1.0)*gclwh7_10*x477))+(((-0.206288365)*gclwh7_1*x477))+(((-1.0)*gclwh7_1*x504))+(((0.00155579859013472)*x612))+(((-0.427145975)*gclwh11_1*x489))+(((-0.03645690896625)*x482))+(((-1.0)*x846))+(((-1.0)*x834))+x824+x848+(((0.03645690896625)*x523))+(((-0.03645690896625)*x527))+(((0.206288365)*gclwh11_1*x484)));
op[55]=((((-0.4569)*gclwh7_13*x477))+(((0.00332834402025)*x491))+(((0.9138)*gclwh7_13*x476))+(((-1.0)*x820))+(((0.4569)*gclwh9_13*x494))+(((-0.07799283)*x551))+(((-0.07799283)*x555))+(((-1.0)*gclwh7_13*x558))+(((0.07799283)*x546))+(((-1.0)*x836))+(((-0.9138)*gclwh11_13*x489))+(((-0.9138)*gclwh9_13*x490))+((gclwh9_13*x571))+x670+x830+(((0.4569)*gclwh11_13*x484)));
op[56]=((((0.853)*gclwh11_0*x489))+(((-0.00310689149625)*x581))+(((-1.0)*x822))+(((0.08318211)*x546))+(((0.00310689149625)*x545))+(((0.853)*gclwh9_0*x490))+(((-0.853)*gclwh7_0*x476))+(((-0.4265)*pp*x480))+(((-0.00310689149625)*x480))+(((-0.4265)*gclwh11_0*x484))+x652+(((-0.08318211)*x555))+(((-0.08318211)*x551))+(((0.4265)*gclwh7_0*x477))+(((-0.07280355)*x530))+((gclwh5_0*x562))+((gclwh13_0*x542)));
op[57]=((0.09383)+(((-1.0)*x842))+x843);
op[58]=((((-0.011479075)*gclwh11_1*x489))+(((-1.0)*gclwh7_1*x552))+(((0.001545085)*gclwh7_1*x477))+(((0.011479075)*gclwh7_1*x476))+((gclwh7_10*x477))+(((-1.0)*x824))+(((4.18103640120938e-5)*x612))+(((-1.0)*gclwh11_10*x484))+(((-0.001545085)*gclwh11_1*x484))+(((-1.0)*gclwh9_10*x494))+(((-1.0)*x846))+(((-0.00097973905125)*x527))+x834+x848+(((0.00097973905125)*x523))+(((-0.00097973905125)*x482)));
op[59]=((((0.0608)*gclwh7_13*x476))+(((-0.0304)*gclwh7_13*x477))+(((0.0304)*gclwh9_13*x494))+((gclwh9_13*x556))+(((0.000221452524)*x491))+(((-1.0)*x836))+(((-0.0608)*gclwh11_13*x489))+x820+x830+(((-0.000221452524)*x559))+(((-0.0608)*gclwh9_13*x490))+(((0.0304)*gclwh11_13*x484))+(((0.00518928)*x551))+(((0.00518928)*x555))+(((-0.00518928)*x546))+(((-1.0)*x670)));
op[60]=((((0.9138)*gclwh12_8*x476))+(((-1.0)*gclwh4_8*x525))+(((-0.07799283)*x602))+(((0.9138)*gclwh4_8*x489))+(((-1.0)*gclwh12_8*x558))+(((-0.9138)*gclwh14_8*x490))+((gclwh14_8*x571))+(((-0.07799283)*x486))+(((0.4569)*gclwh14_8*x494))+(((0.07799283)*x529))+(((-1.0)*x839))+(((-0.4569)*gclwh4_8*x484))+(((-0.4569)*gclwh12_8*x477))+x823+x831+(((-1.0)*x678)));
op[61]=((0.22085761)+(((-0.22085761)*gclwh1_3*x494))+((gclwh3_3*x504))+(((0.427145975)*gclwh4_3*x489))+(((0.427145975)*gclwh1_3*x490))+(((-1.0)*x850))+((gclwh6_3*x583))+((gclwh14_3*x565))+(((-1.0)*gclwh12_3*x504))+(((0.427145975)*gclwh12_3*x476))+(((-0.206288365)*gclwh4_3*x484))+(((-1.0)*x826))+((gclwh4_11*x484))+((gclwh12_11*x477))+(((-0.206288365)*gclwh12_3*x477))+(((-1.0)*gclwh10_3*x519))+(((-1.0)*gclwh14_11*x494))+(((0.206288365)*gclwh14_3*x494))+(((0.427145975)*gclwh3_3*x476))+(((-0.22085761)*gclwh3_3*x477))+(((0.00155579859013472)*x550))+x851+x832+(((-0.00155579859013472)*x543))+(((-0.427145975)*gclwh14_3*x490)));
op[62]=((0.05197952)+(((-1.0)*x835))+x845);
op[63]=((((0.4265)*gclwh12_2*x477))+(((0.00354979654425)*x569))+(((0.4265)*gclwh3_2*x477))+(((-1.0)*gclwh1_2*x537))+(((-0.00310689149625)*x609))+(((-1.0)*x827))+(((0.853)*gclwh14_2*x490))+(((-0.00354979654425)*x614))+(((-0.4265)*gclwh14_2*x494))+(((0.4265)*gclwh4_2*x484))+(((-0.853)*gclwh4_2*x489))+((gclwh10_2*x562))+(((0.4873)*gclwh12_8*x477))+(((0.00310689149625)*x488))+(((0.00310689149625)*x509))+(((-0.853)*gclwh3_2*x476))+(((0.4873)*gclwh4_8*x484))+(((-1.0)*gclwh14_2*x537))+(((-0.9746)*gclwh12_8*x476))+(((0.4265)*gclwh1_2*x494))+x837+(((0.9746)*gclwh14_8*x490))+(((0.07280355)*x503))+(((-0.9746)*gclwh4_8*x489))+(((-0.853)*gclwh1_2*x490))+(((-0.853)*gclwh12_2*x476))+(((0.00354979654425)*x578))+(((-0.4873)*gclwh14_8*x494))+(((-1.0)*gclwh6_2*x542)));
op[64]=((((-0.0304)*gclwh14_8*x494))+(((0.0608)*gclwh14_8*x490))+(((0.000221452524)*x578))+(((0.0304)*gclwh12_8*x477))+(((-0.0608)*gclwh12_8*x476))+(((-1.0)*x831))+(((-0.00518928)*x602))+(((-1.0)*gclwh14_8*x556))+x823+x839+(((0.0304)*gclwh4_8*x484))+(((0.000221452524)*x569))+(((-1.0)*x678))+(((0.00518928)*x529))+(((-0.0608)*gclwh4_8*x489))+(((-0.00518928)*x486)));
op[65]=((-0.01302416)+(((-1.0)*gclwh12_3*x552))+((gclwh14_11*x494))+(((-0.001545085)*gclwh14_3*x494))+(((-1.0)*gclwh12_11*x477))+(((-1.0)*x850))+(((-0.011479075)*gclwh14_3*x490))+((gclwh6_3*x549))+(((-1.0)*gclwh4_11*x484))+(((-0.01302416)*gclwh1_3*x494))+(((0.011479075)*gclwh4_3*x489))+(((0.011479075)*gclwh12_3*x476))+(((0.011479075)*gclwh1_3*x490))+(((-0.01302416)*gclwh3_3*x477))+(((4.18103640120938e-5)*x550))+(((0.011479075)*gclwh3_3*x476))+(((-0.00097973905125)*x532))+(((-1.0)*x832))+((gclwh3_3*x552))+(((0.001545085)*gclwh4_3*x484))+x851+x826+(((-4.18103640120938e-5)*x543))+(((0.001545085)*gclwh12_3*x477))+(((4.18103640120938e-5)*gclwh14_3*r20)));
op[66]=((-0.22085761)+((gclwh7_1*pp*x478))+(((2.0)*gclwh15_10*x490))+(((-0.427145975)*gclwh13_1*x476))+((gclwh5_10*x512))+(((-0.22085761)*gclwh2_1*x477))+(((0.000621742530375)*x531))+((x487*x541))+(((0.427145975)*gclwh2_1*x476))+(((2.0)*x476*x479))+(((0.206288365)*gclwh5_1*x484))+(((-1.0)*gclwh15_9*npx*x475))+(((-0.000621742530375)*x502))+((x487*x554))+(((-0.427145975)*gclwh5_1*x489))+(((-1.0)*gclwh13_0*npy*x690))+(((-1.0)*x489*x599))+((gclwh11_0*rxp2_2*x475))+((gclwh5_10*x484))+((gclwh5_9*npz*x475))+((gclwh0_1*x565))+((x475*x501))+((x477*x508))+((gclwh2_1*x504))+((gclwh0_1*x688))+(((-1.0)*gclwh5_1*x790))+((gclwh13_9*npy*x475))+(((-1.0)*gclwh7_0*rxp1_2*x475))+(((-1.0)*pp*x492))+(((0.427145975)*gclwh15_1*x490))+(((-1.0)*gclwh15_1*x490*x520))+(((0.427145975)*gclwh0_1*x490))+((gclwh15_1*x688))+(((-1.0)*gclwh5_0*npz*x690))+((gclwh5_1*x489*x520))+(((-1.0)*gclwh15_0*r20*x487))+(((-1.0)*x476*x606))+((gclwh15_0*npx*x690))+(((-0.0072846225)*x492))+(((-1.0)*gclwh2_1*x476*x520))+(((-0.206288365)*gclwh15_1*x494))+((gclwh0_0*r20*x487))+((x487*x500))+(((-0.08535)*gclwh5_9*x484))+(((-1.0)*gclwh7_1*x583))+(((-1.0)*gclwh0_0*x494*x513))+x475+(((0.00155579859013472)*gclwh5_1*r22))+((gclwh2_1*x689))+(((-0.22085761)*gclwh0_1*x494))+((gclwh9_10*x570))+(((0.206288365)*gclwh13_1*x477))+((gclwh11_10*x516))+((gclwh13_10*x498))+(((-1.0)*gclwh7_10*x478))+(((-1.0)*gclwh15_0*x494*x513))+(((-0.000621742530375)*x608))+(((-1.0)*gclwh13_1*x689))+(((-1.0)*gclwh11_1*rxp2_2*x515))+(((0.08535)*gclwh15_9*x494))+(((-1.0)*gclwh0_1*x490*x520))+(((-0.08535)*gclwh13_9*x477))+((gclwh13_10*x477))+((gclwh2_0*npy*x690))+((gclwh13_1*x504))+(((-1.0)*gclwh15_1*x565))+(((-1.0)*gclwh2_0*x477*x513))+((gclwh0_0*npx*x690))+((gclwh11_1*x519))+((x484*x517)));
op[67]=(((gclwh7_7*x573))+(((-0.9138)*gclwh13_9*x476))+(((0.07799283)*x611))+(((0.11)*gclwh5_15*x484))+(((-0.07799283)*x617))+(((-0.000801308475)*x514))+((x490*x495))+(((-1.0)*x476*x600))+(((-0.9138)*gclwh5_9*x489))+(((0.000801308475)*x567))+(((-1.0)*gclwh11_7*x510))+(((-0.4569)*gclwh15_9*x494))+(((-0.00332834402025)*x531))+((gclwh13_9*x558))+(((-0.11)*gclwh15_15*x494))+(((0.4569)*gclwh5_9*x484))+((gclwh13_15*x533))+(((0.07799283)*x481))+(((-1.0)*gclwh9_7*x561))+(((0.00332834402025)*x502))+(((0.11)*gclwh13_15*x477))+(((0.4569)*gclwh13_9*x477))+(((-1.0)*x489*x584))+(((0.9138)*gclwh15_9*x490)));
op[68]=(((gclwh15_0*x537))+(((0.853)*gclwh5_0*x489))+(((-0.00310689149625)*x541))+(((-0.4265)*gclwh13_0*x477))+(((0.853)*gclwh13_0*x476))+(((-0.9746)*gclwh5_9*x489))+(((0.4265)*gclwh15_0*x494))+(((-0.853)*gclwh0_0*x490))+(((0.9746)*gclwh15_9*x490))+(((-0.00310689149625)*x500))+(((-1.0)*gclwh0_0*x537))+(((-1.0)*gclwh11_0*x562))+(((-1.0)*x829))+(((0.00354979654425)*x502))+(((0.4265)*gclwh0_0*x494))+(((0.4265)*gclwh2_0*x477))+((gclwh7_0*x542))+(((0.4873)*gclwh5_9*x484))+(((-0.9746)*gclwh13_9*x476))+x840+(((-0.00354979654425)*x531))+(((-0.07280355)*x501))+(((0.4873)*gclwh13_9*x477))+(((-0.853)*gclwh15_0*x490))+(((-0.4265)*gclwh5_0*x484))+(((-0.4873)*gclwh15_9*x494))+(((0.00354979654425)*x608))+(((-0.00310689149625)*x554))+(((-0.853)*gclwh2_0*x476)));
IkReal x852=pz*pz;
IkReal x853=pp*pp;
IkReal x854=(gclwh13_9*r21);
IkReal x855=((0.0304)*pp);
IkReal x856=(npy*pz);
IkReal x857=(npx*pz);
IkReal x858=((2.0)*gclwh15_10);
IkReal x859=(gclwh15_10*r20);
IkReal x860=((0.1707)*pz);
IkReal x861=(gclwh13_10*r21);
IkReal x862=(gclwh15_1*r20);
IkReal x863=(gclwh15_9*r20);
IkReal x864=(gclwh2_1*pp);
IkReal x865=(gclwh7_1*rxp1_2);
IkReal x866=((0.11)*pp);
IkReal x867=(gclwh5_15*r22);
IkReal x868=(pp*r20);
IkReal x869=(gclwh15_15*r20);
IkReal x870=(npz*pz);
IkReal x871=(gclwh11_10*rxp2_2);
IkReal x872=((4.18103640120938e-5)*r21);
IkReal x873=(gclwh5_9*r22);
IkReal x874=((0.08535)*pp);
IkReal x875=(pp*r21);
IkReal x876=((0.1707)*pp);
IkReal x877=((2.0)*gclwh5_10);
IkReal x878=(gclwh13_15*r21);
IkReal x879=(gclwh2_0*pz);
IkReal x880=(gclwh11_1*rxp2_2);
IkReal x881=(gclwh5_1*r22);
IkReal x882=((0.001545085)*pp);
IkReal x883=(gclwh5_10*r22);
IkReal x884=(gclwh9_10*rxp0_2);
IkReal x885=(gclwh7_10*rxp1_2);
IkReal x886=(gclwh13_0*pz);
IkReal x887=((2.0)*pp);
IkReal x888=((0.0072846225)*r21);
IkReal x889=(pp*r22);
IkReal x890=(gclwh0_1*r20);
IkReal x891=((1.0)*pz);
IkReal x892=((1.0)*pp);
IkReal x893=(gclwh5_0*pz);
IkReal x894=((2.0)*x852);
IkReal x895=((1.0)*x853);
IkReal x896=((0.0072846225)*pz*r20);
op[69]=((0.05197952)+(((4.0)*gclwh5_10*x870))+(((-4.0)*gclwh15_10*x857))+(((-0.014569245)*x883))+(((0.014569245)*x859))+(((-0.3414)*x871))+(((-1.0)*x877*x889))+((x858*x868))+(((4.0)*gclwh13_10*x856))+(((0.3414)*x885))+(((-0.014569245)*x861))+(((-0.3414)*x884))+(((-1.0)*x861*x887)));
op[70]=((0.01302416)+(((-1.0)*x854*x874))+((gclwh0_0*x896))+(((-1.0)*gclwh13_1*r21*x895))+((x886*x888))+((x879*x888))+(((-1.0)*gclwh7_0*rxp1_2*x860))+(((-1.0)*x883*x892))+(((-1.0)*gclwh15_0*x896))+((gclwh2_0*npy*x894))+((gclwh15_0*npx*x894))+(((-1.0)*gclwh13_0*npy*x894))+(((0.0072846225)*x859))+((x870*x877))+(((0.1707)*gclwh13_9*x856))+(((-1.0)*gclwh15_1*x857*x887))+((x863*x874))+(((0.1707)*x885))+(((0.011479075)*gclwh15_1*x857))+(((4.18103640120938e-5)*x881))+(((0.00097973905125)*x880))+(((-0.00097973905125)*x865))+((gclwh11_0*rxp2_2*x860))+(((-2.0)*x856*x864))+(((4.18103640120938e-5)*x890))+(((-1.0)*gclwh15_0*x868*x891))+(((-1.0)*x873*x874))+(((-1.0)*x881*x895))+(((-0.1707)*x884))+(((-1.0)*x876*x880))+(((2.0)*gclwh13_10*x856))+((gclwh13_1*x856*x887))+(((-1.0)*x881*x882))+(((0.0072846225)*r22*x893))+(((0.000621742530375)*x863))+((gclwh2_1*r21*x853))+((gclwh13_1*x872))+(((-1.0)*x875*x879))+(((-0.011479075)*gclwh5_1*x870))+(((-1.0)*gclwh0_0*x868*x891))+(((-0.001545085)*gclwh13_1*x875))+((gclwh2_1*x872))+((gclwh5_1*x870*x887))+((x853*x890))+(((-0.1707)*gclwh15_9*x857))+((x853*x862))+(((-0.0072846225)*x861))+(((-0.01302416)*gclwh0_1*x868))+((x889*x893))+(((-1.0)*gclwh0_1*x857*x887))+((gclwh5_9*npz*x860))+((x875*x886))+((x862*x882))+(((-0.0072846225)*x883))+(((-0.000621742530375)*x854))+(((-0.1707)*x871))+(((0.011479075)*gclwh2_1*x856))+x860+((gclwh0_0*npx*x894))+((gclwh9_0*rxp0_2*x860))+(((0.011479075)*gclwh0_1*x857))+(((-1.0)*gclwh5_0*npz*x894))+((x865*x876))+(((-0.011479075)*gclwh13_1*x856))+(((-0.000621742530375)*x873))+(((-1.0)*x857*x858))+(((-0.01302416)*r21*x864))+((pp*x859))+(((-1.0)*x861*x892))+(((-4.18103640120938e-5)*x862)));
op[71]=((((0.00518928)*gclwh11_13*rxp2_2))+(((0.000221452524)*x863))+(((0.018777)*gclwh7_7*rxp1_2))+(((-0.000221452524)*x873))+(((-0.018777)*gclwh9_7*rxp0_2))+(((-1.0)*x866*x878))+(((-0.000801308475)*x878))+(((-1.0)*x866*x867))+(((-0.000801308475)*x867))+(((0.22)*gclwh5_15*x870))+(((-0.000221452524)*x854))+(((0.00518928)*gclwh9_13*rxp0_2))+((x866*x869))+((x855*x863))+(((-0.0608)*gclwh15_9*x857))+(((0.0608)*gclwh5_9*x870))+(((-0.018777)*gclwh11_7*rxp2_2))+(((0.0608)*gclwh13_9*x856))+(((0.22)*gclwh13_15*x856))+(((-0.00518928)*gclwh7_13*rxp1_2))+(((-1.0)*x854*x855))+(((-0.22)*gclwh15_15*x857))+(((-1.0)*x855*x873))+(((0.000801308475)*x869)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x897=htj1*htj1;
CheckValue<IkReal> x898=IKPowWithIntegerCheck(((1.0)+x897),-1);
if(!x898.valid){
continue;
}
cj1array[numsolutions]=((x898.value)*(((1.0)+(((-1.0)*x897)))));
CheckValue<IkReal> x899=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x899.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x899.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x900=htj2*htj2;
CheckValue<IkReal> x901=IKPowWithIntegerCheck(((1.0)+x900),-1);
if(!x901.valid){
continue;
}
cj2array[numsolutions]=((x901.value)*(((1.0)+(((-1.0)*x900)))));
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x902.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x902.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x903=htj3*htj3;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(((1.0)+x903),-1);
if(!x904.valid){
continue;
}
cj3array[numsolutions]=((x904.value)*(((1.0)+(((-1.0)*x903)))));
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x905.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x905.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x906=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x906);
rxp1_0=(pz*r11);
rxp1_1=(r01*x906);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x907=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x907);
rxp1_0=(pz*r11);
rxp1_1=(r01*x907);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x908=IKPowWithIntegerCheck(r22,-1);
if(!x908.valid){
continue;
}
CheckValue<IkReal> x909=IKPowWithIntegerCheck(sj3,-1);
if(!x909.valid){
continue;
}
sj4array[0]=((x908.value)*(x909.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x910=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x910);
rxp1_0=(pz*r11);
rxp1_1=(r01*x910);
IkReal x911=((16.0)*sj4);
IkReal x912=(cj1*cj2);
IkReal x913=((4.0)*sj3);
IkReal x914=((8.0)*sj4);
IkReal x915=((4.0)*cj4);
IkReal x916=(sj1*sj2);
IkReal x917=((4.0)*sj4);
IkReal x918=(cj3*r02);
IkReal x919=((16.0)*sj3);
IkReal x920=((8.0)*sj3);
IkReal x921=((12.0)*cj4);
IkReal x922=((12.0)*sj4);
IkReal x923=(cj3*r12);
IkReal x924=(r11*x913);
IkReal x925=(r01*x913);
IkReal x926=(r01*x916);
IkReal x927=(cj3*cj4*r01);
IkReal x928=(cj3*cj4*r11);
IkReal x929=(cj3*r10*x915);
IkReal x930=(x922*x923);
IkReal x931=(cj3*r00*x915);
IkReal x932=(x918*x922);
IkReal x933=(r00*x916*x917);
IkReal x934=(r02*x916*x921);
IkReal x935=(r00*x912*x917);
IkReal x936=(r02*x912*x921);
IkReal x937=(r10*x916*x917);
IkReal x938=(r12*x912*x921);
IkReal x939=(r12*x916*x921);
IkReal x940=(r10*x912*x917);
IkReal x941=(x935+x924);
IkReal x942=(x937+x925);
IkReal x943=(x933+x929);
IkReal x944=(x936+x930);
IkReal x945=(x931+x940);
IkReal x946=(x939+x932);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x943))+((r02*x915*x916))+(((-1.0)*r02*x912*x915))+x941+(((-1.0)*x917*x923)))))))+(((0.5)*(IKabs(((((-1.0)*x944))+(((-1.0)*x941))+x934+x943)))))+(((0.5)*(IKabs(((((-1.0)*x946))+(((-1.0)*x945))+x938+x942)))))+(((0.5)*(IKabs((((r12*x912*x915))+(((-1.0)*x945))+x942+(((-1.0)*r12*x915*x916))+(((-1.0)*x917*x918)))))))+(((0.5)*(IKabs(((((-1.0)*x946))+(((-1.0)*x942))+x938+x945)))))+(IKabs(((((-1.0)*r10*x920))+(((-1.0)*x914*x926))+(((-8.0)*x928))+((r01*x912*x914)))))+(((0.5)*(IKabs(((((-1.0)*r11*x911*x912))+(((-1.0)*r00*x919))+((r11*x911*x916))+(((-16.0)*x927)))))))+(((0.5)*(IKabs(((((-1.0)*x944))+(((-1.0)*x943))+x934+x941)))))+(IKabs(((((-1.0)*r11*x912*x914))+((r11*x914*x916))+(((-8.0)*x927))+(((-1.0)*r00*x920)))))+(((0.5)*(IKabs((((r01*x911*x912))+(((-1.0)*r10*x919))+(((-16.0)*x928))+(((-1.0)*x911*x926))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x947=(r10*sj3);
IkReal x948=(r01*sj4);
IkReal x949=(cj1*cj2);
IkReal x950=(cj3*cj4);
IkReal x951=(sj1*sj2);
IkReal x952=(cj4*r02);
IkReal x953=((4.0)*r11*sj3);
IkReal x954=(cj3*r12*sj4);
IkReal x955=((4.0)*r00*sj4);
IkReal x956=((4.0)*r10*x950);
IkReal x957=((12.0)*x954);
IkReal x958=((4.0)*x954);
IkReal x959=(x949*x955);
IkReal x960=(x951*x955);
IkReal x961=((12.0)*x951*x952);
IkReal x962=((12.0)*x949*x952);
IkReal x963=((4.0)*x951*x952);
IkReal x964=((4.0)*x949*x952);
IkReal x965=(x959+x953);
IkReal x966=(x960+x956);
IkReal x967=(x964+x958);
IkReal x968=(x962+x957);
IkReal x969=((((-8.0)*x948*x951))+(((8.0)*x948*x949))+(((-8.0)*x947))+(((-8.0)*r11*x950)));
op[0]=(x963+x965+(((-1.0)*x967))+(((-1.0)*x966)));
op[1]=x969;
op[2]=(x961+x965+(((-1.0)*x966))+(((-1.0)*x968)));
op[3]=((((16.0)*x948*x949))+(((-16.0)*r11*x950))+(((-16.0)*x948*x951))+(((-16.0)*x947)));
op[4]=(x961+x966+(((-1.0)*x965))+(((-1.0)*x968)));
op[5]=x969;
op[6]=(x963+x966+(((-1.0)*x965))+(((-1.0)*x967)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x970=(cj1*cj2);
IkReal x971=((4.0)*cj4);
IkReal x972=(sj1*sj2);
IkReal x973=((4.0)*sj4);
IkReal x974=(r00*sj3);
IkReal x975=(cj3*r02);
IkReal x976=((4.0)*r01*sj3);
IkReal x977=((16.0)*r11*sj4);
IkReal x978=(cj3*cj4*r01);
IkReal x979=((12.0)*cj4*r12);
IkReal x980=((8.0)*r11*sj4);
IkReal x981=(cj3*r00*x971);
IkReal x982=((12.0)*sj4*x975);
IkReal x983=(x973*x975);
IkReal x984=(r10*x970*x973);
IkReal x985=(r10*x972*x973);
IkReal x986=(x970*x979);
IkReal x987=(x972*x979);
IkReal x988=(r12*x970*x971);
IkReal x989=(r12*x971*x972);
IkReal x990=(x985+x976);
IkReal x991=(x984+x981);
IkReal x992=(x989+x983);
IkReal x993=(x987+x982);
IkReal x994=(((x972*x980))+(((-8.0)*x978))+(((-8.0)*x974))+(((-1.0)*x970*x980)));
j5evalpoly[0]=(((x994*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x991))+(((-1.0)*x992))+x990+x988))))+(((-1.0)*x992))+(((-1.0)*x990))+((htj5*x994))+(((htj5*htj5*htj5)*(((((-16.0)*x978))+(((-16.0)*x974))+(((-1.0)*x970*x977))+((x972*x977))))))+(((htj5*htj5)*(((((-1.0)*x993))+(((-1.0)*x990))+x991+x986))))+x991+x988+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x991))+(((-1.0)*x993))+x990+x986)))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x995=(cj5*sj4);
IkReal x996=(sj4*sj5);
if( IKabs((((r00*x995))+(((-1.0)*r01*x996))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x995))+((r11*x996))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x995))+(((-1.0)*r01*x996))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x995))+((r11*x996))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x995))+(((-1.0)*r01*x996))+((cj4*r02))), ((((-1.0)*r10*x995))+((r11*x996))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x997=IKsin(j0);
IkReal x998=IKcos(j0);
IkReal x999=(r02*sj4);
IkReal x1000=((1.0)*sj3);
IkReal x1001=(r12*sj4);
IkReal x1002=(cj1*cj2);
IkReal x1003=((1.0)*cj3);
IkReal x1004=((1.0)*sj1);
IkReal x1005=(r11*sj5);
IkReal x1006=(cj5*r01);
IkReal x1007=(cj5*r11);
IkReal x1008=(r00*sj5);
IkReal x1009=((0.24365)*cj1);
IkReal x1010=(cj2*sj1);
IkReal x1011=(r10*sj5);
IkReal x1012=((1.0)*cj4);
IkReal x1013=((0.21325)*x997);
IkReal x1014=(cj4*cj5*r00);
IkReal x1015=(sj2*x997);
IkReal x1016=(cj4*cj5*r10);
IkReal x1017=(cj4*r01*sj5);
IkReal x1018=(sj2*x998);
IkReal x1019=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x1012))+((r01*sj4*sj5))+(((-1.0)*r00*x1019))+x997);
evalcond[1]=(((sj4*x1005))+(((-1.0)*x998))+(((-1.0)*r12*x1012))+(((-1.0)*r10*x1019)));
evalcond[2]=((((0.21325)*sj1*x1018))+(((-1.0)*x1009*x998))+(((0.11)*x997))+(((-0.21325)*x1002*x998))+(((-1.0)*px))+(((-0.08535)*x1006))+(((-0.08535)*x1008)));
evalcond[3]=((((-1.0)*x1009*x997))+((sj1*sj2*x1013))+(((-0.11)*x998))+(((-1.0)*py))+(((-1.0)*x1002*x1013))+(((-0.08535)*x1011))+(((-0.08535)*x1007)));
evalcond[4]=(((cj3*x1008))+((cj3*x1006))+((x1010*x998))+(((-1.0)*x1000*x999))+((sj3*x1014))+((cj1*x1018))+(((-1.0)*x1000*x1017)));
evalcond[5]=(((cj3*x1017))+(((-1.0)*x1004*x1018))+((sj3*x1006))+((sj3*x1008))+((x1002*x998))+(((-1.0)*x1003*x1014))+((cj3*x999)));
evalcond[6]=(((cj3*x1007))+((cj3*x1011))+((x1010*x997))+(((-1.0)*cj4*x1000*x1005))+((sj3*x1016))+((cj1*x1015))+(((-1.0)*x1000*x1001)));
evalcond[7]=(((cj3*x1001))+(((-1.0)*x1004*x1015))+((sj3*x1007))+((x1002*x997))+((sj3*x1011))+(((-1.0)*x1003*x1016))+((cj3*cj4*x1005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(cj3,-1);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(r22,-1);
if(!x1021.valid){
continue;
}
sj4array[0]=((-1.0)*(x1020.value)*(x1021.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1022=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1022);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1022);
IkReal x1023=((16.0)*sj4);
IkReal x1024=(cj1*cj2);
IkReal x1025=((4.0)*sj3);
IkReal x1026=((8.0)*sj4);
IkReal x1027=((4.0)*cj4);
IkReal x1028=(sj1*sj2);
IkReal x1029=((4.0)*sj4);
IkReal x1030=(cj3*r02);
IkReal x1031=((16.0)*sj3);
IkReal x1032=((8.0)*sj3);
IkReal x1033=((12.0)*cj4);
IkReal x1034=((12.0)*sj4);
IkReal x1035=(cj3*r12);
IkReal x1036=(r11*x1025);
IkReal x1037=(r01*x1025);
IkReal x1038=(r01*x1028);
IkReal x1039=(cj3*cj4*r01);
IkReal x1040=(cj3*cj4*r11);
IkReal x1041=(cj3*r10*x1027);
IkReal x1042=(x1034*x1035);
IkReal x1043=(cj3*r00*x1027);
IkReal x1044=(x1030*x1034);
IkReal x1045=(r00*x1028*x1029);
IkReal x1046=(r02*x1028*x1033);
IkReal x1047=(r00*x1024*x1029);
IkReal x1048=(r02*x1024*x1033);
IkReal x1049=(r10*x1028*x1029);
IkReal x1050=(r12*x1024*x1033);
IkReal x1051=(r12*x1028*x1033);
IkReal x1052=(r10*x1024*x1029);
IkReal x1053=(x1047+x1036);
IkReal x1054=(x1049+x1037);
IkReal x1055=(x1041+x1045);
IkReal x1056=(x1042+x1048);
IkReal x1057=(x1052+x1043);
IkReal x1058=(x1051+x1044);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1058))+(((-1.0)*x1054))+x1050+x1057)))))+(((0.5)*(IKabs(((((-1.0)*x1055))+(((-1.0)*r02*x1024*x1027))+x1053+((r02*x1027*x1028))+(((-1.0)*x1029*x1035)))))))+(((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1055))+x1053+x1046)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1031))+(((-1.0)*x1023*x1038))+(((-16.0)*x1040))+((r01*x1023*x1024)))))))+(((0.5)*(IKabs(((((-1.0)*x1057))+x1054+(((-1.0)*x1029*x1030))+((r12*x1024*x1027))+(((-1.0)*r12*x1027*x1028)))))))+(((0.5)*(IKabs(((((-16.0)*x1039))+((r11*x1023*x1028))+(((-1.0)*r00*x1031))+(((-1.0)*r11*x1023*x1024)))))))+(((0.5)*(IKabs(((((-1.0)*x1056))+(((-1.0)*x1053))+x1055+x1046)))))+(IKabs(((((-1.0)*r10*x1032))+(((-8.0)*x1040))+(((-1.0)*x1026*x1038))+((r01*x1024*x1026)))))+(((0.5)*(IKabs(((((-1.0)*x1058))+(((-1.0)*x1057))+x1050+x1054)))))+(IKabs(((((-1.0)*r11*x1024*x1026))+(((-8.0)*x1039))+((r11*x1026*x1028))+(((-1.0)*r00*x1032))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1059=(r10*sj3);
IkReal x1060=(r01*sj4);
IkReal x1061=(cj1*cj2);
IkReal x1062=(cj3*cj4);
IkReal x1063=(sj1*sj2);
IkReal x1064=(cj4*r02);
IkReal x1065=((4.0)*r11*sj3);
IkReal x1066=(cj3*r12*sj4);
IkReal x1067=((4.0)*r00*sj4);
IkReal x1068=((4.0)*r10*x1062);
IkReal x1069=((12.0)*x1066);
IkReal x1070=((4.0)*x1066);
IkReal x1071=(x1061*x1067);
IkReal x1072=(x1063*x1067);
IkReal x1073=((12.0)*x1063*x1064);
IkReal x1074=((12.0)*x1061*x1064);
IkReal x1075=((4.0)*x1063*x1064);
IkReal x1076=((4.0)*x1061*x1064);
IkReal x1077=(x1071+x1065);
IkReal x1078=(x1072+x1068);
IkReal x1079=(x1076+x1070);
IkReal x1080=(x1074+x1069);
IkReal x1081=((((-8.0)*r11*x1062))+(((-8.0)*x1059))+(((8.0)*x1060*x1061))+(((-8.0)*x1060*x1063)));
op[0]=(x1077+x1075+(((-1.0)*x1079))+(((-1.0)*x1078)));
op[1]=x1081;
op[2]=(x1077+x1073+(((-1.0)*x1080))+(((-1.0)*x1078)));
op[3]=((((16.0)*x1060*x1061))+(((-16.0)*x1060*x1063))+(((-16.0)*x1059))+(((-16.0)*r11*x1062)));
op[4]=(x1078+x1073+(((-1.0)*x1080))+(((-1.0)*x1077)));
op[5]=x1081;
op[6]=(x1078+x1075+(((-1.0)*x1077))+(((-1.0)*x1079)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1082=(cj1*cj2);
IkReal x1083=((4.0)*cj4);
IkReal x1084=(sj1*sj2);
IkReal x1085=((4.0)*sj4);
IkReal x1086=(r00*sj3);
IkReal x1087=(cj3*r02);
IkReal x1088=((4.0)*r01*sj3);
IkReal x1089=((16.0)*r11*sj4);
IkReal x1090=(cj3*cj4*r01);
IkReal x1091=((12.0)*cj4*r12);
IkReal x1092=((8.0)*r11*sj4);
IkReal x1093=(cj3*r00*x1083);
IkReal x1094=((12.0)*sj4*x1087);
IkReal x1095=(x1085*x1087);
IkReal x1096=(r10*x1082*x1085);
IkReal x1097=(r10*x1084*x1085);
IkReal x1098=(x1082*x1091);
IkReal x1099=(x1084*x1091);
IkReal x1100=(r12*x1082*x1083);
IkReal x1101=(r12*x1083*x1084);
IkReal x1102=(x1097+x1088);
IkReal x1103=(x1096+x1093);
IkReal x1104=(x1101+x1095);
IkReal x1105=(x1094+x1099);
IkReal x1106=(((x1084*x1092))+(((-8.0)*x1090))+(((-8.0)*x1086))+(((-1.0)*x1082*x1092)));
j5evalpoly[0]=(x1103+x1100+(((htj5*htj5*htj5*htj5)*((x1102+x1098+(((-1.0)*x1103))+(((-1.0)*x1105))))))+((x1106*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1090))+(((-16.0)*x1086))+(((-1.0)*x1082*x1089))+((x1084*x1089))))))+(((-1.0)*x1102))+(((-1.0)*x1104))+((htj5*x1106))+(((htj5*htj5)*((x1103+x1098+(((-1.0)*x1102))+(((-1.0)*x1105))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1102+x1100+(((-1.0)*x1103))+(((-1.0)*x1104)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1107=(cj5*sj4);
IkReal x1108=(sj4*sj5);
if( IKabs((((r00*x1107))+(((-1.0)*r01*x1108))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1107))+((r11*x1108))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1107))+(((-1.0)*r01*x1108))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1107))+((r11*x1108))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1107))+(((-1.0)*r01*x1108))+((cj4*r02))), ((((-1.0)*r10*x1107))+((r11*x1108))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1109=IKsin(j0);
IkReal x1110=IKcos(j0);
IkReal x1111=(r02*sj4);
IkReal x1112=((1.0)*sj3);
IkReal x1113=(r12*sj4);
IkReal x1114=(cj1*cj2);
IkReal x1115=((1.0)*cj3);
IkReal x1116=((1.0)*sj1);
IkReal x1117=(r11*sj5);
IkReal x1118=(cj5*r01);
IkReal x1119=(cj5*r11);
IkReal x1120=(r00*sj5);
IkReal x1121=((0.24365)*cj1);
IkReal x1122=(cj2*sj1);
IkReal x1123=(r10*sj5);
IkReal x1124=((1.0)*cj4);
IkReal x1125=((0.21325)*x1109);
IkReal x1126=(cj4*cj5*r00);
IkReal x1127=(sj2*x1109);
IkReal x1128=(cj4*cj5*r10);
IkReal x1129=(cj4*r01*sj5);
IkReal x1130=(sj2*x1110);
IkReal x1131=((1.0)*cj5*sj4);
evalcond[0]=(x1109+((r01*sj4*sj5))+(((-1.0)*r02*x1124))+(((-1.0)*r00*x1131)));
evalcond[1]=((((-1.0)*r12*x1124))+(((-1.0)*r10*x1131))+(((-1.0)*x1110))+((sj4*x1117)));
evalcond[2]=((((-0.08535)*x1120))+(((0.11)*x1109))+(((-0.08535)*x1118))+(((-1.0)*px))+(((0.21325)*sj1*x1130))+(((-1.0)*x1110*x1121))+(((-0.21325)*x1110*x1114)));
evalcond[3]=((((-0.11)*x1110))+(((-0.08535)*x1123))+(((-1.0)*x1114*x1125))+(((-1.0)*x1109*x1121))+((sj1*sj2*x1125))+(((-0.08535)*x1119))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x1112*x1129))+((x1110*x1122))+((sj3*x1126))+((cj1*x1130))+((cj3*x1118))+(((-1.0)*x1111*x1112))+((cj3*x1120)));
evalcond[5]=(((sj3*x1118))+((x1110*x1114))+(((-1.0)*x1116*x1130))+((sj3*x1120))+((cj3*x1111))+(((-1.0)*x1115*x1126))+((cj3*x1129)));
evalcond[6]=((((-1.0)*x1112*x1113))+((x1109*x1122))+((cj1*x1127))+((sj3*x1128))+((cj3*x1119))+(((-1.0)*cj4*x1112*x1117))+((cj3*x1123)));
evalcond[7]=(((x1109*x1114))+((sj3*x1119))+((cj3*cj4*x1117))+(((-1.0)*x1116*x1127))+((sj3*x1123))+((cj3*x1113))+(((-1.0)*x1115*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1132=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1132);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1132);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1133=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1133);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1133);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(r22,-1);
if(!x1134.valid){
continue;
}
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(sj3,-1);
if(!x1135.valid){
continue;
}
sj4array[0]=((x1134.value)*(x1135.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1136=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1136);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1136);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1137=((4.0)*r01);
IkReal x1138=((16.0)*r00);
IkReal x1139=(cj3*sj2);
IkReal x1140=((8.0)*r00);
IkReal x1141=(cj2*cj3);
IkReal x1142=(cj4*r01);
IkReal x1143=((16.0)*cj1);
IkReal x1144=((8.0)*sj1);
IkReal x1145=((16.0)*sj1);
IkReal x1146=((8.0)*cj1);
IkReal x1147=(cj2*sj3);
IkReal x1148=(sj2*sj3);
IkReal x1149=(sj1*x1147);
IkReal x1150=((4.0)*cj4*r00);
IkReal x1151=(cj1*x1148);
IkReal x1152=(((sj1*x1148*x1150))+((x1137*x1149))+((x1137*x1151))+((sj1*x1137*x1139)));
IkReal x1153=(((cj1*x1147*x1150))+((cj1*x1139*x1150))+((cj1*x1137*x1141))+((sj1*x1141*x1150)));
IkReal x1154=(x1152+(((-1.0)*x1153)));
IkReal x1155=((((-1.0)*x1140*x1149))+(((-1.0)*x1140*x1151))+(((-1.0)*x1139*x1142*x1146))+((x1142*x1144*x1148))+(((-1.0)*x1141*x1142*x1144))+(((-1.0)*sj1*x1139*x1140))+(((-1.0)*x1142*x1146*x1147))+((cj1*x1140*x1141)));
IkReal x1156=(x1153+(((-1.0)*x1152)));
op[0]=x1154;
op[1]=x1155;
op[2]=x1154;
op[3]=((((-1.0)*x1138*x1151))+(((-1.0)*sj1*x1138*x1139))+((cj1*x1138*x1141))+(((-1.0)*x1139*x1142*x1143))+((x1142*x1145*x1148))+(((-1.0)*x1141*x1142*x1145))+(((-1.0)*x1142*x1143*x1147))+(((-1.0)*x1138*x1149)));
op[4]=x1156;
op[5]=x1155;
op[6]=x1156;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1157=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1157))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1157))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1157))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1158=IKcos(j0);
IkReal x1159=IKsin(j0);
IkReal x1160=((1.0)*cj3);
IkReal x1161=((1.0)*sj1);
IkReal x1162=(r11*sj5);
IkReal x1163=(cj5*r01);
IkReal x1164=(r01*sj5);
IkReal x1165=((0.21325)*sj1);
IkReal x1166=(cj5*r11);
IkReal x1167=(cj3*cj4);
IkReal x1168=(r00*sj5);
IkReal x1169=((0.24365)*cj1);
IkReal x1170=(r10*sj5);
IkReal x1171=(cj4*cj5*r00);
IkReal x1172=(sj2*x1159);
IkReal x1173=(cj4*cj5*r10);
IkReal x1174=((1.0)*cj4*sj3);
IkReal x1175=(cj2*x1158);
IkReal x1176=(sj2*x1158);
IkReal x1177=((1.0)*cj5*sj4);
IkReal x1178=(cj1*cj2*x1159);
evalcond[0]=(x1159+((sj4*x1164))+(((-1.0)*r00*x1177)));
evalcond[1]=(((sj4*x1162))+(((-1.0)*x1158))+(((-1.0)*r10*x1177)));
evalcond[2]=(((sj3*x1171))+((cj1*x1176))+((sj1*x1175))+((cj3*x1163))+((cj3*x1168))+(((-1.0)*x1164*x1174)));
evalcond[3]=(((sj3*x1173))+((cj1*x1172))+(((-1.0)*x1162*x1174))+((cj2*sj1*x1159))+((cj3*x1166))+((cj3*x1170)));
evalcond[4]=(((cj1*x1175))+((x1164*x1167))+(((-1.0)*x1161*x1176))+(((-1.0)*x1160*x1171))+((sj3*x1163))+((sj3*x1168)));
evalcond[5]=(x1178+((sj3*x1170))+((x1162*x1167))+(((-1.0)*x1161*x1172))+(((-1.0)*x1160*x1173))+((sj3*x1166)));
evalcond[6]=(((x1165*x1176))+(((-1.0)*x1158*x1169))+(((-0.08535)*x1168))+(((-0.08535)*x1163))+(((-1.0)*px))+(((0.11)*x1159))+(((-0.21325)*cj1*x1175)));
evalcond[7]=((((-1.0)*x1159*x1169))+((x1165*x1172))+(((-0.08535)*x1166))+(((-0.08535)*x1170))+(((-0.11)*x1158))+(((-1.0)*py))+(((-0.21325)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(cj3,-1);
if(!x1179.valid){
continue;
}
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(r22,-1);
if(!x1180.valid){
continue;
}
sj4array[0]=((-1.0)*(x1179.value)*(x1180.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1182=((4.0)*r01);
IkReal x1183=((16.0)*r00);
IkReal x1184=(cj3*sj2);
IkReal x1185=((8.0)*r00);
IkReal x1186=(cj2*cj3);
IkReal x1187=(cj4*r01);
IkReal x1188=((16.0)*cj1);
IkReal x1189=((8.0)*sj1);
IkReal x1190=((16.0)*sj1);
IkReal x1191=((8.0)*cj1);
IkReal x1192=(cj2*sj3);
IkReal x1193=(sj2*sj3);
IkReal x1194=(sj1*x1192);
IkReal x1195=((4.0)*cj4*r00);
IkReal x1196=(cj1*x1193);
IkReal x1197=(((sj1*x1182*x1184))+((x1182*x1196))+((x1182*x1194))+((sj1*x1193*x1195)));
IkReal x1198=(((sj1*x1186*x1195))+((cj1*x1184*x1195))+((cj1*x1192*x1195))+((cj1*x1182*x1186)));
IkReal x1199=(x1197+(((-1.0)*x1198)));
IkReal x1200=((((-1.0)*sj1*x1184*x1185))+(((-1.0)*x1184*x1187*x1191))+(((-1.0)*x1187*x1191*x1192))+(((-1.0)*x1186*x1187*x1189))+(((-1.0)*x1185*x1194))+(((-1.0)*x1185*x1196))+((x1187*x1189*x1193))+((cj1*x1185*x1186)));
IkReal x1201=(x1198+(((-1.0)*x1197)));
op[0]=x1199;
op[1]=x1200;
op[2]=x1199;
op[3]=((((-1.0)*x1187*x1188*x1192))+(((-1.0)*x1184*x1187*x1188))+(((-1.0)*x1186*x1187*x1190))+(((-1.0)*x1183*x1194))+(((-1.0)*x1183*x1196))+(((-1.0)*sj1*x1183*x1184))+((x1187*x1190*x1193))+((cj1*x1183*x1186)));
op[4]=x1201;
op[5]=x1200;
op[6]=x1201;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1202))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1202))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1202))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1203=IKcos(j0);
IkReal x1204=IKsin(j0);
IkReal x1205=((1.0)*cj3);
IkReal x1206=((1.0)*sj1);
IkReal x1207=(r11*sj5);
IkReal x1208=(cj5*r01);
IkReal x1209=(r01*sj5);
IkReal x1210=((0.21325)*sj1);
IkReal x1211=(cj5*r11);
IkReal x1212=(cj3*cj4);
IkReal x1213=(r00*sj5);
IkReal x1214=((0.24365)*cj1);
IkReal x1215=(r10*sj5);
IkReal x1216=(cj4*cj5*r00);
IkReal x1217=(sj2*x1204);
IkReal x1218=(cj4*cj5*r10);
IkReal x1219=((1.0)*cj4*sj3);
IkReal x1220=(cj2*x1203);
IkReal x1221=(sj2*x1203);
IkReal x1222=((1.0)*cj5*sj4);
IkReal x1223=(cj1*cj2*x1204);
evalcond[0]=(x1204+(((-1.0)*r00*x1222))+((sj4*x1209)));
evalcond[1]=(((sj4*x1207))+(((-1.0)*x1203))+(((-1.0)*r10*x1222)));
evalcond[2]=(((sj1*x1220))+(((-1.0)*x1209*x1219))+((sj3*x1216))+((cj3*x1213))+((cj3*x1208))+((cj1*x1221)));
evalcond[3]=((((-1.0)*x1207*x1219))+((sj3*x1218))+((cj3*x1215))+((cj3*x1211))+((cj1*x1217))+((cj2*sj1*x1204)));
evalcond[4]=((((-1.0)*x1206*x1221))+(((-1.0)*x1205*x1216))+((sj3*x1213))+((sj3*x1208))+((x1209*x1212))+((cj1*x1220)));
evalcond[5]=(x1223+(((-1.0)*x1206*x1217))+((x1207*x1212))+(((-1.0)*x1205*x1218))+((sj3*x1211))+((sj3*x1215)));
evalcond[6]=((((-0.21325)*cj1*x1220))+(((-1.0)*x1203*x1214))+(((-0.08535)*x1208))+(((-1.0)*px))+(((0.11)*x1204))+((x1210*x1221))+(((-0.08535)*x1213)));
evalcond[7]=((((-1.0)*x1204*x1214))+((x1210*x1217))+(((-0.21325)*x1223))+(((-1.0)*py))+(((-0.11)*x1203))+(((-0.08535)*x1211))+(((-0.08535)*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1226 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1226.valid){
continue;
}
IkReal x1224=((1.0)*(x1226.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1227.valid){
continue;
}
if( (((-1.0)*(x1227.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1227.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1225=((-1.0)*(IKasin(((-1.0)*(x1227.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1224))+(((-1.0)*x1225)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1224))+(((1.0)*x1225)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1228=cj5*cj5;
IkReal x1229=r21*r21;
IkReal x1230=(sj3*x1228);
IkReal x1231=(((sj3*(r22*r22)))+((sj3*x1229))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1230*(r20*r20)))+(((-1.0)*x1229*x1230)));
j4eval[0]=x1231;
j4eval[1]=IKsign(x1231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1232=cj5*cj5;
IkReal x1233=r21*r21;
IkReal x1234=((1.0)*cj3);
IkReal x1235=(cj3*x1232);
IkReal x1236=((((-1.0)*x1232*x1234*(r20*r20)))+((x1233*x1235))+(((-1.0)*x1234*(r22*r22)))+(((-1.0)*x1233*x1234))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1236;
j4eval[1]=IKsign(x1236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1237=cj1*cj1;
IkReal x1238=cj2*cj2;
IkReal x1239=(cj1*sj1*sj2);
IkReal x1240=(cj2*x1237);
IkReal x1241=(x1237*x1238);
j0eval[0]=((-4.14518051427814)+(((-1.0)*x1237))+(((6.54807030503047)*cj2*x1239))+(((3.27403515251523)*x1238))+(((-7.48153495812743)*x1240))+(((7.48153495812743)*x1239))+(((-6.54807030503047)*x1241)));
j0eval[1]=IKsign(((-575.755625)+(((909.51125)*cj2*x1239))+(((-909.51125)*x1241))+(((454.755625)*x1238))+(((-138.8976)*x1237))+(((1039.16725)*x1239))+(((-1039.16725)*x1240))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1242=((1.0)*cj5);
IkReal x1243=((1.0)*sj5);
IkReal x1244=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1244;
j0eval[1]=IKsign(x1244);
j0eval[2]=((IKabs(((((-1.0)*r01*x1242))+(((-1.0)*r00*x1243)))))+(IKabs(((((-1.0)*r11*x1242))+(((-1.0)*r10*x1243))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1245=cj5*cj5;
IkReal x1246=r21*r21;
IkReal x1247=(sj1*sj2);
IkReal x1248=(r21*sj5);
IkReal x1249=(cj5*r20);
IkReal x1250=(cj1*cj2);
IkReal x1251=((((-1.0)*x1245*x1246))+x1246+(r22*r22)+((x1245*(r20*r20)))+(((-2.0)*x1248*x1249)));
j4eval[0]=x1251;
j4eval[1]=IKsign(x1251);
j4eval[2]=((IKabs(((((-1.0)*r22*x1250))+((r22*x1247)))))+(IKabs((((x1247*x1248))+(((-1.0)*x1248*x1250))+(((-1.0)*x1247*x1249))+((x1249*x1250))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1252=(cj1*cj2);
IkReal x1253=(sj1*sj2);
IkReal x1254=((24.365)*cj1);
IkReal x1255=(r00*sj5);
IkReal x1256=((100.0)*px);
IkReal x1257=(cj5*r01);
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(((((-11.0)*x1253))+(((11.0)*x1252))),-1);
if(!x1258.valid){
continue;
}
CheckValue<IkReal> x1259=IKPowWithIntegerCheck((x1252+(((-1.0)*x1253))),-1);
if(!x1259.valid){
continue;
}
if( IKabs(((x1258.value)*(((((12.79)*x1253*x1255))+(((12.79)*x1253*x1257))+(((-1.0)*x1253*x1256))+(((-12.79)*x1252*x1257))+(((-12.79)*x1252*x1255))+((x1252*x1256))+(((-1.0)*x1254*x1255))+(((-1.0)*x1254*x1257)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1259.value)*(((((-1.0)*x1255))+(((-1.0)*x1257)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1258.value)*(((((12.79)*x1253*x1255))+(((12.79)*x1253*x1257))+(((-1.0)*x1253*x1256))+(((-12.79)*x1252*x1257))+(((-12.79)*x1252*x1255))+((x1252*x1256))+(((-1.0)*x1254*x1255))+(((-1.0)*x1254*x1257))))))+IKsqr(((x1259.value)*(((((-1.0)*x1255))+(((-1.0)*x1257))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1258.value)*(((((12.79)*x1253*x1255))+(((12.79)*x1253*x1257))+(((-1.0)*x1253*x1256))+(((-12.79)*x1252*x1257))+(((-12.79)*x1252*x1255))+((x1252*x1256))+(((-1.0)*x1254*x1255))+(((-1.0)*x1254*x1257))))), ((x1259.value)*(((((-1.0)*x1255))+(((-1.0)*x1257))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1260=IKcos(j0);
IkReal x1261=IKsin(j0);
IkReal x1262=(cj5*r01);
IkReal x1263=(sj1*sj2);
IkReal x1264=(cj5*r11);
IkReal x1265=(r00*sj5);
IkReal x1266=((0.24365)*cj1);
IkReal x1267=(r10*sj5);
IkReal x1268=(cj1*cj2*x1261);
IkReal x1269=(cj1*cj2*x1260);
evalcond[0]=(x1269+x1262+x1265+(((-1.0)*x1260*x1263)));
evalcond[1]=(x1268+x1267+x1264+(((-1.0)*x1261*x1263)));
evalcond[2]=((((-1.0)*x1260*x1266))+(((-0.08535)*x1262))+(((-0.08535)*x1265))+(((0.21325)*x1260*x1263))+(((-1.0)*px))+(((-0.21325)*x1269))+(((0.11)*x1261)));
evalcond[3]=((((-1.0)*x1261*x1266))+(((0.21325)*x1261*x1263))+(((-0.08535)*x1267))+(((-0.08535)*x1264))+(((-1.0)*py))+(((-0.21325)*x1268))+(((-0.11)*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1270=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1270;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1271=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1271;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1272=((1.0)*cj5);
IkReal x1273=((((-1.0)*r21*x1272))+(((-1.0)*r20*sj5)));
j4eval[0]=x1273;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1272))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1272))))));
j4eval[2]=IKsign(x1273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1274=((1.0)*cj5);
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1274))+(((-1.0)*r20*sj5)))),-1);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1274))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1275.value)))+(x1276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1277=IKsin(j4);
IkReal x1278=IKcos(j4);
IkReal x1279=(cj5*r10);
IkReal x1280=(cj2*sj1);
IkReal x1281=(r01*sj5);
IkReal x1282=(cj5*r00);
IkReal x1283=(cj5*r20);
IkReal x1284=(cj1*sj2);
IkReal x1285=((1.0)*x1278);
IkReal x1286=((1.0)*x1277);
IkReal x1287=(sj5*x1277);
evalcond[0]=((((-1.0)*r22*x1285))+((r21*x1287))+(((-1.0)*x1283*x1286)));
evalcond[1]=((((-1.0)*r02*x1285))+sj0+((x1277*x1281))+(((-1.0)*x1282*x1286)));
evalcond[2]=(((r11*x1287))+(((-1.0)*x1279*x1286))+(((-1.0)*r12*x1285))+(((-1.0)*cj0)));
evalcond[3]=(((x1278*x1283))+(((-1.0)*r22*x1286))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1285)));
evalcond[4]=((((-1.0)*r02*x1286))+((x1278*x1282))+((cj0*x1284))+((cj0*x1280))+(((-1.0)*x1281*x1285)));
evalcond[5]=(((x1278*x1279))+(((-1.0)*r11*sj5*x1285))+((sj0*x1284))+((sj0*x1280))+(((-1.0)*r12*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1288.valid){
continue;
}
CheckValue<IkReal> x1289 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1288.value)))+(x1289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1290=IKsin(j4);
IkReal x1291=IKcos(j4);
IkReal x1292=(cj5*r10);
IkReal x1293=(cj2*sj1);
IkReal x1294=(r01*sj5);
IkReal x1295=(cj5*r00);
IkReal x1296=(cj5*r20);
IkReal x1297=(cj1*sj2);
IkReal x1298=((1.0)*x1291);
IkReal x1299=((1.0)*x1290);
IkReal x1300=(sj5*x1290);
evalcond[0]=(((r21*x1300))+(((-1.0)*r22*x1298))+(((-1.0)*x1296*x1299)));
evalcond[1]=(sj0+((x1290*x1294))+(((-1.0)*x1295*x1299))+(((-1.0)*r02*x1298)));
evalcond[2]=((((-1.0)*r12*x1298))+((r11*x1300))+(((-1.0)*x1292*x1299))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1291*x1296))+(((-1.0)*r21*sj5*x1298))+(((-1.0)*r22*x1299)));
evalcond[4]=(((x1291*x1295))+(((-1.0)*r02*x1299))+((cj0*x1293))+((cj0*x1297))+(((-1.0)*x1294*x1298)));
evalcond[5]=(((sj0*x1293))+((sj0*x1297))+((x1291*x1292))+(((-1.0)*r12*x1299))+(((-1.0)*r11*sj5*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1301.value)))+(x1302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1303=IKsin(j4);
IkReal x1304=IKcos(j4);
IkReal x1305=(cj5*r10);
IkReal x1306=(cj2*sj1);
IkReal x1307=(r01*sj5);
IkReal x1308=(cj5*r00);
IkReal x1309=(cj5*r20);
IkReal x1310=(cj1*sj2);
IkReal x1311=((1.0)*x1304);
IkReal x1312=((1.0)*x1303);
IkReal x1313=(sj5*x1303);
evalcond[0]=((((-1.0)*r22*x1311))+((r21*x1313))+(((-1.0)*x1309*x1312)));
evalcond[1]=(sj0+(((-1.0)*x1308*x1312))+((x1303*x1307))+(((-1.0)*r02*x1311)));
evalcond[2]=(((r11*x1313))+(((-1.0)*r12*x1311))+(((-1.0)*x1305*x1312))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1312))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1304*x1309))+(((-1.0)*r21*sj5*x1311)));
evalcond[4]=((((-1.0)*x1307*x1311))+(((-1.0)*r02*x1312))+((x1304*x1308))+((cj0*x1306))+((cj0*x1310)));
evalcond[5]=((((-1.0)*r12*x1312))+(((-1.0)*r11*sj5*x1311))+((x1304*x1305))+((sj0*x1306))+((sj0*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1314=cj5*cj5;
IkReal x1315=r21*r21;
IkReal x1316=(sj1*sj2);
IkReal x1317=(r21*sj5);
IkReal x1318=(cj1*cj2);
IkReal x1319=(cj5*r20);
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1318))+((r22*x1316)))),IkReal((((x1318*x1319))+(((-1.0)*x1317*x1318))+((x1316*x1317))+(((-1.0)*x1316*x1319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKsign((x1315+(((-1.0)*x1314*x1315))+(r22*r22)+(((-2.0)*x1317*x1319))+((x1314*(r20*r20))))),-1);
if(!x1321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1320.value)+(((1.5707963267949)*(x1321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1322=IKsin(j4);
IkReal x1323=IKcos(j4);
IkReal x1324=(r21*sj5);
IkReal x1325=(cj5*r20);
IkReal x1326=((1.0)*x1323);
IkReal x1327=((1.0)*x1322);
evalcond[0]=((((-1.0)*r22*x1326))+((x1322*x1324))+(((-1.0)*x1325*x1327)));
evalcond[1]=((((-1.0)*r22*x1327))+(((-1.0)*x1324*x1326))+((x1323*x1325))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1328=(cj5*sj4);
IkReal x1329=(sj4*sj5);
if( IKabs((((r00*x1328))+(((-1.0)*r01*x1329))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1328))+((r11*x1329))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1328))+(((-1.0)*r01*x1329))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1328))+((r11*x1329))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1328))+(((-1.0)*r01*x1329))+((cj4*r02))), ((((-1.0)*r10*x1328))+((r11*x1329))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1330=IKcos(j0);
IkReal x1331=IKsin(j0);
IkReal x1332=(cj4*cj5);
IkReal x1333=(cj5*r01);
IkReal x1334=((1.0)*sj1);
IkReal x1335=(r11*sj5);
IkReal x1336=((1.0)*sj4);
IkReal x1337=((0.21325)*sj1);
IkReal x1338=((0.24365)*cj1);
IkReal x1339=(r00*sj5);
IkReal x1340=(cj5*r11);
IkReal x1341=((1.0)*cj4);
IkReal x1342=(r01*sj5);
IkReal x1343=(r10*sj5);
IkReal x1344=(sj2*x1331);
IkReal x1345=(cj2*x1330);
IkReal x1346=(sj2*x1330);
IkReal x1347=(cj1*cj2*x1331);
evalcond[0]=(x1331+(((-1.0)*r02*x1341))+((sj4*x1342))+(((-1.0)*cj5*r00*x1336)));
evalcond[1]=(((sj4*x1335))+(((-1.0)*cj5*r10*x1336))+(((-1.0)*x1330))+(((-1.0)*r12*x1341)));
evalcond[2]=(x1339+x1333+((cj1*x1345))+(((-1.0)*x1334*x1346)));
evalcond[3]=(x1340+x1343+x1347+(((-1.0)*x1334*x1344)));
evalcond[4]=(((sj1*x1345))+((cj1*x1346))+(((-1.0)*x1341*x1342))+((r00*x1332))+(((-1.0)*r02*x1336)));
evalcond[5]=(((cj1*x1344))+(((-1.0)*x1335*x1341))+((r10*x1332))+(((-1.0)*r12*x1336))+((cj2*sj1*x1331)));
evalcond[6]=((((-0.08535)*x1339))+(((-0.08535)*x1333))+(((-1.0)*x1330*x1338))+(((-1.0)*px))+((x1337*x1346))+(((-0.21325)*cj1*x1345))+(((0.11)*x1331)));
evalcond[7]=((((-0.08535)*x1343))+(((-0.08535)*x1340))+(((-0.11)*x1330))+(((-1.0)*py))+((x1337*x1344))+(((-1.0)*x1331*x1338))+(((-0.21325)*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1348=((1.0)*cj5);
IkReal x1349=((1.0)*sj5);
CheckValue<IkReal> x1350=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1348))+(((-1.0)*r10*x1349)))),IkReal(((((-1.0)*r00*x1349))+(((-1.0)*r01*x1348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1350.value)))+(x1351.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1352=IKcos(j0);
IkReal x1353=IKsin(j0);
IkReal x1354=(cj5*r01);
IkReal x1355=(sj1*sj2);
IkReal x1356=(cj5*r11);
IkReal x1357=(r00*sj5);
IkReal x1358=((0.24365)*cj1);
IkReal x1359=(r10*sj5);
IkReal x1360=(cj1*cj2*x1353);
IkReal x1361=(cj1*cj2*x1352);
evalcond[0]=(x1357+x1354+x1361+(((-1.0)*x1352*x1355)));
evalcond[1]=(x1359+x1356+x1360+(((-1.0)*x1353*x1355)));
evalcond[2]=((((-1.0)*x1352*x1358))+(((0.11)*x1353))+(((-1.0)*px))+(((-0.08535)*x1357))+(((-0.08535)*x1354))+(((0.21325)*x1352*x1355))+(((-0.21325)*x1361)));
evalcond[3]=((((-0.11)*x1352))+(((0.21325)*x1353*x1355))+(((-1.0)*py))+(((-0.08535)*x1359))+(((-0.08535)*x1356))+(((-0.21325)*x1360))+(((-1.0)*x1353*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1362=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1362;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1363=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1363;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1364=((1.0)*cj5);
IkReal x1365=((((-1.0)*r21*x1364))+(((-1.0)*r20*sj5)));
j4eval[0]=x1365;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1364))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1364))))));
j4eval[2]=IKsign(x1365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1366=((1.0)*cj5);
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1366))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1366))+(((-1.0)*r20*sj5)))),-1);
if(!x1368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1367.value)+(((1.5707963267949)*(x1368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1369=IKsin(j4);
IkReal x1370=IKcos(j4);
IkReal x1371=(cj5*r10);
IkReal x1372=(cj2*sj1);
IkReal x1373=(r01*sj5);
IkReal x1374=(cj5*r00);
IkReal x1375=(cj5*r20);
IkReal x1376=(cj1*sj2);
IkReal x1377=((1.0)*x1370);
IkReal x1378=((1.0)*x1369);
IkReal x1379=(sj5*x1369);
evalcond[0]=((((-1.0)*r22*x1377))+(((-1.0)*x1375*x1378))+((r21*x1379)));
evalcond[1]=(sj0+(((-1.0)*r02*x1377))+(((-1.0)*x1374*x1378))+((x1369*x1373)));
evalcond[2]=((((-1.0)*x1371*x1378))+((r11*x1379))+(((-1.0)*r12*x1377))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1378))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1370*x1375))+(((-1.0)*r21*sj5*x1377)));
evalcond[4]=((((-1.0)*r02*x1378))+((x1370*x1374))+(((-1.0)*x1373*x1377))+((cj0*x1372))+((cj0*x1376)));
evalcond[5]=((((-1.0)*r12*x1378))+((x1370*x1371))+(((-1.0)*r11*sj5*x1377))+((sj0*x1376))+((sj0*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1380.value)))+(x1381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1382=IKsin(j4);
IkReal x1383=IKcos(j4);
IkReal x1384=(cj5*r10);
IkReal x1385=(cj2*sj1);
IkReal x1386=(r01*sj5);
IkReal x1387=(cj5*r00);
IkReal x1388=(cj5*r20);
IkReal x1389=(cj1*sj2);
IkReal x1390=((1.0)*x1383);
IkReal x1391=((1.0)*x1382);
IkReal x1392=(sj5*x1382);
evalcond[0]=(((r21*x1392))+(((-1.0)*r22*x1390))+(((-1.0)*x1388*x1391)));
evalcond[1]=(sj0+(((-1.0)*r02*x1390))+(((-1.0)*x1387*x1391))+((x1382*x1386)));
evalcond[2]=((((-1.0)*r12*x1390))+(((-1.0)*x1384*x1391))+((r11*x1392))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x1390))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1391))+((x1383*x1388)));
evalcond[4]=((((-1.0)*r02*x1391))+((cj0*x1389))+((cj0*x1385))+(((-1.0)*x1386*x1390))+((x1383*x1387)));
evalcond[5]=((((-1.0)*r12*x1391))+(((-1.0)*r11*sj5*x1390))+((sj0*x1385))+((sj0*x1389))+((x1383*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1393.valid){
continue;
}
CheckValue<IkReal> x1394 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1393.value)))+(x1394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1395=IKsin(j4);
IkReal x1396=IKcos(j4);
IkReal x1397=(cj5*r10);
IkReal x1398=(cj2*sj1);
IkReal x1399=(r01*sj5);
IkReal x1400=(cj5*r00);
IkReal x1401=(cj5*r20);
IkReal x1402=(cj1*sj2);
IkReal x1403=((1.0)*x1396);
IkReal x1404=((1.0)*x1395);
IkReal x1405=(sj5*x1395);
evalcond[0]=((((-1.0)*r22*x1403))+((r21*x1405))+(((-1.0)*x1401*x1404)));
evalcond[1]=(sj0+((x1395*x1399))+(((-1.0)*r02*x1403))+(((-1.0)*x1400*x1404)));
evalcond[2]=((((-1.0)*r12*x1403))+((r11*x1405))+(((-1.0)*x1397*x1404))+(((-1.0)*cj0)));
evalcond[3]=(((x1396*x1401))+(((-1.0)*r22*x1404))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1403)));
evalcond[4]=((((-1.0)*x1399*x1403))+((x1396*x1400))+((cj0*x1402))+(((-1.0)*r02*x1404))+((cj0*x1398)));
evalcond[5]=((((-1.0)*r12*x1404))+(((-1.0)*r11*sj5*x1403))+((sj0*x1398))+((x1396*x1397))+((sj0*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1406=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1406;
j0eval[1]=IKsign(x1406);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1407=r21*r21;
IkReal x1408=cj5*cj5;
IkReal x1409=(sj1*sj2);
IkReal x1410=(r21*sj5);
IkReal x1411=(cj5*r20);
IkReal x1412=(cj1*cj2);
IkReal x1413=((((-1.0)*x1407))+(((-1.0)*x1408*(r20*r20)))+(((2.0)*x1410*x1411))+(((-1.0)*(r22*r22)))+((x1407*x1408)));
j4eval[0]=x1413;
j4eval[1]=((IKabs(((((-1.0)*r22*x1412))+((r22*x1409)))))+(IKabs(((((-1.0)*x1410*x1412))+((x1411*x1412))+((x1409*x1410))+(((-1.0)*x1409*x1411))))));
j4eval[2]=IKsign(x1413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1414=(cj1*cj2);
IkReal x1415=(sj1*sj2);
IkReal x1416=(r00*sj5);
IkReal x1417=((100.0)*px);
IkReal x1418=(cj5*r01);
IkReal x1419=((24.365)*cj1);
CheckValue<IkReal> x1420=IKPowWithIntegerCheck(((((-11.0)*x1415))+(((11.0)*x1414))),-1);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421=IKPowWithIntegerCheck((x1414+(((-1.0)*x1415))),-1);
if(!x1421.valid){
continue;
}
if( IKabs(((x1420.value)*((((x1418*x1419))+(((-1.0)*x1415*x1417))+((x1416*x1419))+(((29.86)*x1414*x1416))+(((29.86)*x1414*x1418))+(((-29.86)*x1415*x1416))+(((-29.86)*x1415*x1418))+((x1414*x1417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1421.value)*((x1418+x1416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1420.value)*((((x1418*x1419))+(((-1.0)*x1415*x1417))+((x1416*x1419))+(((29.86)*x1414*x1416))+(((29.86)*x1414*x1418))+(((-29.86)*x1415*x1416))+(((-29.86)*x1415*x1418))+((x1414*x1417))))))+IKsqr(((x1421.value)*((x1418+x1416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1420.value)*((((x1418*x1419))+(((-1.0)*x1415*x1417))+((x1416*x1419))+(((29.86)*x1414*x1416))+(((29.86)*x1414*x1418))+(((-29.86)*x1415*x1416))+(((-29.86)*x1415*x1418))+((x1414*x1417))))), ((x1421.value)*((x1418+x1416))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1422=IKcos(j0);
IkReal x1423=IKsin(j0);
IkReal x1424=(sj1*sj2);
IkReal x1425=(cj5*r11);
IkReal x1426=((1.0)*sj5);
IkReal x1427=(cj5*r01);
IkReal x1428=((0.24365)*cj1);
IkReal x1429=((0.08535)*sj5);
IkReal x1430=(cj1*cj2*x1423);
IkReal x1431=(cj1*cj2*x1422);
evalcond[0]=((((-1.0)*x1422*x1424))+(((-1.0)*x1427))+x1431+(((-1.0)*r00*x1426)));
evalcond[1]=((((-1.0)*r10*x1426))+(((-1.0)*x1425))+x1430+(((-1.0)*x1423*x1424)));
evalcond[2]=((((-0.08535)*x1427))+(((-1.0)*px))+(((-1.0)*x1422*x1428))+(((0.11)*x1423))+(((-0.21325)*x1431))+(((0.21325)*x1422*x1424))+(((-1.0)*r00*x1429)));
evalcond[3]=((((-0.08535)*x1425))+(((-1.0)*r10*x1429))+(((-1.0)*x1423*x1428))+(((-0.11)*x1422))+(((-1.0)*py))+(((-0.21325)*x1430))+(((0.21325)*x1423*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1432=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1432;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1433=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1434=((1.0)*cj5);
IkReal x1435=((((-1.0)*r21*x1434))+(((-1.0)*r20*sj5)));
j4eval[0]=x1435;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1434))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1434)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1436=((1.0)*cj5);
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1436))+(((-1.0)*r20*sj5)))),-1);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1436))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1437.value)))+(x1438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1439=IKsin(j4);
IkReal x1440=IKcos(j4);
IkReal x1441=(cj5*r00);
IkReal x1442=(cj5*r10);
IkReal x1443=(cj2*sj1);
IkReal x1444=(r21*sj5);
IkReal x1445=(cj5*r20);
IkReal x1446=(cj1*sj2);
IkReal x1447=((1.0)*x1440);
IkReal x1448=((1.0)*x1439);
IkReal x1449=(sj5*x1439);
IkReal x1450=(sj5*x1440);
evalcond[0]=((((-1.0)*r22*x1447))+((x1439*x1444))+(((-1.0)*x1445*x1448)));
evalcond[1]=(sj0+(((-1.0)*x1441*x1448))+(((-1.0)*r02*x1447))+((r01*x1449)));
evalcond[2]=(((r11*x1449))+(((-1.0)*r12*x1447))+(((-1.0)*x1442*x1448))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1445*x1447))+((x1440*x1444))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1439)));
evalcond[4]=(((r02*x1439))+(((-1.0)*x1441*x1447))+((r01*x1450))+((cj0*x1446))+((cj0*x1443)));
evalcond[5]=(((sj0*x1446))+((sj0*x1443))+((r12*x1439))+((r11*x1450))+(((-1.0)*x1442*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1451.valid){
continue;
}
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1451.value)))+(x1452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1453=IKsin(j4);
IkReal x1454=IKcos(j4);
IkReal x1455=(cj5*r00);
IkReal x1456=(cj5*r10);
IkReal x1457=(cj2*sj1);
IkReal x1458=(r21*sj5);
IkReal x1459=(cj5*r20);
IkReal x1460=(cj1*sj2);
IkReal x1461=((1.0)*x1454);
IkReal x1462=((1.0)*x1453);
IkReal x1463=(sj5*x1453);
IkReal x1464=(sj5*x1454);
evalcond[0]=((((-1.0)*x1459*x1462))+(((-1.0)*r22*x1461))+((x1453*x1458)));
evalcond[1]=(sj0+(((-1.0)*r02*x1461))+((r01*x1463))+(((-1.0)*x1455*x1462)));
evalcond[2]=((((-1.0)*x1456*x1462))+((r11*x1463))+(((-1.0)*r12*x1461))+(((-1.0)*cj0)));
evalcond[3]=(((x1454*x1458))+(((-1.0)*x1459*x1461))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1453)));
evalcond[4]=(((cj0*x1460))+((r01*x1464))+(((-1.0)*x1455*x1461))+((cj0*x1457))+((r02*x1453)));
evalcond[5]=((((-1.0)*x1456*x1461))+((r12*x1453))+((sj0*x1457))+((sj0*x1460))+((r11*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1465.value)))+(x1466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j4);
IkReal x1468=IKcos(j4);
IkReal x1469=(cj5*r00);
IkReal x1470=(cj5*r10);
IkReal x1471=(cj2*sj1);
IkReal x1472=(r21*sj5);
IkReal x1473=(cj5*r20);
IkReal x1474=(cj1*sj2);
IkReal x1475=((1.0)*x1468);
IkReal x1476=((1.0)*x1467);
IkReal x1477=(sj5*x1467);
IkReal x1478=(sj5*x1468);
evalcond[0]=((((-1.0)*r22*x1475))+((x1467*x1472))+(((-1.0)*x1473*x1476)));
evalcond[1]=(sj0+(((-1.0)*x1469*x1476))+(((-1.0)*r02*x1475))+((r01*x1477)));
evalcond[2]=((((-1.0)*x1470*x1476))+((r11*x1477))+(((-1.0)*r12*x1475))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1467))+((x1468*x1472))+(((-1.0)*x1473*x1475)));
evalcond[4]=((((-1.0)*x1469*x1475))+((cj0*x1471))+((cj0*x1474))+((r01*x1478))+((r02*x1467)));
evalcond[5]=((((-1.0)*x1470*x1475))+((sj0*x1471))+((sj0*x1474))+((r11*x1478))+((r12*x1467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1479=r21*r21;
IkReal x1480=cj5*cj5;
IkReal x1481=(sj1*sj2);
IkReal x1482=(r21*sj5);
IkReal x1483=(cj1*cj2);
IkReal x1484=(cj5*r20);
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1483))+((r22*x1481)))),IkReal((((x1481*x1482))+((x1483*x1484))+(((-1.0)*x1482*x1483))+(((-1.0)*x1481*x1484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1480*(r20*r20)))+(((2.0)*x1482*x1484))+(((-1.0)*x1479))+(((-1.0)*(r22*r22)))+((x1479*x1480)))),-1);
if(!x1486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1485.value)+(((1.5707963267949)*(x1486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1487=IKsin(j4);
IkReal x1488=IKcos(j4);
IkReal x1489=(r21*sj5);
IkReal x1490=(cj5*r20);
IkReal x1491=((1.0)*x1488);
evalcond[0]=((((-1.0)*x1487*x1490))+((x1487*x1489))+(((-1.0)*r22*x1491)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1490*x1491))+((r22*x1487))+((x1488*x1489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1492=(cj5*sj4);
IkReal x1493=(sj4*sj5);
if( IKabs((((r00*x1492))+(((-1.0)*r01*x1493))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1493))+(((-1.0)*r10*x1492))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1492))+(((-1.0)*r01*x1493))+((cj4*r02))))+IKsqr((((r11*x1493))+(((-1.0)*r10*x1492))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1492))+(((-1.0)*r01*x1493))+((cj4*r02))), (((r11*x1493))+(((-1.0)*r10*x1492))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1494=IKcos(j0);
IkReal x1495=IKsin(j0);
IkReal x1496=((1.0)*sj1);
IkReal x1497=(r11*sj5);
IkReal x1498=((1.0)*cj5);
IkReal x1499=((0.21325)*sj1);
IkReal x1500=((1.0)*sj5);
IkReal x1501=((0.24365)*cj1);
IkReal x1502=((0.08535)*cj5);
IkReal x1503=((1.0)*cj4);
IkReal x1504=(r01*sj5);
IkReal x1505=((0.08535)*sj5);
IkReal x1506=(sj2*x1495);
IkReal x1507=(cj2*x1494);
IkReal x1508=(sj2*x1494);
IkReal x1509=(cj1*cj2*x1495);
evalcond[0]=((((-1.0)*r00*sj4*x1498))+(((-1.0)*r02*x1503))+x1495+((sj4*x1504)));
evalcond[1]=((((-1.0)*r10*sj4*x1498))+(((-1.0)*x1494))+((sj4*x1497))+(((-1.0)*r12*x1503)));
evalcond[2]=((((-1.0)*r01*x1498))+(((-1.0)*r00*x1500))+((cj1*x1507))+(((-1.0)*x1496*x1508)));
evalcond[3]=((((-1.0)*r11*x1498))+x1509+(((-1.0)*x1496*x1506))+(((-1.0)*r10*x1500)));
evalcond[4]=(((r02*sj4))+((sj1*x1507))+((cj1*x1508))+((cj4*x1504))+(((-1.0)*cj4*r00*x1498)));
evalcond[5]=(((cj1*x1506))+(((-1.0)*cj4*r10*x1498))+((r12*sj4))+((cj4*x1497))+((cj2*sj1*x1495)));
evalcond[6]=((((-0.21325)*cj1*x1507))+((x1499*x1508))+(((-1.0)*r01*x1502))+(((-1.0)*x1494*x1501))+(((-1.0)*r00*x1505))+(((-1.0)*px))+(((0.11)*x1495)));
evalcond[7]=(((x1499*x1506))+(((-1.0)*py))+(((-0.11)*x1494))+(((-1.0)*x1495*x1501))+(((-0.21325)*x1509))+(((-1.0)*r11*x1502))+(((-1.0)*r10*x1505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1510.valid){
continue;
}
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1510.value)))+(x1511.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1512=IKcos(j0);
IkReal x1513=IKsin(j0);
IkReal x1514=(sj1*sj2);
IkReal x1515=(cj5*r11);
IkReal x1516=((1.0)*sj5);
IkReal x1517=(cj5*r01);
IkReal x1518=((0.24365)*cj1);
IkReal x1519=((0.08535)*sj5);
IkReal x1520=(cj1*cj2*x1513);
IkReal x1521=(cj1*cj2*x1512);
evalcond[0]=((((-1.0)*x1517))+(((-1.0)*r00*x1516))+x1521+(((-1.0)*x1512*x1514)));
evalcond[1]=((((-1.0)*x1515))+(((-1.0)*x1513*x1514))+x1520+(((-1.0)*r10*x1516)));
evalcond[2]=((((0.11)*x1513))+(((-1.0)*r00*x1519))+(((-1.0)*px))+(((0.21325)*x1512*x1514))+(((-0.21325)*x1521))+(((-1.0)*x1512*x1518))+(((-0.08535)*x1517)));
evalcond[3]=((((-1.0)*x1513*x1518))+(((-1.0)*py))+(((-0.11)*x1512))+(((-0.21325)*x1520))+(((-0.08535)*x1515))+(((-1.0)*r10*x1519))+(((0.21325)*x1513*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1522=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1522;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1523=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1523;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1524=((1.0)*cj5);
IkReal x1525=((((-1.0)*r21*x1524))+(((-1.0)*r20*sj5)));
j4eval[0]=x1525;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1524))+(((-1.0)*cj0*r00*x1524))))));
j4eval[2]=IKsign(x1525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1526=((1.0)*cj5);
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1526))+(((-1.0)*r20*sj5)))),-1);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1526))+(((-1.0)*cj0*r00*x1526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1527.value)))+(x1528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1529=IKsin(j4);
IkReal x1530=IKcos(j4);
IkReal x1531=(cj5*r00);
IkReal x1532=(cj5*r10);
IkReal x1533=(cj2*sj1);
IkReal x1534=(r21*sj5);
IkReal x1535=(cj5*r20);
IkReal x1536=(cj1*sj2);
IkReal x1537=((1.0)*x1530);
IkReal x1538=((1.0)*x1529);
IkReal x1539=(sj5*x1529);
IkReal x1540=(sj5*x1530);
evalcond[0]=((((-1.0)*r22*x1537))+(((-1.0)*x1535*x1538))+((x1529*x1534)));
evalcond[1]=(sj0+(((-1.0)*x1531*x1538))+((r01*x1539))+(((-1.0)*r02*x1537)));
evalcond[2]=((((-1.0)*r12*x1537))+((r11*x1539))+(((-1.0)*x1532*x1538))+(((-1.0)*cj0)));
evalcond[3]=(((x1530*x1534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1535*x1537))+((r22*x1529)));
evalcond[4]=((((-1.0)*x1531*x1537))+((r02*x1529))+((r01*x1540))+((cj0*x1533))+((cj0*x1536)));
evalcond[5]=(((r12*x1529))+(((-1.0)*x1532*x1537))+((sj0*x1536))+((sj0*x1533))+((r11*x1540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1541.value)))+(x1542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1543=IKsin(j4);
IkReal x1544=IKcos(j4);
IkReal x1545=(cj5*r00);
IkReal x1546=(cj5*r10);
IkReal x1547=(cj2*sj1);
IkReal x1548=(r21*sj5);
IkReal x1549=(cj5*r20);
IkReal x1550=(cj1*sj2);
IkReal x1551=((1.0)*x1544);
IkReal x1552=((1.0)*x1543);
IkReal x1553=(sj5*x1543);
IkReal x1554=(sj5*x1544);
evalcond[0]=((((-1.0)*x1549*x1552))+(((-1.0)*r22*x1551))+((x1543*x1548)));
evalcond[1]=(((r01*x1553))+sj0+(((-1.0)*r02*x1551))+(((-1.0)*x1545*x1552)));
evalcond[2]=((((-1.0)*x1546*x1552))+((r11*x1553))+(((-1.0)*r12*x1551))+(((-1.0)*cj0)));
evalcond[3]=(((x1544*x1548))+(((-1.0)*x1549*x1551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1543)));
evalcond[4]=(((r01*x1554))+((cj0*x1547))+(((-1.0)*x1545*x1551))+((r02*x1543))+((cj0*x1550)));
evalcond[5]=((((-1.0)*x1546*x1551))+((r11*x1554))+((r12*x1543))+((sj0*x1547))+((sj0*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1555.value)))+(x1556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1557=IKsin(j4);
IkReal x1558=IKcos(j4);
IkReal x1559=(cj5*r00);
IkReal x1560=(cj5*r10);
IkReal x1561=(cj2*sj1);
IkReal x1562=(r21*sj5);
IkReal x1563=(cj5*r20);
IkReal x1564=(cj1*sj2);
IkReal x1565=((1.0)*x1558);
IkReal x1566=((1.0)*x1557);
IkReal x1567=(sj5*x1557);
IkReal x1568=(sj5*x1558);
evalcond[0]=((((-1.0)*r22*x1565))+(((-1.0)*x1563*x1566))+((x1557*x1562)));
evalcond[1]=((((-1.0)*x1559*x1566))+sj0+(((-1.0)*r02*x1565))+((r01*x1567)));
evalcond[2]=((((-1.0)*x1560*x1566))+((r11*x1567))+(((-1.0)*r12*x1565))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1557))+(((-1.0)*x1563*x1565))+((x1558*x1562)));
evalcond[4]=((((-1.0)*x1559*x1565))+((r02*x1557))+((cj0*x1564))+((cj0*x1561))+((r01*x1568)));
evalcond[5]=((((-1.0)*x1560*x1565))+((r11*x1568))+((sj0*x1564))+((sj0*x1561))+((r12*x1557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1569=((1.0)*cj5);
IkReal x1570=((1.0)*sj5);
IkReal x1571=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1571;
j0eval[1]=((IKabs(((((-1.0)*r01*x1569))+(((-1.0)*r00*x1570)))))+(IKabs(((((-1.0)*r10*x1570))+(((-1.0)*r11*x1569))))));
j0eval[2]=IKsign(x1571);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1572=r21*r21;
IkReal x1573=cj5*cj5;
IkReal x1574=(cj2*sj1);
IkReal x1575=(cj1*sj2);
IkReal x1576=(r21*sj5);
IkReal x1577=((1.0)*cj5*r20);
IkReal x1578=(((x1572*x1573))+(((-1.0)*x1573*(r20*r20)))+(((2.0)*cj5*r20*x1576))+(((-1.0)*(r22*r22)))+(((-1.0)*x1572)));
j4eval[0]=x1578;
j4eval[1]=((IKabs(((((-1.0)*x1575*x1577))+((x1575*x1576))+(((-1.0)*x1574*x1577))+((x1574*x1576)))))+(IKabs((((r22*x1575))+((r22*x1574))))));
j4eval[2]=IKsign(x1578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1579=cj1*cj1;
IkReal x1580=(cj2*sj2);
IkReal x1581=(cj1*sj1);
j0eval[0]=((((-2.0)*x1579*x1580))+(((-1.14255568581477)*cj2*x1581))+(((-1.14255568581477)*sj2*x1579))+x1580+x1581+(((-2.0)*x1581*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1582=cj1*cj1;
IkReal x1583=(cj1*sj2);
IkReal x1584=(cj1*sj1);
IkReal x1585=(cj5*r01);
IkReal x1586=((100.0)*py);
IkReal x1587=(cj2*sj1);
IkReal x1588=(r00*sj5);
IkReal x1589=((8.535)*cj5*r11);
IkReal x1590=(sj2*x1582);
IkReal x1591=((8.535)*r10*sj5);
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(((((21.325)*x1584))+(((-24.365)*x1590))+(((-42.65)*cj2*x1590))+(((-24.365)*cj2*x1584))+(((-42.65)*x1584*(cj2*cj2)))+(((21.325)*cj2*sj2))),-1);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck((x1583+x1587),-1);
if(!x1593.valid){
continue;
}
if( IKabs(((x1592.value)*((((x1586*x1587))+((x1587*x1589))+((x1587*x1591))+(((-11.0)*x1588))+(((-11.0)*x1585))+((x1583*x1591))+((x1583*x1589))+((x1583*x1586)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1593.value)*(((((-1.0)*x1585))+(((-1.0)*x1588)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1592.value)*((((x1586*x1587))+((x1587*x1589))+((x1587*x1591))+(((-11.0)*x1588))+(((-11.0)*x1585))+((x1583*x1591))+((x1583*x1589))+((x1583*x1586))))))+IKsqr(((x1593.value)*(((((-1.0)*x1585))+(((-1.0)*x1588))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1592.value)*((((x1586*x1587))+((x1587*x1589))+((x1587*x1591))+(((-11.0)*x1588))+(((-11.0)*x1585))+((x1583*x1591))+((x1583*x1589))+((x1583*x1586))))), ((x1593.value)*(((((-1.0)*x1585))+(((-1.0)*x1588))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1594=IKcos(j0);
IkReal x1595=IKsin(j0);
IkReal x1596=(cj5*r01);
IkReal x1597=((0.21325)*sj2);
IkReal x1598=(cj5*r11);
IkReal x1599=(r00*sj5);
IkReal x1600=((0.24365)*cj1);
IkReal x1601=(r10*sj5);
IkReal x1602=(cj1*sj2);
IkReal x1603=((0.21325)*cj1*cj2);
IkReal x1604=(sj1*x1594);
IkReal x1605=(sj1*x1595);
evalcond[0]=(((x1594*x1602))+x1596+x1599+((cj2*x1604)));
evalcond[1]=(((x1595*x1602))+x1601+x1598+((cj2*x1605)));
evalcond[2]=((((-1.0)*x1594*x1600))+(((-1.0)*x1594*x1603))+(((-0.08535)*x1596))+(((-0.08535)*x1599))+(((-1.0)*px))+(((0.11)*x1595))+((x1597*x1604)));
evalcond[3]=((((-0.11)*x1594))+(((-1.0)*x1595*x1603))+(((-1.0)*x1595*x1600))+(((-0.08535)*x1598))+(((-1.0)*py))+(((-0.08535)*x1601))+((x1597*x1605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1606=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1606;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1606);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1607=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1607;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1608=((1.0)*cj5);
IkReal x1609=((((-1.0)*r21*x1608))+(((-1.0)*r20*sj5)));
j4eval[0]=x1609;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1608))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1608)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1610=((1.0)*cj5);
CheckValue<IkReal> x1611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1610))+(((-1.0)*r20*sj5)))),-1);
if(!x1611.valid){
continue;
}
CheckValue<IkReal> x1612 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1610))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1610))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1611.value)))+(x1612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1613=IKsin(j4);
IkReal x1614=IKcos(j4);
IkReal x1615=(cj5*r00);
IkReal x1616=(cj1*cj2);
IkReal x1617=(cj5*r10);
IkReal x1618=(r21*sj5);
IkReal x1619=(cj5*r20);
IkReal x1620=((1.0)*x1614);
IkReal x1621=((1.0)*x1613);
IkReal x1622=(sj5*x1613);
IkReal x1623=(sj5*x1614);
IkReal x1624=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1619*x1621))+(((-1.0)*r22*x1620))+((x1613*x1618)));
evalcond[1]=(sj0+((r01*x1622))+(((-1.0)*r02*x1620))+(((-1.0)*x1615*x1621)));
evalcond[2]=((((-1.0)*r12*x1620))+(((-1.0)*x1617*x1621))+((r11*x1622))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1619*x1620))+((cj2*sj1))+((cj1*sj2))+((x1614*x1618))+((r22*x1613)));
evalcond[4]=(((r01*x1623))+((cj0*x1616))+(((-1.0)*cj0*x1624))+(((-1.0)*x1615*x1620))+((r02*x1613)));
evalcond[5]=((((-1.0)*sj0*x1624))+((sj0*x1616))+(((-1.0)*x1617*x1620))+((r12*x1613))+((r11*x1623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1625.valid){
continue;
}
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1625.value)))+(x1626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1627=IKsin(j4);
IkReal x1628=IKcos(j4);
IkReal x1629=(cj5*r00);
IkReal x1630=(cj1*cj2);
IkReal x1631=(cj5*r10);
IkReal x1632=(r21*sj5);
IkReal x1633=(cj5*r20);
IkReal x1634=((1.0)*x1628);
IkReal x1635=((1.0)*x1627);
IkReal x1636=(sj5*x1627);
IkReal x1637=(sj5*x1628);
IkReal x1638=((1.0)*sj1*sj2);
evalcond[0]=(((x1627*x1632))+(((-1.0)*r22*x1634))+(((-1.0)*x1633*x1635)));
evalcond[1]=(sj0+((r01*x1636))+(((-1.0)*x1629*x1635))+(((-1.0)*r02*x1634)));
evalcond[2]=(((r11*x1636))+(((-1.0)*r12*x1634))+(((-1.0)*x1631*x1635))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1628*x1632))+(((-1.0)*x1633*x1634))+((r22*x1627)));
evalcond[4]=(((r02*x1627))+((r01*x1637))+((cj0*x1630))+(((-1.0)*x1629*x1634))+(((-1.0)*cj0*x1638)));
evalcond[5]=(((sj0*x1630))+((r11*x1637))+((r12*x1627))+(((-1.0)*x1631*x1634))+(((-1.0)*sj0*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1639.valid){
continue;
}
CheckValue<IkReal> x1640 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1639.value)))+(x1640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1641=IKsin(j4);
IkReal x1642=IKcos(j4);
IkReal x1643=(cj5*r00);
IkReal x1644=(cj1*cj2);
IkReal x1645=(cj5*r10);
IkReal x1646=(r21*sj5);
IkReal x1647=(cj5*r20);
IkReal x1648=((1.0)*x1642);
IkReal x1649=((1.0)*x1641);
IkReal x1650=(sj5*x1641);
IkReal x1651=(sj5*x1642);
IkReal x1652=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1647*x1649))+(((-1.0)*r22*x1648))+((x1641*x1646)));
evalcond[1]=(sj0+((r01*x1650))+(((-1.0)*x1643*x1649))+(((-1.0)*r02*x1648)));
evalcond[2]=((((-1.0)*r12*x1648))+(((-1.0)*x1645*x1649))+((r11*x1650))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1647*x1648))+((cj2*sj1))+((cj1*sj2))+((x1642*x1646))+((r22*x1641)));
evalcond[4]=(((r02*x1641))+((r01*x1651))+(((-1.0)*x1643*x1648))+((cj0*x1644))+(((-1.0)*cj0*x1652)));
evalcond[5]=(((sj0*x1644))+(((-1.0)*x1645*x1648))+((r11*x1651))+((r12*x1641))+(((-1.0)*sj0*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1653=r21*r21;
IkReal x1654=cj5*cj5;
IkReal x1655=(cj2*sj1);
IkReal x1656=(cj1*sj2);
IkReal x1657=(r21*sj5);
IkReal x1658=((1.0)*cj5*r20);
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1653))+(((2.0)*cj5*r20*x1657))+(((-1.0)*(r22*r22)))+(((-1.0)*x1654*(r20*r20)))+((x1653*x1654)))),-1);
if(!x1659.valid){
continue;
}
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal((((r22*x1656))+((r22*x1655)))),IkReal((((x1656*x1657))+(((-1.0)*x1656*x1658))+((x1655*x1657))+(((-1.0)*x1655*x1658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1659.value)))+(x1660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1661=IKsin(j4);
IkReal x1662=IKcos(j4);
IkReal x1663=(r21*sj5);
IkReal x1664=(cj5*r20);
IkReal x1665=((1.0)*x1662);
evalcond[0]=((((-1.0)*r22*x1665))+((x1661*x1663))+(((-1.0)*x1661*x1664)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x1662*x1663))+(((-1.0)*x1664*x1665))+((r22*x1661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1666=(cj5*sj4);
IkReal x1667=(sj4*sj5);
if( IKabs((((r00*x1666))+(((-1.0)*r01*x1667))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1667))+(((-1.0)*r10*x1666))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1666))+(((-1.0)*r01*x1667))+((cj4*r02))))+IKsqr((((r11*x1667))+(((-1.0)*r10*x1666))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1666))+(((-1.0)*r01*x1667))+((cj4*r02))), (((r11*x1667))+(((-1.0)*r10*x1666))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1668=IKcos(j0);
IkReal x1669=IKsin(j0);
IkReal x1670=(cj5*r01);
IkReal x1671=((1.0)*sj1);
IkReal x1672=(r11*sj5);
IkReal x1673=((0.21325)*sj1);
IkReal x1674=((0.24365)*cj1);
IkReal x1675=(r00*sj5);
IkReal x1676=(cj5*r11);
IkReal x1677=((1.0)*cj4);
IkReal x1678=(r01*sj5);
IkReal x1679=(r10*sj5);
IkReal x1680=(sj2*x1669);
IkReal x1681=(cj2*x1668);
IkReal x1682=(cj5*x1677);
IkReal x1683=(sj2*x1668);
IkReal x1684=((1.0)*cj5*sj4);
IkReal x1685=(cj1*cj2*x1669);
evalcond[0]=(((sj4*x1678))+(((-1.0)*r02*x1677))+x1669+(((-1.0)*r00*x1684)));
evalcond[1]=((((-1.0)*r10*x1684))+((sj4*x1672))+(((-1.0)*x1668))+(((-1.0)*r12*x1677)));
evalcond[2]=(((cj1*x1683))+x1675+x1670+((sj1*x1681)));
evalcond[3]=(((cj1*x1680))+x1679+x1676+((cj2*sj1*x1669)));
evalcond[4]=(((cj1*x1681))+((r02*sj4))+((cj4*x1678))+(((-1.0)*x1671*x1683))+(((-1.0)*r00*x1682)));
evalcond[5]=((((-1.0)*r10*x1682))+x1685+((cj4*x1672))+((r12*sj4))+(((-1.0)*x1671*x1680)));
evalcond[6]=(((x1673*x1683))+(((-0.21325)*cj1*x1681))+(((-1.0)*x1668*x1674))+(((-1.0)*px))+(((-0.08535)*x1670))+(((-0.08535)*x1675))+(((0.11)*x1669)));
evalcond[7]=((((-0.11)*x1668))+((x1673*x1680))+(((-1.0)*x1669*x1674))+(((-1.0)*py))+(((-0.21325)*x1685))+(((-0.08535)*x1679))+(((-0.08535)*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1686=((1.0)*cj5);
IkReal x1687=((1.0)*sj5);
CheckValue<IkReal> x1688 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1686))+(((-1.0)*r10*x1687)))),IkReal(((((-1.0)*r01*x1686))+(((-1.0)*r00*x1687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1688.valid){
continue;
}
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1689.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1688.value)+(((1.5707963267949)*(x1689.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1690=IKcos(j0);
IkReal x1691=IKsin(j0);
IkReal x1692=(cj5*r01);
IkReal x1693=((0.21325)*sj2);
IkReal x1694=(cj5*r11);
IkReal x1695=(r00*sj5);
IkReal x1696=((0.24365)*cj1);
IkReal x1697=(r10*sj5);
IkReal x1698=(cj1*sj2);
IkReal x1699=((0.21325)*cj1*cj2);
IkReal x1700=(sj1*x1690);
IkReal x1701=(sj1*x1691);
evalcond[0]=(((x1690*x1698))+x1695+x1692+((cj2*x1700)));
evalcond[1]=(x1697+x1694+((x1691*x1698))+((cj2*x1701)));
evalcond[2]=(((x1693*x1700))+(((-1.0)*x1690*x1696))+(((-1.0)*x1690*x1699))+(((-1.0)*px))+(((0.11)*x1691))+(((-0.08535)*x1695))+(((-0.08535)*x1692)));
evalcond[3]=(((x1693*x1701))+(((-1.0)*x1691*x1696))+(((-1.0)*x1691*x1699))+(((-1.0)*py))+(((-0.11)*x1690))+(((-0.08535)*x1697))+(((-0.08535)*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1702=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1702;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1703=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1703;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1704=((1.0)*cj5);
IkReal x1705=((((-1.0)*r21*x1704))+(((-1.0)*r20*sj5)));
j4eval[0]=x1705;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1704))+(((-1.0)*r10*sj0*x1704))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1706=((1.0)*cj5);
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1706))+(((-1.0)*r20*sj5)))),-1);
if(!x1707.valid){
continue;
}
CheckValue<IkReal> x1708 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1706))+(((-1.0)*r10*sj0*x1706))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1707.value)))+(x1708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1709=IKsin(j4);
IkReal x1710=IKcos(j4);
IkReal x1711=(cj5*r00);
IkReal x1712=(cj1*cj2);
IkReal x1713=(cj5*r10);
IkReal x1714=(r21*sj5);
IkReal x1715=(cj5*r20);
IkReal x1716=((1.0)*x1710);
IkReal x1717=((1.0)*x1709);
IkReal x1718=(sj5*x1709);
IkReal x1719=(sj5*x1710);
IkReal x1720=((1.0)*sj1*sj2);
evalcond[0]=(((x1709*x1714))+(((-1.0)*r22*x1716))+(((-1.0)*x1715*x1717)));
evalcond[1]=(sj0+((r01*x1718))+(((-1.0)*x1711*x1717))+(((-1.0)*r02*x1716)));
evalcond[2]=(((r11*x1718))+(((-1.0)*x1713*x1717))+(((-1.0)*r12*x1716))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x1710*x1714))+((r22*x1709))+((cj1*sj2))+(((-1.0)*x1715*x1716)));
evalcond[4]=(((r02*x1709))+(((-1.0)*cj0*x1720))+((cj0*x1712))+((r01*x1719))+(((-1.0)*x1711*x1716)));
evalcond[5]=(((r12*x1709))+((r11*x1719))+(((-1.0)*sj0*x1720))+(((-1.0)*x1713*x1716))+((sj0*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1721.valid){
continue;
}
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1721.value)))+(x1722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1723=IKsin(j4);
IkReal x1724=IKcos(j4);
IkReal x1725=(cj5*r00);
IkReal x1726=(cj1*cj2);
IkReal x1727=(cj5*r10);
IkReal x1728=(r21*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=((1.0)*x1724);
IkReal x1731=((1.0)*x1723);
IkReal x1732=(sj5*x1723);
IkReal x1733=(sj5*x1724);
IkReal x1734=((1.0)*sj1*sj2);
evalcond[0]=(((x1723*x1728))+(((-1.0)*x1729*x1731))+(((-1.0)*r22*x1730)));
evalcond[1]=(((r01*x1732))+sj0+(((-1.0)*x1725*x1731))+(((-1.0)*r02*x1730)));
evalcond[2]=((((-1.0)*r12*x1730))+((r11*x1732))+(((-1.0)*x1727*x1731))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x1724*x1728))+((cj1*sj2))+(((-1.0)*x1729*x1730))+((r22*x1723)));
evalcond[4]=(((r01*x1733))+((cj0*x1726))+(((-1.0)*cj0*x1734))+((r02*x1723))+(((-1.0)*x1725*x1730)));
evalcond[5]=((((-1.0)*sj0*x1734))+((sj0*x1726))+((r11*x1733))+((r12*x1723))+(((-1.0)*x1727*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1735.valid){
continue;
}
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1735.value)))+(x1736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1737=IKsin(j4);
IkReal x1738=IKcos(j4);
IkReal x1739=(cj5*r00);
IkReal x1740=(cj1*cj2);
IkReal x1741=(cj5*r10);
IkReal x1742=(r21*sj5);
IkReal x1743=(cj5*r20);
IkReal x1744=((1.0)*x1738);
IkReal x1745=((1.0)*x1737);
IkReal x1746=(sj5*x1737);
IkReal x1747=(sj5*x1738);
IkReal x1748=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1744))+(((-1.0)*x1743*x1745))+((x1737*x1742)));
evalcond[1]=(sj0+(((-1.0)*x1739*x1745))+((r01*x1746))+(((-1.0)*r02*x1744)));
evalcond[2]=((((-1.0)*r12*x1744))+(((-1.0)*x1741*x1745))+((r11*x1746))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1737))+((x1738*x1742))+(((-1.0)*x1743*x1744)));
evalcond[4]=((((-1.0)*cj0*x1748))+(((-1.0)*x1739*x1744))+((r02*x1737))+((cj0*x1740))+((r01*x1747)));
evalcond[5]=((((-1.0)*x1741*x1744))+(((-1.0)*sj0*x1748))+((sj0*x1740))+((r12*x1737))+((r11*x1747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1749=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1749;
j0eval[1]=IKsign(x1749);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1750=cj5*cj5;
IkReal x1751=r21*r21;
IkReal x1752=(cj2*sj1);
IkReal x1753=(cj1*sj2);
IkReal x1754=(r21*sj5);
IkReal x1755=((1.0)*cj5*r20);
IkReal x1756=(x1751+(r22*r22)+((x1750*(r20*r20)))+(((-1.0)*x1750*x1751))+(((-2.0)*cj5*r20*x1754)));
j4eval[0]=x1756;
j4eval[1]=IKsign(x1756);
j4eval[2]=((IKabs((((x1752*x1754))+((x1753*x1754))+(((-1.0)*x1752*x1755))+(((-1.0)*x1753*x1755)))))+(IKabs((((r22*x1753))+((r22*x1752))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1757=cj1*cj1;
IkReal x1758=(cj2*sj2);
IkReal x1759=(cj1*sj1);
j0eval[0]=(x1759+x1758+(((-2.0)*x1759*(cj2*cj2)))+(((-1.14255568581477)*sj2*x1757))+(((-2.0)*x1757*x1758))+(((-1.14255568581477)*cj2*x1759)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1760=cj1*cj1;
IkReal x1761=(cj1*sj2);
IkReal x1762=(r00*sj5);
IkReal x1763=(cj1*sj1);
IkReal x1764=((100.0)*py);
IkReal x1765=(cj2*sj1);
IkReal x1766=(cj5*r01);
IkReal x1767=((8.535)*cj5*r11);
IkReal x1768=(sj2*x1760);
IkReal x1769=((8.535)*r10*sj5);
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(((((-42.65)*cj2*x1768))+(((-24.365)*x1768))+(((-42.65)*x1763*(cj2*cj2)))+(((21.325)*x1763))+(((21.325)*cj2*sj2))+(((-24.365)*cj2*x1763))),-1);
if(!x1770.valid){
continue;
}
CheckValue<IkReal> x1771=IKPowWithIntegerCheck((x1761+x1765),-1);
if(!x1771.valid){
continue;
}
if( IKabs(((x1770.value)*((((x1765*x1767))+((x1765*x1769))+((x1764*x1765))+(((11.0)*x1762))+(((11.0)*x1766))+((x1761*x1769))+((x1761*x1767))+((x1761*x1764)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1771.value)*((x1762+x1766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1770.value)*((((x1765*x1767))+((x1765*x1769))+((x1764*x1765))+(((11.0)*x1762))+(((11.0)*x1766))+((x1761*x1769))+((x1761*x1767))+((x1761*x1764))))))+IKsqr(((x1771.value)*((x1762+x1766))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1770.value)*((((x1765*x1767))+((x1765*x1769))+((x1764*x1765))+(((11.0)*x1762))+(((11.0)*x1766))+((x1761*x1769))+((x1761*x1767))+((x1761*x1764))))), ((x1771.value)*((x1762+x1766))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1772=IKcos(j0);
IkReal x1773=IKsin(j0);
IkReal x1774=(cj5*r11);
IkReal x1775=((0.21325)*sj2);
IkReal x1776=((1.0)*sj5);
IkReal x1777=(cj5*r01);
IkReal x1778=((0.24365)*cj1);
IkReal x1779=((0.08535)*sj5);
IkReal x1780=(cj1*sj2);
IkReal x1781=((0.21325)*cj1*cj2);
IkReal x1782=(sj1*x1772);
IkReal x1783=(sj1*x1773);
evalcond[0]=((((-1.0)*x1777))+((cj2*x1782))+((x1772*x1780))+(((-1.0)*r00*x1776)));
evalcond[1]=((((-1.0)*x1774))+((cj2*x1783))+(((-1.0)*r10*x1776))+((x1773*x1780)));
evalcond[2]=((((-1.0)*x1772*x1778))+((x1775*x1782))+(((0.11)*x1773))+(((-1.0)*px))+(((-1.0)*x1772*x1781))+(((-1.0)*r00*x1779))+(((-0.08535)*x1777)));
evalcond[3]=((((-1.0)*x1773*x1781))+((x1775*x1783))+(((-0.11)*x1772))+(((-1.0)*r10*x1779))+(((-1.0)*py))+(((-1.0)*x1773*x1778))+(((-0.08535)*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1784=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1784;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1785=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1785;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1786=((1.0)*cj5);
IkReal x1787=((((-1.0)*r21*x1786))+(((-1.0)*r20*sj5)));
j4eval[0]=x1787;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1786))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1786))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1788=((1.0)*cj5);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1788))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1788))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
CheckValue<IkReal> x1790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1788))+(((-1.0)*r20*sj5)))),-1);
if(!x1790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1789.value)+(((1.5707963267949)*(x1790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1791=IKsin(j4);
IkReal x1792=IKcos(j4);
IkReal x1793=(cj1*cj2);
IkReal x1794=(cj5*r10);
IkReal x1795=(r01*sj5);
IkReal x1796=(cj5*r00);
IkReal x1797=(cj5*r20);
IkReal x1798=((1.0)*cj0);
IkReal x1799=(sj1*sj2);
IkReal x1800=((1.0)*x1792);
IkReal x1801=((1.0)*x1791);
IkReal x1802=(sj5*x1791);
evalcond[0]=((((-1.0)*x1797*x1801))+((r21*x1802))+(((-1.0)*r22*x1800)));
evalcond[1]=(sj0+(((-1.0)*x1796*x1801))+(((-1.0)*r02*x1800))+((x1791*x1795)));
evalcond[2]=((((-1.0)*x1798))+(((-1.0)*x1794*x1801))+((r11*x1802))+(((-1.0)*r12*x1800)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1792*x1797))+(((-1.0)*r21*sj5*x1800))+(((-1.0)*r22*x1801)));
evalcond[4]=((((-1.0)*x1795*x1800))+(((-1.0)*r02*x1801))+((x1792*x1796))+((cj0*x1793))+(((-1.0)*x1798*x1799)));
evalcond[5]=(((sj0*x1793))+(((-1.0)*r11*sj5*x1800))+((x1792*x1794))+(((-1.0)*r12*x1801))+(((-1.0)*sj0*x1799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1803.value)))+(x1804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1805=IKsin(j4);
IkReal x1806=IKcos(j4);
IkReal x1807=(cj1*cj2);
IkReal x1808=(cj5*r10);
IkReal x1809=(r01*sj5);
IkReal x1810=(cj5*r00);
IkReal x1811=(cj5*r20);
IkReal x1812=((1.0)*cj0);
IkReal x1813=(sj1*sj2);
IkReal x1814=((1.0)*x1806);
IkReal x1815=((1.0)*x1805);
IkReal x1816=(sj5*x1805);
evalcond[0]=((((-1.0)*x1811*x1815))+((r21*x1816))+(((-1.0)*r22*x1814)));
evalcond[1]=(sj0+(((-1.0)*r02*x1814))+(((-1.0)*x1810*x1815))+((x1805*x1809)));
evalcond[2]=((((-1.0)*x1812))+(((-1.0)*x1808*x1815))+(((-1.0)*r12*x1814))+((r11*x1816)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1814))+((cj1*sj2))+((x1806*x1811))+(((-1.0)*r22*x1815)));
evalcond[4]=((((-1.0)*x1812*x1813))+(((-1.0)*x1809*x1814))+((cj0*x1807))+(((-1.0)*r02*x1815))+((x1806*x1810)));
evalcond[5]=(((x1806*x1808))+((sj0*x1807))+(((-1.0)*r11*sj5*x1814))+(((-1.0)*r12*x1815))+(((-1.0)*sj0*x1813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1817=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1817.valid){
continue;
}
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1817.value)))+(x1818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1819=IKsin(j4);
IkReal x1820=IKcos(j4);
IkReal x1821=(cj1*cj2);
IkReal x1822=(cj5*r10);
IkReal x1823=(r01*sj5);
IkReal x1824=(cj5*r00);
IkReal x1825=(cj5*r20);
IkReal x1826=((1.0)*cj0);
IkReal x1827=(sj1*sj2);
IkReal x1828=((1.0)*x1820);
IkReal x1829=((1.0)*x1819);
IkReal x1830=(sj5*x1819);
evalcond[0]=((((-1.0)*x1825*x1829))+(((-1.0)*r22*x1828))+((r21*x1830)));
evalcond[1]=(sj0+((x1819*x1823))+(((-1.0)*r02*x1828))+(((-1.0)*x1824*x1829)));
evalcond[2]=((((-1.0)*x1826))+((r11*x1830))+(((-1.0)*r12*x1828))+(((-1.0)*x1822*x1829)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1829))+(((-1.0)*r21*sj5*x1828))+((x1820*x1825)));
evalcond[4]=(((cj0*x1821))+(((-1.0)*x1826*x1827))+(((-1.0)*x1823*x1828))+(((-1.0)*r02*x1829))+((x1820*x1824)));
evalcond[5]=((((-1.0)*r11*sj5*x1828))+(((-1.0)*sj0*x1827))+(((-1.0)*r12*x1829))+((sj0*x1821))+((x1820*x1822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1831=cj5*cj5;
IkReal x1832=r21*r21;
IkReal x1833=(cj2*sj1);
IkReal x1834=(cj1*sj2);
IkReal x1835=(r21*sj5);
IkReal x1836=((1.0)*cj5*r20);
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal((((r22*x1833))+((r22*x1834)))),IkReal(((((-1.0)*x1834*x1836))+(((-1.0)*x1833*x1836))+((x1833*x1835))+((x1834*x1835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x1831*x1832))+((x1831*(r20*r20)))+x1832+(((-2.0)*cj5*r20*x1835)))),-1);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1837.value)+(((1.5707963267949)*(x1838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1839=IKsin(j4);
IkReal x1840=IKcos(j4);
IkReal x1841=(r21*sj5);
IkReal x1842=(cj5*r20);
IkReal x1843=((1.0)*x1840);
IkReal x1844=((1.0)*x1839);
evalcond[0]=((((-1.0)*x1842*x1844))+(((-1.0)*r22*x1843))+((x1839*x1841)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x1841*x1843))+(((-1.0)*r22*x1844))+((cj1*sj2))+((x1840*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1845=(cj5*sj4);
IkReal x1846=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1846))+((r00*x1845))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1845))+((r11*x1846))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1846))+((r00*x1845))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1845))+((r11*x1846))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1846))+((r00*x1845))+((cj4*r02))), ((((-1.0)*r10*x1845))+((r11*x1846))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1847=IKcos(j0);
IkReal x1848=IKsin(j0);
IkReal x1849=(cj4*cj5);
IkReal x1850=((1.0)*sj1);
IkReal x1851=(r11*sj5);
IkReal x1852=((1.0)*cj5);
IkReal x1853=((1.0)*sj4);
IkReal x1854=((0.21325)*sj1);
IkReal x1855=((1.0)*sj5);
IkReal x1856=((0.24365)*cj1);
IkReal x1857=((0.08535)*cj5);
IkReal x1858=((1.0)*cj4);
IkReal x1859=((0.08535)*sj5);
IkReal x1860=(sj2*x1848);
IkReal x1861=(cj2*x1847);
IkReal x1862=(sj2*x1847);
IkReal x1863=(cj1*cj2*x1848);
evalcond[0]=((((-1.0)*r00*sj4*x1852))+((r01*sj4*sj5))+(((-1.0)*r02*x1858))+x1848);
evalcond[1]=((((-1.0)*r10*sj4*x1852))+((sj4*x1851))+(((-1.0)*r12*x1858))+(((-1.0)*x1847)));
evalcond[2]=(((cj1*x1862))+(((-1.0)*r01*x1852))+(((-1.0)*r00*x1855))+((sj1*x1861)));
evalcond[3]=(((cj1*x1860))+(((-1.0)*r11*x1852))+((cj2*sj1*x1848))+(((-1.0)*r10*x1855)));
evalcond[4]=(((cj1*x1861))+(((-1.0)*cj4*r01*x1855))+(((-1.0)*x1850*x1862))+((r00*x1849))+(((-1.0)*r02*x1853)));
evalcond[5]=((((-1.0)*x1850*x1860))+(((-1.0)*x1851*x1858))+((r10*x1849))+x1863+(((-1.0)*r12*x1853)));
evalcond[6]=((((-0.21325)*cj1*x1861))+(((0.11)*x1848))+(((-1.0)*r01*x1857))+(((-1.0)*px))+(((-1.0)*r00*x1859))+((x1854*x1862))+(((-1.0)*x1847*x1856)));
evalcond[7]=((((-1.0)*x1848*x1856))+(((-0.11)*x1847))+(((-1.0)*py))+(((-1.0)*r11*x1857))+((x1854*x1860))+(((-1.0)*r10*x1859))+(((-0.21325)*x1863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1864=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1864.value)))+(x1865.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1866=IKcos(j0);
IkReal x1867=IKsin(j0);
IkReal x1868=(cj5*r11);
IkReal x1869=((0.21325)*sj2);
IkReal x1870=((1.0)*sj5);
IkReal x1871=(cj5*r01);
IkReal x1872=((0.24365)*cj1);
IkReal x1873=((0.08535)*sj5);
IkReal x1874=(cj1*sj2);
IkReal x1875=((0.21325)*cj1*cj2);
IkReal x1876=(sj1*x1866);
IkReal x1877=(sj1*x1867);
evalcond[0]=(((x1866*x1874))+(((-1.0)*r00*x1870))+((cj2*x1876))+(((-1.0)*x1871)));
evalcond[1]=((((-1.0)*r10*x1870))+((cj2*x1877))+((x1867*x1874))+(((-1.0)*x1868)));
evalcond[2]=((((0.11)*x1867))+(((-1.0)*r00*x1873))+(((-1.0)*x1866*x1872))+(((-1.0)*x1866*x1875))+(((-1.0)*px))+(((-0.08535)*x1871))+((x1869*x1876)));
evalcond[3]=((((-1.0)*r10*x1873))+(((-1.0)*py))+(((-1.0)*x1867*x1872))+(((-1.0)*x1867*x1875))+(((-0.08535)*x1868))+((x1869*x1877))+(((-0.11)*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1878=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1878;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1879=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1879;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1880=((1.0)*cj5);
IkReal x1881=((((-1.0)*r21*x1880))+(((-1.0)*r20*sj5)));
j4eval[0]=x1881;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1880))+(((-1.0)*r10*sj0*x1880))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1882=((1.0)*cj5);
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1882))+(((-1.0)*r20*sj5)))),-1);
if(!x1883.valid){
continue;
}
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1882))+(((-1.0)*r10*sj0*x1882))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1883.value)))+(x1884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1885=IKsin(j4);
IkReal x1886=IKcos(j4);
IkReal x1887=(cj1*cj2);
IkReal x1888=(cj5*r10);
IkReal x1889=(r01*sj5);
IkReal x1890=(cj5*r00);
IkReal x1891=(cj5*r20);
IkReal x1892=((1.0)*cj0);
IkReal x1893=(sj1*sj2);
IkReal x1894=((1.0)*x1886);
IkReal x1895=((1.0)*x1885);
IkReal x1896=(sj5*x1885);
evalcond[0]=((((-1.0)*x1891*x1895))+(((-1.0)*r22*x1894))+((r21*x1896)));
evalcond[1]=((((-1.0)*r02*x1894))+sj0+(((-1.0)*x1890*x1895))+((x1885*x1889)));
evalcond[2]=(((r11*x1896))+(((-1.0)*x1888*x1895))+(((-1.0)*r12*x1894))+(((-1.0)*x1892)));
evalcond[3]=(((cj2*sj1))+((x1886*x1891))+((cj1*sj2))+(((-1.0)*r21*sj5*x1894))+(((-1.0)*r22*x1895)));
evalcond[4]=((((-1.0)*x1892*x1893))+(((-1.0)*r02*x1895))+((x1886*x1890))+(((-1.0)*x1889*x1894))+((cj0*x1887)));
evalcond[5]=((((-1.0)*sj0*x1893))+(((-1.0)*r12*x1895))+(((-1.0)*r11*sj5*x1894))+((x1886*x1888))+((sj0*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1897.value)))+(x1898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1899=IKsin(j4);
IkReal x1900=IKcos(j4);
IkReal x1901=(cj1*cj2);
IkReal x1902=(cj5*r10);
IkReal x1903=(r01*sj5);
IkReal x1904=(cj5*r00);
IkReal x1905=(cj5*r20);
IkReal x1906=((1.0)*cj0);
IkReal x1907=(sj1*sj2);
IkReal x1908=((1.0)*x1900);
IkReal x1909=((1.0)*x1899);
IkReal x1910=(sj5*x1899);
evalcond[0]=((((-1.0)*r22*x1908))+(((-1.0)*x1905*x1909))+((r21*x1910)));
evalcond[1]=(sj0+(((-1.0)*x1904*x1909))+((x1899*x1903))+(((-1.0)*r02*x1908)));
evalcond[2]=((((-1.0)*x1902*x1909))+((r11*x1910))+(((-1.0)*r12*x1908))+(((-1.0)*x1906)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1909))+((x1900*x1905))+(((-1.0)*r21*sj5*x1908)));
evalcond[4]=((((-1.0)*x1903*x1908))+((x1900*x1904))+((cj0*x1901))+(((-1.0)*x1906*x1907))+(((-1.0)*r02*x1909)));
evalcond[5]=((((-1.0)*r11*sj5*x1908))+((x1900*x1902))+(((-1.0)*sj0*x1907))+((sj0*x1901))+(((-1.0)*r12*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1911.valid){
continue;
}
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1911.value)))+(x1912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1913=IKsin(j4);
IkReal x1914=IKcos(j4);
IkReal x1915=(cj1*cj2);
IkReal x1916=(cj5*r10);
IkReal x1917=(r01*sj5);
IkReal x1918=(cj5*r00);
IkReal x1919=(cj5*r20);
IkReal x1920=((1.0)*cj0);
IkReal x1921=(sj1*sj2);
IkReal x1922=((1.0)*x1914);
IkReal x1923=((1.0)*x1913);
IkReal x1924=(sj5*x1913);
evalcond[0]=((((-1.0)*r22*x1922))+(((-1.0)*x1919*x1923))+((r21*x1924)));
evalcond[1]=(((x1913*x1917))+sj0+(((-1.0)*x1918*x1923))+(((-1.0)*r02*x1922)));
evalcond[2]=((((-1.0)*r12*x1922))+(((-1.0)*x1916*x1923))+(((-1.0)*x1920))+((r11*x1924)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1914*x1919))+(((-1.0)*r21*sj5*x1922))+(((-1.0)*r22*x1923)));
evalcond[4]=((((-1.0)*x1917*x1922))+((x1914*x1918))+(((-1.0)*r02*x1923))+((cj0*x1915))+(((-1.0)*x1920*x1921)));
evalcond[5]=((((-1.0)*r12*x1923))+((x1914*x1916))+(((-1.0)*r11*sj5*x1922))+((sj0*x1915))+(((-1.0)*sj0*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1925=cj2*cj2;
IkReal x1926=cj1*cj1;
IkReal x1927=((182.008875)*cj5);
IkReal x1928=(cj1*cj2);
IkReal x1929=(sj1*sj2);
IkReal x1930=(cj5*r11);
IkReal x1931=((2132.5)*py);
IkReal x1932=((182.008875)*sj5);
IkReal x1933=((207.955275)*cj1);
IkReal x1934=(cj5*r01);
IkReal x1935=(r00*sj5);
IkReal x1936=((2436.5)*cj1);
IkReal x1937=(r10*sj5);
IkReal x1938=((2132.5)*px);
CheckValue<IkReal> x1939 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1927*x1929))+(((-1.0)*r10*x1929*x1932))+(((-1100.0)*px))+((r10*x1928*x1932))+((x1930*x1933))+(((-93.885)*x1934))+(((-93.885)*x1935))+((py*x1936))+((r11*x1927*x1928))+(((-1.0)*x1929*x1931))+((x1933*x1937))+((x1928*x1931)))),IkReal(((((-1.0)*r00*x1929*x1932))+((px*x1936))+(((93.885)*x1937))+(((93.885)*x1930))+(((-1.0)*r01*x1927*x1929))+((r00*x1928*x1932))+(((-1.0)*x1929*x1938))+(((1100.0)*py))+((x1933*x1935))+((x1933*x1934))+((x1928*x1938))+((r01*x1927*x1928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1939.valid){
continue;
}
CheckValue<IkReal> x1940=IKPowWithIntegerCheck(IKsign(((-575.755625)+(((909.51125)*x1928*x1929))+(((454.755625)*x1925))+(((-138.8976)*x1926))+(((-1039.16725)*cj2*x1926))+(((-909.51125)*x1925*x1926))+(((1039.16725)*cj1*x1929)))),-1);
if(!x1940.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1939.value)+(((1.5707963267949)*(x1940.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1941=IKcos(j0);
IkReal x1942=IKsin(j0);
IkReal x1943=((0.24365)*cj1);
IkReal x1944=((0.08535)*sj5);
IkReal x1945=((0.08535)*cj5);
IkReal x1946=((0.21325)*sj1*sj2);
IkReal x1947=((0.21325)*cj1*cj2);
evalcond[0]=((((-1.0)*px))+((x1941*x1946))+(((-1.0)*r00*x1944))+(((-1.0)*r01*x1945))+(((-1.0)*x1941*x1943))+(((-1.0)*x1941*x1947))+(((0.11)*x1942)));
evalcond[1]=((((-1.0)*x1942*x1943))+(((-1.0)*x1942*x1947))+(((-0.11)*x1941))+(((-1.0)*py))+(((-1.0)*r11*x1945))+((x1942*x1946))+(((-1.0)*r10*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1948=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1948;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1949=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1949;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1950=((1.0)*cj5);
IkReal x1951=((((-1.0)*r21*x1950))+(((-1.0)*r20*sj5)));
j4eval[0]=x1951;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1950))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1950))))));
j4eval[2]=IKsign(x1951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1952=((-1.0)*r20);
IkReal x1954 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1954)==0){
continue;
}
IkReal x1953=pow(x1954,-0.5);
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1952),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1955.value));
IkReal gconst1=(r21*x1953);
IkReal gconst2=(x1952*x1953);
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1957=((-1.0)*r20);
IkReal x1958=x1953;
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1957),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
IkReal x1959=((-1.0)*(x1960.value));
sj5=gconst1;
cj5=gconst2;
j5=x1959;
IkReal gconst0=x1959;
IkReal gconst1=(r21*x1958);
IkReal gconst2=(x1957*x1958);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1961=((-1.0)*r20);
IkReal x1962=x1953;
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1961),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
IkReal x1963=((-1.0)*(x1964.value));
sj5=gconst1;
cj5=gconst2;
j5=x1963;
IkReal gconst0=x1963;
IkReal gconst1=(r21*x1962);
IkReal gconst2=(x1961*x1962);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1965=((-1.0)*r20);
IkReal x1966=x1953;
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1965),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
IkReal x1967=((-1.0)*(x1968.value));
sj5=gconst1;
cj5=gconst2;
j5=x1967;
IkReal gconst0=x1967;
IkReal gconst1=(r21*x1966);
IkReal gconst2=(x1965*x1966);
IkReal x1969=r22*r22;
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1969))),-1);
if(!x1973.valid){
continue;
}
IkReal x1970=x1973.value;
IkReal x1971=(sj3*x1970);
IkReal x1972=(((sj3*x1969))+((x1971*(r21*r21*r21*r21)))+((x1971*(r20*r20*r20*r20)))+(((2.0)*x1971*(r20*r20)*(r21*r21))));
j4eval[0]=x1972;
j4eval[1]=IKsign(x1972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1974=gconst1*gconst1;
IkReal x1975=r21*r21;
IkReal x1976=gconst2*gconst2;
IkReal x1977=r20*r20;
IkReal x1978=(gconst2*r20);
IkReal x1979=(cj1*cj2);
IkReal x1980=(sj1*sj2);
IkReal x1981=(gconst1*r21);
IkReal x1982=(cj3*gconst2);
IkReal x1983=(cj3*r20);
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1979))+((gconst1*r22*x1983))+((r22*x1980))+((r21*r22*x1982)))),IkReal((((r21*x1974*x1983))+(((-1.0)*r21*x1976*x1983))+((gconst1*x1975*x1982))+(((-1.0)*x1978*x1980))+((x1980*x1981))+(((-1.0)*x1979*x1981))+(((-1.0)*gconst1*x1977*x1982))+((x1978*x1979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x1976*x1977))+((sj3*x1974*x1975))+(((-2.0)*sj3*x1978*x1981)))),-1);
if(!x1985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1984.value)+(((1.5707963267949)*(x1985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1986=IKsin(j4);
IkReal x1987=IKcos(j4);
IkReal x1988=(gconst1*sj3);
IkReal x1989=(cj2*sj0);
IkReal x1990=(cj3*gconst1);
IkReal x1991=(sj1*sj2);
IkReal x1992=(cj3*gconst2);
IkReal x1993=(cj1*cj2);
IkReal x1994=(gconst2*sj3);
IkReal x1995=(cj2*sj1);
IkReal x1996=((1.0)*cj0);
IkReal x1997=(cj1*sj2);
IkReal x1998=((1.0)*x1987);
IkReal x1999=((1.0)*x1986);
IkReal x2000=(gconst1*x1986);
IkReal x2001=(cj3*x1986);
IkReal x2002=(x1987*x1994);
evalcond[0]=(((r21*x2000))+(((-1.0)*gconst2*r20*x1999))+(((-1.0)*r22*x1998)));
evalcond[1]=(sj0+((r01*x2000))+(((-1.0)*gconst2*r00*x1999))+(((-1.0)*r02*x1998)));
evalcond[2]=(((r11*x2000))+(((-1.0)*gconst2*r10*x1999))+(((-1.0)*x1996))+(((-1.0)*r12*x1998)));
evalcond[3]=(((r22*x2001))+((r21*x1994))+((r21*x1987*x1990))+(((-1.0)*r20*x1992*x1998))+x1995+x1997+((r20*x1988)));
evalcond[4]=(((r21*x1992))+(((-1.0)*r21*x1988*x1998))+((r20*x1990))+x1991+((r20*x2002))+(((-1.0)*r22*sj3*x1999))+(((-1.0)*x1993)));
evalcond[5]=(((cj0*x1995))+((cj0*x1997))+((r00*x2002))+(((-1.0)*r01*x1988*x1998))+(((-1.0)*r02*sj3*x1999))+((r00*x1990))+((r01*x1992)));
evalcond[6]=(((cj0*x1993))+(((-1.0)*r00*x1992*x1998))+((r01*x1987*x1990))+((r02*x2001))+((r00*x1988))+(((-1.0)*x1991*x1996))+((r01*x1994)));
evalcond[7]=(((sj0*x1997))+((r11*x1992))+((r10*x2002))+(((-1.0)*r11*x1988*x1998))+((r10*x1990))+((sj1*x1989))+(((-1.0)*r12*sj3*x1999)));
evalcond[8]=(((r11*x1987*x1990))+((r12*x2001))+((r11*x1994))+((r10*x1988))+((cj1*x1989))+(((-1.0)*sj0*x1991))+(((-1.0)*r10*x1992*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2003.valid){
continue;
}
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2003.value)))+(x2004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2005=IKsin(j4);
IkReal x2006=IKcos(j4);
IkReal x2007=(gconst1*sj3);
IkReal x2008=(cj2*sj0);
IkReal x2009=(cj3*gconst1);
IkReal x2010=(sj1*sj2);
IkReal x2011=(cj3*gconst2);
IkReal x2012=(cj1*cj2);
IkReal x2013=(gconst2*sj3);
IkReal x2014=(cj2*sj1);
IkReal x2015=((1.0)*cj0);
IkReal x2016=(cj1*sj2);
IkReal x2017=((1.0)*x2006);
IkReal x2018=((1.0)*x2005);
IkReal x2019=(gconst1*x2005);
IkReal x2020=(cj3*x2005);
IkReal x2021=(x2006*x2013);
evalcond[0]=((((-1.0)*gconst2*r20*x2018))+((r21*x2019))+(((-1.0)*r22*x2017)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x2018))+((r01*x2019))+(((-1.0)*r02*x2017)));
evalcond[2]=((((-1.0)*x2015))+(((-1.0)*r12*x2017))+(((-1.0)*gconst2*r10*x2018))+((r11*x2019)));
evalcond[3]=(((r22*x2020))+x2014+x2016+(((-1.0)*r20*x2011*x2017))+((r21*x2006*x2009))+((r20*x2007))+((r21*x2013)));
evalcond[4]=((((-1.0)*r22*sj3*x2018))+x2010+((r20*x2009))+((r21*x2011))+(((-1.0)*x2012))+((r20*x2021))+(((-1.0)*r21*x2007*x2017)));
evalcond[5]=(((r00*x2021))+(((-1.0)*r02*sj3*x2018))+((r00*x2009))+((r01*x2011))+(((-1.0)*r01*x2007*x2017))+((cj0*x2014))+((cj0*x2016)));
evalcond[6]=((((-1.0)*x2010*x2015))+((r00*x2007))+((r01*x2006*x2009))+((r01*x2013))+((r02*x2020))+((cj0*x2012))+(((-1.0)*r00*x2011*x2017)));
evalcond[7]=(((r10*x2021))+((sj0*x2016))+(((-1.0)*r12*sj3*x2018))+((r10*x2009))+((sj1*x2008))+(((-1.0)*r11*x2007*x2017))+((r11*x2011)));
evalcond[8]=((((-1.0)*sj0*x2010))+((r10*x2007))+((r11*x2006*x2009))+(((-1.0)*r10*x2011*x2017))+((r11*x2013))+((cj1*x2008))+((r12*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2022.valid){
continue;
}
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2022.value)))+(x2023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2024=IKsin(j4);
IkReal x2025=IKcos(j4);
IkReal x2026=(gconst1*sj3);
IkReal x2027=(cj2*sj0);
IkReal x2028=(cj3*gconst1);
IkReal x2029=(sj1*sj2);
IkReal x2030=(cj3*gconst2);
IkReal x2031=(cj1*cj2);
IkReal x2032=(gconst2*sj3);
IkReal x2033=(cj2*sj1);
IkReal x2034=((1.0)*cj0);
IkReal x2035=(cj1*sj2);
IkReal x2036=((1.0)*x2025);
IkReal x2037=((1.0)*x2024);
IkReal x2038=(gconst1*x2024);
IkReal x2039=(cj3*x2024);
IkReal x2040=(x2025*x2032);
evalcond[0]=(((r21*x2038))+(((-1.0)*r22*x2036))+(((-1.0)*gconst2*r20*x2037)));
evalcond[1]=(sj0+((r01*x2038))+(((-1.0)*gconst2*r00*x2037))+(((-1.0)*r02*x2036)));
evalcond[2]=((((-1.0)*gconst2*r10*x2037))+(((-1.0)*r12*x2036))+(((-1.0)*x2034))+((r11*x2038)));
evalcond[3]=(((r22*x2039))+((r21*x2032))+x2035+x2033+(((-1.0)*r20*x2030*x2036))+((r20*x2026))+((r21*x2025*x2028)));
evalcond[4]=((((-1.0)*r22*sj3*x2037))+((r21*x2030))+x2029+((r20*x2040))+(((-1.0)*x2031))+(((-1.0)*r21*x2026*x2036))+((r20*x2028)));
evalcond[5]=(((r00*x2028))+((r01*x2030))+(((-1.0)*r02*sj3*x2037))+((cj0*x2035))+((cj0*x2033))+(((-1.0)*r01*x2026*x2036))+((r00*x2040)));
evalcond[6]=(((r01*x2025*x2028))+((r00*x2026))+((r01*x2032))+((r02*x2039))+(((-1.0)*x2029*x2034))+((cj0*x2031))+(((-1.0)*r00*x2030*x2036)));
evalcond[7]=((((-1.0)*r12*sj3*x2037))+((r10*x2028))+(((-1.0)*r11*x2026*x2036))+((sj1*x2027))+((sj0*x2035))+((r10*x2040))+((r11*x2030)));
evalcond[8]=(((r10*x2026))+((r12*x2039))+((r11*x2025*x2028))+(((-1.0)*r10*x2030*x2036))+(((-1.0)*sj0*x2029))+((cj1*x2027))+((r11*x2032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2041=((-1.0)*r21);
IkReal x2043 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2043)==0){
continue;
}
IkReal x2042=pow(x2043,-0.5);
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal(x2041),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2044.value))));
IkReal gconst4=(x2041*x2042);
IkReal gconst5=((1.0)*r20*x2042);
CheckValue<IkReal> x2045 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2045.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2045.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2046=((-1.0)*r21);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(x2046),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
IkReal x2047=((1.0)*(x2049.value));
IkReal x2048=x2042;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2047)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2047)));
IkReal gconst4=(x2046*x2048);
IkReal gconst5=((1.0)*r20*x2048);
IkReal x2050=r22*r22;
IkReal x2051=((1.0)*x2050);
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(((-1.0)+x2050),-1);
if(!x2055.valid){
continue;
}
IkReal x2052=x2055.value;
if((((1.0)+(((-1.0)*x2051)))) < -0.00001)
continue;
IkReal x2053=IKsqrt(((1.0)+(((-1.0)*x2051))));
IkReal x2054=(sj0*x2052*x2053);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2054+(((-1.0)*x2051*x2054))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2056=((-1.0)*r21);
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(x2056),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
IkReal x2057=((1.0)*(x2059.value));
IkReal x2058=x2042;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2057)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2057)));
IkReal gconst4=(x2056*x2058);
IkReal gconst5=((1.0)*r20*x2058);
IkReal x2060=r22*r22;
IkReal x2061=((1.0)*x2060);
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(((-1.0)+x2060),-1);
if(!x2065.valid){
continue;
}
IkReal x2062=x2065.value;
if((((1.0)+(((-1.0)*x2061)))) < -0.00001)
continue;
IkReal x2063=IKsqrt(((1.0)+(((-1.0)*x2061))));
IkReal x2064=(cj0*x2062*x2063);
j4eval[0]=((IKabs((x2064+(((-1.0)*x2061*x2064)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2066=((-1.0)*r21);
CheckValue<IkReal> x2069 = IKatan2WithCheck(IkReal(x2066),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2069.valid){
continue;
}
IkReal x2067=((1.0)*(x2069.value));
IkReal x2068=x2042;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2067)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2067)));
IkReal gconst4=(x2066*x2068);
IkReal gconst5=((1.0)*r20*x2068);
IkReal x2070=r22*r22;
IkReal x2071=(cj0*r02);
IkReal x2072=(r12*sj0);
CheckValue<IkReal> x2076=IKPowWithIntegerCheck(((-1.0)+x2070),-1);
if(!x2076.valid){
continue;
}
IkReal x2073=x2076.value;
if((((1.0)+(((-1.0)*x2070)))) < -0.00001)
continue;
IkReal x2074=IKsqrt(((1.0)+(((-1.0)*x2070))));
IkReal x2075=((1.0)*r22*x2073*x2074);
j4eval[0]=0;
j4eval[1]=((IKabs((x2072+x2071)))+(IKabs(((((-1.0)*x2071*x2075))+(((-1.0)*x2072*x2075))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2077=((1.0)*gconst5);
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2077))+(((-1.0)*gconst4*r20)))),-1);
if(!x2078.valid){
continue;
}
CheckValue<IkReal> x2079 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2077))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x2077))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2078.value)))+(x2079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2080=IKsin(j4);
IkReal x2081=IKcos(j4);
IkReal x2082=(gconst4*r11);
IkReal x2083=(cj2*sj0);
IkReal x2084=(sj1*sj2);
IkReal x2085=(gconst4*sj3);
IkReal x2086=(gconst5*r10);
IkReal x2087=(cj1*cj2);
IkReal x2088=(gconst4*r01);
IkReal x2089=(cj2*sj1);
IkReal x2090=(gconst4*r21);
IkReal x2091=(gconst5*r00);
IkReal x2092=(gconst5*sj3);
IkReal x2093=(cj3*gconst5);
IkReal x2094=(cj3*gconst4);
IkReal x2095=(cj1*sj2);
IkReal x2096=((1.0)*cj0);
IkReal x2097=((1.0)*x2081);
IkReal x2098=((1.0)*x2080);
IkReal x2099=(cj3*x2080);
IkReal x2100=(cj3*x2081);
IkReal x2101=(x2081*x2092);
evalcond[0]=((((-1.0)*gconst5*r20*x2098))+((x2080*x2090))+(((-1.0)*r22*x2097)));
evalcond[1]=(sj0+(((-1.0)*x2091*x2098))+(((-1.0)*r02*x2097))+((x2080*x2088)));
evalcond[2]=((((-1.0)*x2096))+(((-1.0)*x2086*x2098))+(((-1.0)*r12*x2097))+((x2080*x2082)));
evalcond[3]=(x2095+x2089+((r20*x2085))+((r22*x2099))+(((-1.0)*r20*x2093*x2097))+((r21*x2092))+((x2090*x2100)));
evalcond[4]=(((r20*x2101))+((r20*x2094))+(((-1.0)*r22*sj3*x2098))+(((-1.0)*x2087))+x2084+((r21*x2093))+(((-1.0)*r21*x2085*x2097)));
evalcond[5]=((((-1.0)*r02*sj3*x2098))+((r01*x2093))+((r00*x2094))+((sj3*x2081*x2091))+((cj0*x2095))+((cj0*x2089))+(((-1.0)*r01*x2085*x2097)));
evalcond[6]=(((r01*x2092))+((x2088*x2100))+(((-1.0)*x2084*x2096))+((cj0*x2087))+((r02*x2099))+((r00*x2085))+(((-1.0)*cj3*x2091*x2097)));
evalcond[7]=(((sj0*x2095))+(((-1.0)*r12*sj3*x2098))+((sj1*x2083))+((r10*x2094))+((sj3*x2081*x2086))+(((-1.0)*sj3*x2082*x2097))+((r11*x2093)));
evalcond[8]=((((-1.0)*cj3*x2086*x2097))+(((-1.0)*sj0*x2084))+((cj1*x2083))+((x2082*x2100))+((r10*x2085))+((r12*x2099))+((r11*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2102.valid){
continue;
}
CheckValue<IkReal> x2103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2102.value)))+(x2103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2104=IKsin(j4);
IkReal x2105=IKcos(j4);
IkReal x2106=(gconst4*r11);
IkReal x2107=(cj2*sj0);
IkReal x2108=(sj1*sj2);
IkReal x2109=(gconst4*sj3);
IkReal x2110=(gconst5*r10);
IkReal x2111=(cj1*cj2);
IkReal x2112=(gconst4*r01);
IkReal x2113=(cj2*sj1);
IkReal x2114=(gconst4*r21);
IkReal x2115=(gconst5*r00);
IkReal x2116=(gconst5*sj3);
IkReal x2117=(cj3*gconst5);
IkReal x2118=(cj3*gconst4);
IkReal x2119=(cj1*sj2);
IkReal x2120=((1.0)*cj0);
IkReal x2121=((1.0)*x2105);
IkReal x2122=((1.0)*x2104);
IkReal x2123=(cj3*x2104);
IkReal x2124=(cj3*x2105);
IkReal x2125=(x2105*x2116);
evalcond[0]=((((-1.0)*r22*x2121))+(((-1.0)*gconst5*r20*x2122))+((x2104*x2114)));
evalcond[1]=(sj0+(((-1.0)*r02*x2121))+(((-1.0)*x2115*x2122))+((x2104*x2112)));
evalcond[2]=(((x2104*x2106))+(((-1.0)*x2120))+(((-1.0)*r12*x2121))+(((-1.0)*x2110*x2122)));
evalcond[3]=(((r20*x2109))+((r21*x2116))+((x2114*x2124))+x2119+x2113+((r22*x2123))+(((-1.0)*r20*x2117*x2121)));
evalcond[4]=(((r21*x2117))+((r20*x2125))+x2108+((r20*x2118))+(((-1.0)*r22*sj3*x2122))+(((-1.0)*r21*x2109*x2121))+(((-1.0)*x2111)));
evalcond[5]=(((r01*x2117))+((r00*x2118))+((cj0*x2119))+((cj0*x2113))+(((-1.0)*r02*sj3*x2122))+(((-1.0)*r01*x2109*x2121))+((sj3*x2105*x2115)));
evalcond[6]=((((-1.0)*x2108*x2120))+((r01*x2116))+((cj0*x2111))+((x2112*x2124))+((r02*x2123))+((r00*x2109))+(((-1.0)*cj3*x2115*x2121)));
evalcond[7]=((((-1.0)*r12*sj3*x2122))+((sj0*x2119))+((r10*x2118))+((sj1*x2107))+((sj3*x2105*x2110))+(((-1.0)*sj3*x2106*x2121))+((r11*x2117)));
evalcond[8]=((((-1.0)*sj0*x2108))+((r12*x2123))+((x2106*x2124))+((r10*x2109))+(((-1.0)*cj3*x2110*x2121))+((cj1*x2107))+((r11*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2126=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2126.value)))+(x2127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2128=IKsin(j4);
IkReal x2129=IKcos(j4);
IkReal x2130=(gconst4*r11);
IkReal x2131=(cj2*sj0);
IkReal x2132=(sj1*sj2);
IkReal x2133=(gconst4*sj3);
IkReal x2134=(gconst5*r10);
IkReal x2135=(cj1*cj2);
IkReal x2136=(gconst4*r01);
IkReal x2137=(cj2*sj1);
IkReal x2138=(gconst4*r21);
IkReal x2139=(gconst5*r00);
IkReal x2140=(gconst5*sj3);
IkReal x2141=(cj3*gconst5);
IkReal x2142=(cj3*gconst4);
IkReal x2143=(cj1*sj2);
IkReal x2144=((1.0)*cj0);
IkReal x2145=((1.0)*x2129);
IkReal x2146=((1.0)*x2128);
IkReal x2147=(cj3*x2128);
IkReal x2148=(cj3*x2129);
IkReal x2149=(x2129*x2140);
evalcond[0]=((((-1.0)*gconst5*r20*x2146))+((x2128*x2138))+(((-1.0)*r22*x2145)));
evalcond[1]=(sj0+(((-1.0)*r02*x2145))+((x2128*x2136))+(((-1.0)*x2139*x2146)));
evalcond[2]=((((-1.0)*x2144))+(((-1.0)*r12*x2145))+(((-1.0)*x2134*x2146))+((x2128*x2130)));
evalcond[3]=(((x2138*x2148))+x2137+x2143+(((-1.0)*r20*x2141*x2145))+((r21*x2140))+((r22*x2147))+((r20*x2133)));
evalcond[4]=(((r20*x2142))+((r20*x2149))+x2132+(((-1.0)*x2135))+((r21*x2141))+(((-1.0)*r21*x2133*x2145))+(((-1.0)*r22*sj3*x2146)));
evalcond[5]=(((sj3*x2129*x2139))+((cj0*x2137))+(((-1.0)*r01*x2133*x2145))+((cj0*x2143))+(((-1.0)*r02*sj3*x2146))+((r01*x2141))+((r00*x2142)));
evalcond[6]=(((cj0*x2135))+(((-1.0)*x2132*x2144))+((r02*x2147))+((r00*x2133))+(((-1.0)*cj3*x2139*x2145))+((r01*x2140))+((x2136*x2148)));
evalcond[7]=(((r11*x2141))+((sj3*x2129*x2134))+(((-1.0)*r12*sj3*x2146))+((sj0*x2143))+(((-1.0)*sj3*x2130*x2145))+((r10*x2142))+((sj1*x2131)));
evalcond[8]=(((r11*x2140))+(((-1.0)*sj0*x2132))+((x2130*x2148))+((r10*x2133))+(((-1.0)*cj3*x2134*x2145))+((cj1*x2131))+((r12*x2147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2151 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2151)==0){
continue;
}
IkReal x2150=pow(x2151,-0.5);
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2152.value));
IkReal gconst7=((-1.0)*r01*x2150);
IkReal gconst8=(r00*x2150);
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2153.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
IkReal x2154=((-1.0)*(x2156.value));
IkReal x2155=x2150;
sj5=gconst7;
cj5=gconst8;
j5=x2154;
IkReal gconst6=x2154;
IkReal gconst7=((-1.0)*r01*x2155);
IkReal gconst8=(r00*x2155);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2157=((1.0)*gconst8);
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x2157))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x2157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x2157)))),-1);
if(!x2159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2158.value)+(((1.5707963267949)*(x2159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2160=IKsin(j4);
IkReal x2161=IKcos(j4);
IkReal x2162=(gconst7*sj3);
IkReal x2163=(cj3*gconst8);
IkReal x2164=(cj2*sj0);
IkReal x2165=(cj3*gconst7);
IkReal x2166=(sj1*sj2);
IkReal x2167=(cj1*cj2);
IkReal x2168=(cj2*sj1);
IkReal x2169=((1.0)*cj0);
IkReal x2170=(gconst8*sj3);
IkReal x2171=(cj1*sj2);
IkReal x2172=((1.0)*x2161);
IkReal x2173=((1.0)*x2160);
IkReal x2174=(cj3*x2160);
IkReal x2175=(gconst7*x2160);
IkReal x2176=(x2161*x2170);
evalcond[0]=(((r21*x2175))+(((-1.0)*gconst8*r20*x2173))+(((-1.0)*r22*x2172)));
evalcond[1]=(((r01*x2175))+(((-1.0)*gconst8*r00*x2173))+sj0+(((-1.0)*r02*x2172)));
evalcond[2]=(((r11*x2175))+(((-1.0)*x2169))+(((-1.0)*gconst8*r10*x2173))+(((-1.0)*r12*x2172)));
evalcond[3]=((((-1.0)*r20*x2163*x2172))+((r22*x2174))+((r21*x2170))+x2171+x2168+((r20*x2162))+((r21*x2161*x2165)));
evalcond[4]=((((-1.0)*r21*x2162*x2172))+x2166+((r21*x2163))+((r20*x2165))+((r20*x2176))+(((-1.0)*r22*sj3*x2173))+(((-1.0)*x2167)));
evalcond[5]=(((r00*x2176))+(((-1.0)*r02*sj3*x2173))+(((-1.0)*r01*x2162*x2172))+((cj0*x2171))+((r00*x2165))+((r01*x2163))+((cj0*x2168)));
evalcond[6]=(((r01*x2170))+((r00*x2162))+(((-1.0)*r00*x2163*x2172))+((cj0*x2167))+(((-1.0)*x2166*x2169))+((r02*x2174))+((r01*x2161*x2165)));
evalcond[7]=(((sj1*x2164))+(((-1.0)*r12*sj3*x2173))+(((-1.0)*r11*x2162*x2172))+((r10*x2176))+((r10*x2165))+((r11*x2163))+((sj0*x2171)));
evalcond[8]=(((r11*x2170))+(((-1.0)*r10*x2163*x2172))+((r10*x2162))+((cj1*x2164))+((r11*x2161*x2165))+((r12*x2174))+(((-1.0)*sj0*x2166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2177 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2177.value)+(((1.5707963267949)*(x2178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2179=IKsin(j4);
IkReal x2180=IKcos(j4);
IkReal x2181=(gconst7*sj3);
IkReal x2182=(cj3*gconst8);
IkReal x2183=(cj2*sj0);
IkReal x2184=(cj3*gconst7);
IkReal x2185=(sj1*sj2);
IkReal x2186=(cj1*cj2);
IkReal x2187=(cj2*sj1);
IkReal x2188=((1.0)*cj0);
IkReal x2189=(gconst8*sj3);
IkReal x2190=(cj1*sj2);
IkReal x2191=((1.0)*x2180);
IkReal x2192=((1.0)*x2179);
IkReal x2193=(cj3*x2179);
IkReal x2194=(gconst7*x2179);
IkReal x2195=(x2180*x2189);
evalcond[0]=((((-1.0)*gconst8*r20*x2192))+((r21*x2194))+(((-1.0)*r22*x2191)));
evalcond[1]=(sj0+(((-1.0)*r02*x2191))+(((-1.0)*gconst8*r00*x2192))+((r01*x2194)));
evalcond[2]=((((-1.0)*gconst8*r10*x2192))+(((-1.0)*x2188))+((r11*x2194))+(((-1.0)*r12*x2191)));
evalcond[3]=(((r22*x2193))+x2190+x2187+((r20*x2181))+((r21*x2180*x2184))+((r21*x2189))+(((-1.0)*r20*x2182*x2191)));
evalcond[4]=((((-1.0)*r22*sj3*x2192))+x2185+(((-1.0)*x2186))+((r20*x2184))+((r20*x2195))+((r21*x2182))+(((-1.0)*r21*x2181*x2191)));
evalcond[5]=((((-1.0)*r02*sj3*x2192))+(((-1.0)*r01*x2181*x2191))+((cj0*x2187))+((cj0*x2190))+((r01*x2182))+((r00*x2195))+((r00*x2184)));
evalcond[6]=(((r01*x2180*x2184))+((cj0*x2186))+(((-1.0)*x2185*x2188))+(((-1.0)*r00*x2182*x2191))+((r02*x2193))+((r01*x2189))+((r00*x2181)));
evalcond[7]=((((-1.0)*r12*sj3*x2192))+(((-1.0)*r11*x2181*x2191))+((sj0*x2190))+((sj1*x2183))+((r11*x2182))+((r10*x2195))+((r10*x2184)));
evalcond[8]=((((-1.0)*r10*x2182*x2191))+((cj1*x2183))+((r11*x2180*x2184))+((r12*x2193))+((r11*x2189))+(((-1.0)*sj0*x2185))+((r10*x2181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2197 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2197)==0){
continue;
}
IkReal x2196=pow(x2197,-0.5);
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2198.value))));
IkReal gconst10=((1.0)*r01*x2196);
IkReal gconst11=((-1.0)*r00*x2196);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2199.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
IkReal x2200=((1.0)*(x2202.value));
IkReal x2201=x2196;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2200)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2200)));
IkReal gconst10=((1.0)*r01*x2201);
IkReal gconst11=((-1.0)*r00*x2201);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
IkReal x2203=((1.0)*(x2205.value));
IkReal x2204=x2196;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2203)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2203)));
IkReal gconst10=((1.0)*r01*x2204);
IkReal gconst11=((-1.0)*r00*x2204);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
IkReal x2206=((1.0)*(x2208.value));
IkReal x2207=x2196;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2206)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2206)));
IkReal gconst10=((1.0)*r01*x2207);
IkReal gconst11=((-1.0)*r00*x2207);
IkReal x2209=r02*r02;
IkReal x2210=(r12*sj0);
IkReal x2211=x2196;
IkReal x2212=(cj0*x2211);
j4eval[0]=((IKabs((x2210+((cj0*r02)))))+(IKabs(((((-1.0)*x2212))+((r02*x2210*x2211))+((x2209*x2212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2213=((1.0)*gconst11);
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x2213)))),-1);
if(!x2214.valid){
continue;
}
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2213))+(((-1.0)*r10*sj0*x2213))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2214.value)))+(x2215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2216=IKsin(j4);
IkReal x2217=IKcos(j4);
IkReal x2218=(gconst10*sj3);
IkReal x2219=(cj3*r10);
IkReal x2220=(gconst11*r20);
IkReal x2221=(gconst11*sj3);
IkReal x2222=(cj3*gconst11);
IkReal x2223=(sj1*sj2);
IkReal x2224=(cj1*cj2);
IkReal x2225=(cj2*sj1);
IkReal x2226=(cj1*sj2);
IkReal x2227=(cj3*gconst10);
IkReal x2228=((1.0)*cj0);
IkReal x2229=((1.0)*x2217);
IkReal x2230=((1.0)*x2216);
IkReal x2231=(cj3*x2216);
IkReal x2232=(gconst10*x2216);
IkReal x2233=(x2217*x2227);
evalcond[0]=((((-1.0)*x2220*x2230))+((r21*x2232))+(((-1.0)*r22*x2229)));
evalcond[1]=((((-1.0)*gconst11*r00*x2230))+sj0+(((-1.0)*r02*x2229))+((r01*x2232)));
evalcond[2]=((((-1.0)*r12*x2229))+(((-1.0)*x2228))+(((-1.0)*gconst11*r10*x2230))+((r11*x2232)));
evalcond[3]=(((r20*x2218))+x2226+x2225+(((-1.0)*cj3*x2220*x2229))+((r22*x2231))+((r21*x2233))+((r21*x2221)));
evalcond[4]=(x2223+(((-1.0)*r22*sj3*x2230))+((r21*x2222))+(((-1.0)*r21*x2218*x2229))+(((-1.0)*x2224))+((sj3*x2217*x2220))+((r20*x2227)));
evalcond[5]=(((cj0*x2226))+((cj0*x2225))+(((-1.0)*r02*sj3*x2230))+(((-1.0)*r01*x2218*x2229))+((r00*x2227))+((r00*x2217*x2221))+((r01*x2222)));
evalcond[6]=(((r00*x2218))+((r02*x2231))+((cj0*x2224))+(((-1.0)*x2223*x2228))+((r01*x2233))+((r01*x2221))+(((-1.0)*r00*x2222*x2229)));
evalcond[7]=(((gconst10*x2219))+((r10*x2217*x2221))+((sj0*x2225))+((sj0*x2226))+(((-1.0)*r11*x2218*x2229))+(((-1.0)*r12*sj3*x2230))+((r11*x2222)));
evalcond[8]=(((sj0*x2224))+(((-1.0)*sj0*x2223))+((r10*x2218))+(((-1.0)*gconst11*x2219*x2229))+((r11*x2221))+((r11*x2233))+((r12*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
CheckValue<IkReal> x2235=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2234.value)+(((1.5707963267949)*(x2235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2236=IKsin(j4);
IkReal x2237=IKcos(j4);
IkReal x2238=(gconst10*sj3);
IkReal x2239=(cj3*r10);
IkReal x2240=(gconst11*r20);
IkReal x2241=(gconst11*sj3);
IkReal x2242=(cj3*gconst11);
IkReal x2243=(sj1*sj2);
IkReal x2244=(cj1*cj2);
IkReal x2245=(cj2*sj1);
IkReal x2246=(cj1*sj2);
IkReal x2247=(cj3*gconst10);
IkReal x2248=((1.0)*cj0);
IkReal x2249=((1.0)*x2237);
IkReal x2250=((1.0)*x2236);
IkReal x2251=(cj3*x2236);
IkReal x2252=(gconst10*x2236);
IkReal x2253=(x2237*x2247);
evalcond[0]=((((-1.0)*r22*x2249))+(((-1.0)*x2240*x2250))+((r21*x2252)));
evalcond[1]=(sj0+(((-1.0)*r02*x2249))+(((-1.0)*gconst11*r00*x2250))+((r01*x2252)));
evalcond[2]=((((-1.0)*gconst11*r10*x2250))+(((-1.0)*x2248))+(((-1.0)*r12*x2249))+((r11*x2252)));
evalcond[3]=(x2245+x2246+((r20*x2238))+((r21*x2241))+((r22*x2251))+(((-1.0)*cj3*x2240*x2249))+((r21*x2253)));
evalcond[4]=(x2243+(((-1.0)*x2244))+((r20*x2247))+((r21*x2242))+((sj3*x2237*x2240))+(((-1.0)*r22*sj3*x2250))+(((-1.0)*r21*x2238*x2249)));
evalcond[5]=(((r00*x2237*x2241))+(((-1.0)*r02*sj3*x2250))+((r01*x2242))+((r00*x2247))+(((-1.0)*r01*x2238*x2249))+((cj0*x2246))+((cj0*x2245)));
evalcond[6]=((((-1.0)*r00*x2242*x2249))+((r01*x2241))+(((-1.0)*x2243*x2248))+((r01*x2253))+((r00*x2238))+((r02*x2251))+((cj0*x2244)));
evalcond[7]=(((r11*x2242))+((r10*x2237*x2241))+(((-1.0)*r12*sj3*x2250))+((gconst10*x2239))+((sj0*x2246))+((sj0*x2245))+(((-1.0)*r11*x2238*x2249)));
evalcond[8]=(((r11*x2241))+((r12*x2251))+((r10*x2238))+((sj0*x2244))+(((-1.0)*sj0*x2243))+(((-1.0)*gconst11*x2239*x2249))+((r11*x2253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2254.valid){
continue;
}
CheckValue<IkReal> x2255 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2254.value)))+(x2255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2256=IKsin(j4);
IkReal x2257=IKcos(j4);
IkReal x2258=(gconst10*sj3);
IkReal x2259=(cj3*r10);
IkReal x2260=(gconst11*r20);
IkReal x2261=(gconst11*sj3);
IkReal x2262=(cj3*gconst11);
IkReal x2263=(sj1*sj2);
IkReal x2264=(cj1*cj2);
IkReal x2265=(cj2*sj1);
IkReal x2266=(cj1*sj2);
IkReal x2267=(cj3*gconst10);
IkReal x2268=((1.0)*cj0);
IkReal x2269=((1.0)*x2257);
IkReal x2270=((1.0)*x2256);
IkReal x2271=(cj3*x2256);
IkReal x2272=(gconst10*x2256);
IkReal x2273=(x2257*x2267);
evalcond[0]=(((r21*x2272))+(((-1.0)*x2260*x2270))+(((-1.0)*r22*x2269)));
evalcond[1]=(((r01*x2272))+sj0+(((-1.0)*r02*x2269))+(((-1.0)*gconst11*r00*x2270)));
evalcond[2]=(((r11*x2272))+(((-1.0)*gconst11*r10*x2270))+(((-1.0)*x2268))+(((-1.0)*r12*x2269)));
evalcond[3]=(((r21*x2273))+x2266+x2265+((r21*x2261))+((r22*x2271))+((r20*x2258))+(((-1.0)*cj3*x2260*x2269)));
evalcond[4]=(x2263+((r21*x2262))+(((-1.0)*r21*x2258*x2269))+((sj3*x2257*x2260))+(((-1.0)*r22*sj3*x2270))+((r20*x2267))+(((-1.0)*x2264)));
evalcond[5]=(((r00*x2267))+((r01*x2262))+((r00*x2257*x2261))+(((-1.0)*r01*x2258*x2269))+(((-1.0)*r02*sj3*x2270))+((cj0*x2266))+((cj0*x2265)));
evalcond[6]=(((r01*x2273))+((r01*x2261))+(((-1.0)*x2263*x2268))+((cj0*x2264))+((r02*x2271))+(((-1.0)*r00*x2262*x2269))+((r00*x2258)));
evalcond[7]=(((sj0*x2266))+((sj0*x2265))+(((-1.0)*r11*x2258*x2269))+((r11*x2262))+(((-1.0)*r12*sj3*x2270))+((gconst10*x2259))+((r10*x2257*x2261)));
evalcond[8]=(((r10*x2258))+((sj0*x2264))+(((-1.0)*gconst11*x2259*x2269))+(((-1.0)*sj0*x2263))+((r11*x2261))+((r11*x2273))+((r12*x2271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2274=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2274;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2275=((1.0)*cj5);
IkReal x2276=((((-1.0)*r21*x2275))+(((-1.0)*r20*sj5)));
j4eval[0]=x2276;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2275))))));
j4eval[2]=IKsign(x2276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2277=cj5*cj5;
IkReal x2278=(cj3*r01);
IkReal x2279=(cj5*sj5);
IkReal x2280=((1.0)*cj3);
IkReal x2281=((((-1.0)*r00*r20*x2277*x2280))+((cj3*r00*r21*x2279))+((r21*x2277*x2278))+((r20*x2278*x2279))+(((-1.0)*r21*x2278))+(((-1.0)*r02*r22*x2280)));
j4eval[0]=x2281;
j4eval[1]=IKsign(x2281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2282=cj5*cj5;
IkReal x2283=(cj3*r20);
IkReal x2284=(r21*sj3);
IkReal x2285=((1.0)*cj3);
IkReal x2286=(r01*r21);
IkReal x2287=(r01*sj3);
IkReal x2288=(r00*sj5);
IkReal x2289=(cj5*r01*sj5);
IkReal x2290=((1.0)*x2282);
CheckValue<IkReal> x2291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2283*x2290))+((x2283*x2289))+(((-1.0)*x2285*x2286))+(((-1.0)*r02*r22*x2285))+((cj3*x2282*x2286))+((cj3*cj5*r21*x2288)))),-1);
if(!x2291.valid){
continue;
}
CheckValue<IkReal> x2292 = IKatan2WithCheck(IkReal((((r22*sj3*x2288))+((cj5*r22*x2287)))),IkReal(((((-1.0)*r20*x2287*x2290))+((r00*x2284))+(((-1.0)*cj5*r20*sj3*x2288))+(((-1.0)*r00*x2284*x2290))+((x2284*x2289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2291.value)))+(x2292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2293=IKsin(j4);
IkReal x2294=IKcos(j4);
IkReal x2295=(cj2*sj1);
IkReal x2296=(cj1*sj2);
IkReal x2297=(r11*sj5);
IkReal x2298=(cj5*r10);
IkReal x2299=(sj1*sj2);
IkReal x2300=(cj5*r01);
IkReal x2301=(cj5*r00);
IkReal x2302=(cj3*sj5);
IkReal x2303=(r21*sj5);
IkReal x2304=(cj1*cj2);
IkReal x2305=(cj5*sj3);
IkReal x2306=(sj3*sj5);
IkReal x2307=(r01*sj5);
IkReal x2308=(cj3*cj5);
IkReal x2309=(cj5*r20);
IkReal x2310=((1.0)*x2294);
IkReal x2311=((1.0)*x2293);
IkReal x2312=(cj3*x2294);
IkReal x2313=(sj3*x2294);
IkReal x2314=(cj3*x2293);
IkReal x2315=(x2296+x2295);
evalcond[0]=((((-1.0)*r22*x2310))+((x2293*x2303))+(((-1.0)*x2309*x2311)));
evalcond[1]=((((-1.0)*x2298*x2311))+(((-1.0)*r12*x2310))+((x2293*x2297)));
evalcond[2]=((1.0)+((x2293*x2307))+(((-1.0)*r02*x2310))+(((-1.0)*x2301*x2311)));
evalcond[3]=((((-1.0)*cj3*x2301*x2310))+((sj3*x2300))+((r00*x2306))+((r01*x2294*x2302))+((r02*x2314)));
evalcond[4]=((((-1.0)*r01*x2306*x2310))+((x2301*x2313))+((r00*x2302))+(((-1.0)*r02*sj3*x2311))+((cj3*x2300)));
evalcond[5]=(x2315+((r20*x2306))+((r22*x2314))+(((-1.0)*r20*x2308*x2310))+((r21*x2294*x2302))+((r21*x2305)));
evalcond[6]=((((-1.0)*r12*sj3*x2311))+((r11*x2308))+((r10*x2302))+x2315+(((-1.0)*sj3*x2297*x2310))+((x2298*x2313)));
evalcond[7]=(((r11*x2305))+((r10*x2306))+x2304+(((-1.0)*x2299))+((r12*x2314))+(((-1.0)*cj3*x2298*x2310))+((x2297*x2312)));
evalcond[8]=((((-1.0)*x2304))+x2299+((r20*x2302))+((r20*x2294*x2305))+(((-1.0)*r22*sj3*x2311))+(((-1.0)*sj3*x2303*x2310))+((r21*x2308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2316=((1.0)*cj5);
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2316))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2316))+(((-1.0)*r20*sj5)))),-1);
if(!x2318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2317.value)+(((1.5707963267949)*(x2318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2319=IKsin(j4);
IkReal x2320=IKcos(j4);
IkReal x2321=(cj2*sj1);
IkReal x2322=(cj1*sj2);
IkReal x2323=(r11*sj5);
IkReal x2324=(cj5*r10);
IkReal x2325=(sj1*sj2);
IkReal x2326=(cj5*r01);
IkReal x2327=(cj5*r00);
IkReal x2328=(cj3*sj5);
IkReal x2329=(r21*sj5);
IkReal x2330=(cj1*cj2);
IkReal x2331=(cj5*sj3);
IkReal x2332=(sj3*sj5);
IkReal x2333=(r01*sj5);
IkReal x2334=(cj3*cj5);
IkReal x2335=(cj5*r20);
IkReal x2336=((1.0)*x2320);
IkReal x2337=((1.0)*x2319);
IkReal x2338=(cj3*x2320);
IkReal x2339=(sj3*x2320);
IkReal x2340=(cj3*x2319);
IkReal x2341=(x2322+x2321);
evalcond[0]=(((x2319*x2329))+(((-1.0)*r22*x2336))+(((-1.0)*x2335*x2337)));
evalcond[1]=(((x2319*x2323))+(((-1.0)*r12*x2336))+(((-1.0)*x2324*x2337)));
evalcond[2]=((1.0)+((x2319*x2333))+(((-1.0)*r02*x2336))+(((-1.0)*x2327*x2337)));
evalcond[3]=(((sj3*x2326))+(((-1.0)*cj3*x2327*x2336))+((r00*x2332))+((r02*x2340))+((r01*x2320*x2328)));
evalcond[4]=(((cj3*x2326))+(((-1.0)*r01*x2332*x2336))+((x2327*x2339))+((r00*x2328))+(((-1.0)*r02*sj3*x2337)));
evalcond[5]=(((r21*x2331))+x2341+((r22*x2340))+((r21*x2320*x2328))+(((-1.0)*r20*x2334*x2336))+((r20*x2332)));
evalcond[6]=(((r10*x2328))+(((-1.0)*sj3*x2323*x2336))+x2341+((r11*x2334))+((x2324*x2339))+(((-1.0)*r12*sj3*x2337)));
evalcond[7]=(x2330+(((-1.0)*cj3*x2324*x2336))+((r12*x2340))+((r11*x2331))+((x2323*x2338))+((r10*x2332))+(((-1.0)*x2325)));
evalcond[8]=(((r20*x2320*x2331))+((r21*x2334))+(((-1.0)*sj3*x2329*x2336))+x2325+(((-1.0)*r22*sj3*x2337))+((r20*x2328))+(((-1.0)*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2342 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2342.valid){
continue;
}
CheckValue<IkReal> x2343=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2342.value)+(((1.5707963267949)*(x2343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2344=IKsin(j4);
IkReal x2345=IKcos(j4);
IkReal x2346=(cj2*sj1);
IkReal x2347=(cj1*sj2);
IkReal x2348=(r11*sj5);
IkReal x2349=(cj5*r10);
IkReal x2350=(sj1*sj2);
IkReal x2351=(cj5*r01);
IkReal x2352=(cj5*r00);
IkReal x2353=(cj3*sj5);
IkReal x2354=(r21*sj5);
IkReal x2355=(cj1*cj2);
IkReal x2356=(cj5*sj3);
IkReal x2357=(sj3*sj5);
IkReal x2358=(r01*sj5);
IkReal x2359=(cj3*cj5);
IkReal x2360=(cj5*r20);
IkReal x2361=((1.0)*x2345);
IkReal x2362=((1.0)*x2344);
IkReal x2363=(cj3*x2345);
IkReal x2364=(sj3*x2345);
IkReal x2365=(cj3*x2344);
IkReal x2366=(x2347+x2346);
evalcond[0]=(((x2344*x2354))+(((-1.0)*x2360*x2362))+(((-1.0)*r22*x2361)));
evalcond[1]=((((-1.0)*x2349*x2362))+((x2344*x2348))+(((-1.0)*r12*x2361)));
evalcond[2]=((1.0)+((x2344*x2358))+(((-1.0)*r02*x2361))+(((-1.0)*x2352*x2362)));
evalcond[3]=(((r00*x2357))+((r02*x2365))+((r01*x2345*x2353))+((sj3*x2351))+(((-1.0)*cj3*x2352*x2361)));
evalcond[4]=((((-1.0)*r01*x2357*x2361))+((r00*x2353))+((cj3*x2351))+(((-1.0)*r02*sj3*x2362))+((x2352*x2364)));
evalcond[5]=(x2366+((r21*x2345*x2353))+((r22*x2365))+(((-1.0)*r20*x2359*x2361))+((r20*x2357))+((r21*x2356)));
evalcond[6]=((((-1.0)*sj3*x2348*x2361))+((r10*x2353))+x2366+(((-1.0)*r12*sj3*x2362))+((r11*x2359))+((x2349*x2364)));
evalcond[7]=((((-1.0)*cj3*x2349*x2361))+((r12*x2365))+((r10*x2357))+x2355+(((-1.0)*x2350))+((r11*x2356))+((x2348*x2363)));
evalcond[8]=((((-1.0)*sj3*x2354*x2361))+(((-1.0)*r22*sj3*x2362))+x2350+(((-1.0)*x2355))+((r20*x2353))+((r21*x2359))+((r20*x2345*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2367=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2367;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2368=((1.0)*cj5);
IkReal x2369=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2368)));
j4eval[0]=x2369;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2368))))));
j4eval[2]=IKsign(x2369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2370=cj5*cj5;
IkReal x2371=(cj3*r01);
IkReal x2372=(cj5*sj5);
IkReal x2373=((1.0)*cj3);
IkReal x2374=(((cj3*r00*r21*x2372))+((r20*x2371*x2372))+(((-1.0)*r21*x2371))+(((-1.0)*r00*r20*x2370*x2373))+(((-1.0)*r02*r22*x2373))+((r21*x2370*x2371)));
j4eval[0]=x2374;
j4eval[1]=IKsign(x2374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2375=cj5*cj5;
IkReal x2376=(cj3*r20);
IkReal x2377=(r21*sj3);
IkReal x2378=((1.0)*cj3);
IkReal x2379=(r01*r21);
IkReal x2380=(r01*sj3);
IkReal x2381=(r00*sj5);
IkReal x2382=(cj5*r01*sj5);
IkReal x2383=((1.0)*x2375);
CheckValue<IkReal> x2384 = IKatan2WithCheck(IkReal((((cj5*r22*x2380))+((r22*sj3*x2381)))),IkReal(((((-1.0)*cj5*r20*sj3*x2381))+(((-1.0)*r20*x2380*x2383))+(((-1.0)*r00*x2377*x2383))+((r00*x2377))+((x2377*x2382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2384.valid){
continue;
}
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(IKsign((((x2376*x2382))+(((-1.0)*r02*r22*x2378))+(((-1.0)*x2378*x2379))+((cj3*cj5*r21*x2381))+((cj3*x2375*x2379))+(((-1.0)*r00*x2376*x2383)))),-1);
if(!x2385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2384.value)+(((1.5707963267949)*(x2385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2386=IKsin(j4);
IkReal x2387=IKcos(j4);
IkReal x2388=(sj1*sj2);
IkReal x2389=(r11*sj5);
IkReal x2390=(cj5*r10);
IkReal x2391=(cj5*r01);
IkReal x2392=(cj5*r00);
IkReal x2393=((1.0)*cj1);
IkReal x2394=(cj3*sj5);
IkReal x2395=(r21*sj5);
IkReal x2396=(cj5*sj3);
IkReal x2397=(sj3*sj5);
IkReal x2398=(cj2*sj1);
IkReal x2399=(r01*sj5);
IkReal x2400=(cj3*cj5);
IkReal x2401=(cj5*r20);
IkReal x2402=(cj2*x2393);
IkReal x2403=((1.0)*x2387);
IkReal x2404=((1.0)*x2386);
IkReal x2405=(cj3*x2387);
IkReal x2406=(sj3*x2387);
IkReal x2407=(cj3*x2386);
evalcond[0]=((((-1.0)*x2401*x2404))+((x2386*x2395))+(((-1.0)*r22*x2403)));
evalcond[1]=((((-1.0)*x2390*x2404))+(((-1.0)*r12*x2403))+((x2386*x2389)));
evalcond[2]=((-1.0)+(((-1.0)*x2392*x2404))+(((-1.0)*r02*x2403))+((x2386*x2399)));
evalcond[3]=(((r00*x2397))+(((-1.0)*cj3*x2392*x2403))+((r02*x2407))+((sj3*x2391))+((r01*x2387*x2394)));
evalcond[4]=((((-1.0)*r02*sj3*x2404))+((r00*x2394))+((cj3*x2391))+(((-1.0)*r01*x2397*x2403))+((x2392*x2406)));
evalcond[5]=((((-1.0)*r20*x2400*x2403))+x2398+((cj1*sj2))+((r20*x2397))+((r22*x2407))+((r21*x2387*x2394))+((r21*x2396)));
evalcond[6]=((((-1.0)*x2402))+x2388+((r12*x2407))+((r10*x2397))+(((-1.0)*cj3*x2390*x2403))+((r11*x2396))+((x2389*x2405)));
evalcond[7]=(((r20*x2387*x2396))+(((-1.0)*x2402))+x2388+(((-1.0)*sj3*x2395*x2403))+((r20*x2394))+((r21*x2400))+(((-1.0)*r22*sj3*x2404)));
evalcond[8]=((((-1.0)*sj2*x2393))+(((-1.0)*sj3*x2389*x2403))+((r11*x2400))+((x2390*x2406))+(((-1.0)*r12*sj3*x2404))+(((-1.0)*x2398))+((r10*x2394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2408=((1.0)*cj5);
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2408)))),-1);
if(!x2409.valid){
continue;
}
CheckValue<IkReal> x2410 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2409.value)))+(x2410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2411=IKsin(j4);
IkReal x2412=IKcos(j4);
IkReal x2413=(sj1*sj2);
IkReal x2414=(r11*sj5);
IkReal x2415=(cj5*r10);
IkReal x2416=(cj5*r01);
IkReal x2417=(cj5*r00);
IkReal x2418=((1.0)*cj1);
IkReal x2419=(cj3*sj5);
IkReal x2420=(r21*sj5);
IkReal x2421=(cj5*sj3);
IkReal x2422=(sj3*sj5);
IkReal x2423=(cj2*sj1);
IkReal x2424=(r01*sj5);
IkReal x2425=(cj3*cj5);
IkReal x2426=(cj5*r20);
IkReal x2427=(cj2*x2418);
IkReal x2428=((1.0)*x2412);
IkReal x2429=((1.0)*x2411);
IkReal x2430=(cj3*x2412);
IkReal x2431=(sj3*x2412);
IkReal x2432=(cj3*x2411);
evalcond[0]=((((-1.0)*r22*x2428))+((x2411*x2420))+(((-1.0)*x2426*x2429)));
evalcond[1]=((((-1.0)*r12*x2428))+((x2411*x2414))+(((-1.0)*x2415*x2429)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2428))+((x2411*x2424))+(((-1.0)*x2417*x2429)));
evalcond[3]=(((r02*x2432))+((r00*x2422))+(((-1.0)*cj3*x2417*x2428))+((r01*x2412*x2419))+((sj3*x2416)));
evalcond[4]=((((-1.0)*r02*sj3*x2429))+((r00*x2419))+((cj3*x2416))+(((-1.0)*r01*x2422*x2428))+((x2417*x2431)));
evalcond[5]=(x2423+((r21*x2421))+((cj1*sj2))+(((-1.0)*r20*x2425*x2428))+((r22*x2432))+((r21*x2412*x2419))+((r20*x2422)));
evalcond[6]=(x2413+((r12*x2432))+((r10*x2422))+((r11*x2421))+(((-1.0)*x2427))+((x2414*x2430))+(((-1.0)*cj3*x2415*x2428)));
evalcond[7]=(x2413+((r21*x2425))+(((-1.0)*sj3*x2420*x2428))+((r20*x2412*x2421))+(((-1.0)*r22*sj3*x2429))+((r20*x2419))+(((-1.0)*x2427)));
evalcond[8]=(((r10*x2419))+(((-1.0)*r12*sj3*x2429))+((r11*x2425))+(((-1.0)*x2423))+(((-1.0)*sj3*x2414*x2428))+((x2415*x2431))+(((-1.0)*sj2*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2433.value)))+(x2434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2435=IKsin(j4);
IkReal x2436=IKcos(j4);
IkReal x2437=(sj1*sj2);
IkReal x2438=(r11*sj5);
IkReal x2439=(cj5*r10);
IkReal x2440=(cj5*r01);
IkReal x2441=(cj5*r00);
IkReal x2442=((1.0)*cj1);
IkReal x2443=(cj3*sj5);
IkReal x2444=(r21*sj5);
IkReal x2445=(cj5*sj3);
IkReal x2446=(sj3*sj5);
IkReal x2447=(cj2*sj1);
IkReal x2448=(r01*sj5);
IkReal x2449=(cj3*cj5);
IkReal x2450=(cj5*r20);
IkReal x2451=(cj2*x2442);
IkReal x2452=((1.0)*x2436);
IkReal x2453=((1.0)*x2435);
IkReal x2454=(cj3*x2436);
IkReal x2455=(sj3*x2436);
IkReal x2456=(cj3*x2435);
evalcond[0]=((((-1.0)*x2450*x2453))+(((-1.0)*r22*x2452))+((x2435*x2444)));
evalcond[1]=(((x2435*x2438))+(((-1.0)*x2439*x2453))+(((-1.0)*r12*x2452)));
evalcond[2]=((-1.0)+(((-1.0)*x2441*x2453))+(((-1.0)*r02*x2452))+((x2435*x2448)));
evalcond[3]=(((r02*x2456))+((sj3*x2440))+((r00*x2446))+((r01*x2436*x2443))+(((-1.0)*cj3*x2441*x2452)));
evalcond[4]=((((-1.0)*r02*sj3*x2453))+((r00*x2443))+(((-1.0)*r01*x2446*x2452))+((x2441*x2455))+((cj3*x2440)));
evalcond[5]=(x2447+((r22*x2456))+((cj1*sj2))+(((-1.0)*r20*x2449*x2452))+((r21*x2436*x2443))+((r20*x2446))+((r21*x2445)));
evalcond[6]=(x2437+((r10*x2446))+((r12*x2456))+(((-1.0)*cj3*x2439*x2452))+(((-1.0)*x2451))+((r11*x2445))+((x2438*x2454)));
evalcond[7]=(x2437+(((-1.0)*sj3*x2444*x2452))+(((-1.0)*r22*sj3*x2453))+((r20*x2436*x2445))+(((-1.0)*x2451))+((r20*x2443))+((r21*x2449)));
evalcond[8]=(((r10*x2443))+(((-1.0)*sj3*x2438*x2452))+(((-1.0)*x2447))+(((-1.0)*r12*sj3*x2453))+((r11*x2449))+((x2439*x2455))+(((-1.0)*sj2*x2442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2458 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2458)==0){
continue;
}
IkReal x2457=pow(x2458,-0.5);
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2459.value));
IkReal gconst13=((-1.0)*r11*x2457);
IkReal gconst14=(r10*x2457);
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2460.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2463 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2463.valid){
continue;
}
IkReal x2461=((-1.0)*(x2463.value));
IkReal x2462=x2457;
sj5=gconst13;
cj5=gconst14;
j5=x2461;
IkReal gconst12=x2461;
IkReal gconst13=((-1.0)*r11*x2462);
IkReal gconst14=(r10*x2462);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2464=((1.0)*gconst14);
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2464))+((cj0*gconst13*r01))+(((-1.0)*cj0*r00*x2464))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x2464)))),-1);
if(!x2466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2465.value)+(((1.5707963267949)*(x2466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2467=IKsin(j4);
IkReal x2468=IKcos(j4);
IkReal x2469=((1.0)*r22);
IkReal x2470=((1.0)*r12);
IkReal x2471=(cj2*sj0);
IkReal x2472=(gconst13*sj3);
IkReal x2473=(gconst13*r01);
IkReal x2474=(sj1*sj2);
IkReal x2475=(gconst14*sj3);
IkReal x2476=(cj1*cj2);
IkReal x2477=((1.0)*gconst14);
IkReal x2478=(cj3*gconst13);
IkReal x2479=(cj3*gconst14);
IkReal x2480=(cj2*sj1);
IkReal x2481=((1.0)*r02);
IkReal x2482=(cj1*sj2);
IkReal x2483=((1.0)*cj0);
IkReal x2484=(sj3*x2467);
IkReal x2485=(cj3*x2468);
IkReal x2486=(cj3*x2467);
IkReal x2487=(gconst13*x2467);
IkReal x2488=((1.0)*x2468);
evalcond[0]=((((-1.0)*r20*x2467*x2477))+(((-1.0)*x2468*x2469))+((r21*x2487)));
evalcond[1]=(sj0+(((-1.0)*r00*x2467*x2477))+(((-1.0)*x2468*x2481))+((x2467*x2473)));
evalcond[2]=((((-1.0)*x2483))+((r11*x2487))+(((-1.0)*r10*x2467*x2477))+(((-1.0)*x2468*x2470)));
evalcond[3]=(x2482+x2480+((r22*x2486))+((r21*x2475))+((r20*x2472))+((r21*x2468*x2478))+(((-1.0)*r20*x2477*x2485)));
evalcond[4]=(x2474+(((-1.0)*x2469*x2484))+((r21*x2479))+(((-1.0)*x2476))+((r20*x2468*x2475))+(((-1.0)*r21*x2472*x2488))+((r20*x2478)));
evalcond[5]=(((r00*x2468*x2475))+((r01*x2479))+((r00*x2478))+(((-1.0)*r01*x2472*x2488))+(((-1.0)*x2481*x2484))+((cj0*x2482))+((cj0*x2480)));
evalcond[6]=((((-1.0)*r00*x2477*x2485))+((r02*x2486))+((x2473*x2485))+((r01*x2475))+((r00*x2472))+((cj0*x2476))+(((-1.0)*x2474*x2483)));
evalcond[7]=(((sj0*x2482))+(((-1.0)*r11*x2472*x2488))+((r10*x2478))+((sj1*x2471))+((r10*x2468*x2475))+(((-1.0)*x2470*x2484))+((r11*x2479)));
evalcond[8]=((((-1.0)*sj0*x2474))+((r11*x2468*x2478))+((r10*x2472))+((r12*x2486))+(((-1.0)*r10*x2477*x2485))+((cj1*x2471))+((r11*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2489 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2489.valid){
continue;
}
CheckValue<IkReal> x2490=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2489.value)+(((1.5707963267949)*(x2490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2491=IKsin(j4);
IkReal x2492=IKcos(j4);
IkReal x2493=((1.0)*r22);
IkReal x2494=((1.0)*r12);
IkReal x2495=(cj2*sj0);
IkReal x2496=(gconst13*sj3);
IkReal x2497=(gconst13*r01);
IkReal x2498=(sj1*sj2);
IkReal x2499=(gconst14*sj3);
IkReal x2500=(cj1*cj2);
IkReal x2501=((1.0)*gconst14);
IkReal x2502=(cj3*gconst13);
IkReal x2503=(cj3*gconst14);
IkReal x2504=(cj2*sj1);
IkReal x2505=((1.0)*r02);
IkReal x2506=(cj1*sj2);
IkReal x2507=((1.0)*cj0);
IkReal x2508=(sj3*x2491);
IkReal x2509=(cj3*x2492);
IkReal x2510=(cj3*x2491);
IkReal x2511=(gconst13*x2491);
IkReal x2512=((1.0)*x2492);
evalcond[0]=((((-1.0)*r20*x2491*x2501))+((r21*x2511))+(((-1.0)*x2492*x2493)));
evalcond[1]=(sj0+(((-1.0)*x2492*x2505))+((x2491*x2497))+(((-1.0)*r00*x2491*x2501)));
evalcond[2]=((((-1.0)*x2507))+((r11*x2511))+(((-1.0)*r10*x2491*x2501))+(((-1.0)*x2492*x2494)));
evalcond[3]=(x2506+x2504+((r22*x2510))+((r21*x2492*x2502))+(((-1.0)*r20*x2501*x2509))+((r21*x2499))+((r20*x2496)));
evalcond[4]=(x2498+(((-1.0)*r21*x2496*x2512))+(((-1.0)*x2493*x2508))+(((-1.0)*x2500))+((r20*x2492*x2499))+((r21*x2503))+((r20*x2502)));
evalcond[5]=((((-1.0)*r01*x2496*x2512))+((cj0*x2506))+((cj0*x2504))+((r00*x2492*x2499))+(((-1.0)*x2505*x2508))+((r00*x2502))+((r01*x2503)));
evalcond[6]=(((r00*x2496))+(((-1.0)*x2498*x2507))+((x2497*x2509))+((r02*x2510))+((cj0*x2500))+(((-1.0)*r00*x2501*x2509))+((r01*x2499)));
evalcond[7]=(((sj1*x2495))+((r10*x2502))+(((-1.0)*x2494*x2508))+((r10*x2492*x2499))+((sj0*x2506))+((r11*x2503))+(((-1.0)*r11*x2496*x2512)));
evalcond[8]=(((cj1*x2495))+((r11*x2492*x2502))+(((-1.0)*r10*x2501*x2509))+((r11*x2499))+(((-1.0)*sj0*x2498))+((r12*x2510))+((r10*x2496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2514 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2514)==0){
continue;
}
IkReal x2513=pow(x2514,-0.5);
CheckValue<IkReal> x2515 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2515.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2515.value))));
IkReal gconst16=((1.0)*r11*x2513);
IkReal gconst17=((-1.0)*r10*x2513);
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2516.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
IkReal x2517=((1.0)*(x2519.value));
IkReal x2518=x2513;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2517)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2517)));
IkReal gconst16=((1.0)*r11*x2518);
IkReal gconst17=((-1.0)*r10*x2518);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
IkReal x2520=((1.0)*(x2522.value));
IkReal x2521=x2513;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2520)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2520)));
IkReal gconst16=((1.0)*r11*x2521);
IkReal gconst17=((-1.0)*r10*x2521);
IkReal x2523=r12*r12;
IkReal x2524=(cj0*r02);
IkReal x2525=x2513;
IkReal x2526=(sj0*x2525);
j4eval[0]=((IKabs((((r12*x2524*x2525))+(((-1.0)*x2526))+((x2523*x2526)))))+(IKabs((x2524+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
IkReal x2527=((1.0)*(x2529.value));
IkReal x2528=x2513;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2527)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2527)));
IkReal gconst16=((1.0)*r11*x2528);
IkReal gconst17=((-1.0)*r10*x2528);
IkReal x2530=((1.0)*cj3);
CheckValue<IkReal> x2535=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2535.valid){
continue;
}
IkReal x2531=x2535.value;
IkReal x2532=(cj3*x2531);
IkReal x2533=(x2530*x2531);
IkReal x2534=((((-2.0)*r10*r11*r20*r21*x2532))+(((-1.0)*x2533*(r10*r10)*(r20*r20)))+(((-1.0)*x2533*(r11*r11)*(r21*r21)))+(((-1.0)*x2530*(r22*r22))));
j4eval[0]=x2534;
j4eval[1]=IKsign(x2534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2536=r21*r21;
IkReal x2537=gconst16*gconst16;
IkReal x2538=r20*r20;
IkReal x2539=gconst17*gconst17;
IkReal x2540=(gconst16*r21);
IkReal x2541=(cj1*sj2);
IkReal x2542=(cj2*sj1);
IkReal x2543=(gconst17*r20);
IkReal x2544=(gconst16*sj3);
IkReal x2545=(r21*sj3);
IkReal x2546=((1.0)*cj3);
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2538*x2539*x2546))+(((-1.0)*x2536*x2537*x2546))+(((-1.0)*x2546*(r22*r22)))+(((2.0)*cj3*x2540*x2543)))),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal((((gconst17*r22*x2545))+((r20*r22*x2544))+((r22*x2542))+((r22*x2541)))),IkReal(((((-1.0)*r20*x2539*x2545))+((r20*x2537*x2545))+(((-1.0)*x2541*x2543))+(((-1.0)*gconst17*x2538*x2544))+((gconst17*x2536*x2544))+(((-1.0)*x2542*x2543))+((x2540*x2541))+((x2540*x2542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2547.value)))+(x2548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2549=IKsin(j4);
IkReal x2550=IKcos(j4);
IkReal x2551=(cj3*gconst17);
IkReal x2552=(gconst16*r21);
IkReal x2553=(gconst17*sj3);
IkReal x2554=(gconst16*r20);
IkReal x2555=(sj1*sj2);
IkReal x2556=(cj1*cj2);
IkReal x2557=(gconst16*r10);
IkReal x2558=(cj2*sj1);
IkReal x2559=(gconst16*sj3);
IkReal x2560=(cj1*sj2);
IkReal x2561=((1.0)*cj0);
IkReal x2562=((1.0)*x2550);
IkReal x2563=(gconst16*x2549);
IkReal x2564=(cj3*x2550);
IkReal x2565=(cj3*x2549);
IkReal x2566=((1.0)*gconst17*x2549);
IkReal x2567=((1.0)*sj3*x2549);
evalcond[0]=((((-1.0)*r22*x2562))+(((-1.0)*r20*x2566))+((x2549*x2552)));
evalcond[1]=((((-1.0)*r00*x2566))+sj0+((r01*x2563))+(((-1.0)*r02*x2562)));
evalcond[2]=((((-1.0)*x2561))+((r11*x2563))+(((-1.0)*r12*x2562))+(((-1.0)*r10*x2566)));
evalcond[3]=(((r22*x2565))+x2560+x2558+((sj3*x2554))+(((-1.0)*r20*x2551*x2562))+((r21*x2553))+((x2552*x2564)));
evalcond[4]=(x2555+(((-1.0)*r22*x2567))+((r20*x2550*x2553))+((cj3*x2554))+(((-1.0)*x2556))+(((-1.0)*sj3*x2552*x2562))+((r21*x2551)));
evalcond[5]=((((-1.0)*r02*x2567))+((cj0*x2560))+((r01*x2551))+(((-1.0)*r01*x2559*x2562))+((cj0*x2558))+((r00*x2550*x2553))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*x2555*x2561))+((r01*x2553))+(((-1.0)*r00*x2551*x2562))+((r00*x2559))+((cj0*x2556))+((gconst16*r01*x2564))+((r02*x2565)));
evalcond[7]=(((cj3*x2557))+((r11*x2551))+((sj0*x2558))+((sj0*x2560))+(((-1.0)*r12*x2567))+((r10*x2550*x2553))+(((-1.0)*r11*x2559*x2562)));
evalcond[8]=((((-1.0)*sj0*x2555))+((r11*x2553))+((sj3*x2557))+((gconst16*r11*x2564))+((r12*x2565))+((sj0*x2556))+(((-1.0)*r10*x2551*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2568=((1.0)*gconst17);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2568))+((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x2568))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2568)))),-1);
if(!x2570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2569.value)+(((1.5707963267949)*(x2570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2571=IKsin(j4);
IkReal x2572=IKcos(j4);
IkReal x2573=(cj3*gconst17);
IkReal x2574=(gconst16*r21);
IkReal x2575=(gconst17*sj3);
IkReal x2576=(gconst16*r20);
IkReal x2577=(sj1*sj2);
IkReal x2578=(cj1*cj2);
IkReal x2579=(gconst16*r10);
IkReal x2580=(cj2*sj1);
IkReal x2581=(gconst16*sj3);
IkReal x2582=(cj1*sj2);
IkReal x2583=((1.0)*cj0);
IkReal x2584=((1.0)*x2572);
IkReal x2585=(gconst16*x2571);
IkReal x2586=(cj3*x2572);
IkReal x2587=(cj3*x2571);
IkReal x2588=((1.0)*gconst17*x2571);
IkReal x2589=((1.0)*sj3*x2571);
evalcond[0]=(((x2571*x2574))+(((-1.0)*r20*x2588))+(((-1.0)*r22*x2584)));
evalcond[1]=(((r01*x2585))+(((-1.0)*r00*x2588))+sj0+(((-1.0)*r02*x2584)));
evalcond[2]=((((-1.0)*x2583))+((r11*x2585))+(((-1.0)*r10*x2588))+(((-1.0)*r12*x2584)));
evalcond[3]=(((r21*x2575))+((r22*x2587))+x2582+x2580+((sj3*x2576))+((x2574*x2586))+(((-1.0)*r20*x2573*x2584)));
evalcond[4]=(((r21*x2573))+x2577+((cj3*x2576))+(((-1.0)*sj3*x2574*x2584))+(((-1.0)*x2578))+((r20*x2572*x2575))+(((-1.0)*r22*x2589)));
evalcond[5]=((((-1.0)*r02*x2589))+((cj0*x2582))+((cj0*x2580))+((r01*x2573))+((r00*x2572*x2575))+(((-1.0)*r01*x2581*x2584))+((cj3*gconst16*r00)));
evalcond[6]=(((r00*x2581))+(((-1.0)*r00*x2573*x2584))+((r01*x2575))+((gconst16*r01*x2586))+(((-1.0)*x2577*x2583))+((cj0*x2578))+((r02*x2587)));
evalcond[7]=(((cj3*x2579))+(((-1.0)*r11*x2581*x2584))+((r11*x2573))+((sj0*x2582))+((sj0*x2580))+((r10*x2572*x2575))+(((-1.0)*r12*x2589)));
evalcond[8]=(((r11*x2575))+(((-1.0)*sj0*x2577))+((sj3*x2579))+((r12*x2587))+((gconst16*r11*x2586))+(((-1.0)*r10*x2573*x2584))+((sj0*x2578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2590.valid){
continue;
}
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2590.value)))+(x2591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2592=IKsin(j4);
IkReal x2593=IKcos(j4);
IkReal x2594=(cj3*gconst17);
IkReal x2595=(gconst16*r21);
IkReal x2596=(gconst17*sj3);
IkReal x2597=(gconst16*r20);
IkReal x2598=(sj1*sj2);
IkReal x2599=(cj1*cj2);
IkReal x2600=(gconst16*r10);
IkReal x2601=(cj2*sj1);
IkReal x2602=(gconst16*sj3);
IkReal x2603=(cj1*sj2);
IkReal x2604=((1.0)*cj0);
IkReal x2605=((1.0)*x2593);
IkReal x2606=(gconst16*x2592);
IkReal x2607=(cj3*x2593);
IkReal x2608=(cj3*x2592);
IkReal x2609=((1.0)*gconst17*x2592);
IkReal x2610=((1.0)*sj3*x2592);
evalcond[0]=(((x2592*x2595))+(((-1.0)*r22*x2605))+(((-1.0)*r20*x2609)));
evalcond[1]=(sj0+(((-1.0)*r02*x2605))+((r01*x2606))+(((-1.0)*r00*x2609)));
evalcond[2]=((((-1.0)*r10*x2609))+(((-1.0)*r12*x2605))+(((-1.0)*x2604))+((r11*x2606)));
evalcond[3]=(((sj3*x2597))+((x2595*x2607))+(((-1.0)*r20*x2594*x2605))+((r22*x2608))+x2601+x2603+((r21*x2596)));
evalcond[4]=(x2598+((cj3*x2597))+(((-1.0)*x2599))+(((-1.0)*sj3*x2595*x2605))+((r20*x2593*x2596))+(((-1.0)*r22*x2610))+((r21*x2594)));
evalcond[5]=(((r01*x2594))+((r00*x2593*x2596))+(((-1.0)*r01*x2602*x2605))+((cj0*x2601))+((cj0*x2603))+(((-1.0)*r02*x2610))+((cj3*gconst16*r00)));
evalcond[6]=(((gconst16*r01*x2607))+(((-1.0)*r00*x2594*x2605))+((r01*x2596))+((cj0*x2599))+((r02*x2608))+(((-1.0)*x2598*x2604))+((r00*x2602)));
evalcond[7]=((((-1.0)*r12*x2610))+((cj3*x2600))+((sj0*x2601))+((sj0*x2603))+((r11*x2594))+(((-1.0)*r11*x2602*x2605))+((r10*x2593*x2596)));
evalcond[8]=(((gconst16*r11*x2607))+((sj3*x2600))+(((-1.0)*sj0*x2598))+(((-1.0)*r10*x2594*x2605))+((r11*x2596))+((r12*x2608))+((sj0*x2599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2611=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2611;
j4eval[1]=IKsign(x2611);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2612=((1.0)*cj5);
IkReal x2613=((((-1.0)*r21*x2612))+(((-1.0)*r20*sj5)));
j4eval[0]=x2613;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2612))+((r01*sj5))))));
j4eval[2]=IKsign(x2613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2614=cj5*cj5;
IkReal x2615=(cj3*r21);
IkReal x2616=(cj5*sj5);
IkReal x2617=((1.0)*cj3);
IkReal x2618=((((-1.0)*r12*r22*x2617))+(((-1.0)*r10*r20*x2614*x2617))+((cj3*r11*r20*x2616))+((r11*x2614*x2615))+(((-1.0)*r11*x2615))+((r10*x2615*x2616)));
j4eval[0]=x2618;
j4eval[1]=IKsign(x2618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2619=cj5*cj5;
IkReal x2620=((1.0)*cj3);
IkReal x2621=(r10*r21);
IkReal x2622=(cj5*sj5);
IkReal x2623=(r11*r21);
IkReal x2624=(r11*r20);
IkReal x2625=(r22*sj3);
IkReal x2626=(r10*r20);
IkReal x2627=((1.0)*sj3*x2619);
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2620))+((cj3*x2621*x2622))+(((-1.0)*x2619*x2620*x2626))+((cj3*x2619*x2623))+(((-1.0)*x2620*x2623))+((cj3*x2622*x2624)))),-1);
if(!x2628.valid){
continue;
}
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal((((r10*sj5*x2625))+((cj5*r11*x2625)))),IkReal((((sj3*x2621))+(((-1.0)*x2624*x2627))+(((-1.0)*sj3*x2622*x2626))+((sj3*x2622*x2623))+(((-1.0)*x2621*x2627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2628.value)))+(x2629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2630=IKsin(j4);
IkReal x2631=IKcos(j4);
IkReal x2632=(cj2*sj1);
IkReal x2633=(cj1*sj2);
IkReal x2634=(cj5*sj3);
IkReal x2635=(cj5*r10);
IkReal x2636=(r00*sj5);
IkReal x2637=(sj1*sj2);
IkReal x2638=(r11*sj5);
IkReal x2639=(cj3*cj5);
IkReal x2640=(cj3*sj5);
IkReal x2641=(r21*sj5);
IkReal x2642=(cj1*cj2);
IkReal x2643=(sj3*sj5);
IkReal x2644=(r01*sj5);
IkReal x2645=((1.0)*x2631);
IkReal x2646=((1.0)*x2630);
IkReal x2647=(cj3*x2630);
IkReal x2648=(cj3*x2631);
IkReal x2649=(x2633+x2632);
evalcond[0]=((((-1.0)*r22*x2645))+(((-1.0)*cj5*r20*x2646))+((x2630*x2641)));
evalcond[1]=((((-1.0)*r02*x2645))+(((-1.0)*cj5*r00*x2646))+((x2630*x2644)));
evalcond[2]=((-1.0)+(((-1.0)*x2635*x2646))+(((-1.0)*r12*x2645))+((x2630*x2638)));
evalcond[3]=(((r12*x2647))+((x2638*x2648))+((r11*x2634))+((r10*x2643))+(((-1.0)*cj3*x2635*x2645)));
evalcond[4]=(((r11*x2639))+((r10*x2640))+((r10*x2631*x2634))+(((-1.0)*sj3*x2638*x2645))+(((-1.0)*r12*sj3*x2646)));
evalcond[5]=((((-1.0)*r20*x2639*x2645))+((r21*x2634))+((r21*x2631*x2640))+((r22*x2647))+x2649+((r20*x2643)));
evalcond[6]=(((cj3*x2636))+(((-1.0)*r01*x2643*x2645))+((r00*x2631*x2634))+((r01*x2639))+(((-1.0)*r02*sj3*x2646))+x2649);
evalcond[7]=(((r02*x2647))+((sj3*x2636))+(((-1.0)*r00*x2639*x2645))+((r01*x2634))+((r01*x2631*x2640))+(((-1.0)*x2637))+x2642);
evalcond[8]=((((-1.0)*r22*sj3*x2646))+((r21*x2639))+((r20*x2631*x2634))+(((-1.0)*x2642))+(((-1.0)*sj3*x2641*x2645))+x2637+((r20*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2650=((1.0)*cj5);
CheckValue<IkReal> x2651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2650))+(((-1.0)*r20*sj5)))),-1);
if(!x2651.valid){
continue;
}
CheckValue<IkReal> x2652 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2651.value)))+(x2652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2653=IKsin(j4);
IkReal x2654=IKcos(j4);
IkReal x2655=(cj2*sj1);
IkReal x2656=(cj1*sj2);
IkReal x2657=(cj5*sj3);
IkReal x2658=(cj5*r10);
IkReal x2659=(r00*sj5);
IkReal x2660=(sj1*sj2);
IkReal x2661=(r11*sj5);
IkReal x2662=(cj3*cj5);
IkReal x2663=(cj3*sj5);
IkReal x2664=(r21*sj5);
IkReal x2665=(cj1*cj2);
IkReal x2666=(sj3*sj5);
IkReal x2667=(r01*sj5);
IkReal x2668=((1.0)*x2654);
IkReal x2669=((1.0)*x2653);
IkReal x2670=(cj3*x2653);
IkReal x2671=(cj3*x2654);
IkReal x2672=(x2656+x2655);
evalcond[0]=(((x2653*x2664))+(((-1.0)*cj5*r20*x2669))+(((-1.0)*r22*x2668)));
evalcond[1]=(((x2653*x2667))+(((-1.0)*r02*x2668))+(((-1.0)*cj5*r00*x2669)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2668))+((x2653*x2661))+(((-1.0)*x2658*x2669)));
evalcond[3]=(((x2661*x2671))+((r11*x2657))+((r12*x2670))+(((-1.0)*cj3*x2658*x2668))+((r10*x2666)));
evalcond[4]=((((-1.0)*r12*sj3*x2669))+((r10*x2654*x2657))+((r10*x2663))+(((-1.0)*sj3*x2661*x2668))+((r11*x2662)));
evalcond[5]=(((r21*x2657))+((r21*x2654*x2663))+((r22*x2670))+(((-1.0)*r20*x2662*x2668))+((r20*x2666))+x2672);
evalcond[6]=(((r00*x2654*x2657))+(((-1.0)*r01*x2666*x2668))+((r01*x2662))+((cj3*x2659))+x2672+(((-1.0)*r02*sj3*x2669)));
evalcond[7]=((((-1.0)*x2660))+((r02*x2670))+(((-1.0)*r00*x2662*x2668))+((r01*x2657))+((r01*x2654*x2663))+((sj3*x2659))+x2665);
evalcond[8]=((((-1.0)*x2665))+((r20*x2654*x2657))+((r21*x2662))+(((-1.0)*r22*sj3*x2669))+(((-1.0)*sj3*x2664*x2668))+((r20*x2663))+x2660);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2673 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2673.valid){
continue;
}
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2673.value)+(((1.5707963267949)*(x2674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2675=IKsin(j4);
IkReal x2676=IKcos(j4);
IkReal x2677=(cj2*sj1);
IkReal x2678=(cj1*sj2);
IkReal x2679=(cj5*sj3);
IkReal x2680=(cj5*r10);
IkReal x2681=(r00*sj5);
IkReal x2682=(sj1*sj2);
IkReal x2683=(r11*sj5);
IkReal x2684=(cj3*cj5);
IkReal x2685=(cj3*sj5);
IkReal x2686=(r21*sj5);
IkReal x2687=(cj1*cj2);
IkReal x2688=(sj3*sj5);
IkReal x2689=(r01*sj5);
IkReal x2690=((1.0)*x2676);
IkReal x2691=((1.0)*x2675);
IkReal x2692=(cj3*x2675);
IkReal x2693=(cj3*x2676);
IkReal x2694=(x2677+x2678);
evalcond[0]=((((-1.0)*r22*x2690))+((x2675*x2686))+(((-1.0)*cj5*r20*x2691)));
evalcond[1]=((((-1.0)*cj5*r00*x2691))+(((-1.0)*r02*x2690))+((x2675*x2689)));
evalcond[2]=((-1.0)+(((-1.0)*x2680*x2691))+((x2675*x2683))+(((-1.0)*r12*x2690)));
evalcond[3]=(((r12*x2692))+((r10*x2688))+(((-1.0)*cj3*x2680*x2690))+((x2683*x2693))+((r11*x2679)));
evalcond[4]=(((r10*x2676*x2679))+((r11*x2684))+((r10*x2685))+(((-1.0)*sj3*x2683*x2690))+(((-1.0)*r12*sj3*x2691)));
evalcond[5]=(((r22*x2692))+((r21*x2679))+((r21*x2676*x2685))+((r20*x2688))+(((-1.0)*r20*x2684*x2690))+x2694);
evalcond[6]=(((cj3*x2681))+(((-1.0)*r02*sj3*x2691))+((r00*x2676*x2679))+((r01*x2684))+(((-1.0)*r01*x2688*x2690))+x2694);
evalcond[7]=(((r01*x2676*x2685))+(((-1.0)*x2682))+((r01*x2679))+((sj3*x2681))+((r02*x2692))+x2687+(((-1.0)*r00*x2684*x2690)));
evalcond[8]=(((r20*x2676*x2679))+((r21*x2684))+(((-1.0)*sj3*x2686*x2690))+(((-1.0)*x2687))+(((-1.0)*r22*sj3*x2691))+((r20*x2685))+x2682);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2695=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2695;
j4eval[1]=IKsign(x2695);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2696=((1.0)*cj5);
IkReal x2697=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2696)));
j4eval[0]=x2697;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2696)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2698=cj5*cj5;
IkReal x2699=(cj3*r21);
IkReal x2700=(cj5*sj5);
IkReal x2701=((1.0)*cj3);
IkReal x2702=(((r11*x2698*x2699))+(((-1.0)*r12*r22*x2701))+((r10*x2699*x2700))+((cj3*r11*r20*x2700))+(((-1.0)*r10*r20*x2698*x2701))+(((-1.0)*r11*x2699)));
j4eval[0]=x2702;
j4eval[1]=IKsign(x2702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2703=cj5*cj5;
IkReal x2704=((1.0)*cj3);
IkReal x2705=(r10*r21);
IkReal x2706=(cj5*sj5);
IkReal x2707=(r11*r21);
IkReal x2708=(r11*r20);
IkReal x2709=(r22*sj3);
IkReal x2710=(r10*r20);
IkReal x2711=((1.0)*sj3*x2703);
CheckValue<IkReal> x2712 = IKatan2WithCheck(IkReal((((r10*sj5*x2709))+((cj5*r11*x2709)))),IkReal(((((-1.0)*sj3*x2706*x2710))+(((-1.0)*x2708*x2711))+((sj3*x2705))+((sj3*x2706*x2707))+(((-1.0)*x2705*x2711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2712.valid){
continue;
}
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(IKsign((((cj3*x2703*x2707))+(((-1.0)*x2703*x2704*x2710))+(((-1.0)*r12*r22*x2704))+((cj3*x2706*x2708))+(((-1.0)*x2704*x2707))+((cj3*x2705*x2706)))),-1);
if(!x2713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2712.value)+(((1.5707963267949)*(x2713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2714=IKsin(j4);
IkReal x2715=IKcos(j4);
IkReal x2716=(sj1*sj2);
IkReal x2717=(cj5*sj3);
IkReal x2718=(cj5*r10);
IkReal x2719=(r00*sj5);
IkReal x2720=(r11*sj5);
IkReal x2721=(cj3*cj5);
IkReal x2722=((1.0)*cj1);
IkReal x2723=(cj3*sj5);
IkReal x2724=(r21*sj5);
IkReal x2725=(cj2*sj1);
IkReal x2726=(sj3*sj5);
IkReal x2727=(r01*sj5);
IkReal x2728=(cj2*x2722);
IkReal x2729=((1.0)*x2715);
IkReal x2730=((1.0)*x2714);
IkReal x2731=(cj3*x2714);
IkReal x2732=(cj3*x2715);
evalcond[0]=(((x2714*x2724))+(((-1.0)*cj5*r20*x2730))+(((-1.0)*r22*x2729)));
evalcond[1]=(((x2714*x2727))+(((-1.0)*cj5*r00*x2730))+(((-1.0)*r02*x2729)));
evalcond[2]=((1.0)+((x2714*x2720))+(((-1.0)*x2718*x2730))+(((-1.0)*r12*x2729)));
evalcond[3]=(((x2720*x2732))+(((-1.0)*cj3*x2718*x2729))+((r12*x2731))+((r10*x2726))+((r11*x2717)));
evalcond[4]=(((r10*x2715*x2717))+(((-1.0)*sj3*x2720*x2729))+((r11*x2721))+((r10*x2723))+(((-1.0)*r12*sj3*x2730)));
evalcond[5]=(x2725+((cj1*sj2))+((r22*x2731))+((r20*x2726))+(((-1.0)*r20*x2721*x2729))+((r21*x2717))+((r21*x2715*x2723)));
evalcond[6]=(x2716+((r02*x2731))+(((-1.0)*r00*x2721*x2729))+((sj3*x2719))+((r01*x2715*x2723))+(((-1.0)*x2728))+((r01*x2717)));
evalcond[7]=(x2716+(((-1.0)*sj3*x2724*x2729))+((r21*x2721))+((r20*x2723))+(((-1.0)*x2728))+((r20*x2715*x2717))+(((-1.0)*r22*sj3*x2730)));
evalcond[8]=((((-1.0)*r01*x2726*x2729))+((cj3*x2719))+((r00*x2715*x2717))+(((-1.0)*x2725))+(((-1.0)*r02*sj3*x2730))+((r01*x2721))+(((-1.0)*sj2*x2722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2733=((1.0)*cj5);
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2733)))),-1);
if(!x2734.valid){
continue;
}
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2734.value)))+(x2735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2736=IKsin(j4);
IkReal x2737=IKcos(j4);
IkReal x2738=(sj1*sj2);
IkReal x2739=(cj5*sj3);
IkReal x2740=(cj5*r10);
IkReal x2741=(r00*sj5);
IkReal x2742=(r11*sj5);
IkReal x2743=(cj3*cj5);
IkReal x2744=((1.0)*cj1);
IkReal x2745=(cj3*sj5);
IkReal x2746=(r21*sj5);
IkReal x2747=(cj2*sj1);
IkReal x2748=(sj3*sj5);
IkReal x2749=(r01*sj5);
IkReal x2750=(cj2*x2744);
IkReal x2751=((1.0)*x2737);
IkReal x2752=((1.0)*x2736);
IkReal x2753=(cj3*x2736);
IkReal x2754=(cj3*x2737);
evalcond[0]=((((-1.0)*r22*x2751))+((x2736*x2746))+(((-1.0)*cj5*r20*x2752)));
evalcond[1]=(((x2736*x2749))+(((-1.0)*cj5*r00*x2752))+(((-1.0)*r02*x2751)));
evalcond[2]=((1.0)+(((-1.0)*x2740*x2752))+(((-1.0)*r12*x2751))+((x2736*x2742)));
evalcond[3]=(((x2742*x2754))+((r12*x2753))+(((-1.0)*cj3*x2740*x2751))+((r10*x2748))+((r11*x2739)));
evalcond[4]=(((r11*x2743))+((r10*x2737*x2739))+((r10*x2745))+(((-1.0)*r12*sj3*x2752))+(((-1.0)*sj3*x2742*x2751)));
evalcond[5]=(x2747+((r22*x2753))+((r21*x2737*x2745))+((cj1*sj2))+((r21*x2739))+(((-1.0)*r20*x2743*x2751))+((r20*x2748)));
evalcond[6]=(x2738+(((-1.0)*r00*x2743*x2751))+((sj3*x2741))+((r01*x2737*x2745))+((r01*x2739))+(((-1.0)*x2750))+((r02*x2753)));
evalcond[7]=(x2738+((r21*x2743))+(((-1.0)*sj3*x2746*x2751))+((r20*x2745))+(((-1.0)*r22*sj3*x2752))+((r20*x2737*x2739))+(((-1.0)*x2750)));
evalcond[8]=((((-1.0)*r02*sj3*x2752))+((cj3*x2741))+(((-1.0)*sj2*x2744))+((r01*x2743))+((r00*x2737*x2739))+(((-1.0)*r01*x2748*x2751))+(((-1.0)*x2747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2755=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2755.value)))+(x2756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2757=IKsin(j4);
IkReal x2758=IKcos(j4);
IkReal x2759=(sj1*sj2);
IkReal x2760=(cj5*sj3);
IkReal x2761=(cj5*r10);
IkReal x2762=(r00*sj5);
IkReal x2763=(r11*sj5);
IkReal x2764=(cj3*cj5);
IkReal x2765=((1.0)*cj1);
IkReal x2766=(cj3*sj5);
IkReal x2767=(r21*sj5);
IkReal x2768=(cj2*sj1);
IkReal x2769=(sj3*sj5);
IkReal x2770=(r01*sj5);
IkReal x2771=(cj2*x2765);
IkReal x2772=((1.0)*x2758);
IkReal x2773=((1.0)*x2757);
IkReal x2774=(cj3*x2757);
IkReal x2775=(cj3*x2758);
evalcond[0]=((((-1.0)*cj5*r20*x2773))+((x2757*x2767))+(((-1.0)*r22*x2772)));
evalcond[1]=(((x2757*x2770))+(((-1.0)*r02*x2772))+(((-1.0)*cj5*r00*x2773)));
evalcond[2]=((1.0)+((x2757*x2763))+(((-1.0)*r12*x2772))+(((-1.0)*x2761*x2773)));
evalcond[3]=(((x2763*x2775))+((r10*x2769))+(((-1.0)*cj3*x2761*x2772))+((r12*x2774))+((r11*x2760)));
evalcond[4]=((((-1.0)*sj3*x2763*x2772))+(((-1.0)*r12*sj3*x2773))+((r10*x2758*x2760))+((r10*x2766))+((r11*x2764)));
evalcond[5]=(x2768+(((-1.0)*r20*x2764*x2772))+((r22*x2774))+((cj1*sj2))+((r20*x2769))+((r21*x2758*x2766))+((r21*x2760)));
evalcond[6]=(x2759+(((-1.0)*r00*x2764*x2772))+((r01*x2760))+((r01*x2758*x2766))+(((-1.0)*x2771))+((sj3*x2762))+((r02*x2774)));
evalcond[7]=(x2759+((r20*x2758*x2760))+((r20*x2766))+(((-1.0)*x2771))+(((-1.0)*r22*sj3*x2773))+((r21*x2764))+(((-1.0)*sj3*x2767*x2772)));
evalcond[8]=((((-1.0)*x2768))+((r00*x2758*x2760))+((r01*x2764))+(((-1.0)*r01*x2769*x2772))+(((-1.0)*sj2*x2765))+((cj3*x2762))+(((-1.0)*r02*sj3*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2776=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2776);
rxp0_2=(py*r00);
rxp1_0=(r21*x2776);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2777=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2777);
rxp0_2=(py*r00);
rxp1_0=(r21*x2777);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2778=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2778)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2778)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2779=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2779);
rxp0_2=(py*r00);
rxp1_0=(r21*x2779);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(r12,-1);
if(!x2781.valid){
continue;
}
IkReal x2780=x2781.value;
CheckValue<IkReal> x2782=IKPowWithIntegerCheck(sj3,-1);
if(!x2782.valid){
continue;
}
if( IKabs((x2780*(x2782.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2780)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2780*(x2782.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2780))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2780*(x2782.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2780));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2783=IKsin(j4);
IkReal x2784=IKcos(j4);
IkReal x2785=(cj2*sj0);
IkReal x2786=(sj1*sj2);
IkReal x2787=(cj5*sj3);
IkReal x2788=(cj3*cj5);
IkReal x2789=(cj1*cj2);
IkReal x2790=(r21*sj5);
IkReal x2791=(r00*sj5);
IkReal x2792=(cj2*sj1);
IkReal x2793=(r01*sj5);
IkReal x2794=(r20*sj5);
IkReal x2795=(cj1*sj2);
IkReal x2796=((1.0)*cj0);
IkReal x2797=((1.0)*x2783);
IkReal x2798=(r20*x2784);
IkReal x2799=(r00*x2784);
IkReal x2800=(cj3*x2784);
IkReal x2801=((1.0)*x2784);
evalcond[0]=((((-1.0)*x2796))+(((-1.0)*r12*x2801)));
evalcond[1]=(((x2783*x2790))+(((-1.0)*cj5*r20*x2797)));
evalcond[2]=(sj0+((x2783*x2793))+(((-1.0)*cj5*r00*x2797)));
evalcond[3]=(((sj1*x2785))+((sj0*x2795))+(((-1.0)*r12*sj3*x2797)));
evalcond[4]=(((cj3*r12*x2783))+(((-1.0)*sj0*x2786))+((cj1*x2785)));
evalcond[5]=(x2792+x2795+((r21*x2787))+(((-1.0)*x2788*x2798))+((x2790*x2800))+((sj3*x2794)));
evalcond[6]=(x2786+((r21*x2788))+((cj3*x2794))+((x2787*x2798))+(((-1.0)*sj3*x2790*x2801))+(((-1.0)*x2789)));
evalcond[7]=(((cj3*x2791))+((x2787*x2799))+((r01*x2788))+(((-1.0)*sj3*x2793*x2801))+((cj0*x2795))+((cj0*x2792)));
evalcond[8]=((((-1.0)*x2786*x2796))+(((-1.0)*x2788*x2799))+((sj3*x2791))+((r01*x2787))+((x2793*x2800))+((cj0*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2802=((1.0)*sj3);
IkReal x2803=((1.0)*cj5);
CheckValue<IkReal> x2804=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2803))),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2803))),-1);
if(!x2805.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2804.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2805.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2802))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2802)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2804.value)))+IKsqr(((x2805.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2802))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2802))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2804.value)), ((x2805.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2802))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2802))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(cj2*sj0);
IkReal x2809=(sj1*sj2);
IkReal x2810=(cj5*sj3);
IkReal x2811=(cj3*cj5);
IkReal x2812=(cj1*cj2);
IkReal x2813=(r21*sj5);
IkReal x2814=(r00*sj5);
IkReal x2815=(cj2*sj1);
IkReal x2816=(r01*sj5);
IkReal x2817=(r20*sj5);
IkReal x2818=(cj1*sj2);
IkReal x2819=((1.0)*cj0);
IkReal x2820=((1.0)*x2806);
IkReal x2821=(r20*x2807);
IkReal x2822=(r00*x2807);
IkReal x2823=(cj3*x2807);
IkReal x2824=((1.0)*x2807);
evalcond[0]=((((-1.0)*r12*x2824))+(((-1.0)*x2819)));
evalcond[1]=(((x2806*x2813))+(((-1.0)*cj5*r20*x2820)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2820))+((x2806*x2816)));
evalcond[3]=(((sj1*x2808))+(((-1.0)*r12*sj3*x2820))+((sj0*x2818)));
evalcond[4]=(((cj1*x2808))+(((-1.0)*sj0*x2809))+((cj3*r12*x2806)));
evalcond[5]=(((r21*x2810))+(((-1.0)*x2811*x2821))+((x2813*x2823))+x2815+x2818+((sj3*x2817)));
evalcond[6]=((((-1.0)*x2812))+(((-1.0)*sj3*x2813*x2824))+((r21*x2811))+((cj3*x2817))+((x2810*x2821))+x2809);
evalcond[7]=(((r01*x2811))+(((-1.0)*sj3*x2816*x2824))+((cj3*x2814))+((x2810*x2822))+((cj0*x2815))+((cj0*x2818)));
evalcond[8]=(((r01*x2810))+(((-1.0)*x2809*x2819))+(((-1.0)*x2811*x2822))+((cj0*x2812))+((x2816*x2823))+((sj3*x2814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2825=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2825.valid){
continue;
}
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(r12,-1);
if(!x2826.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2825.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2826.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2825.value)))+IKsqr(((-1.0)*cj0*(x2826.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2825.value)), ((-1.0)*cj0*(x2826.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2827=IKsin(j4);
IkReal x2828=IKcos(j4);
IkReal x2829=(cj2*sj0);
IkReal x2830=(sj1*sj2);
IkReal x2831=(cj5*sj3);
IkReal x2832=(cj3*cj5);
IkReal x2833=(cj1*cj2);
IkReal x2834=(r21*sj5);
IkReal x2835=(r00*sj5);
IkReal x2836=(cj2*sj1);
IkReal x2837=(r01*sj5);
IkReal x2838=(r20*sj5);
IkReal x2839=(cj1*sj2);
IkReal x2840=((1.0)*cj0);
IkReal x2841=((1.0)*x2827);
IkReal x2842=(r20*x2828);
IkReal x2843=(r00*x2828);
IkReal x2844=(cj3*x2828);
IkReal x2845=((1.0)*x2828);
evalcond[0]=((((-1.0)*r12*x2845))+(((-1.0)*x2840)));
evalcond[1]=((((-1.0)*cj5*r20*x2841))+((x2827*x2834)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2841))+((x2827*x2837)));
evalcond[3]=(((sj0*x2839))+((sj1*x2829))+(((-1.0)*r12*sj3*x2841)));
evalcond[4]=(((cj3*r12*x2827))+(((-1.0)*sj0*x2830))+((cj1*x2829)));
evalcond[5]=((((-1.0)*x2832*x2842))+((sj3*x2838))+((x2834*x2844))+x2839+x2836+((r21*x2831)));
evalcond[6]=((((-1.0)*x2833))+(((-1.0)*sj3*x2834*x2845))+((x2831*x2842))+x2830+((r21*x2832))+((cj3*x2838)));
evalcond[7]=((((-1.0)*sj3*x2837*x2845))+((x2831*x2843))+((cj0*x2839))+((cj0*x2836))+((cj3*x2835))+((r01*x2832)));
evalcond[8]=(((x2837*x2844))+(((-1.0)*x2830*x2840))+(((-1.0)*x2832*x2843))+((sj3*x2835))+((cj0*x2833))+((r01*x2831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2846=((1.0)*cj5);
CheckValue<IkReal> x2847 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2846))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2847.valid){
continue;
}
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2846))+(((-1.0)*r20*sj5)))),-1);
if(!x2848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2847.value)+(((1.5707963267949)*(x2848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2849=IKsin(j4);
IkReal x2850=IKcos(j4);
IkReal x2851=(r11*sj5);
IkReal x2852=(cj2*sj0);
IkReal x2853=(cj5*r10);
IkReal x2854=(sj1*sj2);
IkReal x2855=(cj5*r01);
IkReal x2856=(cj5*r00);
IkReal x2857=(cj1*cj2);
IkReal x2858=(cj3*sj5);
IkReal x2859=(r21*sj5);
IkReal x2860=(cj5*sj3);
IkReal x2861=(sj3*sj5);
IkReal x2862=(cj2*sj1);
IkReal x2863=(r01*sj5);
IkReal x2864=(cj3*cj5);
IkReal x2865=(cj1*sj2);
IkReal x2866=((1.0)*cj0);
IkReal x2867=(cj5*r20);
IkReal x2868=((1.0)*x2850);
IkReal x2869=((1.0)*x2849);
IkReal x2870=(cj3*x2850);
IkReal x2871=(sj3*x2850);
IkReal x2872=(cj3*x2849);
evalcond[0]=(((x2849*x2859))+(((-1.0)*r22*x2868))+(((-1.0)*x2867*x2869)));
evalcond[1]=((((-1.0)*r02*x2868))+sj0+((x2849*x2863))+(((-1.0)*x2856*x2869)));
evalcond[2]=((((-1.0)*r12*x2868))+((x2849*x2851))+(((-1.0)*x2853*x2869))+(((-1.0)*x2866)));
evalcond[3]=(((r22*x2872))+((r21*x2850*x2858))+((r21*x2860))+((r20*x2861))+x2862+x2865+(((-1.0)*r20*x2864*x2868)));
evalcond[4]=((((-1.0)*r22*sj3*x2869))+((r20*x2858))+((r20*x2850*x2860))+((r21*x2864))+(((-1.0)*x2857))+x2854+(((-1.0)*sj3*x2859*x2868)));
evalcond[5]=(((cj3*x2855))+((x2856*x2871))+(((-1.0)*r02*sj3*x2869))+((r00*x2858))+((cj0*x2862))+((cj0*x2865))+(((-1.0)*r01*x2861*x2868)));
evalcond[6]=(((r00*x2861))+(((-1.0)*cj3*x2856*x2868))+(((-1.0)*x2854*x2866))+((sj3*x2855))+((r01*x2850*x2858))+((cj0*x2857))+((r02*x2872)));
evalcond[7]=(((sj1*x2852))+(((-1.0)*sj3*x2851*x2868))+((sj0*x2865))+((r11*x2864))+(((-1.0)*r12*sj3*x2869))+((x2853*x2871))+((r10*x2858)));
evalcond[8]=(((x2851*x2870))+(((-1.0)*cj3*x2853*x2868))+((r10*x2861))+(((-1.0)*sj0*x2854))+((r11*x2860))+((r12*x2872))+((cj1*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2873.value)))+(x2874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2875=IKsin(j4);
IkReal x2876=IKcos(j4);
IkReal x2877=(r11*sj5);
IkReal x2878=(cj2*sj0);
IkReal x2879=(cj5*r10);
IkReal x2880=(sj1*sj2);
IkReal x2881=(cj5*r01);
IkReal x2882=(cj5*r00);
IkReal x2883=(cj1*cj2);
IkReal x2884=(cj3*sj5);
IkReal x2885=(r21*sj5);
IkReal x2886=(cj5*sj3);
IkReal x2887=(sj3*sj5);
IkReal x2888=(cj2*sj1);
IkReal x2889=(r01*sj5);
IkReal x2890=(cj3*cj5);
IkReal x2891=(cj1*sj2);
IkReal x2892=((1.0)*cj0);
IkReal x2893=(cj5*r20);
IkReal x2894=((1.0)*x2876);
IkReal x2895=((1.0)*x2875);
IkReal x2896=(cj3*x2876);
IkReal x2897=(sj3*x2876);
IkReal x2898=(cj3*x2875);
evalcond[0]=((((-1.0)*r22*x2894))+(((-1.0)*x2893*x2895))+((x2875*x2885)));
evalcond[1]=(sj0+(((-1.0)*x2882*x2895))+(((-1.0)*r02*x2894))+((x2875*x2889)));
evalcond[2]=(((x2875*x2877))+(((-1.0)*x2892))+(((-1.0)*x2879*x2895))+(((-1.0)*r12*x2894)));
evalcond[3]=(((r20*x2887))+((r22*x2898))+((r21*x2886))+(((-1.0)*r20*x2890*x2894))+x2888+x2891+((r21*x2876*x2884)));
evalcond[4]=(((r20*x2884))+((r21*x2890))+(((-1.0)*r22*sj3*x2895))+(((-1.0)*x2883))+((r20*x2876*x2886))+x2880+(((-1.0)*sj3*x2885*x2894)));
evalcond[5]=(((cj0*x2891))+((cj0*x2888))+((cj3*x2881))+(((-1.0)*r02*sj3*x2895))+((r00*x2884))+(((-1.0)*r01*x2887*x2894))+((x2882*x2897)));
evalcond[6]=(((sj3*x2881))+(((-1.0)*cj3*x2882*x2894))+((cj0*x2883))+((r00*x2887))+((r01*x2876*x2884))+((r02*x2898))+(((-1.0)*x2880*x2892)));
evalcond[7]=((((-1.0)*r12*sj3*x2895))+(((-1.0)*sj3*x2877*x2894))+((sj0*x2891))+((r11*x2890))+((x2879*x2897))+((r10*x2884))+((sj1*x2878)));
evalcond[8]=(((cj1*x2878))+((r11*x2886))+((r12*x2898))+(((-1.0)*cj3*x2879*x2894))+((r10*x2887))+(((-1.0)*sj0*x2880))+((x2877*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2899=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2899.valid){
continue;
}
CheckValue<IkReal> x2900 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2899.value)))+(x2900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2901=IKsin(j4);
IkReal x2902=IKcos(j4);
IkReal x2903=(r11*sj5);
IkReal x2904=(cj2*sj0);
IkReal x2905=(cj5*r10);
IkReal x2906=(sj1*sj2);
IkReal x2907=(cj5*r01);
IkReal x2908=(cj5*r00);
IkReal x2909=(cj1*cj2);
IkReal x2910=(cj3*sj5);
IkReal x2911=(r21*sj5);
IkReal x2912=(cj5*sj3);
IkReal x2913=(sj3*sj5);
IkReal x2914=(cj2*sj1);
IkReal x2915=(r01*sj5);
IkReal x2916=(cj3*cj5);
IkReal x2917=(cj1*sj2);
IkReal x2918=((1.0)*cj0);
IkReal x2919=(cj5*r20);
IkReal x2920=((1.0)*x2902);
IkReal x2921=((1.0)*x2901);
IkReal x2922=(cj3*x2902);
IkReal x2923=(sj3*x2902);
IkReal x2924=(cj3*x2901);
evalcond[0]=((((-1.0)*x2919*x2921))+(((-1.0)*r22*x2920))+((x2901*x2911)));
evalcond[1]=(sj0+(((-1.0)*r02*x2920))+(((-1.0)*x2908*x2921))+((x2901*x2915)));
evalcond[2]=(((x2901*x2903))+(((-1.0)*x2905*x2921))+(((-1.0)*r12*x2920))+(((-1.0)*x2918)));
evalcond[3]=(((r22*x2924))+((r20*x2913))+((r21*x2902*x2910))+((r21*x2912))+(((-1.0)*r20*x2916*x2920))+x2914+x2917);
evalcond[4]=((((-1.0)*sj3*x2911*x2920))+((r20*x2910))+((r20*x2902*x2912))+((r21*x2916))+(((-1.0)*x2909))+(((-1.0)*r22*sj3*x2921))+x2906);
evalcond[5]=(((cj3*x2907))+((cj0*x2914))+((cj0*x2917))+((r00*x2910))+(((-1.0)*r02*sj3*x2921))+((x2908*x2923))+(((-1.0)*r01*x2913*x2920)));
evalcond[6]=(((r00*x2913))+((cj0*x2909))+((sj3*x2907))+((r01*x2902*x2910))+(((-1.0)*x2906*x2918))+(((-1.0)*cj3*x2908*x2920))+((r02*x2924)));
evalcond[7]=(((r11*x2916))+((sj0*x2917))+((x2905*x2923))+(((-1.0)*sj3*x2903*x2920))+(((-1.0)*r12*sj3*x2921))+((sj1*x2904))+((r10*x2910)));
evalcond[8]=(((r11*x2912))+(((-1.0)*sj0*x2906))+((x2903*x2922))+((cj1*x2904))+((r12*x2924))+(((-1.0)*cj3*x2905*x2920))+((r10*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2925=cj5*cj5;
IkReal x2926=r21*r21;
IkReal x2927=r20*r20;
IkReal x2928=(r20*r21);
IkReal x2929=((1.0)*cj3);
IkReal x2930=((1.0)*cj5);
IkReal x2931=(cj1*sj2);
IkReal x2932=(cj5*sj5);
IkReal x2933=(sj3*sj5);
IkReal x2934=(cj2*sj1);
IkReal x2935=(r21*sj5);
CheckValue<IkReal> x2936 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r22*x2934))+((r22*x2931))+((r20*r22*x2933)))),IkReal((((sj3*x2928))+((sj3*x2926*x2932))+(((-2.0)*sj3*x2925*x2928))+(((-1.0)*x2927*x2930*x2933))+((x2934*x2935))+(((-1.0)*r20*x2930*x2931))+(((-1.0)*r20*x2930*x2934))+((x2931*x2935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2936.valid){
continue;
}
CheckValue<IkReal> x2937=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2929*(r22*r22)))+(((-1.0)*x2925*x2927*x2929))+(((2.0)*cj3*x2928*x2932))+(((-1.0)*x2926*x2929))+((cj3*x2925*x2926)))),-1);
if(!x2937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2936.value)+(((1.5707963267949)*(x2937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2938=IKsin(j4);
IkReal x2939=IKcos(j4);
IkReal x2940=(cj3*r21);
IkReal x2941=(r21*sj5);
IkReal x2942=(r20*sj5);
IkReal x2943=(cj5*r20);
IkReal x2944=((1.0)*x2939);
IkReal x2945=((1.0)*x2938);
evalcond[0]=((((-1.0)*x2943*x2945))+(((-1.0)*r22*x2944))+((x2938*x2941)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj3*r22*x2938))+((sj5*x2939*x2940))+(((-1.0)*cj3*x2943*x2944))+((cj1*sj2))+((sj3*x2942)));
evalcond[2]=((((-1.0)*r22*sj3*x2945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x2940))+(((-1.0)*sj3*x2941*x2944))+((sj3*x2939*x2943))+((cj3*x2942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2946=(cj5*sj4);
IkReal x2947=(sj4*sj5);
if( IKabs((((r00*x2946))+(((-1.0)*r01*x2947))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2947))+(((-1.0)*r10*x2946))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2946))+(((-1.0)*r01*x2947))+((cj4*r02))))+IKsqr((((r11*x2947))+(((-1.0)*r10*x2946))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2946))+(((-1.0)*r01*x2947))+((cj4*r02))), (((r11*x2947))+(((-1.0)*r10*x2946))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2948=IKsin(j0);
IkReal x2949=IKcos(j0);
IkReal x2950=(r02*sj4);
IkReal x2951=((1.0)*sj3);
IkReal x2952=(r12*sj4);
IkReal x2953=(cj1*cj2);
IkReal x2954=((1.0)*cj3);
IkReal x2955=((1.0)*sj1);
IkReal x2956=(r11*sj5);
IkReal x2957=(cj5*r01);
IkReal x2958=(cj5*r11);
IkReal x2959=(r00*sj5);
IkReal x2960=((0.24365)*cj1);
IkReal x2961=(cj2*sj1);
IkReal x2962=(r10*sj5);
IkReal x2963=((1.0)*cj4);
IkReal x2964=((0.21325)*x2948);
IkReal x2965=(cj4*cj5*r00);
IkReal x2966=(sj2*x2948);
IkReal x2967=(cj4*cj5*r10);
IkReal x2968=(cj4*r01*sj5);
IkReal x2969=(sj2*x2949);
IkReal x2970=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r00*x2970))+((r01*sj4*sj5))+(((-1.0)*r02*x2963))+x2948);
evalcond[1]=((((-1.0)*x2949))+(((-1.0)*r10*x2970))+((sj4*x2956))+(((-1.0)*r12*x2963)));
evalcond[2]=((((0.11)*x2948))+(((-0.21325)*x2949*x2953))+(((-1.0)*px))+(((-1.0)*x2949*x2960))+(((0.21325)*sj1*x2969))+(((-0.08535)*x2959))+(((-0.08535)*x2957)));
evalcond[3]=((((-0.08535)*x2962))+(((-1.0)*x2948*x2960))+(((-1.0)*py))+(((-0.11)*x2949))+(((-0.08535)*x2958))+(((-1.0)*x2953*x2964))+((sj1*sj2*x2964)));
evalcond[4]=(((cj1*x2969))+(((-1.0)*x2951*x2968))+((sj3*x2965))+((x2949*x2961))+(((-1.0)*x2950*x2951))+((cj3*x2959))+((cj3*x2957)));
evalcond[5]=((((-1.0)*x2954*x2965))+(((-1.0)*x2955*x2969))+((sj3*x2959))+((sj3*x2957))+((cj3*x2968))+((x2949*x2953))+((cj3*x2950)));
evalcond[6]=(((x2948*x2961))+((cj1*x2966))+(((-1.0)*cj4*x2951*x2956))+((sj3*x2967))+((cj3*x2962))+(((-1.0)*x2951*x2952))+((cj3*x2958)));
evalcond[7]=((((-1.0)*x2954*x2967))+(((-1.0)*x2955*x2966))+((sj3*x2958))+((x2948*x2953))+((sj3*x2962))+((cj3*cj4*x2956))+((cj3*x2952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2971=cj5*cj5;
IkReal x2972=r21*r21;
IkReal x2973=r20*r20;
IkReal x2974=(r20*r21);
IkReal x2975=(sj1*sj2);
IkReal x2976=(r21*sj5);
IkReal x2977=(cj1*cj2);
IkReal x2978=(cj5*r20);
IkReal x2979=(cj5*sj5);
IkReal x2980=(cj3*r22);
IkReal x2981=(sj3*x2972);
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal((((r22*x2975))+((cj5*r21*x2980))+(((-1.0)*r22*x2977))+((r20*sj5*x2980)))),IkReal(((((-1.0)*x2975*x2978))+((x2977*x2978))+(((-1.0)*x2976*x2977))+(((-2.0)*cj3*x2971*x2974))+((x2975*x2976))+(((-1.0)*cj3*x2973*x2979))+((cj3*x2972*x2979))+((cj3*x2974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2971*x2973))+(((-2.0)*sj3*x2974*x2979))+(((-1.0)*x2971*x2981))+x2981)),-1);
if(!x2983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2982.value)+(((1.5707963267949)*(x2983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2984=IKsin(j4);
IkReal x2985=IKcos(j4);
IkReal x2986=(cj3*r21);
IkReal x2987=(r21*sj5);
IkReal x2988=(r20*sj5);
IkReal x2989=(cj5*r20);
IkReal x2990=((1.0)*x2985);
IkReal x2991=((1.0)*x2984);
evalcond[0]=((((-1.0)*r22*x2990))+((x2984*x2987))+(((-1.0)*x2989*x2991)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj3*r22*x2984))+((sj3*x2988))+((cj1*sj2))+(((-1.0)*cj3*x2989*x2990))+((sj5*x2985*x2986)));
evalcond[2]=(((cj3*x2988))+(((-1.0)*sj3*x2987*x2990))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x2991))+((cj5*x2986))+((sj3*x2985*x2989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2992=(cj5*sj4);
IkReal x2993=(sj4*sj5);
if( IKabs((((r00*x2992))+(((-1.0)*r01*x2993))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2992))+((r11*x2993))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2992))+(((-1.0)*r01*x2993))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2992))+((r11*x2993))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2992))+(((-1.0)*r01*x2993))+((cj4*r02))), ((((-1.0)*r10*x2992))+((r11*x2993))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2994=IKsin(j0);
IkReal x2995=IKcos(j0);
IkReal x2996=(r02*sj4);
IkReal x2997=((1.0)*sj3);
IkReal x2998=(r12*sj4);
IkReal x2999=(cj1*cj2);
IkReal x3000=((1.0)*cj3);
IkReal x3001=((1.0)*sj1);
IkReal x3002=(r11*sj5);
IkReal x3003=(cj5*r01);
IkReal x3004=(cj5*r11);
IkReal x3005=(r00*sj5);
IkReal x3006=((0.24365)*cj1);
IkReal x3007=(cj2*sj1);
IkReal x3008=(r10*sj5);
IkReal x3009=((1.0)*cj4);
IkReal x3010=((0.21325)*x2994);
IkReal x3011=(cj4*cj5*r00);
IkReal x3012=(sj2*x2994);
IkReal x3013=(cj4*cj5*r10);
IkReal x3014=(cj4*r01*sj5);
IkReal x3015=(sj2*x2995);
IkReal x3016=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x3009))+(((-1.0)*r00*x3016))+((r01*sj4*sj5))+x2994);
evalcond[1]=((((-1.0)*r10*x3016))+(((-1.0)*r12*x3009))+(((-1.0)*x2995))+((sj4*x3002)));
evalcond[2]=((((0.21325)*sj1*x3015))+(((-1.0)*x2995*x3006))+(((-1.0)*px))+(((-0.21325)*x2995*x2999))+(((0.11)*x2994))+(((-0.08535)*x3005))+(((-0.08535)*x3003)));
evalcond[3]=((((-0.11)*x2995))+(((-1.0)*x2994*x3006))+(((-1.0)*py))+((sj1*sj2*x3010))+(((-1.0)*x2999*x3010))+(((-0.08535)*x3004))+(((-0.08535)*x3008)));
evalcond[4]=((((-1.0)*x2996*x2997))+(((-1.0)*x2997*x3014))+((x2995*x3007))+((sj3*x3011))+((cj3*x3003))+((cj3*x3005))+((cj1*x3015)));
evalcond[5]=((((-1.0)*x3001*x3015))+((x2995*x2999))+(((-1.0)*x3000*x3011))+((cj3*x2996))+((cj3*x3014))+((sj3*x3005))+((sj3*x3003)));
evalcond[6]=(((x2994*x3007))+((sj3*x3013))+(((-1.0)*x2997*x2998))+((cj3*x3004))+((cj3*x3008))+((cj1*x3012))+(((-1.0)*cj4*x2997*x3002)));
evalcond[7]=((((-1.0)*x3001*x3012))+(((-1.0)*x3000*x3013))+((cj3*x2998))+((sj3*x3008))+((sj3*x3004))+((x2994*x2999))+((cj3*cj4*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (db21952812ef4bbc7960e74ab5bb254d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
